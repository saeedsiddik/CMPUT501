###
6, editRecipe, Main, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java, 129, 176
3
/**
   * Edit recipe user interface the processes user input.
   */
48
  public static void editRecipe() {
    Recipe [] recipes = coffeeMaker.getRecipes();
    for(int i = 0; i < recipes.length; i++) {
      if (recipes[i] != null) {
        System.out.println((i+1) + ". " + recipes[i].getName());
      }
    }
    int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit.");
    
    if(recipeToEdit < 0) {
      mainMenu();
    }
    
    //Read in recipe price
    String priceString = inputOutput("\nPlease enter the recipe price: $");
    
    //Read in amt coffee
    String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");
    
    //Read in amt milk
    String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");
    
    //Read in amt sugar
    String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");
    
    //Read in amt chocolate
    String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");
    
    Recipe newRecipe = new Recipe();
    try {
      newRecipe.setPrice(priceString);
      newRecipe.setAmtCoffee(coffeeString);
      newRecipe.setAmtMilk(milkString);
      newRecipe.setAmtSugar(sugarString);
      newRecipe.setAmtChocolate(chocolateString);
      
      String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe);
      
      if (recipeEdited != null) {
        System.out.println(recipeEdited + " successfully edited.\n");
      }
      else {
        System.out.println(recipeEdited + "could not be edited.\n");
      }
    } catch (RecipeException e) {
      System.out.println(e.getMessage());
    } finally {
      mainMenu();
#BUG

###
18, CoffeeMaker, CoffeeMaker, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java, 18, 20
4
/**
   * Constructor for the coffee maker
   *
   */
3
  public CoffeeMaker() {
    recipeBook = new RecipeBook();
    inventory = new Inventory();
#BUG

###
41, setChocolate, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 42, 44
5
/**
   * Sets the number of chocolate units in the inventory
   * to the specified amount.
   * @param chocolate
   */
3
  public synchronized void setChocolate(int chocolate) {
    if(chocolate >= 0) {
      Inventory.chocolate = chocolate;
#BUG

###
39, setCoffee, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 83, 85
5
/**
   * Sets the number of coffee units in the inventory 
   * to the specified amount.
   * @param coffee
   */
3
  public synchronized void setCoffee(int coffee) {
    if(coffee >= 0) {
      Inventory.coffee = coffee;
#BUG

###
33, setMilk, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 123, 125
5
/**
   * Sets the number of milk units in the inventory
   * to the specified amount.
   * @param milk
   */
3
  public synchronized void setMilk(int milk) {
    if(milk >= 0) {
      Inventory.milk = milk;
#BUG

###
36, setSugar, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 163, 165
5
/**
   * Sets the number of sugar units in the inventory
   * to the specified amount.
   * @param sugar
   */
3
  public synchronized void setSugar(int sugar) {
    if(sugar >= 0) {
      Inventory.sugar = sugar;
#BUG

###
34, getChocolate, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 33, 34
5
/**
   * Returns the current number of chocolate units in 
   * the inventory.
   * @return int
   */
2
  public int getChocolate() {
    return chocolate;
#BUG

###
37, getSugar, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 154, 155
5
/**
   * Returns the current number of sugar units in 
   * the inventory.
   * @return int
   */
2
  public int getSugar() {
    return sugar;
#BUG

###
42, getCoffee, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 74, 75
5
/**
   * Returns the current number of coffee units in
   * the inventory.
   * @return int
   */
2
  public int getCoffee() {
    return coffee;
#BUG

###
43, getMilk, Inventory, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java, 114, 115
5
/**
   * Returns the current number of milk units in
   * the inventory.
   * @return int
   */
2
  public int getMilk() {
    return milk;
#BUG

###
4, inputOutput, Main, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java, 253, 264
6
/**
   * Passes a prompt to the user and returns the user specified 
   * string.
   * @param message
   * @return String
   */
12
  private static String inputOutput(String message) {
    System.out.println(message);
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String returnString = "";
    try {
      returnString = br.readLine();
    }
    catch (IOException e){
      System.out.println("Error reading in value");
      mainMenu();
    }
    return returnString;
#BUG

###
10, getRecipes, RecipeBook, CoffeeMaker10
CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/RecipeBook.java, 22, 23
5
/**
   * Returns the recipe array.
   * @param r
   * @return Recipe[]
   */
2
  public synchronized Recipe[] getRecipes() {
    return recipeArray;
#BUG

###
665, layout, AbstractCompositeFigure, JHotDraw741
jhotdraw7/src/main/java/org/jhotdraw/draw/AbstractCompositeFigure.java, 441, 448
6
/**
   * A layout algorithm is used to define how the child components
   * should be laid out in relation to each other. The task for
   * layouting the child components for presentation is delegated
   * to a Layouter which can be plugged in at runtime.
   */
8
  public void layout() {
    if (getLayouter() != null) {
      Rectangle2D.Double bounds = getBounds();
      Point2D.Double p = new Point2D.Double(bounds.x, bounds.y);
      Rectangle2D.Double r = getLayouter().layout(
          this, p, p);
      setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(r.x + r.width, r.y + r.height));
      invalidate();
#BUG

###
1228, createEditorColorButton, ButtonFactory, JHotDraw741
jhotdraw7/src/main/java/org/jhotdraw/draw/action/ButtonFactory.java, 559, 637
31
/**
   * Creates a color button, with an action region and a popup menu. The
   * button works like the color button in Microsoft Office:
   * <ul>
   * <li>When the user clicks on the action region, the default color of the
   * DrawingEditor is applied to the selected figures.</li>
   * <li>When the user opens the popup menu, a color palette is displayed.
   * Choosing a color from the palette changes the default color of the
   * editor and also changes the color of the selected figures.</li>
   * <li>A shape on the color button displays the current default color of the
   * DrawingEditor.</li>
   * </ul>
   *
   * @param editor The DrawingEditor.
   * @param attributeKey The AttributeKey of the color.
   * @param swatches A list with labeled colors containing the color palette
   * of the popup menu. The actual labels are retrieved from the supplied
   * resource bundle. This is usually a LinkedHashMap, so that the colors have
   * a predictable order.
   * @param columnCount The number of columns of the color palette.
   * @param labelKey The resource bundle key used for retrieving the icon and
   * the tooltip of the button.
   * @param labels The resource bundle.
   * @param defaultAttributes A set of attributes which are also applied to
   * the selected figures, when a color is selected. This can be used, to
   * set attributes that otherwise prevent the color from being shown. For
   * example, when the color attribute is set, we wan't the gradient attribute
   * of the Figure to be cleared.
   * @param colorShape This shape is superimposed on the icon of the button.
   * The shape is drawn with the default color of the DrawingEditor.
   */
73
  public static JPopupButton createEditorColorButton(
      DrawingEditor editor, AttributeKey<Color> attributeKey,
      java.util.List<ColorIcon> swatches, int columnCount,
      String labelKey, ResourceBundleUtil labels,
      Map<AttributeKey, Object> defaultAttributes,
      Shape colorShape) {
    final JPopupButton popupButton = new JPopupButton();
    popupButton.setPopupAlpha(1f);
    if (defaultAttributes == null) {
      defaultAttributes = new HashMap<AttributeKey, Object>();
    }
    popupButton.setAction(
        new DefaultAttributeAction(editor, attributeKey, defaultAttributes),
        new Rectangle(0, 0, 22, 22));
    popupButton.setColumnCount(columnCount, false);
    boolean hasNullColor = false;
    for (ColorIcon swatch : swatches) {
      AttributeAction a;
      HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
      attributes.put(attributeKey, swatch.getColor());
      if (swatch.getColor() == null) {
        hasNullColor = true;
      }
      popupButton.add(a =
          new AttributeAction(
          editor,
          attributes,
          labels.getToolTipTextProperty(labelKey),
          swatch));
      a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());
      a.setUpdateEnabledState(false);
    }
    // No color
    if (!hasNullColor) {
      AttributeAction a;
      HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
      attributes.put(attributeKey, null);
      popupButton.add(a =
          new AttributeAction(
          editor,
          attributes,
          labels.getToolTipTextProperty("attribute.color.noColor"),
          new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight())));
      a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));
      a.setUpdateEnabledState(false);
    }
    // Color chooser
    ImageIcon chooserIcon = new ImageIcon(
        Images.createImage(
        ButtonFactory.class, "/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));
    Action a;
    popupButton.add(
        a = new EditorColorChooserAction(
        editor,
        attributeKey,
        "color",
        chooserIcon,
        defaultAttributes));
    labels.configureToolBarButton(popupButton, labelKey);
    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));
    Icon icon = new EditorColorIcon(editor,
        attributeKey,
        labels.getIconProperty(labelKey, ButtonFactory.class).getImage(),
        colorShape);
    popupButton.setIcon(icon);
    popupButton.setDisabledIcon(icon);
    popupButton.setFocusable(false);
    editor.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        popupButton.repaint();
      }
    });
    return popupButton;
#BUG

###
1259, createDrawingColorButton, ButtonFactory, JHotDraw741
jhotdraw7/src/main/java/org/jhotdraw/draw/action/ButtonFactory.java, 978, 1052
23
/**
   * Creates a color button, with an action region and a popup menu. The
   * button acts on attributes of the Drawing object in the current DrawingView
   * of the DrawingEditor.
   *
   * @param editor The DrawingEditor.
   * @param attributeKey The AttributeKey of the color.
   * @param swatches A list with labeled colors containing the color palette
   * of the popup menu. The actual labels are retrieved from the supplied
   * resource bundle. This is usually a LinkedHashMap, so that the colors have
   * a predictable order.
   * @param columnCount The number of columns of the color palette.
   * @param labelKey The resource bundle key used for retrieving the icon and
   * the tooltip of the button.
   * @param labels The resource bundle.
   * @param defaultAttributes A set of attributes which are also applied to
   * the selected figures, when a color is selected. This can be used, to
   * set attributes that otherwise prevent the color from being shown. For
   * example, when the color attribute is set, we wan't the gradient attribute
   * of the Figure to be cleared.
   * @param colorShape This shape is superimposed on the icon of the button.
   * The shape is drawn with the default color of the DrawingEditor.
   */
70
  public static JPopupButton createDrawingColorButton(
      DrawingEditor editor, AttributeKey<Color> attributeKey,
      java.util.List<ColorIcon> swatches, int columnCount,
      String labelKey, ResourceBundleUtil labels,
      Map<AttributeKey, Object> defaultAttributes,
      Shape colorShape, java.util.List<Disposable> dsp) {
    final JPopupButton popupButton = new JPopupButton();
    popupButton.setPopupAlpha(1f);
    if (defaultAttributes == null) {
      defaultAttributes = new HashMap<AttributeKey, Object>();
    }
    popupButton.setColumnCount(columnCount, false);
    boolean hasNullColor = false;
    for (ColorIcon swatch : swatches) {
      DrawingAttributeAction a;
      HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
      attributes.put(attributeKey, swatch.getColor());
      if (swatch.getColor() == null) {
        hasNullColor = true;
      }
      popupButton.add(a =
          new DrawingAttributeAction(
          editor,
          attributes,
          labels.getToolTipTextProperty(labelKey),
          swatch));
      dsp.add(a);
      a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());
      a.setUpdateEnabledState(false);
    }
    // No color
    if (!hasNullColor) {
      DrawingAttributeAction a;
      HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
      attributes.put(attributeKey, null);
      popupButton.add(a =
          new DrawingAttributeAction(
          editor,
          attributes,
          labels.getToolTipTextProperty("attribute.color.noColor"),
          new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor"))));
      dsp.add(a);
      a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));
      a.setUpdateEnabledState(false);
    }
    // Color chooser
    ImageIcon chooserIcon = new ImageIcon(
        Images.createImage(ButtonFactory.class, "/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));
    DrawingColorChooserAction a;
    popupButton.add(
        a = new DrawingColorChooserAction(
        editor,
        attributeKey,
        "color",
        chooserIcon,
        defaultAttributes));
    dsp.add(a);
    labels.configureToolBarButton(popupButton, labelKey);
    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));
    Icon icon = new DrawingColorIcon(editor,
        attributeKey,
        labels.getIconProperty(labelKey, ButtonFactory.class).getImage(),
        colorShape);
    popupButton.setIcon(icon);
    popupButton.setDisabledIcon(icon);
    popupButton.setFocusable(false);
    if (editor != null) {
      dsp.add(new SelectionComponentRepainter(editor, popupButton));
    }
    return popupButton;
#BUG

###
1262, createSelectionColorButton, ButtonFactory, JHotDraw741
jhotdraw7/src/main/java/org/jhotdraw/draw/action/ButtonFactory.java, 790, 860
31
/**
   * Creates a color button, with an action region and a popup menu. The
   * button works like the color button in Adobe Fireworks:
   * <ul>
   * <li>When the user clicks at the button a popup menu with a color palette
   * is displayed.
   * Choosing a color from the palette changes the default color of the
   * editor and also changes the color of the selected figures.</li>
   * <li>A shape on the color button displays the color of the selected
   * figures. If no figures are selected, the default color of the
   * DrawingEditor is displayed.</li>
   * </ul>
   *
   * @param editor The DrawingEditor.
   * @param attributeKey The AttributeKey of the color.
   * @param swatches A list with labeled colors containing the color palette
   * of the popup menu. The actual labels are retrieved from the supplied
   * resource bundle. This is usually a LinkedHashMap, so that the colors have
   * a predictable order.
   * @param columnCount The number of columns of the color palette.
   * @param labelKey The resource bundle key used for retrieving the icon and
   * the tooltip of the button.
   * @param labels The resource bundle.
   * @param defaultAttributes A set of attributes which are also applied to
   * the selected figures, when a color is selected. This can be used, to
   * set attributes that otherwise prevent the color from being shown. For
   * example, when the color attribute is set, we wan't the gradient attribute
   * of the Figure to be cleared.
   * @param colorShape This shape is superimposed on the icon of the button.
   * The shape is drawn with the default color of the DrawingEditor.
   */
68
  public static JPopupButton createSelectionColorButton(
      DrawingEditor editor, AttributeKey<Color> attributeKey,
      java.util.List<ColorIcon> swatches, int columnCount,
      String labelKey, ResourceBundleUtil labels,
      Map<AttributeKey, Object> defaultAttributes,
      Shape colorShape, java.util.List<Disposable> dsp) {
    final JPopupButton popupButton = new JPopupButton();
    popupButton.setPopupAlpha(1f);
    if (defaultAttributes == null) {
      defaultAttributes = new HashMap<AttributeKey, Object>();
    }
    popupButton.setColumnCount(columnCount, false);
    boolean hasNullColor = false;
    for (ColorIcon swatch : swatches) {
      AttributeAction a;
      HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
      attributes.put(attributeKey, swatch.getColor());
      if (swatch.getColor() == null) {
        hasNullColor = true;
      }
      popupButton.add(a =
          new AttributeAction(
          editor,
          attributes,
          labels.getToolTipTextProperty(labelKey),
          swatch));
      a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());
      a.setUpdateEnabledState(false);
      dsp.add(a);
    }
    // No color
    if (!hasNullColor) {
      AttributeAction a;
      HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);
      attributes.put(attributeKey, null);
      popupButton.add(a =
          new AttributeAction(
          editor,
          attributes,
          labels.getToolTipTextProperty("attribute.color.noColor"),
          new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor"))));
      a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));
      a.setUpdateEnabledState(false);
      dsp.add(a);
    }
    // Color chooser
    ImageIcon chooserIcon = new ImageIcon(
        Images.createImage(ButtonFactory.class, "/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));
    AttributeAction a;
    popupButton.add(
        a = new SelectionColorChooserAction(
        editor,
        attributeKey,
        labels.getToolTipTextProperty("attribute.color.colorChooser"),
        chooserIcon,
        defaultAttributes));
    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));
    dsp.add(a);
    labels.configureToolBarButton(popupButton, labelKey);
    Icon icon = new SelectionColorIcon(editor,
        attributeKey,
        labels.getIconProperty(labelKey, ButtonFactory.class).getImage(),
        colorShape);
    popupButton.setIcon(icon);
    popupButton.setDisabledIcon(icon);
    popupButton.setFocusable(false);
    dsp.add(new SelectionComponentRepainter(editor, popupButton));
    return popupButton;
#BUG

###
1281, getBackgroundPaint, DefaultDrawingView, JHotDraw741
jhotdraw7/src/main/java/org/jhotdraw/draw/DefaultDrawingView.java, 1547, 1561
4
/**
   * Returns a paint for drawing the background of the drawing area.
   * @return Paint.
   */
14
  protected Paint getBackgroundPaint(
      int x, int y) {
    if (backgroundTile == null) {
      backgroundTile = new BufferedImage(16, 16, BufferedImage.TYPE_INT_RGB);
      Graphics2D g = backgroundTile.createGraphics();
      g.setColor(Color.white);
      g.fillRect(0, 0, 16, 16);
      g.setColor(new Color(0xdfdfdf));
      g.fillRect(0, 0, 8, 8);
      g.fillRect(8, 8, 8, 8);
      g.dispose();
    }
    return new TexturePaint(backgroundTile,
        new Rectangle(x, y, backgroundTile.getWidth(), backgroundTile.getHeight()));
#BUG

###
1292, drawBackground, DefaultDrawingView, JHotDraw741
jhotdraw7/src/main/java/org/jhotdraw/draw/DefaultDrawingView.java, 135, 137
1
/** Draws the background of the drawing view. */
3
  protected void drawBackground(Graphics2D g) {
    g.setColor(getBackground());
    g.fillRect(0, 0, getWidth(), getHeight());
#BUG

###
3419, setAutoRangeIncludesZero, NumberAxis, JFreeChart071
jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java, 257, 260
9
/**

   * Sets the flag that indicates whether or not the automatic axis range is forced to include

   * zero.

   * @param flag The new value of the flag;

   */
8
  public void setAutoRangeIncludesZero(boolean flag) {

  if (autoRangeIncludesZero!=flag) {

    this.autoRangeIncludesZero = flag;

    notifyListeners(new AxisChangeEvent(this));
#BUG

###
3575, selectAutoTickUnit, VerticalNumberAxis, JFreeChart071
jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java, 446, 468
13
/**

   * Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as

   * possible (selected from an array of 'standard' tick units) without the labels overlapping.

   * @param g2 The graphics device;

   * @param drawArea The area in which the plot and axes should be drawn;

   * @param plotArea The area in which the plot should be drawn;

   */
36
  private void selectAutoTickUnit(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {

    // calculate the tick label height...

    FontRenderContext frc = g2.getFontRenderContext();

    double tickLabelHeight = tickLabelFont.getLineMetrics("123", frc).getHeight()

                 +this.tickLabelInsets.top+this.tickLabelInsets.bottom;

    // now find the smallest tick unit that will accommodate the labels...

  double zero = this.translateValueToJava2D(0.0, plotArea);

    // start with the current tick unit...

    NumberTickUnit candidate1

             = (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(this.tickUnit);

    double y = this.translateValueToJava2D(candidate1.getValue().doubleValue(), plotArea);

    double unitHeight = Math.abs(y-zero);

    // then extrapolate...

    double bestguess = (tickLabelHeight/unitHeight) * candidate1.value.doubleValue();

    NumberTickUnit guess = new NumberTickUnit(new Double(bestguess), null);

    NumberTickUnit candidate2

               = (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(guess);

    this.tickUnit = candidate2;
#BUG

###
2846, VerticalNumberAxis, VerticalNumberAxis, JFreeChart060
jfreechart-0.6.0/source/com/jrefinery/chart/VerticalNumberAxis.java, 165, 167
3
/**
   * Consrtucts a vertical number axis, using default values where necessary.
   */
2
  public VerticalNumberAxis() {
    this(null);
#BUG

###
3764, getRange, OverlaidVerticalNumberAxis, JFreeChart071
jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidVerticalNumberAxis.java, 155, 156
5
/**

   * Returns the AxisRange (min/max) of our Axis

   */
4
  public AxisRange getRange() {

    return plot.getRange(axes);
#BUG

###
3687, getRange, CombinedVerticalNumberAxis, JFreeChart071
jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java, 206, 209
5
/**

   * Returns the AxisRange (min/max) of our Axis

   */
8
  public AxisRange getRange() {

    autoAdjustRange();

    return (new NumberAxisRange(new Double(getMinimumAxisValue()),

        new Double(getMaximumAxisValue())));
#BUG

###
3582, autoAdjustRange, VerticalNumberAxis, JFreeChart071
jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java, 270, 307
5
/**

   * Rescales the axis to ensure that all data is visible.

   */
62
  public void autoAdjustRange() {

  if (plot!=null) {

    if (plot instanceof VerticalValuePlot) {

    VerticalValuePlot vvp = (VerticalValuePlot)plot;

        Number u = vvp.getMaximumVerticalDataValue();

        double upper = this.DEFAULT_MAXIMUM_AXIS_VALUE;

        if (u!=null) {

      upper = u.doubleValue();

        }

        Number l = vvp.getMinimumVerticalDataValue();

        double lower = this.DEFAULT_MINIMUM_AXIS_VALUE;

        if (l!=null) {

      lower = l.doubleValue();

        }

    double range = upper-lower;

        // ensure the autorange is at least <minRange> in size...

    double minRange = this.autoRangeMinimumSize.doubleValue();

    if (range<minRange) {

      upper = (upper+lower+minRange)/2;

      lower = (upper+lower-minRange)/2;

    }

    if (this.autoRangeIncludesZero()) {

      if (upper!=0.0) upper = Math.max(0.0, upper+upperMargin*range);

      if (lower!=0.0) lower = Math.min(0.0, lower-lowerMargin*range);

    }

    else {

      if (upper!=0.0) upper = upper+upperMargin*range;

      if (lower!=0.0) lower = lower-lowerMargin*range;

    }

    this.minimumAxisValue=lower;

    this.maximumAxisValue=upper;
#BUG

###
2752, createStackedVerticalBarChart3D, ChartFactory, JFreeChart060
jfreechart-0.6.0/source/com/jrefinery/chart/ChartFactory.java, 170, 197
11
/**
   * Creates a stacked vertical bar chart with default settings.  This is still experimental at
   * this point!
   * <P>
   * Added by Serge V. Grachov.
   * @param title The chart title.
   * @param categoryAxisLabel The label for the category axis.
   * @param valueAxisLabel The label for the value axis.
   * @param data The dataset for the chart.
   * @param legend A flag specifying whether or not a legend is required.
   */
28
  public static JFreeChart createStackedVerticalBarChart3D(String title, String categoryAxisLabel,
                            String valueAxisLabel, CategoryDataset data,
                            boolean legend) {

    JFreeChart chart = null;

    try {
      Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);
      Axis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);
      VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);
      // the insets here are a workaround for the fact that the plot area is no longer a
      // rectangle, so it is overlapping the title.  To be fixed...
      plot.setInsets(new Insets(20, 2, 2, 2));
      plot.setRenderer(new StackedVerticalBarRenderer3D());
      chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);
    }
  catch (AxisNotCompatibleException e) {
      // this won't happen unless you mess with the axis constructors above
    System.err.println(
        "ChartFactory.createStackedVerticalBarChart3D(...) : axis not compatible.");
    }
  catch (PlotNotCompatibleException e) {
      // this won't happen unless you mess with the axis constructors above
    System.err.println(
        "ChartFactory.createStackedVerticalBarChart3D(...) : plot not compatible.");
    }

    return chart;
#BUG

###
3293, createStackedVerticalBarChart3D, ChartFactory, JFreeChart071
jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java, 144, 156
21
/**

   * Creates a stacked vertical bar chart with default settings.  This is still experimental at

   * this point!

   * <P>

   * Added by Serge V. Grachov.

   * @param title The chart title.

   * @param categoryAxisLabel The label for the category axis.

   * @param valueAxisLabel The label for the value axis.

   * @param data The dataset for the chart.

   * @param legend A flag specifying whether or not a legend is required.

   */
24
  public static JFreeChart createStackedVerticalBarChart3D(String title, String categoryAxisLabel,

                            String valueAxisLabel, CategoryDataset data,

                            boolean legend) {

    CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);

    ValueAxis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);

    VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);

    // the insets here are a workaround for the fact that the plot area is no longer a

    // rectangle, so it is overlapping the title.  To be fixed...

    plot.setInsets(new Insets(20, 2, 2, 2));

    plot.setRenderer(new StackedVerticalBarRenderer3D());

    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);

    return chart;
#BUG

###
3101, createCategoryDataset, JFreeChartDemo, JFreeChart060
jfreechart-0.6.0/source/com/jrefinery/chart/demo/JFreeChartDemo.java, 1133, 1146
3
/**
   * Creates and returns a category dataset for the demo charts.
   */
14
  public CategoryDataset createCategoryDataset() {

    Number[][] data = new Integer[][]
      { { new Integer(10), new Integer(4), new Integer(15), new Integer(14) },
        { new Integer(-5), new Integer(-7), new Integer(14), new Integer(-3) },
        { new Integer(6), new Integer(17), new Integer(-12), new Integer(7) },
        { new Integer(7), new Integer(15), new Integer(11), new Integer(0) },
        { new Integer(-8), new Integer(-6), new Integer(10), new Integer(-9) },
        { new Integer(9), new Integer(8), null, new Integer(6) },
        { new Integer(-10), new Integer(9), new Integer(7), new Integer(7) },
        { new Integer(11), new Integer(13), new Integer(9), new Integer(9) },
        { new Integer(-3), new Integer(7), new Integer(11), new Integer(-10) } };

    return new DefaultCategoryDataset(data);
#BUG
