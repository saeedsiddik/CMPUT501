[{'code': 'public static void editRecipe() {Recipe [] recipes = coffeeMaker.getRecipes();for(int i = 0; i < recipes.length; i++) {if (recipes[i] != null) {System.out.println((i+1) + ". " + recipes[i].getName());}}int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit.");if(recipeToEdit < 0) {mainMenu();}//Read in recipe priceString priceString = inputOutput("\\nPlease enter the recipe price: $");//Read in amt coffeeString coffeeString = inputOutput("\\nPlease enter the units of coffee in the recipe: ");//Read in amt milkString milkString = inputOutput("\\nPlease enter the units of milk in the recipe: ");//Read in amt sugarString sugarString = inputOutput("\\nPlease enter the units of sugar in the recipe: ");//Read in amt chocolateString chocolateString = inputOutput("\\nPlease enter the units of chocolate in the recipe: ");Recipe newRecipe = new Recipe();try {newRecipe.setPrice(priceString);newRecipe.setAmtCoffee(coffeeString);newRecipe.setAmtMilk(milkString);newRecipe.setAmtSugar(sugarString);newRecipe.setAmtChocolate(chocolateString);String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe);if (recipeEdited != null) {System.out.println(recipeEdited + " successfully edited.\\n");}else {System.out.println(recipeEdited + "could not be edited.\\n");}} catch (RecipeException e) {System.out.println(e.getMessage());} finally {mainMenu();', 'comment': '/*** Edit recipe user interface the processes user input.*/', 'coherence': 1}, {'code': 'public CoffeeMaker() {recipeBook = new RecipeBook();inventory = new Inventory();', 'comment': '/*** Constructor for the coffee maker**/', 'coherence': 1}, {'code': 'public synchronized void setChocolate(int chocolate) {if(chocolate >= 0) {Inventory.chocolate = chocolate;', 'comment': '/*** Sets the number of chocolate units in the inventory* to the specified amount.* @param chocolate*/', 'coherence': 1}, {'code': 'public synchronized void setCoffee(int coffee) {if(coffee >= 0) {Inventory.coffee = coffee;', 'comment': '/*** Sets the number of coffee units in the inventory* to the specified amount.* @param coffee*/', 'coherence': 1}, {'code': 'public synchronized void setMilk(int milk) {if(milk >= 0) {Inventory.milk = milk;', 'comment': '/*** Sets the number of milk units in the inventory* to the specified amount.* @param milk*/', 'coherence': 1}, {'code': 'public synchronized void setSugar(int sugar) {if(sugar >= 0) {Inventory.sugar = sugar;', 'comment': '/*** Sets the number of sugar units in the inventory* to the specified amount.* @param sugar*/', 'coherence': 1}, {'code': 'public int getChocolate() {return chocolate;', 'comment': '/*** Returns the current number of chocolate units in* the inventory.* @return int*/', 'coherence': 1}, {'code': 'public int getSugar() {return sugar;', 'comment': '/*** Returns the current number of sugar units in* the inventory.* @return int*/', 'coherence': 1}, {'code': 'public int getCoffee() {return coffee;', 'comment': '/*** Returns the current number of coffee units in* the inventory.* @return int*/', 'coherence': 1}, {'code': 'public int getMilk() {return milk;', 'comment': '/*** Returns the current number of milk units in* the inventory.* @return int*/', 'coherence': 1}, {'code': 'private static String inputOutput(String message) {System.out.println(message);BufferedReader br = new BufferedReader(new InputStreamReader(System.in));String returnString = "";try {returnString = br.readLine();}catch (IOException e){System.out.println("Error reading in value");mainMenu();}return returnString;', 'comment': '/*** Passes a prompt to the user and returns the user specified* string.* @param message* @return String*/', 'coherence': 1}, {'code': 'public synchronized Recipe[] getRecipes() {return recipeArray;', 'comment': '/*** Returns the recipe array.* @param r* @return Recipe[]*/', 'coherence': 1}, {'code': 'public void layout() {if (getLayouter() != null) {Rectangle2D.Double bounds = getBounds();Point2D.Double p = new Point2D.Double(bounds.x, bounds.y);Rectangle2D.Double r = getLayouter().layout(this, p, p);setBounds(new Point2D.Double(r.x, r.y), new Point2D.Double(r.x + r.width, r.y + r.height));invalidate();', 'comment': '/*** A layout algorithm is used to define how the child components* should be laid out in relation to each other. The task for* layouting the child components for presentation is delegated* to a Layouter which can be plugged in at runtime.*/', 'coherence': 1}, {'code': 'public static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes,Shape colorShape) {final JPopupButton popupButton = new JPopupButton();popupButton.setPopupAlpha(1f);if (defaultAttributes == null) {defaultAttributes = new HashMap<AttributeKey, Object>();}popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes),new Rectangle(0, 0, 22, 22));popupButton.setColumnCount(columnCount, false);boolean hasNullColor = false;for (ColorIcon swatch : swatches) {AttributeAction a;HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);attributes.put(attributeKey, swatch.getColor());if (swatch.getColor() == null) {hasNullColor = true;}popupButton.add(a =new AttributeAction(editor,attributes,labels.getToolTipTextProperty(labelKey),swatch));a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());a.setUpdateEnabledState(false);}// No colorif (!hasNullColor) {AttributeAction a;HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);attributes.put(attributeKey, null);popupButton.add(a =new AttributeAction(editor,attributes,labels.getToolTipTextProperty("attribute.color.noColor"),new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight())));a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));a.setUpdateEnabledState(false);}// Color chooserImageIcon chooserIcon = new ImageIcon(Images.createImage(ButtonFactory.class, "/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));Action a;popupButton.add(a = new EditorColorChooserAction(editor,attributeKey,"color",chooserIcon,defaultAttributes));labels.configureToolBarButton(popupButton, labelKey);a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));Icon icon = new EditorColorIcon(editor,attributeKey,labels.getIconProperty(labelKey, ButtonFactory.class).getImage(),colorShape);popupButton.setIcon(icon);popupButton.setDisabledIcon(icon);popupButton.setFocusable(false);editor.addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {popupButton.repaint();}});return popupButton;', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Microsoft Office:* <ul>* <li>When the user clicks on the action region, the default color of the* DrawingEditor is applied to the selected figures.</li>* <li>When the user opens the popup menu, a color palette is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A shape on the color button displays the current default color of the* DrawingEditor.</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.* @param colorShape This shape is superimposed on the icon of the button.* The shape is drawn with the default color of the DrawingEditor.*/", 'coherence': 1}, {'code': 'public static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes,Shape colorShape, java.util.List<Disposable> dsp) {final JPopupButton popupButton = new JPopupButton();popupButton.setPopupAlpha(1f);if (defaultAttributes == null) {defaultAttributes = new HashMap<AttributeKey, Object>();}popupButton.setColumnCount(columnCount, false);boolean hasNullColor = false;for (ColorIcon swatch : swatches) {DrawingAttributeAction a;HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);attributes.put(attributeKey, swatch.getColor());if (swatch.getColor() == null) {hasNullColor = true;}popupButton.add(a =new DrawingAttributeAction(editor,attributes,labels.getToolTipTextProperty(labelKey),swatch));dsp.add(a);a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());a.setUpdateEnabledState(false);}// No colorif (!hasNullColor) {DrawingAttributeAction a;HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);attributes.put(attributeKey, null);popupButton.add(a =new DrawingAttributeAction(editor,attributes,labels.getToolTipTextProperty("attribute.color.noColor"),new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor"))));dsp.add(a);a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));a.setUpdateEnabledState(false);}// Color chooserImageIcon chooserIcon = new ImageIcon(Images.createImage(ButtonFactory.class, "/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));DrawingColorChooserAction a;popupButton.add(a = new DrawingColorChooserAction(editor,attributeKey,"color",chooserIcon,defaultAttributes));dsp.add(a);labels.configureToolBarButton(popupButton, labelKey);a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));Icon icon = new DrawingColorIcon(editor,attributeKey,labels.getIconProperty(labelKey, ButtonFactory.class).getImage(),colorShape);popupButton.setIcon(icon);popupButton.setDisabledIcon(icon);popupButton.setFocusable(false);if (editor != null) {dsp.add(new SelectionComponentRepainter(editor, popupButton));}return popupButton;', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button acts on attributes of the Drawing object in the current DrawingView* of the DrawingEditor.** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.* @param colorShape This shape is superimposed on the icon of the button.* The shape is drawn with the default color of the DrawingEditor.*/", 'coherence': 1}, {'code': 'public static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes,Shape colorShape, java.util.List<Disposable> dsp) {final JPopupButton popupButton = new JPopupButton();popupButton.setPopupAlpha(1f);if (defaultAttributes == null) {defaultAttributes = new HashMap<AttributeKey, Object>();}popupButton.setColumnCount(columnCount, false);boolean hasNullColor = false;for (ColorIcon swatch : swatches) {AttributeAction a;HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);attributes.put(attributeKey, swatch.getColor());if (swatch.getColor() == null) {hasNullColor = true;}popupButton.add(a =new AttributeAction(editor,attributes,labels.getToolTipTextProperty(labelKey),swatch));a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());a.setUpdateEnabledState(false);dsp.add(a);}// No colorif (!hasNullColor) {AttributeAction a;HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);attributes.put(attributeKey, null);popupButton.add(a =new AttributeAction(editor,attributes,labels.getToolTipTextProperty("attribute.color.noColor"),new ColorIcon(null, labels.getToolTipTextProperty("attribute.color.noColor"))));a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.noColor"));a.setUpdateEnabledState(false);dsp.add(a);}// Color chooserImageIcon chooserIcon = new ImageIcon(Images.createImage(ButtonFactory.class, "/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));AttributeAction a;popupButton.add(a = new SelectionColorChooserAction(editor,attributeKey,labels.getToolTipTextProperty("attribute.color.colorChooser"),chooserIcon,defaultAttributes));a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty("attribute.color.colorChooser"));dsp.add(a);labels.configureToolBarButton(popupButton, labelKey);Icon icon = new SelectionColorIcon(editor,attributeKey,labels.getIconProperty(labelKey, ButtonFactory.class).getImage(),colorShape);popupButton.setIcon(icon);popupButton.setDisabledIcon(icon);popupButton.setFocusable(false);dsp.add(new SelectionComponentRepainter(editor, popupButton));return popupButton;', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Adobe Fireworks:* <ul>* <li>When the user clicks at the button a popup menu with a color palette* is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A shape on the color button displays the color of the selected* figures. If no figures are selected, the default color of the* DrawingEditor is displayed.</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.* @param colorShape This shape is superimposed on the icon of the button.* The shape is drawn with the default color of the DrawingEditor.*/", 'coherence': 1}, {'code': 'protected Paint getBackgroundPaint(int x, int y) {if (backgroundTile == null) {backgroundTile = new BufferedImage(16, 16, BufferedImage.TYPE_INT_RGB);Graphics2D g = backgroundTile.createGraphics();g.setColor(Color.white);g.fillRect(0, 0, 16, 16);g.setColor(new Color(0xdfdfdf));g.fillRect(0, 0, 8, 8);g.fillRect(8, 8, 8, 8);g.dispose();}return new TexturePaint(backgroundTile,new Rectangle(x, y, backgroundTile.getWidth(), backgroundTile.getHeight()));', 'comment': '/*** Returns a paint for drawing the background of the drawing area.* @return Paint.*/', 'coherence': 1}, {'code': 'protected void drawBackground(Graphics2D g) {g.setColor(getBackground());g.fillRect(0, 0, getWidth(), getHeight());', 'comment': '/** Draws the background of the drawing view. */', 'coherence': 1}, {'code': 'public void setAutoRangeIncludesZero(boolean flag) {if (autoRangeIncludesZero!=flag) {this.autoRangeIncludesZero = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that indicates whether or not the automatic axis range is forced to include* zero.* @param flag The new value of the flag;*/', 'coherence': 1}, {'code': 'private void selectAutoTickUnit(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// calculate the tick label height...FontRenderContext frc = g2.getFontRenderContext();double tickLabelHeight = tickLabelFont.getLineMetrics("123", frc).getHeight()+this.tickLabelInsets.top+this.tickLabelInsets.bottom;// now find the smallest tick unit that will accommodate the labels...double zero = this.translateValueToJava2D(0.0, plotArea);// start with the current tick unit...NumberTickUnit candidate1= (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(this.tickUnit);double y = this.translateValueToJava2D(candidate1.getValue().doubleValue(), plotArea);double unitHeight = Math.abs(y-zero);// then extrapolate...double bestguess = (tickLabelHeight/unitHeight) * candidate1.value.doubleValue();NumberTickUnit guess = new NumberTickUnit(new Double(bestguess), null);NumberTickUnit candidate2= (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(guess);this.tickUnit = candidate2;', 'comment': "/*** Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as* possible (selected from an array of 'standard' tick units) without the labels overlapping.* @param g2 The graphics device;* @param drawArea The area in which the plot and axes should be drawn;* @param plotArea The area in which the plot should be drawn;*/", 'coherence': 1}, {'code': 'public VerticalNumberAxis() {this(null);', 'comment': '/*** Consrtucts a vertical number axis, using default values where necessary.*/', 'coherence': 1}, {'code': 'public AxisRange getRange() {return plot.getRange(axes);', 'comment': '/*** Returns the AxisRange (min/max) of our Axis*/', 'coherence': 1}, {'code': 'public AxisRange getRange() {autoAdjustRange();return (new NumberAxisRange(new Double(getMinimumAxisValue()),new Double(getMaximumAxisValue())));', 'comment': '/*** Returns the AxisRange (min/max) of our Axis*/', 'coherence': 1}, {'code': 'public void autoAdjustRange() {if (plot!=null) {if (plot instanceof VerticalValuePlot) {VerticalValuePlot vvp = (VerticalValuePlot)plot;Number u = vvp.getMaximumVerticalDataValue();double upper = this.DEFAULT_MAXIMUM_AXIS_VALUE;if (u!=null) {upper = u.doubleValue();}Number l = vvp.getMinimumVerticalDataValue();double lower = this.DEFAULT_MINIMUM_AXIS_VALUE;if (l!=null) {lower = l.doubleValue();}double range = upper-lower;// ensure the autorange is at least <minRange> in size...double minRange = this.autoRangeMinimumSize.doubleValue();if (range<minRange) {upper = (upper+lower+minRange)/2;lower = (upper+lower-minRange)/2;}if (this.autoRangeIncludesZero()) {if (upper!=0.0) upper = Math.max(0.0, upper+upperMargin*range);if (lower!=0.0) lower = Math.min(0.0, lower-lowerMargin*range);}else {if (upper!=0.0) upper = upper+upperMargin*range;if (lower!=0.0) lower = lower-lowerMargin*range;}this.minimumAxisValue=lower;this.maximumAxisValue=upper;', 'comment': '/*** Rescales the axis to ensure that all data is visible.*/', 'coherence': 1}, {'code': 'public static JFreeChart createStackedVerticalBarChart3D(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);Axis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);// the insets here are a workaround for the fact that the plot area is no longer a// rectangle, so it is overlapping the title.  To be fixed...plot.setInsets(new Insets(20, 2, 2, 2));plot.setRenderer(new StackedVerticalBarRenderer3D());chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createStackedVerticalBarChart3D(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createStackedVerticalBarChart3D(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a stacked vertical bar chart with default settings.  This is still experimental at* this point!* <P>* Added by Serge V. Grachov.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createStackedVerticalBarChart3D(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);ValueAxis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);// the insets here are a workaround for the fact that the plot area is no longer a// rectangle, so it is overlapping the title.  To be fixed...plot.setInsets(new Insets(20, 2, 2, 2));plot.setRenderer(new StackedVerticalBarRenderer3D());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a stacked vertical bar chart with default settings.  This is still experimental at* this point!* <P>* Added by Serge V. Grachov.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public CategoryDataset createCategoryDataset() {Number[][] data = new Integer[][]{ { new Integer(10), new Integer(4), new Integer(15), new Integer(14) },{ new Integer(-5), new Integer(-7), new Integer(14), new Integer(-3) },{ new Integer(6), new Integer(17), new Integer(-12), new Integer(7) },{ new Integer(7), new Integer(15), new Integer(11), new Integer(0) },{ new Integer(-8), new Integer(-6), new Integer(10), new Integer(-9) },{ new Integer(9), new Integer(8), null, new Integer(6) },{ new Integer(-10), new Integer(9), new Integer(7), new Integer(7) },{ new Integer(11), new Integer(13), new Integer(9), new Integer(9) },{ new Integer(-3), new Integer(7), new Integer(11), new Integer(-10) } };return new DefaultCategoryDataset(data);', 'comment': '/*** Creates and returns a category dataset for the demo charts.*/', 'coherence': 1}]