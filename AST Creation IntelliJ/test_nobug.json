[{'code': 'public static void makeCoffee() {Recipe [] recipes = coffeeMaker.getRecipes();for(int i = 0; i < recipes.length; i++) {if (recipes[i] != null) {System.out.println((i+1) + ". " + recipes[i].getName());}}int recipeToPurchase = recipeListSelection("Please select the number of the recipe to purchase.");String amountPaid = inputOutput("Please enter the amount you wish to pay");int amtPaid = 0;try {amtPaid = Integer.parseInt(amountPaid);} catch (NumberFormatException e) {System.out.println("Please enter a positive integer");mainMenu();}int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid);if (change == amtPaid) {System.out.println("Insufficient funds to purchase.");} else {System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName());}System.out.println("Your change is: " + change + "\\n");mainMenu();', 'comment': '/*** Make coffee user interface the processes input.*/', 'coherence': 1}, {'code': 'public static void deleteRecipe() {Recipe [] recipes = coffeeMaker.getRecipes();for(int i = 0; i < recipes.length; i++) {if (recipes[i] != null) {System.out.println((i+1) + ". " + recipes[i].getName());}}int recipeToDelete = recipeListSelection("Please select the number of the recipe to delete.");if(recipeToDelete < 0) {mainMenu();}String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete);if (recipeDeleted != null) {System.out.println(recipeDeleted + " successfully deleted.\\n");} else {System.out.println("Selected recipe doesn\'t exist and could not be deleted.\\n");}mainMenu();', 'comment': '/*** Delete recipe user interface that processes input.*/', 'coherence': 1}, {'code': 'public static void mainMenu() {System.out.println("1. Add a recipe");System.out.println("2. Delete a recipe");System.out.println("3. Edit a recipe");System.out.println("4. Add inventory");System.out.println("5. Check inventory");System.out.println("6. Make coffee");System.out.println("0. Exit\\n");//Get user inputtry {int userInput = Integer.parseInt(inputOutput("Please press the number that corresponds to what you would like the coffee maker to do."));if (userInput >= 0 && userInput <=6) {if (userInput == 1) addRecipe();if (userInput == 2) deleteRecipe();if (userInput == 3) editRecipe();if (userInput == 4) addInventory();if (userInput == 5) checkInventory();if (userInput == 6) makeCoffee();if (userInput == 0) System.exit(0);} else {System.out.println("Please enter a number from 0 - 6");mainMenu();}} catch (NumberFormatException e) {System.out.println("Please enter a number from 0 - 6");mainMenu();', 'comment': '/*** Prints the main menu and handles user input for* main menu commands.*/', 'coherence': 1}, {'code': 'public static void addInventory() {//Read in amt coffeeString coffeeString = inputOutput("\\nPlease enter the units of coffee to add: ");//Read in amt milkString milkString = inputOutput("\\nPlease enter the units of milk to add: ");//Read in amt sugarString sugarString = inputOutput("\\nPlease enter the units of sugar to add: ");//Read in amt chocolateString chocolateString = inputOutput("\\nPlease enter the units of chocolate to add: ");try {coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString);System.out.println("Inventory successfully added");} catch (InventoryException e) {System.out.println("Inventory was not added");} finally {mainMenu();', 'comment': '/*** Add inventory user interface that processes input.*/', 'coherence': 1}, {'code': 'private static int recipeListSelection(String message) {String userSelection = inputOutput(message);int recipe = 0;try {recipe = Integer.parseInt(userSelection) - 1;if (recipe >= 0 && recipe <=2) {//do nothing here.} else {recipe = -1;}} catch (NumberFormatException e) {System.out.println("Please select a number from 1-3.");recipe = -1;}return recipe;', 'comment': '/*** Passes a prompt to the user that deals with the recipe list* and returns the user selected number.* @param message* @return int*/', 'coherence': 1}, {'code': 'public static void addRecipe() {//Read in recipe nameString name = inputOutput("\\nPlease enter the recipe name: ");//Read in recipe priceString priceString = inputOutput("\\nPlease enter the recipe price: $");//Read in amt coffeeString coffeeString = inputOutput("\\nPlease enter the units of coffee in the recipe: ");//Read in amt milkString milkString = inputOutput("\\nPlease enter the units of milk in the recipe: ");//Read in amt sugarString sugarString = inputOutput("\\nPlease enter the units of sugar in the recipe: ");//Read in amt chocolateString chocolateString = inputOutput("\\nPlease enter the units of chocolate in the recipe: ");Recipe r = new Recipe();try {r.setName(name);r.setPrice(priceString);r.setAmtCoffee(coffeeString);r.setAmtMilk(milkString);r.setAmtSugar(sugarString);r.setAmtChocolate(chocolateString);boolean recipeAdded = coffeeMaker.addRecipe(r);if(recipeAdded) {System.out.println(name + " successfully added.\\n");} else {System.out.println(name + " could not be added.\\n");}} catch (RecipeException e) {System.out.println(e.getMessage());} finally {mainMenu();', 'comment': '/*** The add recipe user interface that process user input.*/', 'coherence': 1}, {'code': 'public static void checkInventory() {System.out.println(coffeeMaker.checkInventory());mainMenu();', 'comment': '/*** Check inventory user interface that processes input.*/', 'coherence': 1}, {'code': 'public synchronized String deleteRecipe(int recipeToDelete) {if (recipeArray[recipeToDelete] != null) {String recipeName = recipeArray[recipeToDelete].getName();recipeArray[recipeToDelete] = null;return recipeName;} else {return null;', 'comment': '/*** Returns the name of the recipe deleted at the position specified* and null if the recipe does not exist.* @param recipeToDelete* @return String*/', 'coherence': 1}, {'code': 'public RecipeBook() {recipeArray = new Recipe[NUM_RECIPES];', 'comment': '/*** Default constructor for a RecipeBook.*/', 'coherence': 1}, {'code': 'public synchronized int makeCoffee(int recipeToPurchase, int amtPaid) {int change = 0;if (getRecipes()[recipeToPurchase] == null) {change = amtPaid;} else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) {if (inventory.useIngredients(getRecipes()[recipeToPurchase])) {change = amtPaid - getRecipes()[recipeToPurchase].getPrice();} else {change = amtPaid;}} else {change = amtPaid;}return change;', 'comment': "/*** Returns the change of a user's beverage purchase, or* the user's money if the beverage cannot be made* @param r* @param amtPaid* @return int*/", 'coherence': 1}, {'code': 'public synchronized void addInventory(String amtCoffee, String amtMilk, String amtSugar, String amtChocolate) throws InventoryException {inventory.addCoffee(amtCoffee);inventory.addMilk(amtMilk);inventory.addSugar(amtSugar);inventory.addChocolate(amtChocolate);', 'comment': '/*** Returns true if inventory was successfully added* @param amtCoffee* @param amtMilk* @param amtSugar* @param amtChocolate* @return boolean*/', 'coherence': 1}, {'code': 'public synchronized String checkInventory() {return inventory.toString();', 'comment': '/*** Returns the inventory of the coffee maker* @return Inventory*/', 'coherence': 1}, {'code': 'public String deleteRecipe(int recipeToDelete) {return recipeBook.deleteRecipe(recipeToDelete);', 'comment': '/*** Returns the name of the successfully deleted recipe* or null if the recipe cannot be deleted.** @param recipeToDelete* @return String*/', 'coherence': 1}, {'code': 'public String editRecipe(int recipeToEdit, Recipe r) {return recipeBook.editRecipe(recipeToEdit, r);', 'comment': '/*** Returns the name of the successfully edited recipe* or null if the recipe cannot be edited.* @param recipeToEdit* @param r* @return String*/', 'coherence': 1}, {'code': 'public boolean addRecipe(Recipe r) {return recipeBook.addRecipe(r);', 'comment': '/*** Returns true if the recipe is added to the* list of recipes in the CoffeeMaker and false* otherwise.* @param r* @return boolean*/', 'coherence': 1}, {'code': 'public void setAmtChocolate(String chocolate) throws RecipeException {int amtChocolate = 0;try {amtChocolate = Integer.parseInt(chocolate);} catch (NumberFormatException e) {throw new RecipeException("Units of chocolate must be a positive integer");}if (amtChocolate >= 0) {this.amtChocolate = amtChocolate;} else {throw new RecipeException("Units of chocolate must be a positive integer");', 'comment': '/*** @param amtChocolate   The amtChocolate to set.*/', 'coherence': 1}, {'code': 'public int getPrice() {return price;', 'comment': '/*** @return   Returns the price.*/', 'coherence': 1}, {'code': 'public void setPrice(String price) throws RecipeException{int amtPrice = 0;try {amtPrice = Integer.parseInt(price);} catch (NumberFormatException e) {throw new RecipeException("Price must be a positive integer");}if (amtPrice >= 0) {this.price = amtPrice;} else {throw new RecipeException("Price must be a positive integer");', 'comment': '/*** @param price   The price to set.*/', 'coherence': 1}, {'code': 'public int getAmtCoffee() {return amtCoffee;', 'comment': '/*** @return   Returns the amtCoffee.*/', 'coherence': 1}, {'code': 'public void setAmtMilk(String milk) throws RecipeException{int amtMilk = 0;try {amtMilk = Integer.parseInt(milk);} catch (NumberFormatException e) {throw new RecipeException("Units of milk must be a positive integer");}if (amtMilk >= 0) {this.amtMilk = amtMilk;} else {throw new RecipeException("Units of milk must be a positive integer");', 'comment': '/*** @param amtMilk   The amtMilk to set.*/', 'coherence': 1}, {'code': 'public int getAmtMilk() {return amtMilk;', 'comment': '/*** @return   Returns the amtMilk.*/', 'coherence': 1}, {'code': 'public void setAmtCoffee(String coffee) throws RecipeException {int amtCoffee = 0;try {amtCoffee = Integer.parseInt(coffee);} catch (NumberFormatException e) {throw new RecipeException("Units of coffee must be a positive integer");}if (amtCoffee >= 0) {this.amtCoffee = amtCoffee;} else {throw new RecipeException("Units of coffee must be a positive integer");', 'comment': '/*** @param amtCoffee   The amtCoffee to set.*/', 'coherence': 1}, {'code': 'public int getAmtSugar() {return amtSugar;', 'comment': '/*** @return   Returns the amtSugar.*/', 'coherence': 1}, {'code': 'public String getName() {return name;', 'comment': '/*** @return   Returns the name.*/', 'coherence': 1}, {'code': 'public int getAmtChocolate() {return amtChocolate;', 'comment': '/*** @return   Returns the amtChocolate.*/', 'coherence': 1}, {'code': 'public void setName(String name) {if(name != null) {this.name = name;', 'comment': '/*** @param name   The name to set.*/', 'coherence': 1}, {'code': 'public Recipe() {this.name = "";this.price = 0;this.amtCoffee = 0;this.amtMilk = 0;this.amtSugar = 0;this.amtChocolate = 0;', 'comment': '/*** Creates a default recipe for the coffee maker.*/', 'coherence': 1}, {'code': 'public void setAmtSugar(String sugar) throws RecipeException {int amtSugar = 0;try {amtSugar = Integer.parseInt(sugar);} catch (NumberFormatException e) {throw new RecipeException("Units of sugar must be a positive integer");}if (amtSugar >= 0) {this.amtSugar = amtSugar;} else {throw new RecipeException("Units of sugar must be a positive integer");', 'comment': '/*** @param amtSugar   The amtSugar to set.*/', 'coherence': 1}, {'code': 'public synchronized void addSugar(String sugar) throws InventoryException {int amtSugar = 0;try {amtSugar = Integer.parseInt(sugar);} catch (NumberFormatException e) {throw new InventoryException("Units of sugar must be a positive integer");}if (amtSugar >= 0) {Inventory.sugar += amtSugar;} else {throw new InventoryException("Units of sugar must be a positive integer");', 'comment': '/*** Add the number of sugar units in the inventory* to the current amount of sugar units.* @param sugar* @throws InventoryException*/', 'coherence': 1}, {'code': 'public synchronized boolean useIngredients(Recipe r) {if (enoughIngredients(r)) {Inventory.coffee -= r.getAmtCoffee();Inventory.milk -= r.getAmtMilk();Inventory.sugar -= r.getAmtSugar();Inventory.chocolate -= r.getAmtChocolate();return true;} else {return false;', 'comment': '/*** Removes the ingredients used to make the specified* recipe.  Assumes that the user has checked that there* are enough ingredients to make* @param r*/', 'coherence': 1}, {'code': 'public synchronized void addChocolate(String chocolate) throws InventoryException {int amtChocolate = 0;try {amtChocolate = Integer.parseInt(chocolate);} catch (NumberFormatException e) {throw new InventoryException("Units of chocolate must be a positive integer");}if (amtChocolate >= 0) {Inventory.chocolate += amtChocolate;} else {throw new InventoryException("Units of chocolate must be a positive integer");', 'comment': '/*** Add the number of chocolate units in the inventory* to the current amount of chocolate units.* @param chocolate* @throws InventoryException*/', 'coherence': 1}, {'code': 'protected synchronized boolean enoughIngredients(Recipe r) {boolean isEnough = true;if(Inventory.coffee < r.getAmtCoffee()) {isEnough = false;}if(Inventory.milk < r.getAmtMilk()) {isEnough = false;}if(Inventory.sugar < r.getAmtSugar()) {isEnough = false;}if(Inventory.chocolate < r.getAmtChocolate()) {isEnough = false;}return isEnough;', 'comment': '/*** Returns true if there are enough ingredients to make* the beverage.* @param r* @return boolean*/', 'coherence': 1}, {'code': 'public synchronized void addMilk(String milk) throws InventoryException {int amtMilk = 0;try {amtMilk = Integer.parseInt(milk);} catch (NumberFormatException e) {throw new InventoryException("Units of milk must be a positive integer");}if (amtMilk >= 0) {Inventory.milk += amtMilk;} else {throw new InventoryException("Units of milk must be a positive integer");', 'comment': '/*** Add the number of milk units in the inventory* to the current amount of milk units.* @param milk* @throws InventoryException*/', 'coherence': 1}, {'code': 'public Inventory() {setCoffee(15);setMilk(15);setSugar(15);setChocolate(15);', 'comment': '/*** Creates a coffee maker inventory object and* fills each item in the inventory with 15 units.*/', 'coherence': 1}, {'code': 'public synchronized void addCoffee(String coffee) throws InventoryException {int amtCoffee = 0;try {amtCoffee = Integer.parseInt(coffee);} catch (NumberFormatException e) {throw new InventoryException("Units of coffee must be a positive integer");}if (amtCoffee >= 0) {Inventory.coffee += amtCoffee;} else {throw new InventoryException("Units of coffee must be a positive integer");', 'comment': '/*** Add the number of coffee units in the inventory* to the current amount of coffee units.* @param coffee* @throws InventoryException*/', 'coherence': 1}, {'code': 'public void close()throws IOException{try {int bufferLength = this.buffer.length();for (;;) {String str = "";char ch;if (this.bufferIndex >= bufferLength) {str = XMLUtil.read(this.reader, \'&\');ch = str.charAt(0);} else {ch = this.buffer.charAt(this.bufferIndex);this.bufferIndex++;continue; // don\'t interprete chars in the buffer}if (ch == \'<\') {this.reader.unread(ch);break;}if ((ch == \'&\') && (str.length() > 1)) {if (str.charAt(1) != \'#\') {XMLUtil.processEntity(str, this.reader, this.resolver);}}}} catch (XMLParseException e) {throw new IOException(e.getMessage());', 'comment': '/*** Skips remaining data and closes the stream.** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'ContentReader(IXMLReader     reader,IXMLEntityResolver resolver,String       buffer){this.reader = reader;this.resolver = resolver;this.buffer = buffer;this.bufferIndex = 0;', 'comment': '/*** Creates the reader.** @param reader the encapsulated reader* @param resolver the entity resolver* @param buffer data that has already been read from <code>reader</code>*/', 'coherence': 1}, {'code': 'public int read(char[] outputBuffer,int  offset,int  size)throws IOException{try {int charsRead = 0;int bufferLength = this.buffer.length();if ((offset + size) > outputBuffer.length) {size = outputBuffer.length - offset;}while (charsRead < size) {String str = "";char ch;if (this.bufferIndex >= bufferLength) {str = XMLUtil.read(this.reader, \'&\');ch = str.charAt(0);} else {ch = this.buffer.charAt(this.bufferIndex);this.bufferIndex++;outputBuffer[charsRead] = ch;charsRead++;continue; // don\'t interprete chars in the buffer}if (ch == \'<\') {this.reader.unread(ch);break;}if ((ch == \'&\') && (str.length() > 1)) {if (str.charAt(1) == \'#\') {ch = XMLUtil.processCharLiteral(str);} else {XMLUtil.processEntity(str, this.reader, this.resolver);continue;}}outputBuffer[charsRead] = ch;charsRead++;}if (charsRead == 0) {charsRead = -1;}return charsRead;} catch (XMLParseException e) {throw new IOException(e.getMessage());', 'comment': '/*** Reads a block of data.** @param outputBuffer where to put the read data* @param offset first position in buffer to put the data* @param size maximum number of chars to read** @return the number of chars read, or -1 if at EOF** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.reader = null;this.resolver = null;this.buffer = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.reader = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': "public int read(char[] buffer,int  offset,int  size)throws IOException{if (this.atEndOfData) {return -1;}int charsRead = 0;if ((offset + size) > buffer.length) {size = buffer.length - offset;}while (charsRead < size) {char ch = this.reader.read();if (ch == '?') {char ch2 = this.reader.read();if (ch2 == '>') {this.atEndOfData = true;break;}this.reader.unread(ch2);}buffer[charsRead] = ch;charsRead++;}if (charsRead == 0) {charsRead = -1;}return charsRead;", 'comment': '/*** Reads a block of data.** @param buffer where to put the read data* @param offset first position in buffer to put the data* @param size maximum number of chars to read** @return the number of chars read, or -1 if at EOF** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'PIReader(IXMLReader reader){this.reader = reader;this.atEndOfData = false;', 'comment': '/*** Creates the reader.** @param reader the encapsulated reader*/', 'coherence': 1}, {'code': 'public IXMLEntityResolver getParameterEntityResolver(){return this.parameterEntityResolver;', 'comment': '/*** Returns the parameter entity resolver.** @return the entity resolver.*/', 'coherence': 1}, {'code': 'public void attributeAdded(String key,String value,String systemId,int  lineNr){Properties props = (Properties) this.currentElements.peek();if (props.containsKey(key)) {props.remove(key);', 'comment': '/*** Indicates that an attribute has been added to the current element.** @param key    the name of the attribute.* @param value    the value of the attribute.* @param systemId   the system ID of the XML data of the element.* @param lineNr   the line number in the XML data of the element.*/', 'coherence': 1}, {'code': "protected void processElement(IXMLReader     reader,IXMLEntityResolver entityResolver)throws Exception{String str = XMLUtil.read(reader, '%');char ch = str.charAt(0);if (ch != '!') {XMLUtil.skipTag(reader);return;}str = XMLUtil.read(reader, '%');ch = str.charAt(0);switch (ch) {case '-':XMLUtil.skipComment(reader);break;case '[':this.processConditionalSection(reader, entityResolver);break;case 'E':this.processEntity(reader, entityResolver);break;case 'A':this.processAttList(reader, entityResolver);break;default:XMLUtil.skipTag(reader);", 'comment': '/*** Processes an element in the DTD.** @param reader     the reader to read data from.* @param entityResolver the entity resolver.** @throws java.lang.Exception*   If something went wrong.*/', 'coherence': 1}, {'code': 'public NonValidator(){this.attributeDefaultValues = new Hashtable();this.currentElements = new Stack();this.parameterEntityResolver = new XMLEntityResolver();', 'comment': '/*** Creates the &quot;validator&quot;.*/', 'coherence': 1}, {'code': 'protected void processEntity(IXMLReader     reader,IXMLEntityResolver entityResolver)throws Exception{if (! XMLUtil.checkLiteral(reader, "NTITY")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader, null);char ch = XMLUtil.readChar(reader, \'\\0\');if (ch == \'%\') {XMLUtil.skipWhitespace(reader, null);entityResolver = this.parameterEntityResolver;} else {reader.unread(ch);}String key = XMLUtil.scanIdentifier(reader);XMLUtil.skipWhitespace(reader, null);ch = XMLUtil.readChar(reader, \'%\');String systemID = null;String publicID = null;switch (ch) {case \'P\':if (! XMLUtil.checkLiteral(reader, "UBLIC")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader, null);publicID = XMLUtil.scanString(reader, \'%\',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader, null);systemID = XMLUtil.scanString(reader, \'%\',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader, null);XMLUtil.readChar(reader, \'%\');break;case \'S\':if (! XMLUtil.checkLiteral(reader, "YSTEM")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader, null);systemID = XMLUtil.scanString(reader, \'%\',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader, null);XMLUtil.readChar(reader, \'%\');break;case \'"\':case \'\\\'\':reader.unread(ch);String value = XMLUtil.scanString(reader, \'%\',this.parameterEntityResolver);entityResolver.addInternalEntity(key, value);XMLUtil.skipWhitespace(reader, null);XMLUtil.readChar(reader, \'%\');break;default:XMLUtil.skipTag(reader);}if (systemID != null) {entityResolver.addExternalEntity(key, publicID, systemID);', 'comment': '/*** Processes an ENTITY element.** @param reader     the reader to read data from.* @param entityResolver the entity resolver.** @throws java.lang.Exception*   If something went wrong.*/', 'coherence': 1}, {'code': "public void parseDTD(String       publicID,IXMLReader     reader,IXMLEntityResolver entityResolver,boolean      external)throws Exception{XMLUtil.skipWhitespace(reader, null);int origLevel = reader.getStreamLevel();for (;;) {String str = XMLUtil.read(reader, '%');char ch = str.charAt(0);if (ch == '%') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);continue;} else if (ch == '<') {this.processElement(reader, entityResolver);} else if (ch == ']') {return; // end internal DTD} else {XMLUtil.errorInvalidInput(reader.getSystemID(),reader.getLineNr(),str);}do {ch = reader.read();if (external && (reader.getStreamLevel() < origLevel)) {reader.unread(ch);return; // end external DTD}} while ((ch == ' ') || (ch == '\\t') || (ch == '\\n')|| (ch == '\\r'));reader.unread(ch);", 'comment': '/*** Parses the DTD. The validator object is responsible for reading the* full DTD.** @param publicID     the public ID, which may be null.* @param reader     the reader to read the DTD from.* @param entityResolver the entity resolver.* @param external     true if the DTD is external.** @throws java.lang.Exception*   If something went wrong.*/', 'coherence': 1}, {'code': 'public void elementStarted(String name,String systemId,int  lineNr){Properties attribs= (Properties) this.attributeDefaultValues.get(name);if (attribs == null) {attribs = new Properties();} else {attribs = (Properties) attribs.clone();}this.currentElements.push(attribs);', 'comment': '/*** Indicates that an element has been started.** @param name     the name of the element.* @param systemId   the system ID of the XML data of the element.* @param lineNr   the line number in the XML data of the element.*/', 'coherence': 1}, {'code': 'public void elementAttributesProcessed(String   name,Properties extraAttributes,String   systemId,int    lineNr){Properties props = (Properties) this.currentElements.pop();Enumeration enm = props.keys();while (enm.hasMoreElements()) {String key = (String) enm.nextElement();extraAttributes.put(key, props.get(key));', 'comment': '/*** This method is called when the attributes of an XML element have been* processed.* If there are attributes with a default value which have not been* specified yet, they have to be put into <I>extraAttributes</I>.** @param name      the name of the element.* @param extraAttributes where to put extra attributes.* @param systemId    the system ID of the XML data of the element.* @param lineNr      the line number in the XML data of the element.*/--------------// nothing to do--------------', 'coherence': 1}, {'code': 'protected void processIgnoreSection(IXMLReader     reader,IXMLEntityResolver entityResolver)throws Exception{if (! XMLUtil.checkLiteral(reader, "NORE")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader, null);String str = XMLUtil.read(reader, \'%\');char ch = str.charAt(0);if (ch != \'[\') {XMLUtil.skipTag(reader);return;}Reader subreader = new CDATAReader(reader);subreader.close();', 'comment': '/*** Processes an ignore section.** @param reader     the reader to read data from.* @param entityResolver the entity resolver.** @throws java.lang.Exception*   If something went wrong.*/', 'coherence': 1}, {'code': 'protected void processConditionalSection(IXMLReader     reader,IXMLEntityResolver entityResolver)throws Exception{XMLUtil.skipWhitespace(reader, null);String str = XMLUtil.read(reader, \'%\');char ch = str.charAt(0);if (ch != \'I\') {XMLUtil.skipTag(reader);return;}str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);switch (ch) {case \'G\':this.processIgnoreSection(reader, entityResolver);return;case \'N\':break;default:XMLUtil.skipTag(reader);return;}if (! XMLUtil.checkLiteral(reader, "CLUDE")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader, null);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);if (ch != \'[\') {XMLUtil.skipTag(reader);return;}Reader subreader = new CDATAReader(reader);StringBuffer buf = new StringBuffer(1024);for (;;) {int ch2 = subreader.read();if (ch2 < 0) {break;}buf.append((char) ch2);}subreader.close();reader.startNewStream(new StringReader(buf.toString()));', 'comment': '/*** Processes a conditional section.** @param reader     the reader to read data from.* @param entityResolver the entity resolver.** @throws java.lang.Exception*   If something went wrong.*/', 'coherence': 1}, {'code': 'public void setParameterEntityResolver(IXMLEntityResolver resolver){this.parameterEntityResolver = resolver;', 'comment': '/*** Sets the parameter entity resolver.** @param resolver the entity resolver.*/', 'coherence': 1}, {'code': 'protected void processAttList(IXMLReader     reader,IXMLEntityResolver entityResolver)throws Exception{if (! XMLUtil.checkLiteral(reader,  "TTLIST")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader, null);String str = XMLUtil.read(reader, \'%\');char ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}reader.unread(ch);String elementName = XMLUtil.scanIdentifier(reader);XMLUtil.skipWhitespace(reader, null);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}Properties props = new Properties();while (ch != \'>\') {reader.unread(ch);String attName = XMLUtil.scanIdentifier(reader);XMLUtil.skipWhitespace(reader, null);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}if (ch == \'(\') {while (ch != \')\') {str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}}} else {reader.unread(ch);XMLUtil.scanIdentifier(reader);}XMLUtil.skipWhitespace(reader, null);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}if (ch == \'#\') {str = XMLUtil.scanIdentifier(reader);XMLUtil.skipWhitespace(reader, null);if (! str.equals("FIXED")) {XMLUtil.skipWhitespace(reader, null);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}continue;}} else {reader.unread(ch);}String value = XMLUtil.scanString(reader, \'%\',this.parameterEntityResolver);props.put(attName, value);XMLUtil.skipWhitespace(reader, null);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);while (ch == \'%\') {XMLUtil.processEntity(str, reader,this.parameterEntityResolver);str = XMLUtil.read(reader, \'%\');ch = str.charAt(0);}}if (! props.isEmpty()) {this.attributeDefaultValues.put(elementName, props);', 'comment': '/*** Processes an ATTLIST element.** @param reader     the reader to read data from.* @param entityResolver the entity resolver.** @throws java.lang.Exception*   If something went wrong.*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.parameterEntityResolver = null;this.attributeDefaultValues.clear();this.attributeDefaultValues = null;this.currentElements.clear();this.currentElements = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'CDATAReader(IXMLReader reader){this.reader = reader;this.savedChar = 0;this.atEndOfData = false;', 'comment': '/*** Creates the reader.** @param reader the encapsulated reader*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.reader = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': "public int read(char[] buffer,int  offset,int  size)throws IOException{int charsRead = 0;if (this.atEndOfData) {return -1;}if ((offset + size) > buffer.length) {size = buffer.length - offset;}while (charsRead < size) {char ch = this.savedChar;if (ch == 0) {ch = this.reader.read();} else {this.savedChar = 0;}if (ch == ']') {char ch2 = this.reader.read();if (ch2 == ']') {char ch3 = this.reader.read();if (ch3 == '>') {this.atEndOfData = true;break;}this.savedChar = ch2;this.reader.unread(ch3);} else {this.reader.unread(ch2);}}buffer[charsRead] = ch;charsRead++;}if (charsRead == 0) {charsRead = -1;}return charsRead;", 'comment': '/*** Reads a block of data.** @param buffer where to put the read data* @param offset first position in buffer to put the data* @param size maximum number of chars to read** @return the number of chars read, or -1 if at EOF** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'public String getElementName(){return this.elementName;', 'comment': '/*** Returns the name of the element in which the validation is violated.* If there is no current element, null is returned.*/', 'coherence': 1}, {'code': 'public String getAttributeName(){return this.attributeName;', 'comment': '/*** Returns the name of the attribute in which the validation is violated.* If there is no current attribute, null is returned.*/', 'coherence': 1}, {'code': 'public XMLValidationException(int  errorType,String systemID,int  lineNr,String elementName,String attributeName,String attributeValue,String msg){super(systemID, lineNr, null,msg + ((elementName == null) ? "" : (", element=" + elementName))+ ((attributeName == null) ? "": (", attribute=" + attributeName))+ ((attributeValue == null) ? "": (", value=\'" + attributeValue + "\'")),false);this.elementName = elementName;this.attributeName = attributeName;this.attributeValue = attributeValue;', 'comment': '/*** Creates a new exception.** @param errorType    the type of validity error* @param systemID     the system ID from where the data came* @param lineNr     the line number in the XML data where the*             exception occurred.* @param elementName  the name of the offending element* @param attributeName  the name of the offending attribute* @param attributeValue the value of the offending attribute* @param msg      the message of the exception.*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.elementName = null;this.attributeName = null;this.attributeValue = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'static void errorClosingTagNotEmpty(String systemID,int  lineNr)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"Closing tag must be empty");', 'comment': '/*** Throws an XMLParseException to indicate that extra data is encountered* in a closing tag.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source*/', 'coherence': 1}, {'code': 'static void errorUnexpectedPCData(String systemID,int  lineNr,String parentElementName)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.UNEXPECTED_PCDATA,systemID, lineNr,/*elementName*/ null,/*attributeName*/ null,/*attributeValue*/ null,"Unexpected #PCDATA in element " + parentElementName);', 'comment': '/*** Throws an XMLValidationException to indicate that a #PCDATA element was* unexpected.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param parentElementName the name of the parent element*/', 'coherence': 1}, {'code': 'static void errorUnexpectedCDATA(String systemID,int  lineNr)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"No CDATA section is expected here");', 'comment': '/*** Throws an XMLParseException to indicate that a CDATA section is* unexpected at this point.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source*/', 'coherence': 1}, {'code': 'static void errorInvalidAttributeValue(String systemID,int  lineNr,String elementName,String attributeName,String attributeValue)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.ATTRIBUTE_WITH_INVALID_VALUE,systemID, lineNr,elementName,attributeName,attributeValue,"Invalid value for attribute " + attributeName);', 'comment': '/*** Throws an XMLValidationException to indicate that an attribute has an* invalid value.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param elementName  the name of the element* @param attributeName  the name of the attribute* @param attributeValue the value of that attribute*/', 'coherence': 1}, {'code': 'static void errorUnexpectedAttribute(String systemID,int  lineNr,String elementName,String attributeName)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.UNEXPECTED_ATTRIBUTE,systemID, lineNr,elementName,attributeName,/*attributeValue*/ null,"Element " + elementName + " did not expect an attribute "+ "named " + attributeName);', 'comment': '/*** Throws an XMLValidationException to indicate that an attribute is* unexpected.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param elementName  the name of the element* @param attributeName  the name of the unexpected attribute*/', 'coherence': 1}, {'code': 'static String scanPublicID(StringBuffer publicID,IXMLReader   reader)throws IOException,XMLParseException{if (! XMLUtil.checkLiteral(reader, "UBLIC")) {return null;}XMLUtil.skipWhitespace(reader, null);publicID.append(XMLUtil.scanString(reader, \'\\0\', null));XMLUtil.skipWhitespace(reader, null);return XMLUtil.scanString(reader, \'\\0\', null);', 'comment': '/*** Scans a public ID.** @param publicID     will contain the public ID* @param reader     the reader** @return the system ID** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'static void errorWrongClosingTag(String systemID,int  lineNr,String   expectedName,String   wrongName)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"Closing tag does not match opening tag: `"+ wrongName + "\' != `" + expectedName+ "\'");', 'comment': '/*** Throws an XMLParseException to indicate that the closing tag of an* element does not match the opening tag.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param expectedName the name of the opening tag* @param wrongName  the name of the closing tag*/', 'coherence': 1}, {'code': 'static char readChar(IXMLReader reader,char     entityChar)throws IOException,XMLParseException{String str = XMLUtil.read(reader, entityChar);char ch = str.charAt(0);if (ch == entityChar) {XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);}return ch;', 'comment': '/*** Reads a character from the reader disallowing entities.** @param reader     the reader* @param entityChar   the escape character (&amp; or %) used to indicate*             an entity*/', 'coherence': 1}, {'code': 'protected void updateApplicationEnabled() {firePropertyChange("enabled",Boolean.valueOf(!isEnabled()),Boolean.valueOf(isEnabled()));', 'comment': '/*** Updates the enabled state of this action depending on the new enabled* state of the application.*/', 'coherence': 1}, {'code': 'static boolean checkLiteral(IXMLReader     reader,String       literal)throws IOException,XMLParseException{for (int i = 0; i < literal.length(); i++) {if (reader.read() != literal.charAt(i)) {return false;}}return true;', 'comment': '/*** Returns true if the data starts with <I>literal</I>.* Enough chars are read to determine this result.** @param reader     the reader* @param literal    the literal to check** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': '@Overridepublic boolean isEnabled() {return app != null && app.isEnabled() && enabled;', 'comment': '/*** Returns true if the action is enabled.* The enabled state of the action depends on the state that has been set* using setEnabled() and on the enabled state of the application.** @return true if the action is enabled, false otherwise* @see Action#isEnabled*/', 'coherence': 1}, {'code': 'protected void installApplicationListeners(Application app) {if (applicationListener == null) {applicationListener = createApplicationListener();}app.addPropertyChangeListener(new WeakPropertyChangeListener(applicationListener));', 'comment': '/** Installs listeners on the application object.*/', 'coherence': 1}, {'code': 'static String scanString(IXMLReader     reader,char         entityChar,IXMLEntityResolver entityResolver)throws IOException,XMLParseException{StringBuffer result = new StringBuffer();int startingLevel = reader.getStreamLevel();char delim = reader.read();if ((delim != \'\\\'\') && (delim != \'"\')) {XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"delimited string");}for (;;) {String str = XMLUtil.read(reader, entityChar);char ch = str.charAt(0);if (ch == entityChar) {if (str.charAt(1) == \'#\') {result.append(XMLUtil.processCharLiteral(str));} else {XMLUtil.processEntity(str, reader, entityResolver);}} else if (ch == \'&\') {reader.unread(ch);str = XMLUtil.read(reader, \'&\');if (str.charAt(1) == \'#\') {result.append(XMLUtil.processCharLiteral(str));} else {result.append(str);}} else if (reader.getStreamLevel() == startingLevel) {if (ch == delim) {break;} else if ((ch == 9) || (ch == 10) || (ch == 13)) {result.append(\' \');} else {result.append(ch);}} else {result.append(ch);}}return result.toString();', 'comment': '/*** Retrieves a delimited string from the data.** @param reader        the reader* @param entityChar      the escape character (&amp; or %)* @param entityResolver    the entity resolver** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'protected void uninstallApplicationListeners(Application app) {app.removePropertyChangeListener(applicationListener);', 'comment': '/*** Installs listeners on the application object.*/', 'coherence': 1}, {'code': 'public AbstractApplicationAction(Application app) {this.app = app;installApplicationListeners(app);updateApplicationEnabled();', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'static void errorMissingAttribute(String systemID,int  lineNr,String elementName,String attributeName)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.MISSING_ATTRIBUTE,systemID, lineNr,elementName,attributeName,/*attributeValue*/ null,"Element " + elementName + " expects an attribute named "+ attributeName);', 'comment': '/*** Throws an XMLValidationException to indicate that an attribute is* missing.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param elementName  the name of the element* @param attributeName  the name of the missing attribute*/', 'coherence': 1}, {'code': 'static String scanSystemID(IXMLReader reader)throws IOException,XMLParseException{if (! XMLUtil.checkLiteral(reader, "YSTEM")) {return null;}XMLUtil.skipWhitespace(reader, null);return XMLUtil.scanString(reader, \'\\0\', null);', 'comment': '/*** Scans a system ID.** @param reader     the reader** @return the system ID** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'static void skipComment(IXMLReader reader)throws IOException,XMLParseException{if (reader.read() != \'-\') {XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<!--");}int dashesRead = 0;for (;;) {char ch = reader.read();switch (ch) {case \'-\':dashesRead++;break;case \'>\':if (dashesRead == 2) {return;}default:dashesRead = 0;', 'comment': '/*** Skips the remainder of a comment.* It is assumed that &lt;!- is already read.** @param reader the reader** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': "static String read(IXMLReader     reader,char         entityChar)throws IOException,XMLParseException{char ch = reader.read();StringBuffer buf = new StringBuffer();buf.append(ch);if (ch == entityChar) {while (ch != ';') {ch = reader.read();buf.append(ch);}}return buf.toString();", 'comment': '/*** Reads a character from the reader.** @param reader     the reader* @param entityChar   the escape character (&amp; or %) used to indicate*             an entity** @return the character, or an entity expression (like e.g. &amp;lt;)** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'static void errorInvalidEntity(String systemID,int  lineNr,String   entity)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"Invalid entity: `&" + entity + ";\'");', 'comment': '/*** Throws an XMLParseException to indicate that an entity could not be* resolved.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param entity  the name of the entity*/', 'coherence': 1}, {'code': 'static void errorUnexpectedElement(String systemID,int  lineNr,String parentElementName,String unexpectedElementName)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.UNEXPECTED_ELEMENT,systemID, lineNr,unexpectedElementName,/*attributeName*/ null,/*attributeValue*/ null,"Unexpected " + unexpectedElementName + " in a "+ parentElementName);', 'comment': '/*** Throws an XMLValidationException to indicate that an element is* unexpected.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param parentElementName the name of the parent element* @param unexpectedElementName the name of the unexpected element*/', 'coherence': 1}, {'code': 'static void errorInvalidInput(String systemID,int  lineNr,String   unexpectedString)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"Invalid input: " + unexpectedString);', 'comment': '/*** Throws an XMLParseException to indicate that a string is not expected* at this point.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param unexpectedString the string that is unexpected*/', 'coherence': 1}, {'code': 'static void errorMissingPCData(String systemID,int  lineNr,String parentElementName)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.MISSING_PCDATA,systemID, lineNr,/*elementName*/ null,/*attributeName*/ null,/*attributeValue*/ null,"Missing #PCDATA in element " + parentElementName);', 'comment': '/*** Throws an XMLValidationException to indicate that a #PCDATA element was* missing.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param parentElementName the name of the parent element*/', 'coherence': 1}, {'code': 'static void errorExpectedInput(String systemID,int  lineNr,String expectedString)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"Expected: " + expectedString);', 'comment': '/*** Throws an XMLParseException to indicate that an expected string is not* encountered.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param expectedString the string that is expected*/', 'coherence': 1}, {'code': 'static void errorMissingElement(String systemID,int  lineNr,String parentElementName,String missingElementName)throws XMLValidationException{throw new XMLValidationException(XMLValidationException.MISSING_ELEMENT,systemID, lineNr,missingElementName,/*attributeName*/ null,/*attributeValue*/ null,"Element " + parentElementName+ " expects to have a " + missingElementName);', 'comment': '/*** Throws an XMLValidationException to indicate that an element is missing.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param parentElementName the name of the parent element* @param missingElementName the name of the missing element*/', 'coherence': 1}, {'code': 'static void errorUnexpectedEntity(String systemID,int  lineNr,String entity)throws XMLParseException{throw new XMLParseException(systemID, lineNr,"No entity reference is expected here ("+ entity + ")");', 'comment': '/*** Throws an XMLParseException to indicate that an entity reference is* unexpected at this point.** @param systemID     the system ID of the data source* @param lineNr     the line number in the data source* @param entity  the name of the entity*/', 'coherence': 1}, {'code': 'public AbstractSaveUnsavedChangesAction(Application app, View view) {super(app, view);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'static void processEntity(String       entity,IXMLReader     reader,IXMLEntityResolver entityResolver)throws IOException,XMLParseException{entity = entity.substring(1, entity.length() - 1);Reader entityReader = entityResolver.getEntity(reader, entity);if (entityReader == null) {XMLUtil.errorInvalidEntity(reader.getSystemID(),reader.getLineNr(),entity);}boolean externalEntity = entityResolver.isExternalEntity(entity);reader.startNewStream(entityReader, !externalEntity);', 'comment': '/*** Processes an entity.** @param entity     the entity* @param reader     the reader* @param entityResolver the entity resolver** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': "static String scanIdentifier(IXMLReader reader)throws IOException,XMLParseException{StringBuffer result = new StringBuffer();for (;;) {char ch = reader.read();if ((ch == '_') || (ch == ':') || (ch == '-') || (ch == '.')|| ((ch >= 'a') && (ch <= 'z'))|| ((ch >= 'A') && (ch <= 'Z'))|| ((ch >= '0') && (ch <= '9')) || (ch > '\\u007E')) {result.append(ch);} else {reader.unread(ch);break;}}return result.toString();", 'comment': '/*** Retrieves an identifier from the data.** @param reader     the reader** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': "static void skipWhitespace(IXMLReader   reader,StringBuffer buffer)throws IOException{char ch;if (buffer == null) {do {ch = reader.read();} while ((ch == ' ') || (ch == '\\t') || (ch == '\\n'));} else {for (;;) {ch = reader.read();if ((ch != ' ') && (ch != '\\t') && (ch != '\\n')) {break;}if (ch == '\\n') {buffer.append('\\n');} else {buffer.append(' ');}}}reader.unread(ch);", 'comment': '/*** Skips whitespace from the reader.** @param reader     the reader* @param buffer     where to put the whitespace; null if the*             whitespace does not have to be stored.** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': "static void skipTag(IXMLReader reader)throws IOException,XMLParseException{int level = 1;while (level > 0) {char ch = reader.read();switch (ch) {case '<':++level;break;case '>':--level;break;", 'comment': '/*** Skips the remainder of the current XML tag.** @param reader     the reader** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': "static char processCharLiteral(String entity)throws IOException,XMLParseException{if (entity.charAt(2) == 'x') {entity = entity.substring(3, entity.length() - 1);return (char) Integer.parseInt(entity, 16);} else {entity = entity.substring(2, entity.length() - 1);return (char) Integer.parseInt(entity, 10);", 'comment': '/*** Processes a character literal.** @param entity     the entity** @throws java.io.IOException*    if an error occurred reading the data*/', 'coherence': 1}, {'code': 'public void setViewClassName(String newValue) {String oldValue = viewClassName;viewClassName = newValue;firePropertyChange(VIEW_CLASS_NAME_PROPERTY, oldValue, newValue);', 'comment': '/*** Use this method for best application startup performance.*/', 'coherence': 1}, {'code': '@Overridepublic URIChooser createImportChooser(Application a, View v) {return createOpenChooser(a,v);', 'comment': '/** Returns createOpenChooser. */', 'coherence': 1}, {'code': 'public void setViewClass(Class newValue) {Class oldValue = viewClass;viewClass = newValue;firePropertyChange(VIEW_CLASS_PROPERTY, oldValue, newValue);', 'comment': '/*** Use this method only, if setViewClassName() does not suit you.*/', 'coherence': 1}, {'code': 'public XMLParseException(String msg){super(msg);', 'comment': '/*** Creates a new exception.** @param msg the message of the exception.*/', 'coherence': 1}, {'code': 'protected JMenuBar createMenuBar(View v) {JMenuBar mb = new JMenuBar();// Get menus from application modelJMenu fileMenu = null;JMenu editMenu = null;JMenu helpMenu = null;JMenu viewMenu = null;JMenu windowMenu = null;String fileMenuText = labels.getString("file.text");String editMenuText = labels.getString("edit.text");String viewMenuText = labels.getString("view.text");String windowMenuText = labels.getString("window.text");String helpMenuText = labels.getString("help.text");for (JMenu mm : getModel().createMenus(this, v)) {String text = mm.getText();if (text == null) {mm.setText("-null-");} else if (text.equals(fileMenuText)) {fileMenu = mm;continue;} else if (text.equals(editMenuText)) {editMenu = mm;continue;} else if (text.equals(viewMenuText)) {viewMenu = mm;continue;} else if (text.equals(windowMenuText)) {windowMenu = mm;continue;} else if (text.equals(helpMenuText)) {helpMenu = mm;continue;}mb.add(mm);}// Create missing standard menusif (fileMenu == null) {fileMenu = createFileMenu(v);}if (editMenu == null) {editMenu = createEditMenu(v);}if (viewMenu == null) {viewMenu = createViewMenu(v);}if (windowMenu == null) {windowMenu = createWindowMenu(v);}if (helpMenu == null) {helpMenu = createHelpMenu(v);}// Insert standard menus into menu barif (fileMenu != null) {mb.add(fileMenu, 0);}if (editMenu != null) {mb.add(editMenu, Math.min(1, mb.getComponentCount()));}if (viewMenu != null) {mb.add(viewMenu, Math.min(2, mb.getComponentCount()));}if (windowMenu != null) {mb.add(windowMenu);}if (helpMenu != null) {mb.add(helpMenu);}return mb;', 'comment': '/*** Creates a menu bar.*/', 'coherence': 1}, {'code': 'public void addDisposable(Disposable disposable) {if (disposables == null) {disposables = new LinkedList<Disposable>();}disposables.add(disposable);', 'comment': '/*** Adds a disposable object, which will be disposed when the specified view* is disposed.** @param disposable*/', 'coherence': 1}, {'code': 'private void initComponents() {setLayout(new java.awt.BorderLayout());', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'protected void updateViewTitle(View v, JFrame f) {String title;URI uri = v.getURI();if (uri == null) {title = labels.getString("unnamedFile");} else {title = URIUtil.getName(uri);}v.setTitle(labels.getFormatted("frame.title", title, getName(), v.getMultipleOpenId()));f.setTitle(v.getTitle());// Adds a proxy icon for the file to the title bar// See http://developer.apple.com/technotes/tn2007/tn2196.html#WINDOW_DOCUMENTFILEif (uri != null && uri.getScheme() != null && uri.getScheme().equals("file")) {f.getRootPane().putClientProperty("Window.documentFile", new File(uri));} else {f.getRootPane().putClientProperty("Window.documentFile", null);', 'comment': '/*** Updates the title of a view and displays it in the given frame.** @param v The view.* @param f The frame.*/', 'coherence': 1}, {'code': 'public boolean hasUnsavedChanges() {return hasUnsavedChanges;', 'comment': '/*** Returns true, if the view has unsaved changes.* This is a bound property.*/', 'coherence': 1}, {'code': 'public Component getComponent() {if (invisibleFrame == null) {invisibleFrame = new JFrame();invisibleFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);invisibleFrame.setUndecorated(true);// Move it way off screeninvisibleFrame.setLocation(10000, 10000);// make the frame transparent and shadowless// see https://developer.apple.com/mac/library/technotes/tn2007/tn2196.htmlinvisibleFrame.getRootPane().putClientProperty("Window.alpha", 0f);invisibleFrame.getRootPane().putClientProperty("Window.shadow", false);// make it visible, so the menu bar will showinvisibleFrame.setVisible(true);}return invisibleFrame;', 'comment': '/** Returns the Frame which holds the frameless JMenuBar.*/', 'coherence': 1}, {'code': 'public void addExternalEntity(String name,String publicID,String systemID){if (! this.entities.containsKey(name)) {this.entities.put(name, new String[] { publicID, systemID } );', 'comment': '/*** Adds an external entity.** @param name the name of the entity.* @param publicID the public ID of the entity, which may be null.* @param systemID the system ID of the entity.*/', 'coherence': 1}, {'code': 'public void execute(Runnable worker) {if (executor == null) {executor = Executors.newSingleThreadExecutor();}executor.execute(worker);', 'comment': '/*** Executes the specified runnable on the worker thread of the view.* Execution is perfomred sequentially in the same sequence as the* runnables have been passed to this method.*/', 'coherence': 1}, {'code': 'public boolean isExternalEntity(String name){Object obj = this.entities.get(name);return ! (obj instanceof java.lang.String);', 'comment': '/*** Returns true if an entity is external.** @param name the name of the entity.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public void dispose() {if (executor != null) {executor.shutdown();executor = null;}if (disposables != null) {for (Disposable d : (LinkedList<Disposable>)disposables.clone()) {d.dispose();}disposables = null;}removeAll();', 'comment': '/*** Gets rid of all the resources of the view.* No other methods should be invoked on the view afterwards.*/', 'coherence': 1}, {'code': 'public void addInternalEntity(String name,String value){if (! this.entities.containsKey(name)) {this.entities.put(name, value);', 'comment': '/*** Adds an internal entity.** @param name the name of the entity.* @param value the value of the entity.*/', 'coherence': 1}, {'code': 'public AbstractView() {preferences = PreferencesUtil.userNodeForPackage(getClass());', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public XMLEntityResolver(){this.entities = new Hashtable();this.entities.put("amp", "&#38;");this.entities.put("quot", "&#34;");this.entities.put("apos", "&#39;");this.entities.put("lt", "&#60;");this.entities.put("gt", "&#62;");', 'comment': '/*** Initializes the resolver.*/', 'coherence': 1}, {'code': 'public Reader getEntity(IXMLReader xmlReader,String   name)throws XMLParseException{Object obj = this.entities.get(name);if (obj == null) {return null;} else if (obj instanceof java.lang.String) {return new StringReader((String)obj);} else {String[] id = (String[]) obj;return this.openExternalEntity(xmlReader, id[0], id[1]);', 'comment': '/*** Returns a Java reader containing the value of an entity.** @param xmlReader the current XML reader* @param name the name of the entity.** @return the reader, or null if the entity could not be resolved.*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.entities.clear();this.entities = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'public XMLWriter(OutputStream stream){this.writer = new PrintWriter(stream);', 'comment': '/*** Creates a new XML writer.** @param stream where to write the output to.*/', 'coherence': 1}, {'code': 'public void write(IXMLElement xml,boolean   prettyPrint,int     indent,boolean   collapseEmptyElements)throws IOException{if (prettyPrint) {for (int i = 0; i < indent; i++) {this.writer.print(\' \');}}if (xml.getName() == null) {if (xml.getContent() != null) {if (prettyPrint) {this.writeEncoded(xml.getContent().trim());writer.println();} else {this.writeEncoded(xml.getContent());}}} else {this.writer.print(\'<\');this.writer.print(xml.getFullName());Vector nsprefixes = new Vector();if (xml.getNamespace() != null) {if (xml.getName().equals(xml.getFullName())) {this.writer.print(" xmlns=\\"" + xml.getNamespace() + \'"\');} else {String prefix = xml.getFullName();prefix = prefix.substring(0, prefix.indexOf(\':\'));nsprefixes.addElement(prefix);this.writer.print(" xmlns:" + prefix);this.writer.print("=\\"" + xml.getNamespace() + "\\"");}}Iterator enm = xml.iterateAttributeNames();while (enm.hasNext()) {String key = (String) enm.next();int index = key.indexOf(\':\');if (index >= 0) {String namespace = xml.getAttributeNamespace(key);if (namespace != null) {String prefix = key.substring(0, index);if (! nsprefixes.contains(prefix)) {this.writer.print(" xmlns:" + prefix);this.writer.print("=\\"" + namespace + \'"\');nsprefixes.addElement(prefix);}}}}enm = xml.iterateAttributeNames();while (enm.hasNext()) {String key = (String) enm.next();String value = xml.getAttribute(key, null);this.writer.print(" " + key + "=\\"");this.writeEncoded(value);this.writer.print(\'"\');}if ((xml.getContent() != null)&& (xml.getContent().length() > 0)) {writer.print(\'>\');this.writeEncoded(xml.getContent());writer.print("</" + xml.getFullName() + \'>\');if (prettyPrint) {writer.println();}} else if (xml.hasChildren() || (! collapseEmptyElements)) {writer.print(\'>\');if (prettyPrint) {writer.println();}enm = xml.iterateChildren();while (enm.hasNext()) {IXMLElement child = (IXMLElement) enm.next();this.write(child, prettyPrint, indent + 4,collapseEmptyElements);}if (prettyPrint) {for (int i = 0; i < indent; i++) {this.writer.print(\' \');}}this.writer.print("</" + xml.getFullName() + ">");if (prettyPrint) {writer.println();}} else {this.writer.print("/>");if (prettyPrint) {writer.println();}}}this.writer.flush();', 'comment': '/*** Writes an XML element.** @param xml the non-null XML element to write.* @param prettyPrint if spaces need to be inserted to make the output more*          readable* @param indent how many spaces to indent the element.*/', 'coherence': 1}, {'code': 'public void write(IXMLElement xml)throws IOException{this.write(xml, false, 0, true);', 'comment': '/*** Writes an XML element.** @param xml the non-null XML element to write.*/', 'coherence': 1}, {'code': 'public XMLWriter(Writer writer){if (writer instanceof PrintWriter) {this.writer = (PrintWriter) writer;} else {this.writer = new PrintWriter(writer);', 'comment': '/*** Creates a new XML writer.** @param writer where to write the output to.*/', 'coherence': 1}, {'code': 'protected JMenuBar createMenuBar(View v) {JMenuBar mb = new JMenuBar();// Get menus from application modelJMenu fileMenu = null;JMenu editMenu = null;JMenu helpMenu = null;JMenu viewMenu = null;JMenu windowMenu = null;String fileMenuText = labels.getString("file.text");String editMenuText = labels.getString("edit.text");String viewMenuText = labels.getString("view.text");String windowMenuText = labels.getString("window.text");String helpMenuText = labels.getString("help.text");for (JMenu mm : getModel().createMenus(this, v)) {String text = mm.getText();if (text == null) {mm.setText("-null-");} else if (text.equals(fileMenuText)) {fileMenu = mm;continue;} else if (text.equals(editMenuText)) {editMenu = mm;continue;} else if (text.equals(viewMenuText)) {viewMenu = mm;continue;} else if (text.equals(windowMenuText)) {windowMenu = mm;continue;} else if (text.equals(helpMenuText)) {helpMenu = mm;continue;}mb.add(mm);}// Create missing standard menusif (fileMenu == null) {fileMenu = createFileMenu(v);}if (editMenu == null) {editMenu = createEditMenu(v);}if (viewMenu == null) {viewMenu = createViewMenu(v);}if (windowMenu == null) {windowMenu = createWindowMenu(v);}if (helpMenu == null) {helpMenu = createHelpMenu(v);}// Insert standard menus into menu barif (fileMenu != null) {mb.add(fileMenu, 0);}if (editMenu != null) {mb.add(editMenu, Math.min(1, mb.getComponentCount()));}if (viewMenu != null) {mb.add(viewMenu, Math.min(2, mb.getComponentCount()));}if (windowMenu != null) {mb.add(windowMenu);}if (helpMenu != null) {mb.add(helpMenu);}return mb;', 'comment': '/*** Creates a menu bar.*/', 'coherence': 1}, {'code': 'protected Component wrapDesktopPane(Component c, LinkedList<Action> toolBarActions) {if (getModel() != null) {int id = 0;for (JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this, null))) {id++;JPanel panel = new JPanel(new BorderLayout());panel.add(tb, BorderLayout.NORTH);panel.add(c, BorderLayout.CENTER);c = panel;PreferencesUtil.installToolBarPrefsHandler(prefs, "toolbar." + id, tb);toolBarActions.addFirst(new ToggleToolBarAction(tb, tb.getName()));}}return c;', 'comment': '/*** Returns the wrapped desktop pane.*/', 'coherence': 1}, {'code': 'public String getNamespace() {return this.namespace;', 'comment': '/*** Returns the namespace of the element.** @return the namespace, or null if no namespace is associated with the*     element.*/', 'coherence': 1}, {'code': 'public ArrayList getChildren() {return this.children;', 'comment': '/*** Returns a vector containing all the child iterator.** @return the vector.*/', 'coherence': 1}, {'code': 'protected void maybeAddSeparator(JMenu m) {m.putClientProperty("needsSeparator", Boolean.TRUE);', 'comment': '/** Adds a separator to the supplied menu. The separator will onlybe added, if additional items are added using addAction. */', 'coherence': 1}, {'code': 'protected void addAction(JMenu m, View view, String actionID) {addAction(m, getAction(view, actionID));', 'comment': '/** Adds the specified action as a menu item to the supplied menu. */', 'coherence': 1}, {'code': 'public void setActiveView(View newValue) {View oldValue = activeView;if (activeView != null) {activeView.deactivate();}activeView = newValue;if (activeView != null) {activeView.activate();}firePropertyChange(ACTIVE_VIEW_PROPERTY, oldValue, newValue);', 'comment': '/*** Sets the active view. Calls deactivate on the previously* active view, and then calls activate on the given view.** @param newValue Active view, can be null.*/', 'coherence': 1}, {'code': 'public boolean hasChildren() {return (! this.children.isEmpty());', 'comment': '/*** Returns whether the element has children.** @return true if the element has children.*/', 'coherence': 1}, {'code': 'public String getAttributeType(String name,String namespace) {XMLAttribute attr = this.findAttribute(name, namespace);if (attr == null) {return null;} else {return attr.getType();', 'comment': '/*** Returns the type of an attribute.** @param name the non-null name of the attribute.* @param namespace the namespace URI, which may be null.** @return the type, or null if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public AbstractSelectionAction(JComponent target) {this.target = target;if (target != null) {// Register with a weak reference on the JComponent.propertyHandler = new PropertyChangeListener() {@Overridepublic void propertyChange(PropertyChangeEvent evt) {String n = evt.getPropertyName();if (n.equals("enabled")) {updateEnabled();} else if (n.equals(EditableComponent.SELECTION_EMPTY_PROPERTY)) {updateEnabled();}}};target.addPropertyChangeListener(new WeakPropertyChangeListener(propertyHandler));', 'comment': '/** Creates a new instance which acts on the specified component.** @param target The target of the action. Specify null for the currently* focused component.*/', 'coherence': 1}, {'code': 'public void addChild(IXMLElement child) {if (child == null) {throw new IllegalArgumentException("child must not be null");}if ((child.getName() == null) && (! this.children.isEmpty())) {IXMLElement lastChild = (IXMLElement) this.children.get(this.children.size() - 1);if (lastChild.getName() == null) {lastChild.setContent(lastChild.getContent()+ child.getContent());return;}}((XMLElement)child).parent = this;this.children.add(child);', 'comment': '/*** Adds a child element.** @param child the non-null child to add.*/', 'coherence': 1}, {'code': 'public IXMLElement getFirstChildNamed(String name,String namespace) {Iterator enm = this.children.iterator();while (enm.hasNext()) {IXMLElement child = (IXMLElement) enm.next();String str = child.getName();boolean found = (str != null) && (str.equals(name));str = child.getNamespace();if (str == null) {found &= (name == null);} else {found &= str.equals(namespace);}if (found) {return child;}}return null;', 'comment': '/*** Searches a child element.** @param name    the name of the child to search for.* @param namespace the namespace, which may be null.** @return the child element, or null if no such child was found.*/', 'coherence': 1}, {'code': 'protected void addAction(JMenu m, Action a) {if (a != null) {if (m.getClientProperty("needsSeparator") == Boolean.TRUE) {m.addSeparator();m.putClientProperty("needsSeparator", null);}JMenuItem mi;mi = m.add(a);mi.setIcon(null);mi.setToolTipText(null);', 'comment': '/** Adds the specified action as a menu item to the supplied menu. */', 'coherence': 1}, {'code': 'public View getActiveView() {return activeView;', 'comment': '/*** Gets the active view.** @return The active view can be null.*/', 'coherence': 1}, {'code': 'public void removeChildAtIndex(int index) {this.children.remove(index);', 'comment': '/*** Removes the child located at a certain index.** @param index the index of the child, where the first child has index 0.*/', 'coherence': 1}, {'code': 'public void setActionMap(ActionMap m) {actionMap = m;', 'comment': '/*** Sets the application-wide action map.*/', 'coherence': 1}, {'code': 'public String getFullName() {return this.fullName;', 'comment': '/*** Returns the full name (i.e. the name including an eventual namespace* prefix) of the element.** @return the name, or null if the element only contains #PCDATA.*/', 'coherence': 1}, {'code': 'public IXMLElement getParent() {return this.parent;', 'comment': '/*** Returns the parent element. This method returns null for the root* element.*/', 'coherence': 1}, {'code': 'public void setAttribute(String name,String value) {XMLAttribute attr = this.findAttribute(name);if (attr == null) {attr = new XMLAttribute(name, name, null, value, "CDATA");this.attributes.add(attr);} else {attr.setValue(value);', 'comment': '/*** Sets an attribute.** @param name the non-null full name of the attribute.* @param value the non-null value of the attribute.*/', 'coherence': 1}, {'code': 'protected void addMenuItem(JMenu m, JMenuItem mi) {if (mi != null) {if (m.getClientProperty("needsSeparator") == Boolean.TRUE) {m.addSeparator();m.putClientProperty("needsSeparator", null);}m.add(mi);', 'comment': '/** Adds the specified action as a menu item to the supplied menu. */', 'coherence': 1}, {'code': 'public boolean equals(Object rawElement) {try {return this.equalsXMLElement((IXMLElement) rawElement);} catch (ClassCastException e) {return false;', 'comment': '/*** Returns true if the element equals another element.** @param rawElement the element to compare to*/', 'coherence': 1}, {'code': 'public String getName() {return this.name;', 'comment': '/*** Returns the name of the element.** @return the name, or null if the element only contains #PCDATA.*/', 'coherence': 1}, {'code': 'public int getAttribute(String name,int  defaultValue) {String value = this.getAttribute(name, Integer.toString(defaultValue));return Integer.parseInt(value);', 'comment': '/*** Returns the value of an attribute.** @param name the non-null full name of the attribute.* @param defaultValue the default value of the attribute.** @return the value, or defaultValue if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public XMLElement(String fullName) {this(fullName, null, null, NO_LINE);', 'comment': '/*** Creates an empty element.** @param fullName the name of the element.*/', 'coherence': 1}, {'code': 'public XMLElement() {this(null, null, null, NO_LINE);', 'comment': '/*** Creates an empty element to be used for #PCDATA content.*/', 'coherence': 1}, {'code': 'public String getContent() {return this.content;', 'comment': '/*** Return the #PCDATA content of the element. If the element has a* combination of #PCDATA content and child iterator, the #PCDATA* sections can be retrieved as unnamed child objects. In this case,* this method returns null.** @return the content.*/', 'coherence': 1}, {'code': 'public IXMLElement createElement(String fullName,String systemID,int  lineNr) {return new XMLElement(fullName, systemID, lineNr);', 'comment': '/*** Creates an empty element.** @param fullName the name of the element.* @param systemID the system ID of the XML data where the element starts.* @param lineNr   the line in the XML data where the element starts.*/', 'coherence': 1}, {'code': 'protected void updateOpenRecentMenu() {if (openRecentMenu.getItemCount() > 0) {JMenuItem clearRecentFilesItem = (JMenuItem) openRecentMenu.getItem(openRecentMenu.getItemCount() - 1);openRecentMenu.remove(openRecentMenu.getItemCount() - 1);// Dispose the actions and the menu items that are currently in the menufor (Action action : openRecentActions) {if (action instanceof Disposable) {((Disposable) action).dispose();}}openRecentActions.clear();openRecentMenu.removeAll();// Create new actions and add them to the menuif (getAction(view, LoadFileAction.ID) != null || //getAction(view, LoadDirectoryAction.ID) != null) {for (URI f : getRecentURIs()) {LoadRecentFileAction action = new LoadRecentFileAction(AbstractApplication.this, view, f);openRecentMenu.add(action);openRecentActions.add(action);}} else {for (URI f : getRecentURIs()) {OpenRecentFileAction action = new OpenRecentFileAction(AbstractApplication.this, f);openRecentMenu.add(action);openRecentActions.add(action);}}if (getRecentURIs().size() > 0) {openRecentMenu.addSeparator();}// Add a separator and the clear recent files item.openRecentMenu.add(clearRecentFilesItem);', 'comment': '/*** Updates the "File &gt; Open Recent" menu.*/', 'coherence': 1}, {'code': 'public Properties getAttributesInNamespace(String namespace) {Properties result = new Properties();Iterator enm = this.attributes.iterator();while (enm.hasNext()) {XMLAttribute attr = (XMLAttribute) enm.next();if (namespace == null) {if (attr.getNamespace() == null) {result.put(attr.getName(), attr.getValue());}} else {if (namespace.equals(attr.getNamespace())) {result.put(attr.getName(), attr.getValue());}}}return result;', 'comment': '/*** Returns all attributes in a specific namespace as a Properties object.** @param namespace the namespace URI of the attributes, which may be null.** @return the non-null set.*/', 'coherence': 1}, {'code': 'public boolean equalsXMLElement(IXMLElement elt) {if (! this.name.equals(elt.getName())) {return false;}if (this.attributes.size() != elt.getAttributeCount()) {return false;}Iterator enm = this.attributes.iterator();while (enm.hasNext()) {XMLAttribute attr = (XMLAttribute) enm.next();if (! elt.hasAttribute(attr.getName(), attr.getNamespace())) {return false;}String value = elt.getAttribute(attr.getName(),attr.getNamespace(),null);if (! attr.getValue().equals(value)) {return false;}String type = elt.getAttributeType(attr.getName(),attr.getNamespace());if (! attr.getType().equals(type)) {return false;}}if (this.children.size() != elt.getChildrenCount()) {return false;}for (int i = 0; i < this.children.size(); i++) {IXMLElement child1 = this.getChildAtIndex(i);IXMLElement child2 = elt.getChildAtIndex(i);if (! child1.equalsXMLElement(child2)) {return false;}}return true;', 'comment': '/*** Returns true if the element equals another element.** @param elt the element to compare to*/', 'coherence': 1}, {'code': 'public int getLineNr() {return this.lineNr;', 'comment': '/*** Returns the line number in the data where the element started.** @return the line number, or NO_LINE if unknown.** @see #NO_LINE* @see #getSystemID*/', 'coherence': 1}, {'code': 'public void removeChild(IXMLElement child) {if (child == null) {throw new IllegalArgumentException("child must not be null");}this.children.remove(child);', 'comment': '/*** Removes a child element.** @param child the non-null child to remove.*/', 'coherence': 1}, {'code': 'public IXMLElement createPCDataElement() {return new XMLElement();', 'comment': '/*** Creates an element to be used for #PCDATA content.*/', 'coherence': 1}, {'code': 'public XMLElement(String fullName,String namespace) {this(fullName, namespace, null, NO_LINE);', 'comment': '/*** Creates an empty element.** @param fullName  the full name of the element* @param namespace the namespace URI.*/', 'coherence': 1}, {'code': 'public String getAttributeNamespace(String name) {XMLAttribute attr = this.findAttribute(name);if (attr == null) {return null;} else {return attr.getNamespace();', 'comment': '/*** Returns the namespace of an attribute.** @param name the non-null full name of the attribute.** @return the namespace, or null if there is none associated.*/', 'coherence': 1}, {'code': 'public ArrayList getChildrenNamed(String name) {ArrayList result = new ArrayList(this.children.size());Iterator enm = this.children.iterator();while (enm.hasNext()) {IXMLElement child = (IXMLElement) enm.next();String childName = child.getFullName();if ((childName != null) && childName.equals(name)) {result.add(child);}}return result;', 'comment': '/*** Returns a vector of all child iterator named <I>name</I>.** @param name the full name of the children to search for.** @return the non-null vector of child iterator.*/', 'coherence': 1}, {'code': 'public IXMLElement createElement(String fullName,String namespace,String systemID,int  lineNr) {return new XMLElement(fullName, namespace, systemID, lineNr);', 'comment': '/*** Creates an empty element.** @param fullName  the full name of the element* @param namespace the namespace URI.* @param systemID  the system ID of the XML data where the element starts.* @param lineNr  the line in the XML data where the element starts.*/', 'coherence': 1}, {'code': 'public String getAttribute(String name,String namespace,String defaultValue) {XMLAttribute attr = this.findAttribute(name, namespace);if (attr == null) {return defaultValue;} else {return attr.getValue();', 'comment': '/*** Returns the value of an attribute.** @param name the non-null name of the attribute.* @param namespace the namespace URI, which may be null.* @param defaultValue the default value of the attribute.** @return the value, or defaultValue if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public int getAttribute(String name,String namespace,int  defaultValue) {String value = this.getAttribute(name, namespace,Integer.toString(defaultValue));return Integer.parseInt(value);', 'comment': '/*** Returns the value of an attribute.** @param name the non-null name of the attribute.* @param namespace the namespace URI, which may be null.* @param defaultValue the default value of the attribute.** @return the value, or defaultValue if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public IXMLElement getFirstChildNamed(String name) {Iterator enm = this.children.iterator();while (enm.hasNext()) {IXMLElement child = (IXMLElement) enm.next();String childName = child.getFullName();if ((childName != null) && childName.equals(name)) {return child;}}return null;', 'comment': '/*** Searches a child element.** @param name the full name of the child to search for.** @return the child element, or null if no such child was found.*/', 'coherence': 1}, {'code': 'public int getAttributeCount() {return this.attributes.size();', 'comment': '/*** Returns the number of attributes.*/', 'coherence': 1}, {'code': 'public XMLElement(String fullName,String systemID,int  lineNr) {this(fullName, null, systemID, lineNr);', 'comment': '/*** Creates an empty element.** @param fullName the name of the element.* @param systemID the system ID of the XML data where the element starts.* @param lineNr   the line in the XML data where the element starts.*/', 'coherence': 1}, {'code': "public XMLElement(String fullName,String namespace,String systemID,int  lineNr) {this.attributes = new ArrayList();this.children = new ArrayList(8);this.fullName = fullName;if (namespace == null) {this.name = fullName;} else {int index = fullName.indexOf(':');if (index >= 0) {this.name = fullName.substring(index + 1);} else {this.name = fullName;}}this.namespace = namespace;this.content = null;this.lineNr = lineNr;this.systemID = systemID;this.parent = null;", 'comment': '/*** Creates an empty element.** @param fullName  the full name of the element* @param namespace the namespace URI.* @param systemID  the system ID of the XML data where the element starts.* @param lineNr  the line in the XML data where the element starts.*/', 'coherence': 1}, {'code': 'public IXMLElement createElement(String fullName) {return new XMLElement(fullName);', 'comment': '/*** Creates an empty element.** @param fullName the name of the element.*/', 'coherence': 1}, {'code': "public void setName(String fullName,String namespace) {int index = fullName.indexOf(':');if ((namespace == null) || (index < 0)) {this.name = fullName;} else {this.name = fullName.substring(index + 1);}this.fullName = fullName;this.namespace = namespace;", 'comment': '/*** Sets the name.** @param fullName  the non-null full name.* @param namespace the namespace URI, which may be null.*/', 'coherence': 1}, {'code': 'public boolean hasAttribute(String name) {return this.findAttribute(name) != null;', 'comment': '/*** Returns whether an attribute exists.** @return true if the attribute exists.*/', 'coherence': 1}, {'code': 'public void removeAttribute(String name) {for (int i = 0; i < this.attributes.size(); i++) {XMLAttribute attr = (XMLAttribute) this.attributes.get(i);if (attr.getFullName().equals(name)) {this.attributes.remove(i);return;', 'comment': '/*** Removes an attribute.** @param name the non-null name of the attribute.*/', 'coherence': 1}, {'code': 'public IXMLElement createElement(String fullName,String namespace) {return new XMLElement(fullName, namespace);', 'comment': '/*** Creates an empty element.** @param fullName  the full name of the element* @param namespace the namespace URI.*/', 'coherence': 1}, {'code': 'public Properties getAttributes() {Properties result = new Properties();Iterator enm = this.attributes.iterator();while (enm.hasNext()) {XMLAttribute attr = (XMLAttribute) enm.next();result.put(attr.getFullName(), attr.getValue());}return result;', 'comment': '/*** Returns all attributes as a Properties object.** @return the non-null set.*/', 'coherence': 1}, {'code': 'public boolean isLeaf() {return this.children.isEmpty();', 'comment': '/*** Returns whether the element is a leaf element.** @return true if the element has no children.*/', 'coherence': 1}, {'code': 'private XMLAttribute findAttribute(String fullName) {Iterator enm = this.attributes.iterator();while (enm.hasNext()) {XMLAttribute attr = (XMLAttribute) enm.next();if (attr.getFullName().equals(fullName)) {return attr;}}return null;', 'comment': '/*** Searches an attribute.** @param fullName the non-null full name of the attribute.** @return the attribute, or null if the attribute does not exist.*/', 'coherence': 1}, {'code': 'private XMLAttribute findAttribute(String name,String namespace) {Iterator enm = this.attributes.iterator();while (enm.hasNext()) {XMLAttribute attr = (XMLAttribute) enm.next();boolean found = attr.getName().equals(name);if (namespace == null) {found &= (attr.getNamespace() == null);} else {found &= namespace.equals(attr.getNamespace());}if (found) {return attr;}}return null;', 'comment': '/*** Searches an attribute.** @param name the non-null short name of the attribute.* @param namespace the name space, which may be null.** @return the attribute, or null if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public int getChildrenCount() {return this.children.size();', 'comment': '/*** Returns the number of children.** @return the count.*/', 'coherence': 1}, {'code': 'public double getDoubleAttribute(String name,String namespace,double defaultValue) {XMLAttribute attr = this.findAttribute(name, namespace);if (attr == null) {return defaultValue;} else {try {return Double.parseDouble(attr.getValue());} catch (NumberFormatException e) {return defaultValue;', 'comment': "/*** Returns an attribute of the element.* If the attribute doesn't exist, <code>defaultValue</code> is returned.** @param name     The name of the attribute.* @param namespace the namespace URI, which may be null.* @param defaultValue Key to use if the attribute is missing.**/", 'coherence': 1}, {'code': 'public ArrayList getChildrenNamed(String name,String namespace) {ArrayList result = new ArrayList(this.children.size());Iterator enm = this.children.iterator();while (enm.hasNext()) {IXMLElement child = (IXMLElement) enm.next();String str = child.getName();boolean found = (str != null) && (str.equals(name));str = child.getNamespace();if (str == null) {found &= (name == null);} else {found &= str.equals(namespace);}if (found) {result.add(child);}}return result;', 'comment': '/*** Returns a vector of all child iterator named <I>name</I>.** @param name    the name of the children to search for.* @param namespace the namespace, which may be null.** @return the non-null vector of child iterator.*/', 'coherence': 1}, {'code': 'public Object getAttribute(String name, String namespace,Map valueSet,String  defaultKey) {String key = this.getAttribute(name, namespace, null);if (key == null || ! valueSet.containsKey(key)) {return valueSet.get(defaultKey);}return valueSet.get(key);', 'comment': '/*** Returns an attribute by looking up a key in a hashtable.* If the attribute doesn\'t exist, the value corresponding to defaultKey* is returned.* <P>* As an example, if valueSet contains the mapping <code>"one" =&gt;* "1"</code>* and the element contains the attribute <code>attr="one"</code>, then* <code>getAttribute("attr", mapping, defaultKey, false)</code> returns* <code>"1"</code>.** @param name*   The name of the attribute.* @param namespace the namespace URI, which may be null.* @param valueSet*   HashMap mapping keySet().iterator to values.* @param defaultKey*   Key to use if the attribute is missing.** </dl><dl><dt><b>Preconditions:</b></dt><dd>* <ul><li><code>name != null</code>*   <li><code>name</code> is a valid XML identifier*   <li><code>valueSet</code> != null*   <li>the keySet().iterator of <code>valueSet</code> are strings* </ul></dd></dl><dl>**/', 'coherence': 1}, {'code': 'public String getAttribute(String name) {return this.getAttribute(name, null);', 'comment': '/*** @deprecated As of NanoXML/Java 2.1, replaced by*       {@link #getAttribute(java.lang.String,java.lang.String)}* Returns the value of an attribute.** @param name the non-null name of the attribute.** @return the value, or null if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public void removeAttribute(String name,String namespace) {for (int i = 0; i < this.attributes.size(); i++) {XMLAttribute attr = (XMLAttribute) this.attributes.get(i);boolean found = attr.getName().equals(name);if (namespace == null) {found &= (attr.getNamespace() == null);} else {found &= attr.getNamespace().equals(namespace);}if (found) {this.attributes.remove(i);return;', 'comment': '/*** Removes an attribute.** @param name the non-null name of the attribute.* @param namespace the namespace URI of the attribute, which may be null.*/', 'coherence': 1}, {'code': 'public void setContent(String content) {this.content = content;', 'comment': '/*** Sets the #PCDATA content. It is an error to call this method with a* non-null value if there are child objects.** @param content the (possibly null) content.*/', 'coherence': 1}, {'code': 'public String getSystemID() {return this.systemID;', 'comment': '/*** Returns the system ID of the data where the element started.** @return the system ID, or null if unknown.** @see #getLineNr*/', 'coherence': 1}, {'code': 'public String getAttributeType(String name) {XMLAttribute attr = this.findAttribute(name);if (attr == null) {return null;} else {return attr.getType();', 'comment': '/*** Returns the type of an attribute.** @param name the non-null full name of the attribute.** @return the type, or null if the attribute does not exist.*/', 'coherence': 1}, {'code': 'public IXMLElement getChildAtIndex(int index)throws ArrayIndexOutOfBoundsException {return (IXMLElement) this.children.get(index);', 'comment': '/*** Returns the child at a specific index.** @param index the index of the child** @return the non-null child** @throws java.lang.ArrayIndexOutOfBoundsException*    if the index is out of bounds.*/', 'coherence': 1}, {'code': 'public Iterator iterateChildren() {return this.children.iterator();', 'comment': '/*** Returns an enumeration of all child iterator.** @return the non-null enumeration*/', 'coherence': 1}, {'code': 'public void setName(String name) {this.name = name;this.fullName = name;this.namespace = null;', 'comment': '/*** Sets the full name. This method also sets the short name and clears the* namespace URI.** @param name the non-null name.*/', 'coherence': 1}, {'code': 'public void insertChild(IXMLElement child,int     index) {if (child == null) {throw new IllegalArgumentException("child must not be null");}if ((child.getName() == null) && (! this.children.isEmpty())) {IXMLElement lastChild = (IXMLElement) this.children.get(this.children.size() - 1);if (lastChild.getName() == null) {lastChild.setContent(lastChild.getContent()+ child.getContent());return;}}((XMLElement) child).parent = this;this.children.add(index, child);', 'comment': '/*** Inserts a child element.** @param child the non-null child to add.* @param index where to put the child.*/', 'coherence': 1}, {'code': 'public String getAttribute(String name,String defaultValue) {XMLAttribute attr = this.findAttribute(name);if (attr == null) {return defaultValue;} else {return attr.getValue();', 'comment': '/*** Returns the value of an attribute.** @param name the non-null full name of the attribute.* @param defaultValue the default value of the attribute.** @return the value, or defaultValue if the attribute does not exist.*/', 'coherence': 1}, {'code': 'protected JMenuBar createMenuBar(View v) {JMenuBar mb = new JMenuBar();// Get menus from application modelJMenu fileMenu = null;JMenu editMenu = null;JMenu helpMenu = null;JMenu viewMenu = null;JMenu windowMenu = null;String fileMenuText = labels.getString("file.text");String editMenuText = labels.getString("edit.text");String viewMenuText = labels.getString("view.text");String windowMenuText = labels.getString("window.text");String helpMenuText = labels.getString("help.text");for (JMenu mm : getModel().createMenus(this, v)) {String text = mm.getText();if (text == null) {} else if (text.equals(fileMenuText)) {fileMenu = mm;continue;} else if (text.equals(editMenuText)) {editMenu = mm;continue;} else if (text.equals(viewMenuText)) {viewMenu = mm;continue;} else if (text.equals(windowMenuText)) {windowMenu = mm;continue;} else if (text.equals(helpMenuText)) {helpMenu = mm;continue;}mb.add(mm);}// Create missing standard menusif (fileMenu == null) {fileMenu = createFileMenu(v);}if (editMenu == null) {editMenu = createEditMenu(v);}if (viewMenu == null) {viewMenu = createViewMenu(v);}if (windowMenu == null) {windowMenu = createWindowMenu(v);}if (helpMenu == null) {helpMenu = createHelpMenu(v);}// Insert standard menus into menu barif (fileMenu != null) {mb.add(fileMenu, 0);}if (editMenu != null) {mb.add(editMenu, Math.min(1, mb.getComponentCount()));}if (viewMenu != null) {mb.add(viewMenu, Math.min(2, mb.getComponentCount()));}if (windowMenu != null) {mb.add(windowMenu);}if (helpMenu != null) {mb.add(helpMenu);}return mb;', 'comment': '/*** Creates a menu bar.*/', 'coherence': 1}, {'code': 'public Iterator iterateAttributeNames() {ArrayList result = new ArrayList();Iterator enm = this.attributes.iterator();while (enm.hasNext()) {XMLAttribute attr = (XMLAttribute) enm.next();result.add(attr.getFullName());}return result.iterator();', 'comment': '/*** Returns an enumeration of all attribute names.** @return the non-null enumeration.*/', 'coherence': 1}, {'code': 'protected void updateViewTitle(View view, JFrame f) {URI uri = view.getURI();String title;if (uri == null) {title = labels.getString("unnamedFile");} else {title = URIUtil.getName(uri);}if (view.hasUnsavedChanges()) {title += "*";}view.setTitle(labels.getFormatted("frame.title", title, getName(), view.getMultipleOpenId()));f.setTitle(view.getTitle());', 'comment': '/*** Updates the title of a view and displays it in the given frame.** @param view The view.* @param f The frame.*/', 'coherence': 1}, {'code': 'public void setAttribute(String fullName,String namespace,String value) {int index = fullName.indexOf(\':\');String name = fullName.substring(index + 1);XMLAttribute attr = this.findAttribute(name, namespace);if (attr == null) {attr = new XMLAttribute(fullName, name, namespace, value, "CDATA");this.attributes.add(attr);} else {attr.setValue(value);', 'comment': '/*** Sets an attribute.** @param fullName the non-null full name of the attribute.* @param namespace the namespace URI of the attribute, which may be null.* @param value the non-null value of the attribute.*/', 'coherence': 1}, {'code': 'protected Component wrapViewComponent(View p) {JComponent c = p.getComponent();if (getModel() != null) {LinkedList<Action> toolBarActions = new LinkedList<Action>();int id = 0;for (JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this, p))) {id++;JPanel panel = new JPanel(new BorderLayout());panel.add(tb, BorderLayout.NORTH);panel.add(c, BorderLayout.CENTER);c = panel;PreferencesUtil.installToolBarPrefsHandler(prefs, "toolbar." + id, tb);toolBarActions.addFirst(new ToggleVisibleAction(tb, tb.getName()));}p.getComponent().putClientProperty("toolBarActions", toolBarActions);}return c;', 'comment': '/*** Returns the view component. Eventually wraps it into* another component in order to provide additional functionality.*/', 'coherence': 1}, {'code': 'public static IXMLReader stringReader(String str){return new StdXMLReader(new StringReader(str));', 'comment': '/*** Creates a new reader using a string as input.** @param str the string containing the XML data*/', 'coherence': 1}, {'code': 'public static IXMLReader fileReader(String filename)throws FileNotFoundException,IOException{StdXMLReader r = new StdXMLReader(new FileInputStream(filename));r.setSystemID(filename);for (int i = 0; i < r.readers.size(); i++) {StackedReader sr = (StackedReader) r.readers.elementAt(i);sr.systemId = r.currentReader.systemId;}return r;', 'comment': '/*** Creates a new reader using a file as input.** @param filename the name of the file containing the XML data** @throws java.io.FileNotFoundException*   if the file could not be found* @throws java.io.IOException*   if an I/O error occurred*/', 'coherence': 1}, {'code': 'public String getSystemID(){return this.currentReader.systemId.toString();', 'comment': '/*** Returns the current system ID.*/', 'coherence': 1}, {'code': 'public int getLineNr(){if (this.currentReader.lineReader == null) {StackedReader sr = (StackedReader) this.readers.peek();if (sr.lineReader == null) {return 0;} else {return sr.lineReader.getLineNumber() + 1;}}return this.currentReader.lineReader.getLineNumber() + 1;', 'comment': '/*** Returns the line number of the data in the current stream.*/', 'coherence': 1}, {'code': 'public StdXMLReader(InputStream stream)throws IOException{PushbackInputStream pbstream = new PushbackInputStream(stream);StringBuffer charsRead = new StringBuffer();Reader reader = this.stream2reader(stream, charsRead);this.currentReader = new StackedReader();this.readers = new Stack();this.currentReader.lineReader = new LineNumberReader(reader);this.currentReader.pbReader= new PushbackReader(this.currentReader.lineReader, 2);this.currentReader.publicId = "";try {this.currentReader.systemId = new URL("file:.");} catch (MalformedURLException e) {// never happens}this.startNewStream(new StringReader(charsRead.toString()));', 'comment': '/*** Initializes the XML reader.** @param stream the input for the XML data.** @throws java.io.IOException*    if an I/O error occurred*/', 'coherence': 1}, {'code': 'protected String getEncoding(String str){if (! str.startsWith("<?xml")) {return null;}int index = 5;while (index < str.length()) {StringBuffer key = new StringBuffer();while ((index < str.length()) && (str.charAt(index) <= \' \')) {index++;}while ((index < str.length())&& (str.charAt(index) >= \'a\')&& (str.charAt(index) <= \'z\')) {key.append(str.charAt(index));index++;}while ((index < str.length()) && (str.charAt(index) <= \' \')) {index++;}if ((index >= str.length()) || (str.charAt(index) != \'=\')) {break;}while ((index < str.length()) && (str.charAt(index) != \'\\\'\')&& (str.charAt(index) != \'"\')) {index++;}if (index >= str.length()) {break;}char delimiter = str.charAt(index);index++;int index2 = str.indexOf(delimiter, index);if (index2 < 0) {break;}if (key.toString().equals("encoding")) {return str.substring(index, index2);}index = index2 + 1;}return null;', 'comment': '/*** Scans the encoding from an &lt;?xml...?&gt; tag.** @param str the first tag in the XML data.** @return the encoding, or null if no encoding has been specified.*/', 'coherence': 1}, {'code': 'public void startNewStream(Reader reader){this.startNewStream(reader, false);', 'comment': '/*** Starts a new stream from a Java reader. The new stream is used* temporary to read data from. If that stream is exhausted, control* returns to the parent stream.** @param reader the non-null reader to read the new data from*/', 'coherence': 1}, {'code': 'public void unread(char ch)throws IOException{this.currentReader.pbReader.unread(ch);', 'comment': '/*** Pushes the last character read back to the stream.** @param ch the character to push back.** @throws java.io.IOException*   if an I/O error occurred*/', 'coherence': 1}, {'code': 'public void setPublicID(String publicID){this.currentReader.publicId = publicID;', 'comment': '/*** Sets the public ID of the current stream.** @param publicID the public ID*/', 'coherence': 1}, {'code': 'protected Reader stream2reader(InputStream  stream,StringBuffer charsRead)throws IOException{PushbackInputStream pbstream = new PushbackInputStream(stream);int b = pbstream.read();switch (b) {case 0x00:case 0xFE:case 0xFF:pbstream.unread(b);return new InputStreamReader(pbstream, "UTF-16");case 0xEF:for (int i = 0; i < 2; i++) {pbstream.read();}return new InputStreamReader(pbstream, "UTF-8");case 0x3C:b = pbstream.read();charsRead.append(\'<\');while ((b > 0) && (b != 0x3E)) {charsRead.append((char) b);b = pbstream.read();}if (b > 0) {charsRead.append((char) b);}String encoding = this.getEncoding(charsRead.toString());if (encoding == null) {return new InputStreamReader(pbstream, "UTF-8");}charsRead.setLength(0);try {return new InputStreamReader(pbstream, encoding);} catch (UnsupportedEncodingException e) {return new InputStreamReader(pbstream, "UTF-8");}default:charsRead.append((char) b);return new InputStreamReader(pbstream, "UTF-8");', 'comment': '/*** Converts a stream to a reader while detecting the encoding.** @param stream  the input for the XML data.* @param charsRead buffer where to put characters that have been read** @throws java.io.IOException*   if an I/O error occurred*/', 'coherence': 1}, {'code': 'public Reader openStream(String publicID,String systemID)throws MalformedURLException,FileNotFoundException,IOException{URL url = new URL(this.currentReader.systemId, systemID);if (url.getRef() != null) {String ref = url.getRef();if (url.getFile().length() > 0) {url = new URL(url.getProtocol(), url.getHost(), url.getPort(),url.getFile());url = new URL("jar:" + url + \'!\' + ref);} else {url = StdXMLReader.class.getResource(ref);}}this.currentReader.publicId = publicID;this.currentReader.systemId = url;StringBuffer charsRead = new StringBuffer();Reader reader = this.stream2reader(url.openStream(), charsRead);if (charsRead.length() == 0) {return reader;}String charsReadStr = charsRead.toString();PushbackReader pbreader = new PushbackReader(reader,charsReadStr.length());for (int i = charsReadStr.length() - 1; i >= 0; i--) {pbreader.unread(charsReadStr.charAt(i));}return pbreader;', 'comment': '/*** Opens a stream from a public and system ID.** @param publicID the public ID, which may be null* @param systemID the system ID, which is never null** @throws java.net.MalformedURLException*   if the system ID does not contain a valid URL* @throws java.io.FileNotFoundException*   if the system ID refers to a local file which does not exist* @throws java.io.IOException*   if an error occurred opening the stream*/', 'coherence': 1}, {'code': 'public char read()throws IOException{int ch = this.currentReader.pbReader.read();while (ch < 0) {if (this.readers.empty()) {throw new IOException("Unexpected EOF");}this.currentReader.pbReader.close();this.currentReader = (StackedReader) this.readers.pop();ch = this.currentReader.pbReader.read();}return (char) ch;', 'comment': '/*** Reads a character.** @return the character** @throws java.io.IOException*    if no character could be read*/', 'coherence': 1}, {'code': 'public StdXMLReader(Reader reader){this.currentReader = new StackedReader();this.readers = new Stack();this.currentReader.lineReader = new LineNumberReader(reader);this.currentReader.pbReader= new PushbackReader(this.currentReader.lineReader, 2);this.currentReader.publicId = "";try {this.currentReader.systemId = new URL("file:.");} catch (MalformedURLException e) {', 'comment': '/*** Initializes the XML reader.** @param reader the input for the XML data.*/', 'coherence': 1}, {'code': 'public boolean atEOF()throws IOException{int ch = this.currentReader.pbReader.read();while (ch < 0) {if (this.readers.empty()) {return true;}this.currentReader.pbReader.close();this.currentReader = (StackedReader) this.readers.pop();ch = this.currentReader.pbReader.read();}this.currentReader.pbReader.unread(ch);return false;', 'comment': '/*** Returns true if there are no more characters left to be read.** @throws java.io.IOException*    if an I/O error occurred*/', 'coherence': 1}, {'code': 'public boolean atEOFOfCurrentStream()throws IOException{int ch = this.currentReader.pbReader.read();if (ch < 0) {return true;} else {this.currentReader.pbReader.unread(ch);return false;', 'comment': '/*** Returns true if the current stream has no more characters left to be* read.** @throws java.io.IOException*    if an I/O error occurred*/', 'coherence': 1}, {'code': 'public StdXMLReader(String publicID,String systemID)throws MalformedURLException,FileNotFoundException,IOException{URL systemIDasURL = null;try {systemIDasURL = new URL(systemID);} catch (MalformedURLException e) {systemID = "file:" + systemID;try {systemIDasURL = new URL(systemID);} catch (MalformedURLException e2) {throw e;}}this.currentReader = new StackedReader();this.readers = new Stack();Reader reader = this.openStream(publicID, systemIDasURL.toString());this.currentReader.lineReader = new LineNumberReader(reader);this.currentReader.pbReader= new PushbackReader(this.currentReader.lineReader, 2);', 'comment': '/*** Initializes the reader from a system and public ID.** @param publicID the public ID which may be null.* @param systemID the non-null system ID.** @throws MalformedURLException*   if the system ID does not contain a valid URL* @throws FileNotFoundException*   if the system ID refers to a local file which does not exist* @throws IOException*   if an error occurred opening the stream*/', 'coherence': 1}, {'code': 'public void setSystemID(String systemID)throws MalformedURLException{this.currentReader.systemId = new URL(this.currentReader.systemId,systemID);', 'comment': '/*** Sets the system ID of the current stream.** @param systemID the system ID** @throws java.net.MalformedURLException*   if the system ID does not contain a valid URL*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.currentReader.lineReader = null;this.currentReader.pbReader = null;this.currentReader.systemId = null;this.currentReader.publicId = null;this.currentReader = null;this.readers.clear();super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'public int getStreamLevel(){return this.readers.size();', 'comment': '/*** Returns the current "level" of the stream on the stack of streams.*/', 'coherence': 1}, {'code': 'public void startNewStream(Reader  reader,boolean isInternalEntity){StackedReader oldReader = this.currentReader;this.readers.push(this.currentReader);this.currentReader = new StackedReader();if (isInternalEntity) {this.currentReader.lineReader = null;this.currentReader.pbReader = new PushbackReader(reader, 2);} else {this.currentReader.lineReader = new LineNumberReader(reader);this.currentReader.pbReader= new PushbackReader(this.currentReader.lineReader, 2);}this.currentReader.systemId = oldReader.systemId;this.currentReader.publicId = oldReader.publicId;', 'comment': '/*** Starts a new stream from a Java reader. The new stream is used* temporary to read data from. If that stream is exhausted, control* returns to the parent stream.** @param reader the non-null reader to read the new data from* @param isInternalEntity true if the reader is produced by resolving*             an internal entity*/', 'coherence': 1}, {'code': 'public void invalidAttributeValue(String systemID,int  lineNr,String elementName,String attributeName,String attributeValue)throws XMLValidationException{XMLUtil.errorInvalidAttributeValue(systemID, lineNr, elementName,attributeName, attributeValue);', 'comment': '/*** Throws an XMLValidationException to indicate that an attribute has an* invalid value.** @param systemID     the system ID of the XML data of the element* @param lineNr     the line number in the XML data of the element* @param elementName  the name of the element* @param attributeName  the name of the attribute* @param attributeValue the value of the attribute** @throws net.n3.nanoxml.XMLValidationException*    of course :-)*/', 'coherence': 1}, {'code': 'public IXMLValidator getDelegate(){return this.delegate;', 'comment': '/*** Returns the delegate.*/', 'coherence': 1}, {'code': 'public void setParameterEntityResolver(IXMLEntityResolver resolver){this.delegate.setParameterEntityResolver(resolver);', 'comment': '/*** Sets the parameter entity resolver.** @param resolver the entity resolver.*/', 'coherence': 1}, {'code': 'public IXMLEntityResolver getParameterEntityResolver(){return this.delegate.getParameterEntityResolver();', 'comment': '/*** Returns the parameter entity resolver.** @return the entity resolver.*/', 'coherence': 1}, {'code': 'public ValidatorPlugin(){this.delegate = null;', 'comment': '/*** Initializes the plugin.*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.delegate = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'public void setDelegate(IXMLValidator delegate){this.delegate = delegate;', 'comment': '/*** Sets the delegate.** @param delegate the delegate*/', 'coherence': 1}, {'code': 'public void unexpectedAttribute(String systemID,int  lineNr,String elementName,String attributeName)throws XMLValidationException{XMLUtil.errorUnexpectedAttribute(systemID, lineNr, elementName,attributeName);', 'comment': '/*** Throws an XMLValidationException to indicate that an attribute is* unexpected.** @param systemID    the system ID of the XML data of the element* @param lineNr    the line number in the XML data of the element* @param elementName   the name of the element* @param attributeName the name of the unexpected attribute** @throws net.n3.nanoxml.XMLValidationException*    of course :-)*/', 'coherence': 1}, {'code': 'public void parseDTD(String       publicID,IXMLReader     reader,IXMLEntityResolver entityResolver,boolean      external)throws Exception{this.delegate.parseDTD(publicID, reader, entityResolver, external);', 'comment': '/*** Parses the DTD. The validator object is responsible for reading the* full DTD.** @param publicID     the public ID, which may be null.* @param reader     the reader to read the DTD from.* @param entityResolver the entity resolver.* @param external     true if the DTD is external.** @throws java.lang.Exception*   if something went wrong.*/', 'coherence': 1}, {'code': 'public StdXMLBuilder(){this(new XMLElement());', 'comment': '/*** Creates the builder.*/', 'coherence': 1}, {'code': 'public StdXMLBuilder(IXMLElement prototype){this.stack = null;this.root = null;this.prototype = prototype;', 'comment': '/*** Creates the builder.** @param prototype the prototype to use when building the tree.*/', 'coherence': 1}, {'code': 'public void addPCData(Reader reader,String systemID,int  lineNr){int bufSize = 2048;int sizeRead = 0;StringBuffer str = new StringBuffer(bufSize);char[] buf = new char[bufSize];for (;;) {if (sizeRead >= bufSize) {bufSize *= 2;str.ensureCapacity(bufSize);}int size;try {size = reader.read(buf);} catch (IOException e) {break;}if (size < 0) {break;}str.append(buf, 0, size);sizeRead += size;}IXMLElement elt = this.prototype.createElement(null, systemID, lineNr);elt.setContent(str.toString());if (! this.stack.empty()) {IXMLElement top = (IXMLElement) this.stack.peek();top.addChild(elt);', 'comment': "/*** This method is called when a PCDATA element is encountered. A Java* reader is supplied from which you can read the data. The reader will* only read the data of the element. You don't need to check for* boundaries. If you don't read the full element, the rest of the data* is skipped. You also don't have to care about entities; they are* resolved by the parser.** @param reader   the Java reader from which you can retrieve the data.* @param systemID the system ID of the XML data source.* @param lineNr   the line in the source where the element starts.*/", 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.prototype = null;this.root = null;this.stack.clear();this.stack = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'public void addAttribute(String key,String nsPrefix,String nsURI,String value,String type)throws Exception{String fullName = key;if (nsPrefix != null) {fullName = nsPrefix + \':\' + key;}IXMLElement top = (IXMLElement) this.stack.peek();if (top.hasAttribute(fullName)) {throw new XMLParseException(top.getSystemID(),top.getLineNr(),"Duplicate attribute: " + key);}if (nsPrefix != null) {top.setAttribute(fullName, nsURI, value);} else {top.setAttribute(fullName, value);', 'comment': '/*** This method is called when a new attribute of an XML element is* encountered.** @param key    the key (name) of the attribute.* @param nsPrefix   the prefix used to identify the namespace. If no*           namespace has been specified, this parameter is null.* @param nsURI    the URI associated with the namespace. If no*           namespace has been specified, or no URI is*           associated with nsPrefix, this parameter is null.* @param value    the value of the attribute.* @param type     the type of the attribute. If no type is known,*           "CDATA" is returned.** @throws java.lang.Exception*   If an exception occurred while processing the event.*/', 'coherence': 1}, {'code': 'public void endElement(String name,String nsPrefix,String nsURI){IXMLElement elt = (IXMLElement) this.stack.pop();if (elt.getChildrenCount() == 1) {IXMLElement child = elt.getChildAtIndex(0);if (child.getName() == null) {elt.setContent(child.getContent());elt.removeChildAtIndex(0);', 'comment': '/*** This method is called when the end of an XML elemnt is encountered.** @see #startElement** @param name     the name of the element.* @param nsPrefix   the prefix used to identify the namespace. If no*           namespace has been specified, this parameter is null.* @param nsURI    the URI associated with the namespace. If no*           namespace has been specified, or no URI is*           associated with nsPrefix, this parameter is null.*/--------------// nothing to do--------------', 'coherence': 1}, {'code': 'public void startBuilding(String systemID,int  lineNr){this.stack = new Stack();this.root = null;', 'comment': '/*** This method is called before the parser starts processing its input.** @param systemID the system ID of the XML data source.* @param lineNr   the line on which the parsing starts.*/', 'coherence': 1}, {'code': "public void startElement(String name,String nsPrefix,String nsURI,String systemID,int  lineNr){String fullName = name;if (nsPrefix != null) {fullName = nsPrefix + ':' + name;}IXMLElement elt = this.prototype.createElement(fullName, nsURI,systemID, lineNr);if (this.stack.empty()) {this.root = elt;} else {IXMLElement top = (IXMLElement) this.stack.peek();top.addChild(elt);}this.stack.push(elt);", 'comment': '/*** This method is called when a new XML element is encountered.** @see #endElement** @param name   the name of the element.* @param nsPrefix   the prefix used to identify the namespace. If no*       namespace has been specified, this parameter is null.* @param nsURI  the URI associated with the namespace. If no*       namespace has been specified, or no URI is*       associated with nsPrefix, this parameter is null.* @param systemID   the system ID of the XML data source.* @param lineNr   the line in the source where the element starts.*/', 'coherence': 1}, {'code': 'public void setReader(IXMLReader reader){this.reader = reader;', 'comment': '/*** Sets the reader from which the parser retrieves its data.** @param reader the reader*/', 'coherence': 1}, {'code': 'public void setValidator(IXMLValidator validator){this.validator = validator;', 'comment': '/*** Sets the validator that validates the XML data.** @param validator the non-null validator*/', 'coherence': 1}, {'code': 'public void setResolver(IXMLEntityResolver resolver){this.entityResolver = resolver;', 'comment': '/*** Sets the entity resolver.** @param resolver the non-null resolver*/', 'coherence': 1}, {'code': "protected void scanSomeTag(boolean  allowCDATA,String   defaultNamespace,Properties namespaces)throws Exception{String str = XMLUtil.read(this.reader, '&');char ch = str.charAt(0);if (ch == '&') {XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);}switch (ch) {case '?':this.processPI();break;case '!':this.processSpecialTag(allowCDATA);break;default:this.reader.unread(ch);this.processElement(defaultNamespace, namespaces);", 'comment': '/*** Scans an XML tag.** @param allowCDATA true if CDATA sections are allowed at this point* @param defaultNamespace the default namespace URI (or null)* @param namespaces list of defined namespaces** @throws java.lang.Exception*   if something went wrong*/', 'coherence': 1}, {'code': 'protected void processElement(String   defaultNamespace,Properties namespaces)throws Exception{String fullName = XMLUtil.scanIdentifier(this.reader);String name = fullName;XMLUtil.skipWhitespace(this.reader, null);String prefix = null;int colonIndex = name.indexOf(\':\');if (colonIndex > 0) {prefix = name.substring(0, colonIndex);name = name.substring(colonIndex + 1);}Vector attrNames = new Vector();Vector attrValues = new Vector();Vector attrTypes = new Vector();this.validator.elementStarted(fullName,this.reader.getSystemID(),this.reader.getLineNr());char ch;for (;;) {ch = this.reader.read();if ((ch == \'/\') || (ch == \'>\')) {break;}this.reader.unread(ch);this.processAttribute(attrNames, attrValues, attrTypes);XMLUtil.skipWhitespace(this.reader, null);}Properties extraAttributes = new Properties();this.validator.elementAttributesProcessed(fullName,extraAttributes,this.reader.getSystemID(),this.reader.getLineNr());Enumeration enm = extraAttributes.keys();while (enm.hasMoreElements()) {String key = (String) enm.nextElement();String value = extraAttributes.getProperty(key);attrNames.addElement(key);attrValues.addElement(value);attrTypes.addElement("CDATA");}for (int i = 0; i < attrNames.size(); i++) {String key = (String) attrNames.elementAt(i);String value = (String) attrValues.elementAt(i);String type = (String) attrTypes.elementAt(i);if (key.equals("xmlns")) {defaultNamespace = value;} else if (key.startsWith("xmlns:")) {namespaces.put(key.substring(6), value);}}if (prefix == null) {this.builder.startElement(name, prefix, defaultNamespace,this.reader.getSystemID(),this.reader.getLineNr());} else {this.builder.startElement(name, prefix,namespaces.getProperty(prefix),this.reader.getSystemID(),this.reader.getLineNr());}for (int i = 0; i < attrNames.size(); i++) {String key = (String) attrNames.elementAt(i);if (key.startsWith("xmlns")) {continue;}String value = (String) attrValues.elementAt(i);String type = (String) attrTypes.elementAt(i);colonIndex = key.indexOf(\':\');if (colonIndex > 0) {String attPrefix = key.substring(0, colonIndex);key = key.substring(colonIndex + 1);this.builder.addAttribute(key, attPrefix,namespaces.getProperty(attPrefix),value, type);} else {this.builder.addAttribute(key, null, null, value, type);}}if (prefix == null) {this.builder.elementAttributesProcessed(name, prefix,defaultNamespace);} else {this.builder.elementAttributesProcessed(name, prefix,namespaces.getProperty(prefix));}if (ch == \'/\') {if (this.reader.read() != \'>\') {XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>\'");}this.validator.elementEnded(name,this.reader.getSystemID(),this.reader.getLineNr());if (prefix == null) {this.builder.endElement(name, prefix, defaultNamespace);} else {this.builder.endElement(name, prefix,namespaces.getProperty(prefix));}return;}StringBuffer buffer = new StringBuffer(16);for (;;) {buffer.setLength(0);String str;for (;;) {XMLUtil.skipWhitespace(this.reader, buffer);str = XMLUtil.read(this.reader, \'&\');if ((str.charAt(0) == \'&\') && (str.charAt(1) != \'#\')) {XMLUtil.processEntity(str, this.reader,this.entityResolver);} else {break;}}if (str.charAt(0) == \'<\') {str = XMLUtil.read(this.reader, \'\\0\');if (str.charAt(0) == \'/\') {XMLUtil.skipWhitespace(this.reader, null);str = XMLUtil.scanIdentifier(this.reader);if (! str.equals(fullName)) {XMLUtil.errorWrongClosingTag(reader.getSystemID(),reader.getLineNr(),name, str);}XMLUtil.skipWhitespace(this.reader, null);if (this.reader.read() != \'>\') {XMLUtil.errorClosingTagNotEmpty(reader.getSystemID(),reader.getLineNr());}this.validator.elementEnded(fullName,this.reader.getSystemID(),this.reader.getLineNr());if (prefix == null) {this.builder.endElement(name, prefix, defaultNamespace);} else {this.builder.endElement(name, prefix,namespaces.getProperty(prefix));}break;} else { // <[^/]this.reader.unread(str.charAt(0));this.scanSomeTag(true, //CDATA alloweddefaultNamespace,(Properties) namespaces.clone());}} else { // [^<]if (str.charAt(0) == \'&\') {ch = XMLUtil.processCharLiteral(str);buffer.append(ch);} else {reader.unread(str.charAt(0));}this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());Reader r = new ContentReader(this.reader,this.entityResolver,buffer.toString());this.builder.addPCData(r, this.reader.getSystemID(),this.reader.getLineNr());r.close();', 'comment': "/*** Processes a regular element.** @param defaultNamespace the default namespace URI (or null)* @param namespaces list of defined namespaces** @throws java.lang.Exception*   if something went wrong*/--------------// END PATCH W. Randelshofer Don't read DTD--------------", 'coherence': 1}, {'code': 'public IXMLEntityResolver getResolver(){return this.entityResolver;', 'comment': '/*** Returns the entity resolver.** @return the non-null resolver*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.builder = null;this.reader = null;this.entityResolver = null;this.validator = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'protected void processDocType()throws Exception{if (! XMLUtil.checkLiteral(this.reader, "OCTYPE")) {XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<!DOCTYPE");return;}XMLUtil.skipWhitespace(this.reader, null);String systemID = null;StringBuffer publicID = new StringBuffer();String rootElement = XMLUtil.scanIdentifier(this.reader);XMLUtil.skipWhitespace(this.reader, null);char ch = this.reader.read();if (ch == \'P\') {systemID = XMLUtil.scanPublicID(publicID, reader);XMLUtil.skipWhitespace(this.reader, null);ch = this.reader.read();} else if (ch == \'S\') {systemID = XMLUtil.scanSystemID(reader);XMLUtil.skipWhitespace(this.reader, null);ch = this.reader.read();}if (ch == \'[\') {this.validator.parseDTD(publicID.toString(),this.reader,this.entityResolver,false);XMLUtil.skipWhitespace(this.reader, null);ch = this.reader.read();}if (ch != \'>\') {XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>\'");}// BEGIN PATCH W. Randelshofer Don\'t read DTDif (false) {if (systemID != null) {Reader reader = this.reader.openStream(publicID.toString(),systemID);this.reader.startNewStream(reader);this.reader.setSystemID(systemID);this.reader.setPublicID(publicID.toString());this.validator.parseDTD(publicID.toString(),this.reader,this.entityResolver,true);', 'comment': '/*** Processes a document type declaration.** @throws java.lang.Exception*    if an error occurred reading or parsing the data*/', 'coherence': 1}, {'code': 'public StdXMLParser(){this.builder = null;this.validator = null;this.reader = null;this.entityResolver = new XMLEntityResolver();', 'comment': '/*** Creates a new parser.*/', 'coherence': 1}, {'code': 'protected void scanData()throws Exception{while ((! this.reader.atEOF()) && (this.builder.getResult() == null)) {String str = XMLUtil.read(this.reader, \'&\');char ch = str.charAt(0);if (ch == \'&\') {XMLUtil.processEntity(str, this.reader, this.entityResolver);continue;}switch (ch) {case \'<\':this.scanSomeTag(false, // don\'t allow CDATAnull,  // no default namespacenew Properties());break;case \' \':case \'\\t\':case \'\\r\':case \'\\n\':// skip whitespacebreak;default:XMLUtil.errorInvalidInput(reader.getSystemID(),reader.getLineNr(),"`" + ch + "\' (0x"+ Integer.toHexString((int) ch)+ \')\');', 'comment': '/*** Scans the XML data for elements.** @throws java.lang.Exception*   if something went wrong*/--------------// throw new XMLException(e);--------------', 'coherence': 1}, {'code': 'public IXMLValidator getValidator(){return this.validator;', 'comment': '/*** Returns the validator that validates the XML data.** @return the validator*/', 'coherence': 1}, {'code': 'public PasteAction() {this(null);', 'comment': '/** Creates a new instance which acts on the currently focused component. */', 'coherence': 1}, {'code': 'protected void processCDATA()throws Exception{if (! XMLUtil.checkLiteral(this.reader, "CDATA[")) {XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<![[CDATA[");}this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());Reader reader = new CDATAReader(this.reader);this.builder.addPCData(reader, this.reader.getSystemID(),this.reader.getLineNr());reader.close();', 'comment': '/*** Processes a CDATA section.** @throws java.lang.Exception*   if something went wrong*/', 'coherence': 1}, {'code': 'protected void processPI()throws Exception{XMLUtil.skipWhitespace(this.reader, null);String target = XMLUtil.scanIdentifier(this.reader);XMLUtil.skipWhitespace(this.reader, null);Reader reader = new PIReader(this.reader);if (! target.equalsIgnoreCase("xml")) {this.builder.newProcessingInstruction(target, reader);}reader.close();', 'comment': '/*** Processes a "processing instruction".** @throws java.lang.Exception*   if something went wrong*/', 'coherence': 1}, {'code': 'public Object parse()throws XMLException{try {this.builder.startBuilding(this.reader.getSystemID(),this.reader.getLineNr());this.scanData();return this.builder.getResult();} catch (XMLException e) {throw e;} catch (Exception e) {XMLException error = new XMLException(e);error.initCause(e);throw error;', 'comment': '/*** Parses the data and lets the builder create the logical data structure.** @return the logical structure built by the builder** @throws net.n3.nanoxml.XMLException*    if an error occurred reading or parsing the data*/', 'coherence': 1}, {'code': 'public IXMLReader getReader(){return this.reader;', 'comment': '/*** Returns the reader from which the parser retrieves its data.** @return the reader*/', 'coherence': 1}, {'code': 'public IXMLBuilder getBuilder(){return this.builder;', 'comment': '/*** Returns the builder which creates the logical structure of the XML data.** @return the builder*/', 'coherence': 1}, {'code': 'public void setBuilder(IXMLBuilder builder){this.builder = builder;', 'comment': '/*** Sets the builder which creates the logical structure of the XML data.** @param builder the non-null builder*/', 'coherence': 1}, {'code': "protected void processSpecialTag(boolean allowCDATA)throws Exception{String str = XMLUtil.read(this.reader, '&');char ch = str.charAt(0);if (ch == '&') {XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);}switch (ch) {case '[':if (allowCDATA) {this.processCDATA();} else {XMLUtil.errorUnexpectedCDATA(reader.getSystemID(),reader.getLineNr());}return;case 'D':this.processDocType();return;case '-':XMLUtil.skipComment(this.reader);return;", 'comment': '/*** Processes a tag that starts with a bang (&lt;!...&gt;).** @param allowCDATA true if CDATA sections are allowed at this point** @throws java.lang.Exception*   if something went wrong*/', 'coherence': 1}, {'code': '@Overrideprotected void installViewListeners(View p) {super.installViewListeners(p);Action redoActionInView = p.getActionMap().get(ID);if (redoActionInView != null && redoActionInView != this) {redoActionInView.addPropertyChangeListener(redoActionPropertyListener);', 'comment': '/*** Installs listeners on the view object.*/', 'coherence': 1}, {'code': 'public RedoAction(Application app, View view) {super(app, view);labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public static IXMLParser createDefaultXMLParser()throws ClassNotFoundException,InstantiationException,IllegalAccessException {// BEGIN PATCH W. Randelshofer catch AccessControlExceptionString className = XMLParserFactory.DEFAULT_CLASS;try {className = System.getProperty(XMLParserFactory.CLASS_KEY,XMLParserFactory.DEFAULT_CLASS);} catch (AccessControlException e) {// do nothing}// END PATCH W. Randelshofer catch AccessControlExceptionreturn XMLParserFactory.createXMLParser(className,new StdXMLBuilder());', 'comment': '/*** Creates a default parser.** @see #DEFAULT_CLASS* @see #CLASS_KEY** @return the non-null parser.** @throws java.lang.ClassNotFoundException*    if the class of the parser or validator could not be found.* @throws java.lang.InstantiationException*    if the parser could not be created* @throws java.lang.IllegalAccessException*    if the parser could not be created*/', 'coherence': 1}, {'code': 'public static IXMLParser createDefaultXMLParser(IXMLBuilder builder)throws ClassNotFoundException,InstantiationException,IllegalAccessException {// BEGIN PATCH W. Randelshofer catch AccessControlExceptionString className = XMLParserFactory.DEFAULT_CLASS;try {className = System.getProperty(XMLParserFactory.CLASS_KEY,XMLParserFactory.DEFAULT_CLASS);} catch (AccessControlException e) {// do nothing}// END PATCH W. Randelshofer catch AccessControlExceptionreturn XMLParserFactory.createXMLParser(className, builder);', 'comment': '/*** Creates a default parser.** @see #DEFAULT_CLASS* @see #CLASS_KEY** @param builder the XML builder.** @return the non-null parser.** @throws java.lang.ClassNotFoundException*    if the class of the parser could not be found.* @throws java.lang.InstantiationException*    if the parser could not be created* @throws java.lang.IllegalAccessException*    if the parser could not be created*/', 'coherence': 1}, {'code': '@Override protected void installViewListeners(View p) {super.installViewListeners(p);Action undoActionInView = p.getActionMap().get(ID);if (undoActionInView != null && undoActionInView != this) {undoActionInView.addPropertyChangeListener(redoActionPropertyListener);', 'comment': '/*** Installs listeners on the view object.*/', 'coherence': 1}, {'code': 'XMLAttribute(String fullName,String name,String namespace,String value,String type){this.fullName = fullName;this.name = name;this.namespace = namespace;this.value = value;this.type = type;', 'comment': '/*** Creates a new attribute.** @param fullName  the non-null full name* @param name    the non-null short name* @param namespace the namespace URI, which may be null* @param value   the value of the attribute* @param type    the type of the attribute*/', 'coherence': 1}, {'code': 'public UndoAction(Application app, View view) {super(app, view);labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'void setValue(String value){this.value = value;', 'comment': '/*** Sets the value of the attribute.** @param value the new value.*/', 'coherence': 1}, {'code': 'String getValue(){return this.value;', 'comment': '/*** Returns the value of the attribute.*/', 'coherence': 1}, {'code': 'String getName(){return this.name;', 'comment': '/*** Returns the short name of the attribute.*/', 'coherence': 1}, {'code': 'String getNamespace(){return this.namespace;', 'comment': '/*** Returns the namespace of the attribute.*/', 'coherence': 1}, {'code': 'String getFullName(){return this.fullName;', 'comment': '/*** Returns the full name of the attribute.*/', 'coherence': 1}, {'code': 'public ClearSelectionAction() {this(null);', 'comment': '/** Creates a new instance which acts on the currently focused component. */', 'coherence': 1}, {'code': 'public DuplicateAction() {this(null);', 'comment': '/** Creates a new instance which acts on the currently focused component. */', 'coherence': 1}, {'code': 'public CopyAction(JComponent target) {super(target);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance which acts on the specified component.** @param target The target of the action. Specify null for the currently* focused component.*/', 'coherence': 1}, {'code': 'private static String buildMessage(String  systemID,int     lineNr,Exception e,String  msg,boolean   reportParams){String str = msg;if (reportParams) {if (systemID != null) {str += ", SystemID=\'" + systemID + "\'";}if (lineNr >= 0) {str += ", Line=" + lineNr;}if (e != null) {str += ", Exception: " + e;}}return str;', 'comment': '/*** Builds the exception message** @param systemID   the system ID from where the data came* @param lineNr     the line number in the XML data where the exception*           occurred.* @param e      the encapsulated exception.* @param msg      the message of the exception.* @param reportParams true if the systemID, lineNr and e params need to be*           appended to the message*/', 'coherence': 1}, {'code': 'public CopyAction() {this(null);', 'comment': '/** Creates a new instance which acts on the currently focused component. */', 'coherence': 1}, {'code': 'public XMLException(String systemID,int  lineNr,String msg){this(systemID, lineNr, null, msg, true);', 'comment': '/*** Creates a new exception.** @param systemID the system ID of the XML data where the exception*         occurred* @param lineNr   the line number in the XML data where the exception*         occurred.* @param msg    the message of the exception.*/', 'coherence': 1}, {'code': 'public XMLException(String systemID,int  lineNr,Exception e){this(systemID, lineNr, e, "Nested Exception", true);', 'comment': '/*** Creates a new exception.** @param systemID the system ID of the XML data where the exception*         occurred* @param lineNr   the line number in the XML data where the exception*         occurred.* @param e    the encapsulated exception.*/', 'coherence': 1}, {'code': 'public void printStackTrace(PrintStream stream){super.printStackTrace(stream);if (this.encapsulatedException != null) {stream.println("*** Nested Exception:");this.encapsulatedException.printStackTrace(stream);', 'comment': '/*** Dumps the exception stack to an output stream.** @param stream the output stream*/', 'coherence': 1}, {'code': 'public String getSystemID(){return this.systemID;', 'comment': '/*** Returns the system ID of the XML data where the exception occurred.* If there is no system ID known, null is returned.*/', 'coherence': 1}, {'code': 'public XMLException(String msg){this(null, -1, null, msg, false);', 'comment': '/*** Creates a new exception.** @param msg the message of the exception.*/', 'coherence': 1}, {'code': 'public XMLException(String  systemID,int     lineNr,Exception e,String  msg,boolean   reportParams){super(XMLException.buildMessage(systemID, lineNr, e, msg,reportParams));this.systemID = systemID;this.lineNr = lineNr;this.encapsulatedException = e;this.msg = XMLException.buildMessage(systemID, lineNr, e, msg,reportParams);', 'comment': '/*** Creates a new exception.** @param systemID   the system ID from where the data came* @param lineNr     the line number in the XML data where the exception*           occurred.* @param e      the encapsulated exception.* @param msg      the message of the exception.* @param reportParams true if the systemID, lineNr and e params need to be*           appended to the message*/', 'coherence': 1}, {'code': 'public DeleteAction() {this(null);', 'comment': '/** Creates a new instance which acts on the currently focused component. */', 'coherence': 1}, {'code': 'public boolean contains(Point2D.Double p) {return getOwner().contains(p);', 'comment': '/*** Tests if a point is contained in the connector.*/', 'coherence': 1}, {'code': 'public Exception getException(){return this.encapsulatedException;', 'comment': '/*** Returns the encapsulated exception, or null if no exception is* encapsulated.*/', 'coherence': 1}, {'code': 'public DeleteAction(JComponent target) {super(ID);this.target = target;if (target != null) {// Register with a weak reference on the JComponent.propertyHandler = new PropertyChangeListener() {@Overridepublic void propertyChange(PropertyChangeEvent evt) {if (evt.getPropertyName().equals("enabled")) {setEnabled((Boolean) evt.getNewValue());}}};target.addPropertyChangeListener(new WeakPropertyChangeListener(propertyHandler));}ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance which acts on the specified component.** @param target The target of the action. Specify null for the currently* focused component.*/', 'coherence': 1}, {'code': 'public AbstractConnector(Figure owner) {this.owner = owner;', 'comment': '/*** Constructs a connector with the given owner figure.*/', 'coherence': 1}, {'code': 'public void printStackTrace(PrintWriter writer){super.printStackTrace(writer);if (this.encapsulatedException != null) {writer.println("*** Nested Exception:");this.encapsulatedException.printStackTrace(writer);', 'comment': '/*** Dumps the exception stack to a print writer.** @param writer the print writer*/', 'coherence': 1}, {'code': 'protected Point2D.Double findPoint(ConnectionFigure connection) {return Geom.center(getBounds());', 'comment': '/*** Gets the connection point. Override when the connector* does not need to distinguish between the start and end* point of a connection.*/', 'coherence': 1}, {'code': 'protected void finalize()throws Throwable{this.systemID = null;this.encapsulatedException = null;super.finalize();', 'comment': "/*** Cleans up the object when it's destroyed.*/", 'coherence': 1}, {'code': 'public Figure getOwner() {return owner;', 'comment': "/*** Gets the connector's owner.*/", 'coherence': 1}, {'code': 'public XMLException(Exception e){this(null, -1, e, "Nested Exception", false);', 'comment': '/*** Creates a new exception.** @param e the encapsulated exception.*/', 'coherence': 1}, {'code': 'protected void setOwner(Figure newValue) {owner = newValue;', 'comment': "/*** Sets the connector's owner.*/", 'coherence': 1}, {'code': 'public void printStackTrace(){super.printStackTrace();if (this.encapsulatedException != null) {System.err.println("*** Nested Exception:");this.encapsulatedException.printStackTrace();', 'comment': '/*** Dumps the exception stack to System.err.*/', 'coherence': 1}, {'code': 'public AbstractConnector() {owner = null;', 'comment': '/*** Constructs a connector that has no owner. It is only* used internally to resurrect a connectors from a* StorableOutput. It should never be called directly.*/', 'coherence': 1}, {'code': 'public int getLineNr(){return this.lineNr;', 'comment': '/*** Returns the line number in the XML data where the exception occurred.* If there is no line number known, -1 is returned.*/', 'coherence': 1}, {'code': 'public CutAction() {this(null);', 'comment': '/** Creates a new instance which acts on the currently focused component. */', 'coherence': 1}, {'code': '@Override public boolean contains(Point2D.Double p) {return getBounds().contains(p);', 'comment': '/*** Tests if a point is contained in the connector.*/', 'coherence': 1}, {'code': 'public ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {this(editor, scaleFactor, button, true);', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'protected Point2D.Double chop(Figure target, Point2D.Double from) {target = getConnectorTarget(target);Rectangle2D.Double r = target.getBounds();if (target.get(DiamondFigure.IS_QUADRATIC)) {double side = Math.max(r.width, r.height);r.x -= (side - r.width) / 2;r.y -= (side - r.height) / 2;r.width = r.height = side;}double growx;double growy;// FIXME - This code is wrong. Copy correct code from DiamondFigure.switch (target.get(STROKE_PLACEMENT)) {case INSIDE : {growx = growy = 0f;break;}case OUTSIDE : {double lineLength = Math.sqrt(r.width * r.width + r.height * r.height);double scale = getStrokeTotalWidth(target) * 2d / lineLength;growx = scale * r.height;growy = scale * r.width;//growy = getStrokeTotalWidth() * SQRT2;break;}case CENTER :default :double lineLength = Math.sqrt(r.width * r.width + r.height * r.height);double scale = getStrokeTotalWidth(target) / lineLength;growx = scale * r.height;growy = scale * r.width;//growx = growy = getStrokeTotalWidth() / 2d * SQRT2;break;}Geom.grow(r, growx, growy);// Center pointPoint2D.Double c1 = new Point2D.Double(r.x + r.width/2, r.y + (r.height/2));Point2D.Double p2 = new Point2D.Double(r.x + r.width/2, r.y + r.height);Point2D.Double p4 = new Point2D.Double(r.x + r.width/2, r.y);// If overlapping, just return the opposite cornersif (r.contains(from)) {if (from.y > r.y && from.y < (r.y +r.height/2)) {return p2;} else {return p4;}}// Calculate angle to determine quadrantdouble ang = Geom.pointToAngle(r, from);// Dermine line pointsPoint2D.Double p1 = new Point2D.Double(r.x + r.width  , r.y + (r.height/2));Point2D.Double p3 = new Point2D.Double(r.x      , r.y + (r.height/2));Point2D.Double rp = null; // This will be returned// Get the intersection with edgesif (ang > 0 && ang < 1.57) {rp = Geom.intersect(p1.x, p1.y, p2.x, p2.y, c1.x, c1.y, from.x, from.y);} else if (ang > 1.575 && ang < 3.14) {rp = Geom.intersect(p2.x, p2.y, p3.x, p3.y, c1.x, c1.y, from.x, from.y);} else if (ang > -3.14 && ang < -1.575) {rp = Geom.intersect(p3.x, p3.y, p4.x, p4.y, c1.x, c1.y, from.x, from.y);} else if (ang > -1.57 && ang < 0) {rp = Geom.intersect(p4.x, p4.y, p1.x, p1.y, c1.x, c1.y, from.x, from.y);}// No proper edge found, we should send one of four cornersif (rp == null) {rp = Geom.angleToPoint(r, ang);}return rp;', 'comment': '/*** Return an appropriate connection point on the edge of a diamond figure*/', 'coherence': 1}, {'code': 'public static void configureJCheckBoxMenuItem(final JCheckBoxMenuItem mi, final Action a) {mi.setSelected((Boolean) a.getValue(ActionUtil.SELECTED_KEY));PropertyChangeListener propertyHandler = new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {if (evt.getPropertyName().equals(ActionUtil.SELECTED_KEY)) {mi.setSelected((Boolean) a.getValue(ActionUtil.SELECTED_KEY));}}};a.addPropertyChangeListener(propertyHandler);mi.putClientProperty("actionPropertyHandler", propertyHandler);', 'comment': '/*** Configures a JCheckBoxMenuItem for an Action.*/', 'coherence': 1}, {'code': 'public PrintApplicationFileAction(Application app) {super(app, null);putValue(Action.NAME, "OSX Print File");', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ExitAction(Application app) {super(app);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic void actionPerformed(ActionEvent evt) {final Application app = getApplication();final String filename = evt.getActionCommand();if (app.isEnabled()) {app.setEnabled(false);// Search for an empty viewView emptyView = app.getActiveView();if (emptyView == null|| emptyView.getURI() != null|| emptyView.hasUnsavedChanges()) {emptyView = null;}final View p;if (emptyView == null) {p = app.createView();app.add(p);app.show(p);} else {p = emptyView;}openView(p, new File(filename).toURI());', 'comment': '/*** Opens a new view.* <p>* The file name is passed in the action command of the action event.**/', 'coherence': 1}, {'code': 'public OpenApplicationFileAction(Application app) {super(app);putValue(Action.NAME, "OSX Open File");', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected void installViewListeners(View p) {p.addPropertyChangeListener(viewListener);', 'comment': '/*** Installs listeners on the view object.*/', 'coherence': 1}, {'code': '@Overridepublic boolean isEnabled() {return getActiveView() != null&& getActiveView().isEnabled()&& this.enabled;', 'comment': '/*** Returns true if the action is enabled.* The enabled state of the action depends on the state that has been set* using setEnabled() and on the enabled state of the application.** @return true if the action is enabled, false otherwise* @see Action#isEnabled*/', 'coherence': 1}, {'code': 'protected void updateView(View oldValue, View newValue) {// We only need to do this, if the view has not been explicitly setif (view == null) {if (oldValue != null) {uninstallViewListeners(oldValue);}if (newValue != null) {installViewListeners(newValue);}firePropertyChange(VIEW_PROPERTY, oldValue, newValue);updateEnabled(oldValue != null && oldValue.isEnabled(),newValue != null && newValue.isEnabled());updateView();', 'comment': '/*** Updates the listeners of this action depending on the current view* of the application.*/', 'coherence': 1}, {'code': 'protected void setPropertyName(String name) {this.propertyName = name;if (name != null) {updateView();', 'comment': '/*** Sets the property name.*/', 'coherence': 1}, {'code': 'protected String getPropertyName() {return propertyName;', 'comment': '/*** Gets the property name.*/', 'coherence': 1}, {'code': 'protected void uninstallViewListeners(View p) {p.removePropertyChangeListener(viewListener);', 'comment': '/*** Uninstalls listeners on the view object.*/', 'coherence': 1}, {'code': 'public AbstractViewAction(Application app, View view) {this.app = app;this.view = view;this.enabled = true;if (view == null) {app.addPropertyChangeListener(applicationListener);} else {view.addPropertyChangeListener(viewListener);}updateView(null, getActiveView());', 'comment': '/** Creates a new instance which acts on the specified view of the application. */', 'coherence': 1}, {'code': 'protected void updateEnabled(boolean oldValue, boolean newValue) {firePropertyChange("enabled", oldValue, newValue && isEnabled());', 'comment': '/*** Updates the enabled state of this action depending on the new enabled* state of the view.*/', 'coherence': 1}, {'code': 'public AboutAction(Application app) {super(app);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public AttributeChangeEdit(Figure owner, AttributeKey<T> name, T oldValue, T newValue) {this.owner = owner;this.name = name;this.oldValue = oldValue;this.newValue = newValue;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public CompositeFigureEdit(Figure figure, String presentationName) {super(presentationName);this.figure = figure;', 'comment': '/*** Creates new CompositeFigureEdit which uses the specified presentation name.** @see javax.swing.undo.CompoundEdit#getPresentationName()*/', 'coherence': 1}, {'code': 'public CompositeFigureEdit(Figure figure, boolean isSignificant) {super(isSignificant);this.figure = figure;', 'comment': '/*** Creates new CompositeFigureEdit which uses the specified significance.** @see javax.swing.undo.CompoundEdit#getPresentationName()*/', 'coherence': 1}, {'code': 'public CompositeFigureEdit(Figure figure) {this.figure = figure;', 'comment': '/*** Creates a new {@code CompositeFigureEdit} which uses* CompoundEdit.getPresentatioName and is significant.** @see javax.swing.undo.CompoundEdit#getPresentationName()*/', 'coherence': 1}, {'code': 'public ArrowTip(double angle, double outerRadius, double innerRadius) {this(angle, outerRadius, innerRadius, true, false, true);', 'comment': '/*** Constructs an arrow tip with the specified angle and outer and inner* radius.*/', 'coherence': 1}, {'code': 'public ArrowTip(double angle, double outerRadius, double innerRadius, boolean isFilled, boolean isStroked, boolean isSolid) {super(isFilled, isStroked, isSolid);this.angle = angle;this.outerRadius = outerRadius;this.innerRadius = innerRadius;', 'comment': '/*** Constructs an arrow tip with the specified parameters.*/', 'coherence': 1}, {'code': 'public AbstractLineDecoration(boolean isFilled, boolean isStroked, boolean isSolid) {this.isFilled = isFilled;this.isStroked = isStroked;this.isSolid = isSolid;', 'comment': '/*** Constructs an arrow tip with the given angle and radius.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {Path2D.Double path = getTransformedDecoratorPath(f, p1, p2);Color color;if (isFilled) {if (isSolid) {color = f.get(STROKE_COLOR);} else {color = f.get(FILL_COLOR);}if (color != null) {g.setColor(color);g.fill(path);}}if (isStroked) {color = f.get(STROKE_COLOR);if (color != null) {g.setColor(color);g.setStroke(AttributeKeys.getStroke(f));g.draw(path);', 'comment': '/*** Draws the arrow tip in the direction specified by the given two* Points. (template method)*/', 'coherence': 1}, {'code': 'public Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {Path2D.Double path = getTransformedDecoratorPath(f, p1, p2);Rectangle2D b = path.getBounds2D();Rectangle2D.Double area = new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight());if (isStroked) {double strokeWidth = f.get(STROKE_WIDTH);int strokeJoin = f.get(STROKE_JOIN);double miterLimit = (f.get(STROKE_MITER_LIMIT) * strokeWidth);double grow;if (strokeJoin == BasicStroke.JOIN_MITER) {grow  = (int) (1 + strokeWidth / 2 * miterLimit);} else {grow  = (int) (1 + strokeWidth / 2);}Geom.grow(area, grow, grow);} else {Geom.grow(area, 1, 1); // grow due to antialiasing}return area;', 'comment': '/*** Returns the drawing area of the decorator.*/', 'coherence': 1}, {'code': 'public PerpendicularBar() {this(10);', 'comment': '/*** Constructs a perpendicular line with a height of 10.*/', 'coherence': 1}, {'code': 'public PerpendicularBar(double height) {super(false, true, false);this.height = height;', 'comment': '/*** Constructs a perpendicular line with the given height.*/', 'coherence': 1}, {'code': 'protected Path2D.Double getDecoratorPath(Figure f) {Path2D.Double path = new Path2D.Double();double halfHeight = height / 2;path.moveTo(+halfHeight, 0);path.lineTo(-halfHeight, 0);return path;', 'comment': '/*** Calculates the path of the decorator...a simple line* perpendicular to the figure.*/', 'coherence': 1}, {'code': 'public CompositeLineDecoration(LineDecoration decoration1, LineDecoration decoration2) {addDecoration(decoration1);addDecoration(decoration2);', 'comment': '/*** Constructs a composite line decoration with the two supplied decorations.*/', 'coherence': 1}, {'code': 'public void addDecoration(LineDecoration decoration) {if (decoration != null) {decorations.add(decoration);', 'comment': '/*** Add another line decoration into the composite line decoration.* The new decoration will be appended to the existing decorations* and is also the last drawn.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {for (LineDecoration decoration : decorations) {decoration.draw(g, f, p1, p2);', 'comment': '/*** Draws the arrow tip in the direction specified by the given two* Points.. (template method)*/', 'coherence': 1}, {'code': 'public Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {Rectangle2D.Double r = null;for (LineDecoration decoration : decorations) {Rectangle2D.Double aR = decoration.getDrawingArea(f, p1, p2);if (r == null)r = aR;elser.add(aR);}return r;', 'comment': '/*** Returns the drawing area of the decorator.*/', 'coherence': 1}, {'code': 'public HandleMulticaster(Handle handle) {this.handles = new LinkedList<Handle>();this.handles.add(handle);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public Figure getFigure() {return (Figure) getSource();', 'comment': '/***  Gets the changed figure*/', 'coherence': 1}, {'code': 'public FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {super(source);this.attribute = attribute;this.oldValue = oldValue;this.newValue = newValue;', 'comment': '/*** Constructs an event for the given source Figure.*/', 'coherence': 1}, {'code': 'public FigureEvent(Figure source, Rectangle2D.Double invalidatedArea) {super(source);this.invalidatedArea = invalidatedArea;', 'comment': '/*** Constructs an event for the given source Figure.* @param invalidatedArea The bounds of the invalidated area on the drawing.*/', 'coherence': 1}, {'code': 'public HandleEvent(Handle src, Rectangle invalidatedArea) {super(src);this.invalidatedArea = invalidatedArea;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public CompositeFigureEvent(CompositeFigure source, Figure child, Rectangle2D.Double invalidatedArea, int zIndex) {super(source);this.child = child;this.invalidatedArea = invalidatedArea;this.index = 0;', 'comment': '/*** Constructs an event for the provided CompositeFigure.* @param source The composite figure.* @param child The changed figure.* @param invalidatedArea The bounds of the invalidated area on the drawing.*/', 'coherence': 1}, {'code': 'public Rectangle2D.Double getInvalidatedArea() {return invalidatedArea;', 'comment': '/***  Gets the bounds of the invalidated area on the drawing.*/', 'coherence': 1}, {'code': 'public Figure getChildFigure() {return child;', 'comment': '/***  Gets the changed child figure.*/', 'coherence': 1}, {'code': 'public CompositeFigure getCompositeFigure() {return (CompositeFigure) getSource();', 'comment': '/***  Gets the changed drawing.*/', 'coherence': 1}, {'code': 'public OpenFileAction(Application app) {super(app);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected JDialog createDialog(URIChooser chooser, Component parent) throws HeadlessException {String title = chooser.getDialogTitle();if (chooser instanceof JFileChooser) {((JFileChooser) chooser).getAccessibleContext().setAccessibleDescription(title);}JDialog dialog;Window window = (parent instanceof Window) ? (Window) parent : SwingUtilities.getWindowAncestor(parent);if (window instanceof Frame) {dialog = new JDialog((Frame) window, title, true);} else {dialog = new JDialog((Dialog) window, title, true);}dialog.setComponentOrientation(chooser.getComponent().getComponentOrientation());Container contentPane = dialog.getContentPane();contentPane.setLayout(new BorderLayout());contentPane.add(chooser.getComponent(), BorderLayout.CENTER);if (JDialog.isDefaultLookAndFeelDecorated()) {boolean supportsWindowDecorations =UIManager.getLookAndFeel().getSupportsWindowDecorations();if (supportsWindowDecorations) {dialog.getRootPane().setWindowDecorationStyle(JRootPane.FILE_CHOOSER_DIALOG);}}//dialog.pack();Preferences prefs = PreferencesUtil.userNodeForPackage(getApplication().getModel().getClass());PreferencesUtil.installFramePrefsHandler(prefs, "openChooser", dialog);/*if (window.getBounds().isEmpty()) {Rectangle screenBounds = window.getGraphicsConfiguration().getBounds();dialog.setLocation(screenBounds.x + (screenBounds.width - dialog.getWidth()) / 2, //screenBounds.y + (screenBounds.height - dialog.getHeight()) / 3);} else {dialog.setLocationRelativeTo(parent);}*/return dialog;', 'comment': '/** We implement JFileChooser.showDialog by ourselves, so that we can center* dialogs properly on screen on Mac OS X.*/', 'coherence': 1}, {'code': 'public int showDialog(URIChooser chooser, Component parent) {final Component finalParent = parent;final int[] returnValue = new int[1];final JDialog dialog = createDialog(chooser, finalParent);dialog.addWindowListener(new WindowAdapter() {@Overridepublic void windowClosing(WindowEvent e) {returnValue[0] = JFileChooser.CANCEL_OPTION;}});chooser.addActionListener(new ActionListener() {@Overridepublic void actionPerformed(ActionEvent e) {if (e.getActionCommand().equals("CancelSelection")) {returnValue[0] = JFileChooser.CANCEL_OPTION;dialog.setVisible(false);} else if (e.getActionCommand().equals("ApproveSelection")) {returnValue[0] = JFileChooser.APPROVE_OPTION;dialog.setVisible(false);}}});returnValue[0] = JFileChooser.ERROR_OPTION;chooser.rescanCurrentDirectory();dialog.setVisible(true);//chooser.firePropertyChange("JFileChooserDialogIsClosingProperty", dialog, null);dialog.removeAll();dialog.dispose();return returnValue[0];', 'comment': '/** We implement JFileChooser.showDialog by ourselves, so that we can center* dialogs properly on screen on Mac OS X.*/', 'coherence': 1}, {'code': 'public LoadFileAction(Application app, View view) {super(app, view);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ExportFileAction(Application app, View view) {super(app, view);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ClearRecentFilesMenuAction(Application app) {super(app);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);updateEnabled();', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Override protected void installApplicationListeners(Application app) {super.installApplicationListeners(app);if (applicationListener == null) {applicationListener = createApplicationListener();}app.addPropertyChangeListener(applicationListener);', 'comment': '/*** Installs listeners on the application object.*/', 'coherence': 1}, {'code': 'protected void fireHandleRequestRemove(Rectangle invalidatedArea) {HandleEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == HandleListener.class) {// Lazily create the event:if (event == null) {event = new HandleEvent(this, invalidatedArea);}((HandleListener) listeners[i + 1]).handleRequestRemove(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public void areaInvalidated(FigureEvent evt) {updateBounds();', 'comment': '/*** Sent when a region used by the figure needs to be repainted.* The implementation of this method assumes that the handle* is located on the bounds of the figure or inside the figure.* If the handle is located elsewhere this method must be reimpleted* by the subclass.*/', 'coherence': 1}, {'code': 'public void addHandleListener(HandleListener l) {listenerList.add(HandleListener.class, l);', 'comment': '/*** Adds a listener for this handle.*/', 'coherence': 1}, {'code': 'public void removeHandleListener(HandleListener l) {listenerList.remove(HandleListener.class, l);', 'comment': '/*** Removes a listener for this handle.*/', 'coherence': 1}, {'code': 'public AbstractHandle(Figure owner) {if (owner == null) {throw new IllegalArgumentException("owner must not be null");}this.owner = owner;owner.addFigureListener(this);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public Cursor getCursor() {return Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR);', 'comment': '/*** Returns a cursor for the handle.*/', 'coherence': 1}, {'code': 'public LoadRecentFileAction(Application app, View view, URI uri) {super(app, view);this.uri = uri;putValue(Action.NAME, URIUtil.getName(uri));', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected void fireHandleRequestSecondaryHandles() {HandleEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == HandleListener.class) {// Lazily create the event:if (event == null) {event = new HandleEvent(this, null);}((HandleListener) listeners[i + 1]).handleRequestSecondaryHandles(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public String getToolTipText(Point p) {return toolTipText;', 'comment': '/*** Returns a tooltip for the specified location.* By default, AbstractHandle returns null.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {drawCircle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.HANDLE_STROKE_COLOR));', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'protected void fireUndoableEditHappened(UndoableEdit edit) {view.getDrawing().fireUndoableEditHappened(edit);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public void figureChanged(FigureEvent evt) {updateBounds();', 'comment': '/*** Sent when the bounds or shape of a figure has changed.*/', 'coherence': 1}, {'code': 'protected void fireAreaInvalidated(Rectangle invalidatedArea) {HandleEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == HandleListener.class) {// Lazily create the event:if (event == null) {event = new HandleEvent(this, invalidatedArea);}((HandleListener) listeners[i + 1]).areaInvalidated(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public boolean isCombinableWith(Handle handle) {return getClass().isAssignableFrom(handle.getClass());', 'comment': '/*** Returns true, if the given handle is an instance of the same* class or of a subclass of this handle,.*/', 'coherence': 1}, {'code': 'public void trackStart(Point anchor, int modifiersEx) {savedTarget = getTarget();start = anchor;savedLiner = getOwner().getLiner();getOwner().setLiner(null);//disconnect();fireHandleRequestSecondaryHandles();', 'comment': '/*** Disconnects the connection.*/', 'coherence': 1}, {'code': 'protected Connector getSource() {if (getTarget() == getOwner().getStartConnector()) {return getOwner().getEndConnector();}return getOwner().getStartConnector();', 'comment': '/*** Gets the side of the connection that is unaffected by* the change.*/', 'coherence': 1}, {'code': 'public void trackStep(Point anchor, Point lead, int modifiersEx) {Point2D.Double p = view.viewToDrawing(lead);view.getConstrainer().constrainPoint(p);connectableFigure = findConnectableFigure(p, view.getDrawing());if (connectableFigure != null) {Connector aTarget = findConnectionTarget(p, view.getDrawing());if (aTarget != null) {p = aTarget.getAnchor();}}getOwner().willChange();setLocation(p);getOwner().changed();repaintConnectors();', 'comment': '/*** Finds a new connectableConnector of the connection.*/', 'coherence': 1}, {'code': '@Overridepublic void draw(Graphics2D g) {Graphics2D gg = (Graphics2D) g.create();gg.transform(view.getDrawingToViewTransform());for (Connector c : connectors) {c.draw(gg);}gg.dispose();if (getTarget() == null) {drawCircle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.DISCONNECTED_CONNECTION_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.DISCONNECTED_CONNECTION_HANDLE_STROKE_COLOR));} else {drawCircle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTION_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.CONNECTED_CONNECTION_HANDLE_STROKE_COLOR));', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public void trackEnd(Point anchor, Point lead, int modifiersEx) {ConnectionFigure f = getOwner();// Change node typeif ((modifiersEx & (InputEvent.META_DOWN_MASK | InputEvent.CTRL_DOWN_MASK | InputEvent.ALT_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK)) != 0 &&(modifiersEx & InputEvent.BUTTON2_DOWN_MASK) == 0) {f.willChange();int index = getBezierNodeIndex();BezierPath.Node v = f.getNode(index);if (index > 0 && index < f.getNodeCount()) {v.mask = (v.mask + 3) % 4;} else if (index == 0) {v.mask = ((v.mask & BezierPath.C2_MASK) == 0) ? BezierPath.C2_MASK : 0;} else {v.mask = ((v.mask & BezierPath.C1_MASK) == 0) ? BezierPath.C1_MASK : 0;}f.setNode(index, v);f.changed();fireHandleRequestSecondaryHandles();}Point2D.Double p = view.viewToDrawing(lead);view.getConstrainer().constrainPoint(p);Connector target = findConnectionTarget(p, view.getDrawing());if (target == null) {target = savedTarget;}setLocation(p);if (target != savedTarget) {disconnect();connect(target);}getOwner().setLiner(savedLiner);getOwner().updateConnection();connectableConnector = null;connectors = Collections.emptyList();', 'comment': '/*** Connects the figure to the new connectableConnector. If there is no* new connectableConnector the connection reverts to its original one.*/', 'coherence': 1}, {'code': 'public Tool getTool() {return (Tool) getSource();', 'comment': '/*** Gets the tool which is the source of the event.*/', 'coherence': 1}, {'code': 'public DrawingView getView() {return view;', 'comment': '/*** Gets the drawing view of the tool.*/', 'coherence': 1}, {'code': 'public ToolEvent(Tool src, DrawingView view, Rectangle invalidatedArea) {super(src);this.view = view;this.invalidatedArea = invalidatedArea;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {BezierFigure f = getBezierFigure();if (f.getNodeCount() > index) {BezierPath.Node v = f.getNode(index);Point2D.Double p0 = new Point2D.Double(v.x[0], v.y[0]);Point2D.Double pc = new Point2D.Double(v.x[controlPointIndex], v.y[controlPointIndex]);Figure tOwner = getTransformOwner();if (tOwner.get(TRANSFORM) != null) {tOwner.get(TRANSFORM).transform(p0, p0);tOwner.get(TRANSFORM).transform(pc, pc);}Color handleFillColor;Color handleStrokeColor;Stroke stroke1;Color strokeColor1;Stroke stroke2;Color strokeColor2;if (getEditor().getTool().supportsHandleInteraction()) {handleFillColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR);handleStrokeColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR);stroke1 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1);strokeColor1 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1);stroke2 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2);strokeColor2 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2);} else {handleFillColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED);handleStrokeColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED);stroke1 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1_DISABLED);strokeColor1 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1_DISABLED);stroke2 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2_DISABLED);strokeColor2 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2_DISABLED);}if (stroke1 != null && strokeColor1 != null) {g.setStroke(stroke1);g.setColor(strokeColor1);g.draw(new Line2D.Double(view.drawingToView(p0),view.drawingToView(pc)));}if (stroke2 != null && strokeColor2 != null) {g.setStroke(stroke2);g.setColor(strokeColor2);g.draw(new Line2D.Double(view.drawingToView(p0),view.drawingToView(pc)));}if (v.keepColinear && v.mask == BezierPath.C1C2_MASK &&(index > 0 && index < f.getNodeCount() - 1 || f.isClosed())) {drawCircle(g, handleStrokeColor, handleFillColor);} else {drawCircle(g, handleFillColor, handleStrokeColor);', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public BezierControlPointHandle(BezierFigure owner, int index, int coord) {this(owner, index, coord, owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public AbstractRotateHandle(Figure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ColorWheelImageProducer(ColorSystem sys, int w, int h) {super(w, h, null, 0, w);pixels = new int[w * h];this.w = w;this.h = h;this.colorSystem = sys;setAnimated(true);newPixels(pixels, ColorModel.getRGBdefault(), 0, w);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DefaultBoundedRangeModel getBoundedRangeModel(int componentIndex) {return componentModels[componentIndex];', 'comment': '/*** Returns the bounded range model of the specified color componentIndex.*/', 'coherence': 1}, {'code': 'public void unconfigureSlider(JSlider slider) {if (slider.getClientProperty("colorSliderModel") == this) {// XXX - This creates a NullPointerException ??//slider.setUI((SliderUI) UIManager.getUI(slider));slider.setModel(new DefaultBoundedRangeModel());slider.putClientProperty("colorSliderModel", null);slider.putClientProperty("colorComponentIndex", null);removeColorSlider(slider);', 'comment': '/*** Unconfigures a JSlider from this AbstractColorSystem.*/', 'coherence': 1}, {'code': 'public int getSliderValue(int componentIndex) {return componentModels[componentIndex].getValue();', 'comment': '/*** Returns the value of the specified color componentIndex.*/', 'coherence': 1}, {'code': 'public void configureSlider(int componentIndex, JSlider slider) {if (slider.getClientProperty("colorSliderModel") != null) {((DefaultColorSliderModel) slider.getClientProperty("colorSliderModel")).unconfigureSlider(slider);}if (!(slider.getUI() instanceof ColorSliderUI)) {slider.setUI((ColorSliderUI) ColorSliderUI.createUI(slider));}slider.setModel(getBoundedRangeModel(componentIndex));slider.putClientProperty("colorSliderModel", this);slider.putClientProperty("colorComponentIndex", new Integer(componentIndex));addColorSlider(slider);', 'comment': '/*** Configures a JSlider for this AbstractColorSystem.* If the JSlider is already configured for another AbstractColorSystem,* it is unconfigured first.*/', 'coherence': 1}, {'code': 'public SaveFileAction(Application app, View view) {this(app, view, false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void printQuartz(PrintableView v) {Frame frame = (Frame) SwingUtilities.getWindowAncestor(v.getComponent());final Pageable pageable = v.createPageable();final double resolution = 300d;JobAttributes jobAttr = new JobAttributes();// FIXME - PageAttributes should be retrieved from ViewPageAttributes pageAttr = new PageAttributes();pageAttr.setMedia(PageAttributes.MediaType.A4);pageAttr.setPrinterResolution((int) resolution);final PrintJob pj = frame.getToolkit().getPrintJob(frame,"Job Title",jobAttr,pageAttr);getActiveView().setEnabled(false);new Worker() {protected Object construct() throws PrinterException {// Compute page format from settings of the print jobPaper paper = new Paper();paper.setSize(pj.getPageDimension().width / resolution * 72d,pj.getPageDimension().height / resolution * 72d);paper.setImageableArea(64d, 32d, paper.getWidth() - 96d, paper.getHeight() - 64);PageFormat pageFormat = new PageFormat();pageFormat.setPaper(paper);// Print the jobtry {for (int i = 0,  n = pageable.getNumberOfPages(); i < n; i++) {PageFormat pf = pageable.getPageFormat(i);pf = pageFormat;Graphics g = pj.getGraphics();if (g instanceof Graphics2D) {pageable.getPrintable(i).print(g, pf, i);} else {BufferedImage buf = new BufferedImage((int) (pf.getImageableWidth() * resolution / 72d),(int) (pf.getImageableHeight() * resolution / 72d),BufferedImage.TYPE_INT_RGB);Graphics2D bufG = buf.createGraphics();bufG.setBackground(Color.WHITE);bufG.fillRect(0, 0, buf.getWidth(), buf.getHeight());bufG.scale(resolution / 72d, resolution / 72d);bufG.translate(-pf.getImageableX(), -pf.getImageableY());pageable.getPrintable(i).print(bufG, pf, i);bufG.dispose();g.drawImage(buf,(int) (pf.getImageableX() * resolution / 72d),(int) (pf.getImageableY() * resolution / 72d),null);buf.flush();}g.dispose();}} finally {pj.end();}return null;}protected void failed(Throwable error) {error.printStackTrace();}protected void finished() {getActiveView().setEnabled(true);}}.start();', 'comment': '/*** On Mac OS X with the Quartz rendering engine, the following code achieves* the best results.*/', 'coherence': 1}, {'code': 'public void printJava2D(PrintableView v) {Pageable pageable = v.createPageable();if (pageable == null) {throw new InternalError("View does not have a method named java.awt.Pageable createPageable()");}try {PrinterJob job = PrinterJob.getPrinterJob();// FIXME - PrintRequestAttributeSet should be retrieved from ViewPrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();attr.add(new PrinterResolution(300, 300, PrinterResolution.DPI));job.setPageable(pageable);if (job.printDialog()) {try {job.print();} catch (PrinterException e) {String message = (e.getMessage() == null) ? e.toString() : e.getMessage();View view = getActiveView();ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");JSheet.showMessageSheet(view.getComponent(),"<html>" + UIManager.getString("OptionPane.css") +"<b>" + labels.getString("couldntPrint") + "</b><br>" +((message == null) ? "" : message));}} else {System.out.println("JOB ABORTED!");}} catch (Throwable t) {t.printStackTrace();', 'comment': '/** This prints at 72 DPI only. We might need this for some JVM versions on* Mac OS X.*/', 'coherence': 1}, {'code': 'public void printJava2DAlternative(PrintableView v) {Pageable pageable = v.createPageable();if (pageable == null) {throw new InternalError("View does not have a method named java.awt.Pageable createPageable()");}try {final PrinterJob job = PrinterJob.getPrinterJob();PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();attr.add(new PrinterResolution(300, 300, PrinterResolution.DPI));job.setPageable(pageable);if (job.printDialog(attr)) {try {job.print();} catch (PrinterException e) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");JSheet.showMessageSheet(getActiveView().getComponent(),labels.getFormatted("couldntPrint", e));}} else {System.out.println("JOB ABORTED!");}} catch (Throwable t) {t.printStackTrace();', 'comment': '/** This prints at 72 DPI only. We might need this for some JVM versions on* Mac OS X.*/', 'coherence': 1}, {'code': 'public PrintFileAction(Application app, View view) {super(app, view);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ViewPropertyAction(Application app, View view, String propertyName, Object propertyValue) {this(app, view, propertyName, propertyValue.getClass(), propertyValue);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public FocusWindowAction(View view) {this.view = view;ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");labels.configureAction(this, ID);//setEnabled(false);setEnabled(view != null);view.addPropertyChangeListener(ppc = new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");String name = evt.getPropertyName();if (name.equals(View.TITLE_PROPERTY)) {putValue(Action.NAME,evt.getNewValue()', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public OpenRecentFileAction(Application app, URI uri) {super(app);this.uri = uri;putValue(Action.NAME, URIUtil.getName(uri));', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ToggleViewPropertyAction(Application app, View view, String propertyName) {this(app, view, propertyName, Boolean.TYPE, true, false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public <T> T get(AttributeKey<T> key) {return key.get(attributes);', 'comment': '/*** Gets an attribute from the figure.*/', 'coherence': 1}, {'code': 'public <T> void set(AttributeKey<T> key, T newValue) {if (forbiddenAttributes == null|| ! forbiddenAttributes.contains(key)) {T oldValue = (T) key.put(attributes, newValue);fireAttributeChanged(key, oldValue, newValue);', 'comment': '/*** Sets an attribute of the figure.* AttributeKey name and semantics are defined by the class implementing* the figure interface.*/', 'coherence': 1}, {'code': '@Overridepublic <T> T get(AttributeKey<T> key) {return key.get(attributes);', 'comment': '/*** Gets an attribute from the figure.*/', 'coherence': 1}, {'code': '@Overridepublic <T> void set(AttributeKey<T> key, T newValue) {if (forbiddenAttributes == null || !forbiddenAttributes.contains(key)) {Object oldValue = attributes.put(key, newValue);setAttributeOnChildren(key, newValue);fireAttributeChanged(key, oldValue, newValue);', 'comment': '/*** Sets an attribute of the figure.* AttributeKey name and semantics are defined by the class implementing* the figure interface.*/', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {for (Figure f : getChildren()) {f.transform(tx);}invalidate();', 'comment': '/*** Transforms the figure.*/', 'coherence': 1}, {'code': 'public Layouter getLayouter() {return layouter;', 'comment': '/*** Get a Layouter object which encapsulated a layout* algorithm for this figure. Typically, a Layouter* accesses the child components of this figure and arranges* their graphical presentation.*** @return layout strategy used by this figure*/', 'coherence': 1}, {'code': 'protected void fireFigureRemoved(Figure f, int zIndex) {CompositeFigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == CompositeFigureListener.class) {// Lazily create the event:if (event == null) {event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);}((CompositeFigureListener) listeners[i + 1]).figureRemoved(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public synchronized void bringToFront(Figure figure) {if (basicRemove(figure) != -1) {basicAdd(figure);fireAreaInvalidated(figure.getDrawingArea());', 'comment': '/*** Brings a figure to the front of the drawing.** @param figure that is part of the drawing*/', 'coherence': 1}, {'code': 'protected void fireFigureAdded(Figure f, int zIndex) {CompositeFigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == CompositeFigureListener.class) {// Lazily create the event:if (event == null) {event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);}((CompositeFigureListener) listeners[i + 1]).figureAdded(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public void setLayouter(Layouter newLayouter) {this.layouter = newLayouter;', 'comment': '/*** Set a Layouter object which encapsulated a layout* algorithm for this figure. Typically, a Layouter* accesses the child components of this figure and arranges* their graphical presentation. It is a good idea to set* the Layouter in the protected initialize() method* so it can be recreated if a GraphicalCompositeFigure is* read and restored from a StorableInput stream.*** @param newLayouter  encapsulation of a layout algorithm.*/', 'coherence': 1}, {'code': 'public void removeAll(Collection<? extends Figure> figures) {for (Figure f : figures) {remove(f);', 'comment': '/*** Removes all specified children.** @see #add*/', 'coherence': 1}, {'code': 'public synchronized void sendToBack(Figure figure) {if (basicRemove(figure) != -1) {basicAdd(0, figure);fireAreaInvalidated(figure.getDrawingArea());', 'comment': '/*** Sends a figure to the back of the composite figure.** @param figure that is part of this composite figure*/', 'coherence': 1}, {'code': 'public void basicRemoveAllChildren() {for (Figure f : new LinkedList<Figure>(getChildren())) {basicRemove(f);', 'comment': '/*** Removes all children.** @see #add*/', 'coherence': 1}, {'code': 'public void removeAllChildren() {willChange();for (Figure f : new LinkedList<Figure>(getChildren())) {if (getDrawing() != null) {f.removeNotify(getDrawing());}int index = basicRemove(f);}changed();', 'comment': '/*** Removes all children.** @see #add*/', 'coherence': 1}, {'code': 'public java.util.List<Figure> getChildrenFrontToBack() {return children.size() == 0 ? new LinkedList<Figure>() : new ReversedList<Figure>(getChildren());', 'comment': '/*** Returns an iterator to iterate in* Z-order front to back over the children.*/', 'coherence': 1}, {'code': 'public void basicRemoveAll(Collection<? extends Figure> figures) {for (Figure f : figures) {basicRemove(f);', 'comment': '/*** Removes all children.** @see #add*/', 'coherence': 1}, {'code': 'public JColorWheel() {this(new HSVRGBColorSystem());', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public JHarmonicColorWheel() {super(new HSLRYBColorSystem());initComponents();setRadialComponentIndex(2);setVerticalComponentIndex(1);getModel().setComponentValue(1, 1f);setWheelInsets(new Insets(5, 5, 5, 5));modelHandler = new ModelHandler();DefaultHarmonicColorModel p = new DefaultHarmonicColorModel();setHarmonicColorModel(p);setToolTipText("");', 'comment': '/** Creates new form. */', 'coherence': 1}, {'code': '@Overridepublic void draw(Graphics2D g) {BezierFigure f = getOwner();int size = f.getNodeCount();boolean isClosed = f.isClosed();Color fillColor;Color strokeColor;if (getEditor().getTool().supportsHandleInteraction()) {fillColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_FILL_COLOR);strokeColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_STROKE_COLOR);} else {fillColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_FILL_COLOR_DISABLED);strokeColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_STROKE_COLOR_DISABLED);}if (size > index) {BezierPath.Node v = f.getNode(index);if (v.mask == 0 ||index == 0 && v.mask == BezierPath.C1_MASK && !isClosed ||index == size - 1 && v.mask == BezierPath.C2_MASK && !isClosed) {drawRectangle(g, fillColor, strokeColor);} else if (v.mask == BezierPath.C1_MASK ||v.mask == BezierPath.C2_MASK ||index == 0 && !isClosed ||index == size - 1 && !isClosed) {drawDiamond(g, fillColor, strokeColor);} else {drawCircle(g, fillColor, strokeColor);', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public BezierNodeHandle(BezierFigure owner, int index) {this(owner, index, owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ConnectorHandle(Connector connector, ConnectionFigure prototype) {super(connector.getOwner());this.connector = connector;this.prototype = prototype;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected ConnectionFigure createConnection() {return (ConnectionFigure) prototype.clone();', 'comment': '/*** Creates the ConnectionFigure. By default the figure prototype is* cloned.*/', 'coherence': 1}, {'code': 'protected Connector findConnectableConnector(Figure connectableFigure, Point2D.Double p) {Connector target = (connectableFigure == null) ? null : connectableFigure.findConnector(p, getConnection());if ((connectableFigure != null) && connectableFigure.isConnectable() && !connectableFigure.includes(getOwner()) && getConnection().canConnect(connector, target)) {return target;}return null;', 'comment': '/*** Finds a connection end figure.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {drawRectangle(g, (pressed) ? Color.orange : Color.white, Color.black);Rectangle r = getBounds();g.drawLine(r.x, r.y, r.x+r.width, r.y+r.height);g.drawLine(r.x+r.width, r.y, r.x, r.y+r.height);', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public CloseHandle(Figure owner) {this(owner, new RelativeLocator(1.0, 0.0));', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public CloseHandle(Figure owner, Locator locator) {super(owner, locator);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public FontSizeHandle(TextHolderFigure owner) {super(owner, new FontSizeLocator());', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {drawCircle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_STROKE_COLOR)', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public BezierScaleHandle(BezierFigure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DragHandle(Figure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected void setLocation(Point2D.Double p) {getOwner().willChange();getOwner().setEndPoint(p);getOwner().changed();', 'comment': '/*** Sets the start point of the connection.*/', 'coherence': 1}, {'code': 'protected void disconnect() {getOwner().setEndConnector(null);', 'comment': '/*** Disconnects the start figure.*/', 'coherence': 1}, {'code': 'public ConnectionEndHandle(ConnectionFigure owner) {super(owner);', 'comment': '/*** Constructs the connection handle for the given start figure.*/', 'coherence': 1}, {'code': 'protected void connect(Connector c) {getOwner().setEndConnector(c);', 'comment': '/*** Sets the start of the connection.*/', 'coherence': 1}, {'code': 'public BoundsOutlineHandle(Figure owner, boolean isTransformHandle, boolean isHoverHandle) {super(owner);if (isTransformHandle) {if (isHoverHandle) {stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;} else {stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;}stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;} else {if (isHoverHandle) {stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;} else {stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;}stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;', 'comment': '/*** Creates a bounds outline handle for resizing or transforming a component.** @param owner*/', 'coherence': 1}, {'code': 'public BoundsOutlineHandle(Figure owner, //AttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled,//AttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled,//AttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled,//AttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {super(owner);this.stroke1Enabled = stroke1Enabled;this.strokeColor1Enabled = strokeColor1Enabled;this.stroke2Enabled = stroke2Enabled;this.strokeColor2Enabled = strokeColor2Enabled;this.stroke1Disabled = stroke1Disabled;this.strokeColor1Disabled = strokeColor1Disabled;this.stroke2Disabled = stroke2Disabled;this.strokeColor2Disabled = strokeColor2Disabled;', 'comment': '/*** Creates a bounds outline handle for resizing or transforming a component.** @param owner*/', 'coherence': 1}, {'code': 'public BoundsOutlineHandle(Figure owner) {this(owner, false, false);', 'comment': '/*** Creates a bounds outline handle for resizing a component.** @param owner*/', 'coherence': 1}, {'code': 'protected void disconnect() {getOwner().setStartConnector(null);', 'comment': '/*** Disconnects the start figure.*/', 'coherence': 1}, {'code': 'protected void setLocation(Point2D.Double p) {getOwner().willChange();getOwner().setStartPoint(p);getOwner().changed();', 'comment': '/*** Sets the start point of the connection.*/', 'coherence': 1}, {'code': 'protected void removeFromSource(PropertyChangeEvent event) {// Remove ourselves from the sourceObject src = event.getSource();try {src.getClass().getMethod("removePropertyChangeListener", new Class[] {PropertyChangeListener.class}).invoke(src, this);} catch (Exception ex) {InternalError ie = new InternalError("Could not remove WeakPropertyChangeListener from "+src+".");ie.initCause(ex);throw ie;', 'comment': '/***  Method that can be subclassed to provide additional remove*  support.  Default implementation only supports StandardBeans.*/', 'coherence': 1}, {'code': 'protected void connect(Connector c) {getOwner().setStartConnector(c);', 'comment': '/*** Sets the start of the connection.*/', 'coherence': 1}, {'code': 'public ConnectionStartHandle(ConnectionFigure owner) {super(owner);', 'comment': '/*** Constructs the connection handle for the given start figure.*/', 'coherence': 1}, {'code': 'public static void setOpenFileHandler(ActionListener fileHandler) {setHandler(new OSXAdapter("handleOpenFile", fileHandler) {// Override OSXAdapter.callTarget to send information on the// file to be opened@Overridepublic boolean callTarget(Object appleEvent) {if (appleEvent != null) {try {Method getFilenameMethod = appleEvent.getClass().getDeclaredMethod("getFilename", (Class[]) null);String filename = (String) getFilenameMethod.invoke(appleEvent, (Object[]) null);targetAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, filename));} catch (Exception ex) {}}return true;', 'comment': "/*** Pass this method an {@code ActionListener} equipped to* handle document events from the Finder.* Documents are registered with the Finder via the* CFBundleDocumentTypes dictionary in the application bundle's Info.plist.* <p>* The filename is passed as the {@code actionCommand}.*/", 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public static void setHandler(OSXAdapter adapter) {try {Class applicationClass = Class.forName("com.apple.eawt.Application");if (macOSXApplication == null) {macOSXApplication = applicationClass.getConstructor((Class[]) null).newInstance((Object[]) null);}Class applicationListenerClass = Class.forName("com.apple.eawt.ApplicationListener");Method addListenerMethod = applicationClass.getDeclaredMethod("addApplicationListener", new Class[]{applicationListenerClass});// Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListenerObject osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[]{applicationListenerClass}, adapter);addListenerMethod.invoke(macOSXApplication, new Object[]{osxAdapterProxy});} catch (ClassNotFoundException cnfe) {System.err.println("This version of Mac OS X does not support the Apple EAWT.  ApplicationEvent handling has been disabled (" + cnfe + ")");} catch (Exception ex) {  // Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application methodsSystem.err.println("Mac OS X Adapter could not talk to EAWT:");ex.printStackTrace();', 'comment': '/*** {@code setHandler} creates a Proxy object from the passed* {@code OSXAdapter} and adds it as an {@code ApplicationListener}.*/', 'coherence': 1}, {'code': 'public boolean callTarget(Object appleEvent) throws InvocationTargetException, IllegalAccessException {if (targetAction != null) {targetAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, proxySignature));return true;} else {Object result = targetMethod.invoke(targetObject, (Object[]) null);if (result == null) {return true;}return Boolean.valueOf(result.toString()).booleanValue();', 'comment': '/** Override this method to perform any operations on the event* that comes with the various callbacks.* See setOpenFileHandler above for an example.*/', 'coherence': 1}, {'code': 'public static void setAboutHandler(ActionListener aboutHandler) {boolean enableAboutMenu = (aboutHandler != null);if (enableAboutMenu) {setHandler(new OSXAdapter("handleAbout", aboutHandler));}// If we\'re setting a handler, enable the About menu item by calling// com.apple.eawt.Application reflectivelytry {Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[]{boolean.class});enableAboutMethod.invoke(macOSXApplication, new Object[]{Boolean.valueOf(enableAboutMenu)});} catch (Exception ex) {System.err.println("OSXAdapter could not access the About Menu");ex.printStackTrace();', 'comment': '/*** The action listener will be called when the user selects the About item* in the application menu.*/', 'coherence': 1}, {'code': 'public static void setPreferencesHandler(ActionListener prefsHandler) {boolean enablePrefsMenu = (prefsHandler != null);if (enablePrefsMenu) {setHandler(new OSXAdapter("handlePreferences", prefsHandler));}// If we\'re setting a handler, enable the Preferences menu item by calling// com.apple.eawt.Application reflectivelytry {Method enablePrefsMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledPreferencesMenu", new Class[]{boolean.class});enablePrefsMethod.invoke(macOSXApplication, new Object[]{Boolean.valueOf(enablePrefsMenu)});} catch (Exception ex) {System.err.println("OSXAdapter could not access the Preferences Menu");ex.printStackTrace();', 'comment': '/*** Pass this method an {@code ActionListener} equipped to* display application options.* They will be called when the Preferences menu item is selected from the* application menu.*/', 'coherence': 1}, {'code': 'protected boolean isCorrectMethod(Method method, Object[] args) {return (proxySignature.equals(method.getName()) && args.length == 1);', 'comment': '/*** Compare the method that was called to the intended method when the* OSXAdapter instance was created (e.g. handleAbout, handleQuit,* handleOpenFile, etc.).*/', 'coherence': 1}, {'code': 'public static void setReOpenApplicationHandler(ActionListener reopenHandler) {setHandler(new OSXAdapter("handleReOpenApplication", reopenHandler));', 'comment': '/*** Called when the application receives a Reopen Application event from the* Finder or another application. Usually this will come when a user clicks* on your application icon in the Dock. If there is any special code that* needs to run when your user clicks on your application icon in the Dock* or when a Reopen Application event is sent from another application,* include that code as part of this handler.*/', 'coherence': 1}, {'code': 'public static void setQuitHandler(ActionListener aboutHandler) {setHandler(new OSXAdapter("handleQuit", aboutHandler) {// Override OSXAdapter.callTarget to always return false.@Overridepublic boolean callTarget(Object appleEvent)  throws InvocationTargetException, IllegalAccessException {super.callTarget(appleEvent);return false;', 'comment': '/*** The action listener will be called when the Quit menu item is selected* from the application menu.*/', 'coherence': 1}, {'code': 'protected OSXAdapter(String proxySignature, Object target, Method handler) {this.proxySignature = proxySignature;this.targetObject = target;this.targetMethod = handler;', 'comment': '/*** Each OSXAdapter has the name of the EAWT method it intends to listen for* (handleAbout, for example), the Object that will ultimately perform the* task, and the Method to be called on that Object.*/', 'coherence': 1}, {'code': 'protected void setApplicationEventHandled(Object event, boolean handled) {if (event != null) {try {Method setHandledMethod = event.getClass().getDeclaredMethod("setHandled", new Class[]{boolean.class});// If the target method returns a boolean, use that as a hintsetHandledMethod.invoke(event, new Object[]{Boolean.valueOf(handled)});} catch (Exception ex) {System.err.println("OSXAdapter was unable to handle an ApplicationEvent: " + event);ex.printStackTrace();', 'comment': '/*** It is important to mark the ApplicationEvent as handled and cancel the* default behavior.* This method checks for a boolean result from the proxy method and sets* the event accordingly.*/', 'coherence': 1}, {'code': 'public static void setPrintFileHandler(ActionListener fileHandler) {setHandler(new OSXAdapter("handlePrintFile", fileHandler) {// Override OSXAdapter.callTarget to send information on the// file to be opened@Overridepublic boolean callTarget(Object appleEvent) {if (appleEvent != null) {try {Method getFilenameMethod = appleEvent.getClass().getDeclaredMethod("getFilename", (Class[]) null);String filename = (String) getFilenameMethod.invoke(appleEvent, (Object[]) null);targetAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, filename));} catch (Exception ex) {}}return true;', 'comment': "/*** Pass this method an {@code ActionListener} equipped to* handle document events from the Finder.* Documents are registered with the Finder via the* CFBundleDocumentTypes dictionary in the application bundle's Info.plist.* <p>* The filename is passed as the {@code actionCommand}.*/", 'coherence': 1}, {'code': 'public static void setOpenApplicationHandler(ActionListener openHandler) {setHandler(new OSXAdapter("handleOpenApplication", openHandler));', 'comment': '/*** The action listener will be called when the application receives an Open* Application event from the Finder or another application. Usually this* will come from the Finder when a user double-clicks your application* icon. If there is any special code that you want to run when you user* launches your application from the Finder or by sending an Open* Application event from another application, include that code as part of* this handler. The Open Application event is sent after AWT has been loaded.*/', 'coherence': 1}, {'code': 'protected OSXAdapter(String proxySignature, ActionListener handler) {this.proxySignature = proxySignature;this.targetAction = handler;', 'comment': '/*** Each OSXAdapter has the name of the EAWT method it intends to listen for* (handleAbout, for example), the Object that will ultimately perform the* task, and the Method to be called on that Object.*/', 'coherence': 1}, {'code': '@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {if (isCorrectMethod(method, args)) {boolean handled = callTarget(args[0]);setApplicationEventHandled(args[0], handled);}// All of the ApplicationListener methods are void;// return null regardless of what happensreturn null;', 'comment': '/*** InvocationHandler implementation.* This is the entry point for our proxy object; it is called every time an* ApplicationListener method is invoked.*/', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, int oldValue, int newValue) {this(source, propertyName, Integer.TYPE, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': '@Overridepublic boolean addEdit(UndoableEdit anEdit) {if (anEdit instanceof PropertyChangeEdit) {PropertyChangeEdit that = (PropertyChangeEdit) anEdit;if (that.source == this.source && that.propertyName.equals(this.propertyName)) {this.newValue = that.newValue;return true;}}return false;', 'comment': '/** Adds the specified edit to this one, if it is a {@code PropertyChangeEdit}* from the same owner and the same property.** @param anEdit Edit to be added.* @return True if added.*/', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, char oldValue, char newValue) {this(source, propertyName, Character.TYPE, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, float oldValue, float newValue) {this(source, propertyName, Float.TYPE, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, boolean oldValue, boolean newValue) {this(source, propertyName, Boolean.TYPE, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': '@Overridepublic void undo() throws CannotRedoException {super.undo();try {getSetter().invoke(source, oldValue);} catch (Exception e) {InternalError ie = new InternalError("Couldn\'t invoke setter for property \\"" + propertyName + "\\" in " + source);ie.initCause(e);throw ie;', 'comment': '/** Undoes the change. */', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, long oldValue, long newValue) {this(source, propertyName, Long.TYPE, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': '@Overridepublic void redo() throws CannotRedoException {super.redo();try {getSetter().invoke(source, newValue);} catch (Exception e) {InternalError ie = new InternalError("Couldn\'t invoke setter for property \\"" + propertyName + "\\" in " + source);ie.initCause(e);throw ie;', 'comment': '/** Redoes the change. */', 'coherence': 1}, {'code': 'protected Method getSetter() {try {return source.getClass().getMethod("set" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1), type);} catch (Exception e) {InternalError ie = new InternalError("Couldn\'t find setter for property \\"" + propertyName + "\\" in " + source);ie.initCause(e);throw ie;', 'comment': '/*** Returns the setter for the property.** @return the setter method.*/', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, double oldValue, double newValue) {this(source, propertyName, Double.TYPE, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': '@Overridepublic String getPresentationName() {return presentationName;', 'comment': '/** Returns the presentation name of the undoable edit.* This is the same as the property name, unless you have set a different* presentation name.*/', 'coherence': 1}, {'code': 'public void setPresentationName(String presentationName) {this.presentationName = presentationName;', 'comment': '/** Sets the presentation name of the undoable edit.*/', 'coherence': 1}, {'code': 'public PropertyChangeEdit(Object source, String propertyName, String oldValue, String newValue) {this(source, propertyName, String.class, oldValue, newValue);', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': 'public <T> PropertyChangeEdit(Object source, String propertyName, Class<T> type, T oldValue, T newValue) {this.source = source;this.propertyName = this.presentationName = propertyName;this.type = type;this.oldValue = oldValue;this.newValue = newValue;', 'comment': '/** Creates a new PropertyChangeEdit. */', 'coherence': 1}, {'code': 'public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {// Removes a property change listener from our list.// We need a somewhat complex procedure here in case a listener// has been registered using addPropertyChangeListener(propertyName, new WeakPropertyChangeListener(listener));for (PropertyChangeListener l : propertySupport.getPropertyChangeListeners(propertyName)) {if (l == listener) {propertySupport.removePropertyChangeListener(propertyName, l);break;}if (l instanceof WeakPropertyChangeListener) {WeakPropertyChangeListener wl = (WeakPropertyChangeListener) l;PropertyChangeListener target = wl.getTarget();if (target == listener) {propertySupport.removePropertyChangeListener(propertyName, l);break;', 'comment': '/** Removes a {@code PropertyChangeListener}. If the listener was added* wrapped into a {@code WeakPropertyChangeListener}, the* {@code WeakPropertyChangeListener} is removed.** @param listener*/', 'coherence': 1}, {'code': 'public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {propertySupport.addPropertyChangeListener(propertyName, listener);', 'comment': '/** Adds a {@code PropertyChangeListener} which can optionally be wrapped* into a {@code WeakPropertyChangeListener}.* @param listener*/', 'coherence': 1}, {'code': 'public void addPropertyChangeListener(PropertyChangeListener listener) {propertySupport.addPropertyChangeListener(listener);', 'comment': '/** Adds a {@code PropertyChangeListener} which can optionally be wrapped* into a {@code WeakPropertyChangeListener}.* @param listener*/', 'coherence': 1}, {'code': 'public void removePropertyChangeListener(PropertyChangeListener listener) {// Removes a property change listener from our list.// We need a somewhat complex procedure here in case a listener// has been registered using addPropertyChangeListener(new WeakPropertyChangeListener(listener));for (PropertyChangeListener l : propertySupport.getPropertyChangeListeners()) {if (l == listener) {propertySupport.removePropertyChangeListener(l);break;}if (l instanceof WeakPropertyChangeListener) {WeakPropertyChangeListener wl = (WeakPropertyChangeListener) l;PropertyChangeListener target = wl.getTarget();if (target == listener) {propertySupport.removePropertyChangeListener(l);break;', 'comment': '/** Removes a {@code PropertyChangeListener}. If the listener was added* wrapped into a {@code WeakPropertyChangeListener}, the* {@code WeakPropertyChangeListener} is removed.** @param listener*/', 'coherence': 1}, {'code': 'static public void addEdgeResizeHandles(Figure f, Collection<Handle> handles) {handles.add(south(f));handles.add(north(f));handles.add(east(f));handles.add(west(f));', 'comment': '/*** Fills the given Vector with handles at each* the north, south, east, and west of the figure.*/', 'coherence': 1}, {'code': 'static public void addCornerResizeHandles(Figure f, Collection<Handle> handles) {handles.add(southEast(f));handles.add(southWest(f));handles.add(northEast(f));handles.add(northWest(f));', 'comment': '/*** Creates handles for each corner of a* figure and adds them to the provided collection.*/', 'coherence': 1}, {'code': 'public NullHandle(Figure owner, Locator locator) {super(owner, locator);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'static public void addLeadHandles(Figure f, Collection<Handle> handles) {handles.add(new NullHandle(f, new RelativeLocator(0f,0f)));handles.add(new NullHandle(f, new RelativeLocator(0f,1f)));handles.add(new NullHandle(f, new RelativeLocator(1f,0f)));handles.add(new NullHandle(f, new RelativeLocator(1f,1f)));', 'comment': '/*** Creates handles for each lead of a* figure and adds them to the provided collection.*/', 'coherence': 1}, {'code': 'public RotateHandle(Figure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic void draw(Graphics2D g) {if (getOwner().isTransformable()) {drawRectangle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.MOVE_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.MOVE_HANDLE_STROKE_COLOR));} else {drawRectangle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR));', 'comment': '/*** Draws this handle.* <p>* If the figure is transformable, the handle is drawn as a filled rectangle.* If the figure is not transformable, the handle is drawn as an unfilled* rectangle.*/', 'coherence': 1}, {'code': 'static public void addMoveHandles(Figure f, Collection<Handle> handles) {handles.add(southEast(f));handles.add(southWest(f));handles.add(northEast(f));handles.add(northWest(f));', 'comment': '/*** Creates handles for each corner of a* figure and adds them to the provided collection.*/', 'coherence': 1}, {'code': 'public MoveHandle(Figure owner, Locator locator) {super(owner, locator);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public TextOverflowHandle(TextHolderFigure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Override public void draw(Graphics2D g) {if (getOwner().isTextOverflow()) {drawRectangle(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));g.setColor((Color) getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));Rectangle r = basicGetBounds();g.drawLine(r.x+1, r.y+1, r.x+r.width-2, r.y+r.height-2);g.drawLine(r.x+r.width-2, r.y+1, r.x+1, r.y+r.height-2);', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public CMYKICCColorSystem() {try {read(getClass().getResourceAsStream("Generic CMYK Profile.icc"));} catch (IOException e) {InternalError err = new InternalError("Couldn\'t load \\"Generic CMYK Profile.icc\\".");err.initCause(e);throw err;', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public RoundRectangleRadiusHandle(Figure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic void draw(Graphics2D g) {if (getEditor().getTool().supportsHandleInteraction()) {drawDiamond(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR));} else {drawDiamond(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED));', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public ColorTrackImageProducer(int w, int h, int trackBuffer, boolean isHorizontal) {super(w, h, null, 0, w);pixels = new int[w*h];this.w = w;this.h = h;// trackBuffer must be eventhis.trackBuffer = (trackBuffer % 2 == 1) ? trackBuffer - 1 : trackBuffer;this.componentIndex = componentIndex;this.isHorizontal = isHorizontal;newPixels(pixels, new DirectColorModel(24,0x00ff0000,  // Red0x0000ff00,  // Green0x000000ff  // Blue), 0, w);setAnimated(true);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected int getTickLength() {return 4;', 'comment': '/*** Gets the height of the tick area for horizontal sliders and the width of the* tick area for vertical sliders.  BasicSliderUI uses the returned value to* determine the tick area rectangle.  If you want to give your ticks some room,* make this larger than you need and paint your ticks away from the sides in paintTicks().*/', 'coherence': 1}, {'code': 'public ColorSliderUI(JSlider b)   {super(b);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void mousePressed(MouseEvent e) {if ( !slider.isEnabled() )return;currentMouseX = e.getX();currentMouseY = e.getY();if (slider.isRequestFocusEnabled()) {slider.requestFocus();}// Clicked inside the Thumb area?if (thumbRect.contains(currentMouseX, currentMouseY) ) {super.mousePressed(e);} else {Dimension sbSize = slider.getSize();int direction = POSITIVE_SCROLL;switch ( slider.getOrientation() ) {case JSlider.VERTICAL:slider.setValue(valueForYPosition(currentMouseY));break;case JSlider.HORIZONTAL:slider.setValue(valueForXPosition(currentMouseX));break;', 'comment': '/*** If the mouse is pressed above the "thumb" component* then reduce the scrollbars value by one page ("page up"),* otherwise increase it by one page.  If there is no* thumb then page up if the mouse is in the upper half* of the track.*/', 'coherence': 1}, {'code': 'public ColorWheelChooser() {initComponents();int textSliderGap = UIManager.getInt("ColorChooser.textSliderGap");if (textSliderGap != 0) {BorderLayout layout = (BorderLayout) getLayout();layout.setHgap(textSliderGap);}colorWheel = new JColorWheel();add(colorWheel);ccModel.configureSlider(2, brightnessSlider);colorWheel.setModel(ccModel);ccModel.addChangeListener(new ChangeListener() {public void stateChanged(ChangeEvent evt) {setColorToModel(ccModel.getColor());', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'private void initComponents() {//GEN-BEGIN:initComponentsbrightnessSlider = new javax.swing.JSlider();setLayout(new java.awt.BorderLayout());brightnessSlider.setMajorTickSpacing(50);brightnessSlider.setOrientation(javax.swing.JSlider.VERTICAL);brightnessSlider.setPaintTicks(true);add(brightnessSlider, java.awt.BorderLayout.EAST);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public SerializationInputOutputFormat() {this("Drawing", "ser", new DefaultDrawing());', 'comment': '/** Creates a new instance with format name "Drawing", file extension "xml"* and mime type "image/x-jhotdraw".*/', 'coherence': 1}, {'code': 'public ImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension,String mimeType) {this(prototype, formatName, description, new String[]{fileExtension}, new String[]{mimeType});', 'comment': '/** Creates a new image input format for the specified image format.** @param formatName The format name for the javax.imageio.ImageIO object.* @param description The format description to be used for the file filter.* @param fileExtension The file extension to be used for the file filter.* @param mimeType The mime type used for filtering data flavors from* Transferable objects.*/', 'coherence': 1}, {'code': 'public ImageInputFormat(ImageHolderFigure prototype) {this(prototype, "Image", "Image", ImageIO.getReaderFileSuffixes(), ImageIO.getReaderMIMETypes());', 'comment': '/** Creates a new image input format for all formats supported by* {@code javax.imageio.ImageIO}. */', 'coherence': 1}, {'code': 'static public Locator north() {return new RelativeDecoratorLocator(0.5, 0.0);', 'comment': '/*** North.*/', 'coherence': 1}, {'code': 'static public void addCornerTransformHandles(Figure f, Collection<Handle> handles) {handles.add(southEast(f));handles.add(southWest(f));handles.add(northEast(f));handles.add(northWest(f));', 'comment': '/*** Creates handles for each corner of a* figure and adds them to the provided collection.*/', 'coherence': 1}, {'code': 'public RelativeDecoratorLocator(double relativeX, double relativeY) {super(relativeX, relativeY);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'static public void addScaleMoveTransformHandles(Figure f, Collection<Handle> handles) {addCornerTransformHandles(f, handles);addEdgeTransformHandles(f, handles);', 'comment': '/*** Adds handles for scaling and moving a Figure.*/', 'coherence': 1}, {'code': 'static public Locator northWest() {return new RelativeDecoratorLocator(0.0, 0.0);', 'comment': '/*** North west.*/', 'coherence': 1}, {'code': 'static public void addEdgeTransformHandles(Figure f, Collection<Handle> handles) {handles.add(south(f));handles.add(north(f));handles.add(east(f));handles.add(west(f));', 'comment': '/*** Fills the given Vector with handles at each* the north, south, east, and west of the figure.*/', 'coherence': 1}, {'code': 'static public Locator west() {return new RelativeDecoratorLocator(0.0, 0.5);', 'comment': '/*** West.*/', 'coherence': 1}, {'code': 'static public Locator northEast() {return new RelativeDecoratorLocator(1.0, 0.0);', 'comment': '/*** North east.*/', 'coherence': 1}, {'code': 'static public void addGroupTransformHandles(Figure f, Collection<Handle> handles) {handles.add(new BoundsOutlineHandle(f,GROUP_BOUNDS_STROKE_1, GROUP_BOUNDS_COLOR_1,GROUP_BOUNDS_STROKE_2, GROUP_BOUNDS_COLOR_2,GROUP_BOUNDS_STROKE_1_DISABLED, GROUP_BOUNDS_COLOR_1_DISABLED,GROUP_BOUNDS_STROKE_2_DISABLED, GROUP_BOUNDS_COLOR_2_DISABLED));addCornerTransformHandles(f, handles);addEdgeTransformHandles(f, handles);handles.add(new RotateHandle(f));', 'comment': '/*** Adds handles for scaling, moving, rotating and shearing a Figure.*/', 'coherence': 1}, {'code': 'static public Locator south() {return new RelativeDecoratorLocator(0.5, 1.0);', 'comment': '/*** South.*/', 'coherence': 1}, {'code': 'static public void addTransformHandles(Figure f, Collection<Handle> handles) {handles.add(new BoundsOutlineHandle(f, true, false));addCornerTransformHandles(f, handles);addEdgeTransformHandles(f, handles);handles.add(new RotateHandle(f));', 'comment': '/*** Adds handles for scaling, moving, rotating and shearing a Figure.*/', 'coherence': 1}, {'code': 'static public Locator southWest() {return new RelativeDecoratorLocator(0.0, 1.0);', 'comment': '/*** South west.*/', 'coherence': 1}, {'code': 'static public Locator southEast() {return new RelativeDecoratorLocator(1.0, 1.0);', 'comment': '/*** South east.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {if (getEditor().getTool().supportsHandleInteraction()) {//drawArc(g);drawDiamond(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_FILL_COLOR),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_STROKE_COLOR));} else {drawDiamond(g,(Color) getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_FILL_COLOR_DISABLED),(Color) getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_STROKE_COLOR_DISABLED));', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public BezierTool(BezierFigure prototype) {this(prototype, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes) {this(prototype, attributes, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public AbstractTool() {editorProxy = new DrawingEditorProxy();setInputMap(createInputMap());setActionMap(createActionMap());', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected void fireToolStarted(DrawingView view) {ToolEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == ToolListener.class) {// Lazily create the event:if (event == null) {event = new ToolEvent(this, view, new Rectangle(0, 0, -1, -1));}((ToolListener) listeners[i + 1]).toolStarted(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'protected InputMap createInputMap() {return null;', 'comment': '/** Override this method to create a tool-specific input map, which* overrides the input map of the drawing edtior.* <p>* The implementation of this class returns null.*/', 'coherence': 1}, {'code': 'protected ActionMap createActionMap() {return null;', 'comment': '/** Override this method to create a tool-specific action map, which* overrides the action map of the drawing edtior.* <p>* The implementation of this class returns null.*/', 'coherence': 1}, {'code': 'public void editDelete() {getView().getDrawing().removeAll(getView().getSelectedFigures());', 'comment': '/*** Deletes the selection.* Depending on the tool, this could be selected figures, selected points* or selected text.*/', 'coherence': 1}, {'code': 'protected void fireToolDone() {ToolEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == ToolListener.class) {// Lazily create the event:if (event == null) {event = new ToolEvent(this, getView(), new Rectangle(0, 0, -1, -1));}((ToolListener) listeners[i + 1]).toolDone(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public DOMStorableInputOutputFormat(DOMFactory factory,String description, String fileExtension, String mimeType) {this.factory = factory;this.fileExtension = fileExtension;this.mimeType = mimeType;try {this.dataFlavor = new DataFlavor(mimeType);} catch (ClassNotFoundException ex) {InternalError error = new InternalError("Unable to create data flavor for mime type:" + mimeType);error.initCause(ex);throw error;', 'comment': '/** Creates a new instance using the specified parameters.** @param factory The factory for creating Figures from XML elements.* @param description The format description to be used for the file filter.* @param fileExtension The file extension to be used for file filter.* @param mimeType The Mime Type is used for clipboard access.*/', 'coherence': 1}, {'code': 'protected void fireAreaInvalidated(Rectangle invalidatedArea) {ToolEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == ToolListener.class) {// Lazily create the event:if (event == null) {event = new ToolEvent(this, getView(), invalidatedArea);}((ToolListener) listeners[i + 1]).areaInvalidated(event);', 'comment': '/*** Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public DOMStorableInputOutputFormat(DOMFactory factory) {this(factory, "Drawing", "xml", "image/x-jhotdraw");', 'comment': '/** Creates a new instance with format name "Drawing", file extension "xml"* and mime type "image/x-jhotdraw".*/', 'coherence': 1}, {'code': 'public InputMap getInputMap() {return inputMap;', 'comment': '/*** Gets the input map of the Tool*/', 'coherence': 1}, {'code': 'protected void fireBoundsInvalidated(Rectangle invalidatedArea) {ToolEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == ToolListener.class) {// Lazily create the event:if (event == null) {event = new ToolEvent(this, getView(), invalidatedArea);}((ToolListener) listeners[i + 1]).boundsInvalidated(event);', 'comment': '/*** Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public void setActionMap(ActionMap newValue) {actionMap = newValue;', 'comment': '/*** Sets the ActionMap for the Tool.* @see #keyPressed*/', 'coherence': 1}, {'code': 'public void keyPressed(KeyEvent evt) {if (!evt.isConsumed()) {if (evt.getSource() instanceof Container) {editor.setActiveView(editor.findView((Container) evt.getSource()));}Object obj = null;if (inputMap != null) {// Lookup the input map of the toolobj = inputMap.get(KeyStroke.getKeyStroke(evt.getKeyCode(), evt.getModifiers(), false));}if (obj == null) {// Fall back to the input map of the drawing editorInputMap im = editor.getInputMap();if (im != null) {obj = im.get(KeyStroke.getKeyStroke(evt.getKeyCode(), evt.getModifiers(), false));}}ActionListener al = null;if (obj instanceof ActionListener) {al = (ActionListener) obj;} else if (obj != null) {// Lookup the action map of the toolif (actionMap != null) {al = actionMap.get(obj);}if (al == null) {// Fall back to the action map of the drawing editoral = editor.getActionMap().get(obj);}}if (al != null) {evt.consume();al.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "tool", evt.getWhen(), evt.getModifiers()));fireToolDone();', 'comment': '/*** The Tool uses the InputMap to determine what to do, when a key is pressed.* If the corresponding value of the InputMap is a String, the ActionMap* of the tool is used, to find the action to be performed.* If the corresponding value of the InputMap is a ActionListener, the* actionPerformed method of the ActionListener is performed.*/', 'coherence': 1}, {'code': 'protected void fireAreaInvalidated(Rectangle2D.Double r) {Point p1 = getView().drawingToView(new Point2D.Double(r.x, r.y));Point p2 = getView().drawingToView(new Point2D.Double(r.x + r.width, r.y + r.height));fireAreaInvalidated(new Rectangle(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y));', 'comment': '/*** Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public ActionMap getActionMap() {return actionMap;', 'comment': '/*** Gets the action map of the Tool*/', 'coherence': 1}, {'code': 'protected void maybeFireBoundsInvalidated(Rectangle invalidatedArea) {Drawing d = getDrawing();Rectangle2D.Double canvasBounds = new Rectangle2D.Double(0, 0, 0, 0);if (d.get(CANVAS_WIDTH) != null) {canvasBounds.width += d.get(CANVAS_WIDTH);}if (d.get(CANVAS_HEIGHT) != null) {canvasBounds.height += d.get(CANVAS_HEIGHT);}if (!canvasBounds.contains(invalidatedArea)) {fireBoundsInvalidated(invalidatedArea);', 'comment': '/*** Notify all listenerList that have registered interest for* notification on this event type.** Note: This method only fires an event, if the invalidated area* is outside of the canvas bounds.*/', 'coherence': 1}, {'code': 'public void setInputMap(InputMap newValue) {inputMap = newValue;', 'comment': '/*** Sets the InputMap for the Tool.** @see #keyPressed* @see #setActionMap*/', 'coherence': 1}, {'code': 'public ImageOutputFormat() {this("PNG", "Portable Network Graphics (PNG)", "png", BufferedImage.TYPE_INT_ARGB);', 'comment': '/** Creates a new image output format for Portable Network Graphics PNG. */', 'coherence': 1}, {'code': 'public void write(OutputStream out, Drawing drawing,AffineTransform drawingTransform, Dimension imageSize) throws IOException {write(out, drawing, drawing.getChildren(), drawingTransform, imageSize);', 'comment': '/*** Writes the drawing to the specified output stream.* This method applies the specified transform to the drawing, and draws* it on an image of the specified size.*/', 'coherence': 1}, {'code': 'public Transferable createTransferable(Drawing drawing, java.util.List<Figure> figures, double scaleFactor) throws IOException {return new ImageTransferable(toImage(drawing, figures, scaleFactor, true));', 'comment': '/*** Writes the drawing to the specified output stream.* This method ensures that all figures of the drawing are visible on* the image.*/', 'coherence': 1}, {'code': 'public ImageOutputFormat(String formatName, String description, String fileExtension,int bufferedImageType) {this.formatName = formatName;this.description = description;this.fileExtension = fileExtension;this.imageType = bufferedImageType;', 'comment': '/** Creates a new image output format for the specified image format.** @param formatName The format name for the javax.imageio.ImageIO object.* @param description The format description to be used for the file filter.* @param fileExtension The file extension to be used for file filter.* @param bufferedImageType The BufferedImage type used to produce the image.*      The value of this parameter must match with the format name.*/', 'coherence': 1}, {'code': 'public void write(OutputStream out, Drawing drawing) throws IOException {write(out, drawing, drawing.getChildren(), null, null);', 'comment': '/*** Writes the drawing to the specified output stream.* This method ensures that all figures of the drawing are visible on* the image.*/', 'coherence': 1}, {'code': 'public BufferedImage toImage(Drawing drawing,java.util.List<Figure> figures,AffineTransform transform,Dimension imageSize) {// Create the buffered image and clear itColor background = drawing.get(CANVAS_FILL_COLOR);double opacity = drawing.get(CANVAS_FILL_OPACITY);if (background == null) {background = new Color(0xff, 0xff, 0xff, 0x0);} else {background = new Color(background.getRed(), background.getGreen(), background.getBlue(), (int)(background.getAlpha() * opacity));}BufferedImage buf = new BufferedImage(Math.max(1,imageSize.width), Math.max(1,imageSize.height),(background.getAlpha() == 255) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB);Graphics2D g = buf.createGraphics();// Clear the buffered image with the background colorComposite savedComposite = g.getComposite();g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));g.setColor(background);g.fillRect(0,0,buf.getWidth(),buf.getHeight());g.setComposite(savedComposite);// Draw the figures onto the buffered imagesetRenderingHints(g);g.transform(transform);for (Figure f : figures) {f.draw(g);}g.dispose();// Convert the image, if it does not have the specified image typeif (imageType != BufferedImage.TYPE_INT_ARGB) {BufferedImage buf2 = new BufferedImage(buf.getWidth(), buf.getHeight(),imageType);g = buf2.createGraphics();setRenderingHints(g);g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));g.drawImage(buf, 0, 0, null);g.dispose();buf.flush();buf = buf2;}return buf;', 'comment': '/*** Creates a BufferedImage from the specified list of figures.** @param drawing The drawing.* @param figures A list of figures of the drawing.* @param transform The AffineTransform to be used when drawing* the figures.* @param imageSize The width and height of the image.*/', 'coherence': 1}, {'code': 'static public Locator north(boolean isTransform) {return new RelativeLocator(0.5, 0.0, isTransform);', 'comment': '/*** North.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'public RelativeLocator(double relativeX, double relativeY) {this(relativeX, relativeY, false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'static public Locator east() {return east(false);', 'comment': '/*** Non-transforming East.*/', 'coherence': 1}, {'code': 'public BufferedImage toImage(Drawing drawing,java.util.List<Figure> figures,double scaleFactor, boolean clipToFigures) {// Determine the draw bounds of the figuresRectangle2D.Double drawBounds = null;for (Figure f : figures) {if (drawBounds == null) {drawBounds = f.getDrawingArea();} else {drawBounds.add(f.getDrawingArea());}}if (clipToFigures) {AffineTransform transform = new AffineTransform();transform.translate(-drawBounds.x * scaleFactor,-drawBounds.y * scaleFactor);transform.scale(scaleFactor, scaleFactor);return toImage(drawing, figures, transform,new Dimension((int) (drawBounds.width * scaleFactor),(int) (drawBounds.height * scaleFactor)));} else {AffineTransform transform = new AffineTransform();if (drawBounds.x < 0) {transform.translate(-drawBounds.x * scaleFactor, 0);}if (drawBounds.y < 0) {transform.translate(0, -drawBounds.y * scaleFactor);}transform.scale(scaleFactor, scaleFactor);return toImage(drawing, figures, transform,new Dimension((int) ((Math.max(0, drawBounds.x)+drawBounds.width) * scaleFactor),(int) ((Math.max(0, drawBounds.y)+drawBounds.height) * scaleFactor)', 'comment': '/*** Creates a BufferedImage from the specified list of figures.* <p>* The images are drawn using the specified scale factor. If some figures* have a drawing area located at negative coordinates, then the drawing* coordinates are translated, so that all figures are visible on the* image.** @param drawing The drawing.* @param figures A list of figures of the drawing.* @param scaleFactor The scale factor used when drawing the figures.* @param clipToFigures If this is true, the image is clipped to the figures.* If this is false, the image includes the drawing area,*/', 'coherence': 1}, {'code': 'static public Locator southWest() {return southWest(false);', 'comment': '/*** Non-transforming South west.*/', 'coherence': 1}, {'code': 'static public Locator center() {return center(false);', 'comment': '/*** Non-transforming Center.*/', 'coherence': 1}, {'code': 'public void write(File file, Drawing drawing) throws IOException {BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));try {write(out, drawing);} finally {out.close();', 'comment': '/*** Writes the drawing to the specified file.* This method ensures that all figures of the drawing are visible on* the image.*/', 'coherence': 1}, {'code': 'static public Locator south(boolean isTransform) {return new RelativeLocator(0.5, 1.0, isTransform);', 'comment': '/*** South.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'static public Locator north() {return north(false);', 'comment': '/*** Non-transforming North.*/', 'coherence': 1}, {'code': 'public void write(OutputStream out, Drawing drawing, java.util.List<Figure> figures) throws IOException {write(out, drawing, figures, null, null);', 'comment': '/*** Writes the figures to the specified output stream.* This method ensures that all figures of the drawing are visible on* the image.*/', 'coherence': 1}, {'code': 'static public Locator southEast() {return southEast(false);', 'comment': '/*** Non-transforming South east.*/', 'coherence': 1}, {'code': 'public RelativeLocator() {this(0, 0, false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void write(OutputStream out, Drawing drawing, java.util.List<Figure> figures,AffineTransform drawingTransform, Dimension imageSize) throws IOException {BufferedImage img;if (drawingTransform == null || imageSize == null) {img = toImage(drawing, figures, 1d, false);} else {img = toImage(drawing, figures, drawingTransform, imageSize);}ImageIO.write(img, formatName, out);img.flush();', 'comment': '/*** Writes the figures to the specified output stream.* This method applies the specified transform to the drawing, and draws* it on an image of the specified size.*/', 'coherence': 1}, {'code': 'static public Locator southEast(boolean isTransform) {return new RelativeLocator(1.0, 1.0, isTransform);', 'comment': '/*** South East.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'static public Locator west() {return west(false);', 'comment': '/*** Non-transforming West.*/', 'coherence': 1}, {'code': 'static public Locator northEast() {return northEast(false);', 'comment': '/*** Non-transforming North east.*/', 'coherence': 1}, {'code': 'static public Locator east(boolean isTransform) {return new RelativeLocator(1.0, 0.5, isTransform);', 'comment': '/*** East.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'static public Locator west(boolean isTransform) {return new RelativeLocator(0.0, 0.5, isTransform);', 'comment': '/*** West.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'public RelativeLocator(double relativeX, double relativeY, boolean isTransform) {this.relativeX = relativeX;this.relativeY = relativeY;this.isTransform = isTransform;', 'comment': '/*** @param relativeX x-position relative to bounds expressed as a value* between 0 and 1.* @param relativeY y-position relative to bounds expressed as a value* between 0 and 1.* @param isTransform Set this to true, if the locator shall honor the* TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'static public Locator south() {return south(false);', 'comment': '/*** Non-transforming South.*/', 'coherence': 1}, {'code': 'static public Locator northWest(boolean isTransform) {return new RelativeLocator(0.0, 0.0, isTransform);', 'comment': '/*** North West.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'static public Locator northWest() {return northWest(false);', 'comment': '/*** Non-transforming North west.*/', 'coherence': 1}, {'code': 'static public Locator northEast(boolean isTransform) {return new RelativeLocator(1.0, 0.0, isTransform);', 'comment': '/*** Norht East.* @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'static public Locator southWest(boolean isTransform) {return new RelativeLocator(0.0, 1.0, isTransform);', 'comment': '/*** South West.** @param isTransform Set this to true, if RelativeLocator shall honour* the AttributesKey.TRANSFORM attribute of the Figure.*/', 'coherence': 1}, {'code': 'public TextInputFormat(TextHolderFigure prototype) {this(prototype, "Text", "Text", "txt", false);', 'comment': '/** Creates a new image output format for text, for a figure that can not.* hold multiple lines of text.*/', 'coherence': 1}, {'code': 'public void mouseDragged(java.awt.event.MouseEvent e) {repaintConnectors(e);if (createdFigure != null) {createdFigure.willChange();Point2D.Double endPoint = viewToDrawing(new Point(e.getX(), e.getY()));getView().getConstrainer().constrainPoint(endPoint);Figure endFigure = getDrawing().findFigureExcept(endPoint, createdFigure);endConnector = (endFigure == null) ? null : endFigure.findConnector(endPoint, prototype);if (endConnector != null && canConnect(createdFigure, startConnector, endConnector)) {endPoint = endConnector.getAnchor();}Rectangle r = new Rectangle(getView().drawingToView(createdFigure.getEndPoint()));createdFigure.setEndPoint(endPoint);r.add(getView().drawingToView(endPoint));r.grow(ANCHOR_WIDTH + 2, ANCHOR_WIDTH + 2);getView().getComponent().repaint(r);createdFigure.changed();', 'comment': '/*** Adjust the created connection.*/', 'coherence': 1}, {'code': 'public void repaintConnectors(MouseEvent evt) {Rectangle2D.Double invalidArea = null;Point2D.Double targetPoint = viewToDrawing(new Point(evt.getX(), evt.getY()));Figure aFigure = getDrawing().findFigureExcept(targetPoint, createdFigure);if (aFigure != null && !aFigure.isConnectable()) {aFigure = null;}if (targetFigure != aFigure) {for (Connector c : connectors) {if (invalidArea == null) {invalidArea = c.getDrawingArea();} else {invalidArea.add(c.getDrawingArea());}}targetFigure = aFigure;if (targetFigure != null) {connectors = targetFigure.getConnectors(getPrototype());for (Connector c : connectors) {if (invalidArea == null) {invalidArea = c.getDrawingArea();} else {invalidArea.add(c.getDrawingArea());}}}}if (invalidArea != null) {getView().getComponent().repaint(getView().drawingToView(invalidArea));', 'comment': '/*** Updates the list of connectors that we draw when the user* moves or drags the mouse over a figure to which can connect.*/', 'coherence': 1}, {'code': '@Overridepublic void mouseReleased(MouseEvent e) {if (createdFigure != null &&startConnector != null && endConnector != null &&createdFigure.canConnect(startConnector, endConnector)) {createdFigure.willChange();createdFigure.setStartConnector(startConnector);createdFigure.setEndConnector(endConnector);createdFigure.updateConnection();createdFigure.changed();final Figure addedFigure = createdFigure;final Drawing addedDrawing = getDrawing();getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {public String getPresentationName() {return presentationName;}public void undo() throws CannotUndoException {super.undo();addedDrawing.remove(addedFigure);}public void redo() throws CannotRedoException {super.redo();addedDrawing.add(addedFigure);}});targetFigure = null;Point2D.Double anchor = startConnector.getAnchor();Rectangle r = new Rectangle(getView().drawingToView(anchor));r.grow(ANCHOR_WIDTH, ANCHOR_WIDTH);fireAreaInvalidated(r);anchor = endConnector.getAnchor();r = new Rectangle(getView().drawingToView(anchor));r.grow(ANCHOR_WIDTH, ANCHOR_WIDTH);fireAreaInvalidated(r);startConnector = endConnector = null;createdFigure = null;creationFinished(createdFigure);} else {if (isToolDoneAfterCreation()) {fireToolDone();', 'comment': '/*** Connects the figures if the mouse is released over another* figure.*/', 'coherence': 1}, {'code': 'public void mousePressed(MouseEvent evt) {super.mousePressed(evt);getView().clearSelection();Point2D.Double startPoint = viewToDrawing(anchor);Figure startFigure = getDrawing().findFigure(startPoint);startConnector = (startFigure == null) ? null : startFigure.findConnector(startPoint, prototype);if (startConnector != null && canConnect(prototype, startConnector)) {Point2D.Double anchor = startConnector.getAnchor();createdFigure = createFigure();createdFigure.setStartPoint(anchor);createdFigure.setEndPoint(anchor);getDrawing().add(createdFigure);Rectangle r = new Rectangle(getView().drawingToView(anchor));r.grow(ANCHOR_WIDTH, ANCHOR_WIDTH);fireAreaInvalidated(r);} else {startConnector = null;createdFigure = null;}endConnector = null;', 'comment': '/*** Manipulates connections in a context dependent way. If the* mouse down hits a figure start a new connection. If the mousedown* hits a connection split a segment or join two segments.*/', 'coherence': 1}, {'code': 'public void setToolDoneAfterCreation(boolean newValue) {boolean oldValue = isToolDoneAfterCreation;isToolDoneAfterCreation = newValue;', 'comment': '/*** If this is set to false, the CreationTool does not fire toolDone* after a new Figure has been created. This allows to create multiple* figures consecutively.*/', 'coherence': 1}, {'code': 'protected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {return f.canConnect(startConnector, endConnector);', 'comment': '/*** This method is called on the Figure, onto which the user wants* to end a new connection.** @param f The ConnectionFigure.* @param startConnector The Connector of the start Figure.* @param endConnector The Connector of the end Figure.* @return True, if a connection can be made.*/', 'coherence': 1}, {'code': 'public ConnectionTool(ConnectionFigure prototype) {this(prototype, null, null);', 'comment': '/** Creates a new instance.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")protected ConnectionFigure createFigure() {ConnectionFigure f = (ConnectionFigure) prototype.clone();getEditor().applyDefaultAttributesTo(f);if (prototypeAttributes != null) {for (Map.Entry<AttributeKey, Object> entry : prototypeAttributes.entrySet()) {f.set(entry.getKey(), entry.getValue());}}return f;', 'comment': '/*** Creates the ConnectionFigure. By default the figure prototype is* cloned.*/', 'coherence': 1}, {'code': 'protected void creationFinished(Figure createdFigure) {if (isToolDoneAfterCreation()) {fireToolDone();', 'comment': '/*** This method allows subclasses to do perform additonal user interactions* after the new figure has been created.* The implementation of this class just invokes fireToolDone.*/', 'coherence': 1}, {'code': 'protected boolean canConnect(ConnectionFigure f, Connector startConnector) {return f.canConnect(startConnector);', 'comment': '/*** This method is called on the Figure, onto which the user wants* to start a new connection.** @param f The ConnectionFigure.* @param startConnector The Connector of the start Figure.* @return True, if a connection can be made.*/', 'coherence': 1}, {'code': 'public DrawingPageable(Drawing drawing) {this.drawing = drawing;Paper paper = new Paper();pageFormat = new PageFormat();pageFormat.setPaper(paper);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void createOverlay(DrawingView view) {createOverlay(view, null);', 'comment': '/*** Creates the overlay within the given container.* @param view the DrawingView*/', 'coherence': 1}, {'code': 'public String getText() {return textArea.getText();', 'comment': '/*** Gets the text contents of the overlay.* @return The text value*/', 'coherence': 1}, {'code': 'public FloatingTextArea() {textArea = new JTextArea();textArea.setWrapStyleWord(true);textArea.setLineWrap(true);editScrollContainer = new JScrollPane(textArea,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);editScrollContainer.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));editScrollContainer.setBorder(BorderFactory.createLineBorder(Color.black));', 'comment': '/*** Constructor for the FloatingTextArea object*/', 'coherence': 1}, {'code': 'public Dimension getPreferredSize(int cols) {return new Dimension(textArea.getWidth(), textArea.getHeight());', 'comment': '/*** Gets the preferred size of the overlay.* @param cols Description of the Parameter* @return The preferredSize value*/', 'coherence': 1}, {'code': 'public void createOverlay(DrawingView view, TextHolderFigure figure) {view.getComponent().add(editScrollContainer, 0);editedFigure = figure;this.view = view;if (editedFigure != null) {editedFigure.addFigureListener(figureHandler);updateWidget();', 'comment': '/*** Creates the overlay for the given Container using a* specific font.* @param view the DrawingView* @param figure the figure holding the text*/', 'coherence': 1}, {'code': 'public void setBounds(Rectangle2D.Double r, String text) {textArea.setText(text);editScrollContainer.setBounds(view.drawingToView(r));editScrollContainer.setVisible(true);textArea.setCaretPosition(0);textArea.requestFocus();', 'comment': '/*** Positions and sizes the overlay.* @param r the bounding Rectangle2D.Double for the overlay* @param text the text to edit*/', 'coherence': 1}, {'code': 'public void createOverlay(DrawingView view) {createOverlay(view, null);', 'comment': '/*** Creates the overlay for the given Component.*/', 'coherence': 1}, {'code': 'public String getText() {return textField.getText();', 'comment': '/*** Gets the text contents of the overlay.*/', 'coherence': 1}, {'code': 'public void createOverlay(DrawingView view, TextHolderFigure figure) {view.getComponent().add(textField, 0);textField.setText(figure.getText());textField.setColumns(figure.getTextColumns());textField.selectAll();textField.setVisible(true);editedFigure = figure;editedFigure.addFigureListener(figureHandler);this.view = view;updateWidget();', 'comment': '/*** Creates the overlay for the given Container using a* specific font.*/', 'coherence': 1}, {'code': 'public void removeActionListener(ActionListener listener) {textField.removeActionListener(listener);', 'comment': '/*** Remove an action listener*/', 'coherence': 1}, {'code': 'public Dimension getPreferredSize(int cols) {textField.setColumns(cols);return textField.getPreferredSize();', 'comment': '/*** Gets the preferred size of the overlay.*/', 'coherence': 1}, {'code': 'public void addActionListener(ActionListener listener) {textField.addActionListener(listener);', 'comment': '/*** Adds an action listener*/', 'coherence': 1}, {'code': 'public ElbowLiner() {this(20);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public CurvedLiner() {this(20);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public BezierLabelLocator(double relativePosition, double angle, double distance) {this.relativePosition = relativePosition;this.angle = angle;this.distance = distance;', 'comment': '/** Creates a new locator.** @param relativePosition The relative position of the label on the polyline.* 0.0 specifies the start of the bezier path, 1.0 the* end of the polyline. Values between 0.0 and 1.0 are relative positions* on the bezier path.* @param angle The angle of the distance vector.* @param distance The length of the distance vector.*/', 'coherence': 1}, {'code': 'public Point2D.Double getRelativePoint(BezierFigure owner) {Point2D.Double point = owner.getPointOnPath((float) relativePosition, 3);Point2D.Double nextPoint = owner.getPointOnPath((relativePosition < 0.5) ? (float) relativePosition + 0.1f : (float) relativePosition - 0.1f,3);double dir = Math.atan2(nextPoint.y - point.y, nextPoint.x - point.x);if (relativePosition >= 0.5) {dir += Math.PI;}double alpha = dir + angle;Point2D.Double p = new Point2D.Double(point.x + distance * Math.cos(alpha),point.y + distance * Math.sin(alpha));if (Double.isNaN(p.x)) p = point;return p;', 'comment': '/*** Returns the coordinates of the relative point on the path* of the specified bezier figure.*/', 'coherence': 1}, {'code': 'public Point2D.Double getRelativeLabelPoint(BezierFigure owner, Figure label) {// Get a point on the path an the next point on the pathPoint2D.Double point = owner.getPointOnPath((float) relativePosition, 3);if (point == null) {return new Point2D.Double(0,0);}Point2D.Double nextPoint = owner.getPointOnPath((relativePosition < 0.5) ? (float) relativePosition + 0.1f : (float) relativePosition - 0.1f,3);double dir = Math.atan2(nextPoint.y - point.y, nextPoint.x - point.x);if (relativePosition >= 0.5) {dir += Math.PI;}double alpha = dir + angle;Point2D.Double p = new Point2D.Double(point.x + distance * Math.cos(alpha),point.y + distance * Math.sin(alpha));if (Double.isNaN(p.x)) p = point;Dimension2DDouble labelDim = label.getPreferredSize();if (relativePosition == 0.5 &&p.x >= point.x - distance / 2 &&p.x <= point.x + distance / 2) {if (p.y >= point.y) {// South Eastreturn new Point2D.Double(p.x - labelDim.width / 2, p.y);} else {// North Eastreturn new Point2D.Double(p.x - labelDim.width / 2, p.y - labelDim.height);}} else {if (p.x >= point.x) {if (p.y >= point.y) {// South Eastreturn new Point2D.Double(p.x, p.y);} else {// North Eastreturn new Point2D.Double(p.x, p.y - labelDim.height);}} else {if (p.y >= point.y) {// South Westreturn new Point2D.Double(p.x - labelDim.width,  p.y);} else {// North Westreturn new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);', 'comment': '/*** Returns a Point2D.Double on the polyline that is at the provided relative position.* XXX - Implement this and move it to BezierPath*/', 'coherence': 1}, {'code': 'public SlantedLiner() {this(20);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public JAttributeSlider() {this(JSlider.VERTICAL, 0, 100, 50);', 'comment': '/** Creates new instance. */', 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public static int outcode(Rectangle r1, Rectangle r2) {int outcode = 0;if (r2.x > r1.x + r1.width) {outcode = OUT_RIGHT;} else if (r2.x + r2.width < r1.x) {outcode = OUT_LEFT;}if (r2.y > r1.y + r1.height) {outcode |= OUT_BOTTOM;} else if (r2.y + r2.height < r1.y) {outcode |= OUT_TOP;}return outcode;', 'comment': '/*** This method computes a binary OR of the appropriate mask values* indicating, for each side of Rectangle r1, whether or not the* Rectangle r2 is on the same side of the edge as the rest* of this Rectangle.********* @return the logical OR of all appropriate out codes OUT_RIGHT, OUT_LEFT, OUT_BOTTOM,* OUT_TOP.*/', 'coherence': 1}, {'code': 'public static int range(int min, int max, int value) {if (value < min) {value = min;}if (value > max) {value = max;}return value;', 'comment': '/*** Constains a value to the given range.* @return the constrained value*/', 'coherence': 1}, {'code': 'public static double length(double x1, double y1, double x2, double y2) {return sqrt(length2(x1, y1, x2, y2));', 'comment': '/*** Gets the distance between to points*/', 'coherence': 1}, {'code': 'public static double length2(double x1, double y1, double x2, double y2) {return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);', 'comment': '/*** Gets the square distance between two points.*/', 'coherence': 1}, {'code': 'public static Point2D.Double ovalAngleToPoint(Rectangle2D.Double r, double angle) {Point2D.Double center = Geom.center(r);Point2D.Double p = Geom.polarToPoint2D(angle, r.width / 2, r.height / 2);return new Point2D.Double(center.x + p.x, center.y + p.y);', 'comment': '/*** Gets the point on an oval that corresponds to the given angle.*/', 'coherence': 1}, {'code': 'public static Point ovalAngleToPoint(Rectangle r, double angle) {Point center = Geom.center(r);Point p = Geom.polarToPoint(angle, r.width / 2, r.height / 2);return new Point(center.x + p.x, center.y + p.y);', 'comment': '/*** Gets the point on an oval that corresponds to the given angle.*/', 'coherence': 1}, {'code': 'public static double length(Point2D.Double p1, Point2D.Double p2) {return sqrt(length2(p1.x, p1.y, p2.x, p2.y));', 'comment': '/*** Gets the distance between to points*/', 'coherence': 1}, {'code': 'public static boolean lineContainsPoint(int x1, int y1,int x2, int y2,int px, int py, double tolerance) {Rectangle r = new Rectangle(new Point(x1, y1));r.add(x2, y2);r.grow(max(2, (int) ceil(tolerance)), max(2, (int) ceil(tolerance)));if (!r.contains(px, py)) {return false;}double a, b, x, y;if (x1 == x2) {return (abs(px - x1) <= tolerance);}if (y1 == y2) {return (abs(py - y1) <= tolerance);}a = (double) (y1 - y2) / (double) (x1 - x2);b = (double) y1 - a * (double) x1;x = (py - b) / a;y = a * px + b;return (min(abs(x - px), abs(y - py)) <= tolerance);', 'comment': '/*** Tests if a point is on a line.* <p>changed Werner Randelshofer 2003-11-26*/', 'coherence': 1}, {'code': 'public static Point2D.Double polarToPoint2D(double angle, double fx, double fy) {double si = sin(angle);double co = cos(angle);return new Point2D.Double(fx * co + 0.5, fy * si + 0.5);', 'comment': '/*** Converts a polar to a point*/', 'coherence': 1}, {'code': 'public static double pointToAngle(Rectangle r, Point p) {int px = p.x - (r.x + r.width / 2);int py = p.y - (r.y + r.height / 2);return atan2(py * r.width, px * r.height);', 'comment': '/*** Gets the angle of a point relative to a rectangle.*/', 'coherence': 1}, {'code': 'public static boolean contains(Rectangle2D.Double r1, Rectangle2D.Double r2) {return (r2.x >= r1.x &&r2.y >= r1.y &&(r2.x + max(0, r2.width)) <= r1.x + max(0, r1.width) &&(r2.y + max(0, r2.height)) <= r1.y + max(0, r1.height));', 'comment': '/*** Returns true, if rectangle 1 contains rectangle 2.* <p>* This method is similar to Rectangle2D.contains, but also returns true,* when rectangle1 contains rectangle2 and either or both of them* are empty.** @param r1 Rectangle 1.* @param r2 Rectangle 2.* @return true if r1 contains r2.*/', 'coherence': 1}, {'code': 'public static Point2D.Double angleToPoint(Rectangle2D.Double r, double angle) {double si = sin(angle);double co = cos(angle);double e = 0.0001;double x = 0, y = 0;if (abs(si) > e) {x = (1.0 + co / abs(si)) / 2.0 * r.width;x = range(0, r.width, x);} else if (co >= 0.0) {x = r.width;}if (abs(co) > e) {y = (1.0 + si / abs(co)) / 2.0 * r.height;y = range(0, r.height, y);} else if (si >= 0.0) {y = r.height;}return new Point2D.Double(r.x + x, r.y + y);', 'comment': '/*** Gets the point on a rectangle that corresponds to the given angle.*/', 'coherence': 1}, {'code': 'public static int direction(double x1, double y1, double x2, double y2) {int direction = 0;double vx = x2 - x1;double vy = y2 - y1;if (vy < vx && vx > -vy) {direction = OUT_RIGHT;} else if (vy > vx && vy > -vx) {direction = OUT_TOP;} else if (vx < vy && vx < -vy) {direction = OUT_LEFT;} else {direction = OUT_BOTTOM;}return direction;', 'comment': '/*** Returns the direction OUT_TOP, OUT_BOTTOM, OUT_LEFT, OUT_RIGHT from* one point to another one.*/', 'coherence': 1}, {'code': 'public static Point angleToPoint(Rectangle r, double angle) {double si = sin(angle);double co = cos(angle);double e = 0.0001;int x = 0, y = 0;if (abs(si) > e) {x = (int) ((1.0 + co / abs(si)) / 2.0 * r.width);x = range(0, r.width, x);} else if (co >= 0.0) {x = r.width;}if (abs(co) > e) {y = (int) ((1.0 + si / abs(co)) / 2.0 * r.height);y = range(0, r.height, y);} else if (si >= 0.0) {y = r.height;}return new Point(r.x + x, r.y + y);', 'comment': '/*** Gets the point on a rectangle that corresponds to the given angle.*/', 'coherence': 1}, {'code': 'public static Point2D.Double chop(Shape shape, Point2D.Double p) {Rectangle2D bounds = shape.getBounds2D();Point2D.Double ctr = new Point2D.Double(bounds.getCenterX(), bounds.getCenterY());// Chopped pointdouble cx = -1;double cy = -1;double len = Double.MAX_VALUE;// Try for points along edgePathIterator i = shape.getPathIterator(new AffineTransform(), 1);double[] coords = new double[6];int type = i.currentSegment(coords);double prevX = coords[0];double prevY = coords[1];double moveToX = prevX;double moveToY = prevY;i.next();for (; !i.isDone(); i.next()) {switch (i.currentSegment(coords)) {case PathIterator.SEG_MOVETO:moveToX = coords[0];moveToY = coords[1];break;case PathIterator.SEG_CLOSE:coords[0] = moveToX;coords[1] = moveToY;break;}Point2D.Double chop = Geom.intersect(prevX, prevY,coords[0], coords[1],p.x, p.y,ctr.x, ctr.y);if (chop != null) {double cl = Geom.length2(chop.x, chop.y, p.x, p.y);if (cl < len) {len = cl;cx = chop.x;cy = chop.y;}}prevX = coords[0];prevY = coords[1];}/*if (isClosed() && size() > 1) {Node first = get(0);Node last = get(size() - 1);Point2D.Double chop = Geom.intersect(first.x[0], first.y[0],last.x[0], last.y[0],p.x, p.y,ctr.x, ctr.y);if (chop != null) {double cl = Geom.length2(chop.x, chop.y, p.x, p.y);if (cl < len) {len = cl;cx = chop.x;cy = chop.y;}}}*/// if none found, pick closest vertexif (len == Double.MAX_VALUE) {i = shape.getPathIterator(new AffineTransform(), 1);for (; !i.isDone(); i.next()) {i.currentSegment(coords);double l = Geom.length2(ctr.x, ctr.y, coords[0], coords[1]);if (l < len) {len = l;cx = coords[0];cy = coords[1];}}}return new Point2D.Double(cx, cy);', 'comment': '/*** Returns a point on the edge of the bezier path which crosses the line* from the center of the bezier path to the specified point.* If no edge crosses the line, the nearest C0 control point is returned.*/', 'coherence': 1}, {'code': 'public static long length(int x1, int y1, int x2, int y2) {return (long) sqrt(length2(x1, y1, x2, y2));', 'comment': '/*** Gets the distance between to points*/', 'coherence': 1}, {'code': 'public static void grow(Rectangle2D.Double r, double h, double v) {r.x -= h;r.y -= v;r.width += h * 2d;r.height += v * 2d;', 'comment': '/*** Resizes the <code>Rectangle2D.Double</code> both horizontally and vertically.* <p>* This method modifies the <code>Rectangle2D.Double</code> so that it is* <code>h</code> units larger on both the left and right side,* and <code>v</code> units larger at both the top and bottom.* <p>* The new <code>Rectangle2D.Double</code> has (<code>x&nbsp;-&nbsp;h</code>,* <code>y&nbsp;-&nbsp;v</code>) as its top-left corner, a* width of* <code>width</code>&nbsp;<code>+</code>&nbsp;<code>2h</code>,* and a height of* <code>height</code>&nbsp;<code>+</code>&nbsp;<code>2v</code>.* <p>* If negative values are supplied for <code>h</code> and* <code>v</code>, the size of the <code>Rectangle2D.Double</code>* decreases accordingly.* The <code>grow</code> method does not check whether the resulting* values of <code>width</code> and <code>height</code> are* non-negative.* @param h the horizontal expansion* @param v the vertical expansion*/', 'coherence': 1}, {'code': 'public static int outcode(Rectangle2D.Double r1, Rectangle2D.Double r2) {int outcode = 0;if (r2.x > r1.x + r1.width) {outcode = OUT_RIGHT;} else if (r2.x + r2.width < r1.x) {outcode = OUT_LEFT;}if (r2.y > r1.y + r1.height) {outcode |= OUT_BOTTOM;} else if (r2.y + r2.height < r1.y) {outcode |= OUT_TOP;}return outcode;', 'comment': '/*** This method computes a binary OR of the appropriate mask values* indicating, for each side of Rectangle r1, whether or not the* Rectangle r2 is on the same side of the edge as the rest* of this Rectangle.********* @return the logical OR of all appropriate out codes OUT_RIGHT, OUT_LEFT, OUT_BOTTOM,* OUT_TOP.*/', 'coherence': 1}, {'code': 'public static int direction(int x1, int y1, int x2, int y2) {int direction = 0;int vx = x2 - x1;int vy = y2 - y1;if (vy < vx && vx > -vy) {direction = OUT_RIGHT;} else if (vy > vx && vy > -vx) {direction = OUT_TOP;} else if (vx < vy && vx < -vy) {direction = OUT_LEFT;} else {direction = OUT_BOTTOM;}return direction;', 'comment': '/*** Returns the direction OUT_TOP, OUT_BOTTOM, OUT_LEFT, OUT_RIGHT from* one point to another one.*/', 'coherence': 1}, {'code': 'public static double range(double min, double max, double value) {if (value < min) {value = min;}if (value > max) {value = max;}return value;', 'comment': '/*** Constains a value to the given range.* @return the constrained value*/', 'coherence': 1}, {'code': 'public static double angle(double x1, double y1, double x2, double y2) {return atan2(y2 - y1, x2 - x1);', 'comment': '/*** Gets the angle of the specified line.*/', 'coherence': 1}, {'code': 'public static boolean lineContainsPoint(double x1, double y1,double x2, double y2,double px, double py, double tolerance) {Rectangle2D.Double r = new Rectangle2D.Double(x1, y1, 0, 0);r.add(x2, y2);double grow = max(2, (int) ceil(tolerance));r.x -= grow;r.y -= grow;r.width += grow * 2;r.height += grow * 2;if (!r.contains(px, py)) {return false;}double a, b, x, y;if (x1 == x2) {return (abs(px - x1) <= tolerance);}if (y1 == y2) {return (abs(py - y1) <= tolerance);}a = (double) (y1 - y2) / (double) (x1 - x2);b = (double) y1 - a * (double) x1;x = (py - b) / a;y = a * px + b;return (min(abs(x - px), abs(y - py)) <= tolerance);', 'comment': '/*** Tests if a point is on a line.* <p>changed Werner Randelshofer 2003-11-26*/', 'coherence': 1}, {'code': 'public static boolean lineContainsPoint(int x1, int y1,int x2, int y2,int px, int py) {return lineContainsPoint(x1, y1, x2, y2, px, py, 3d);', 'comment': '/*** Tests if a point is on a line.*/', 'coherence': 1}, {'code': 'public static Point polarToPoint(double angle, double fx, double fy) {double si = sin(angle);double co = cos(angle);return new Point((int) (fx * co + 0.5), (int) (fy * si + 0.5));', 'comment': '/*** Converts a polar to a point*/', 'coherence': 1}, {'code': 'public static double pointToAngle(Rectangle2D.Double r, Point2D.Double p) {double px = p.x - (r.x + r.width / 2);double py = p.y - (r.y + r.height / 2);return atan2(py * r.width, px * r.height);', 'comment': '/*** Gets the angle of a point relative to a rectangle.*/', 'coherence': 1}, {'code': 'public static Point2D.Double cap(Point2D.Double p1, Point2D.Double p2, double radius) {double angle = PI / 2 - atan2(p2.x - p1.x, p2.y - p1.y);Point2D.Double p3 = new Point2D.Double(p2.x + radius * cos(angle),p2.y + radius * sin(angle));return p3;', 'comment': '/*** Caps the line defined by p1 and p2 by the number of units* specified by radius.* @return A new end point for the line.*/', 'coherence': 1}, {'code': 'public static long length2(int x1, int y1, int x2, int y2) {return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);', 'comment': '/*** Gets the square distance between two points.*/', 'coherence': 1}, {'code': 'public void reset() {npoints = 0;invalidate();', 'comment': '/*** Resets this <code>Polygon</code> object to an empty polygon.* The coordinate arrays and the data in them are left untouched* but the number of points is reset to zero to mark the old* vertex data as invalid and to start accumulating new vertex* data at the beginning.* All internally-cached data relating to the old vertices* are discarded.* Note that since the coordinate arrays from before the reset* are reused, creating a new empty <code>Polygon</code> might* be more memory efficient than resetting the current one if* the number of vertices in the new polygon data is significantly* smaller than the number of vertices in the data from before the* reset.* @see     java.awt.Polygon#invalidate**/', 'coherence': 1}, {'code': 'public boolean contains(Point p) {return contains(p.x, p.y);', 'comment': '/*** Determines whether the specified {@link Point} is inside this* <code>Polygon</code>.* @param p the specified <code>Point</code> to be tested* @return <code>true</code> if the <code>Polygon</code> contains the*       <code>Point</code>; <code>false</code> otherwise.* @see #contains(double, double)**/', 'coherence': 1}, {'code': 'public Rectangle getBounds() {return getBounds2D().getBounds();', 'comment': '/*** Gets the bounding box of this <code>Polygon</code>.* The bounding box is the smallest {@link Rectangle} whose* sides are parallel to the x and y axes of the* coordinate space, and can completely contain the <code>Polygon</code>.* @return a <code>Rectangle</code> that defines the bounds of this* <code>Polygon</code>.**/', 'coherence': 1}, {'code': '@Deprecatedpublic boolean inside(int x, int y) {return contains((double) x, (double) y);', 'comment': '/*** Determines whether the specified coordinates are contained in this* <code>Polygon</code>.* @param x the specified X coordinate to be tested* @param y the specified Y coordinate to be tested* @return {@code true} if this {@code Polygon} contains*     the specified coordinates {@code (x,y)};*     {@code false} otherwise.* @see #contains(double, double)* @deprecated As of JDK version 1.1,* replaced by <code>contains(int, int)</code>.**/', 'coherence': 1}, {'code': 'public boolean contains(int x, int y) {return contains((double) x, (double) y);', 'comment': '/*** Determines whether the specified coordinates are inside this* <code>Polygon</code>.* <p>* @param x the specified X coordinate to be tested* @param y the specified Y coordinate to be tested* @return {@code true} if this {@code Polygon} contains*     the specified coordinates {@code (x,y)};*     {@code false} otherwise.* @see #contains(double, double)**/', 'coherence': 1}, {'code': '@Overridepublic void translate(double deltaX, double deltaY) {for (int i = 0; i < npoints; i++) {xpoints[i] += deltaX;ypoints[i] += deltaY;}if (bounds != null) {bounds.x += deltaX;bounds.y += deltaY;', 'comment': '/*** Translates the vertices of the <code>Polygon</code> by* <code>deltaX</code> along the x axis and by* <code>deltaY</code> along the y axis.* @param deltaX the amount to translate along the X axis* @param deltaY the amount to translate along the Y axis**/', 'coherence': 1}, {'code': 'void calculateBounds(double xpoints[], double ypoints[], int npoints) {double boundsMinX = java.lang.Double.MAX_VALUE;double boundsMinY = java.lang.Double.MAX_VALUE;double boundsMaxX = -java.lang.Double.MAX_VALUE;double boundsMaxY = -java.lang.Double.MAX_VALUE;for (int i = 0; i < npoints; i++) {double x = xpoints[i];boundsMinX = Math.min(boundsMinX, x);boundsMaxX = Math.max(boundsMaxX, x);double y = ypoints[i];boundsMinY = Math.min(boundsMinY, y);boundsMaxY = Math.max(boundsMaxY, y);}bounds = new Rectangle2D.Double(boundsMinX, boundsMinY,boundsMaxX - boundsMinX,boundsMaxY - boundsMinY);', 'comment': '/** Calculates the bounding box of the points passed to the constructor.* Sets <code>bounds</code> to the result.* @param xpoints[] array of <i>x</i> coordinates* @param ypoints[] array of <i>y</i> coordinates* @param npoints the total number of points*/', 'coherence': 1}, {'code': 'void updateBounds(double x, double y) {if (x < bounds.x) {bounds.width = bounds.width + (bounds.x - x);bounds.x = x;} else {bounds.width = Math.max(bounds.width, x - bounds.x);// bounds.x = bounds.x;}if (y < bounds.y) {bounds.height = bounds.height + (bounds.y - y);bounds.y = y;} else {bounds.height = Math.max(bounds.height, y - bounds.y);', 'comment': '/** Resizes the bounding box to accomodate the specified coordinates.* @param x,&nbsp;y the specified coordinates*/', 'coherence': 1}, {'code': 'void updateBounds(float x, float y) {if (x < bounds.x) {bounds.width = bounds.width + (bounds.x - x);bounds.x = x;} else {bounds.width = Math.max(bounds.width, x - bounds.x);// bounds.x = bounds.x;}if (y < bounds.y) {bounds.height = bounds.height + (bounds.y - y);bounds.y = y;} else {bounds.height = Math.max(bounds.height, y - bounds.y);', 'comment': '/** Resizes the bounding box to accomodate the specified coordinates.* @param x,&nbsp;y the specified coordinates*/', 'coherence': 1}, {'code': 'public Float(float xpoints[], float ypoints[], int npoints) {// Fix 4489009: should throw IndexOutofBoundsException instead// of OutofMemoryException if npoints is huge and > {x,y}points.lengthif (npoints > xpoints.length || npoints > ypoints.length) {throw new IndexOutOfBoundsException("npoints > xpoints.length || " +"npoints > ypoints.length");}// Fix 6191114: should throw NegativeArraySizeException with// negative npointsif (npoints < 0) {throw new NegativeArraySizeException("npoints < 0");}// Fix 6343431: Applet compatibility problems if arrays are not// exactly npoints in lengththis.npoints = npoints;this.xpoints = new float[npoints];System.arraycopy(xpoints, 0, this.xpoints, 0,npoints);this.ypoints = new float[npoints];System.arraycopy(ypoints, 0, this.ypoints, 0,npoints);', 'comment': '/*** Constructs and initializes a <code>Polygon</code> from the specified* parameters.* @param xpoints an array of X coordinates* @param ypoints an array of Y coordinates* @param npoints the total number of points in the*        <code>Polygon</code>* @exception  NegativeArraySizeException if the value of*             <code>npoints</code> is negative.* @exception  IndexOutOfBoundsException if <code>npoints</code> is*       greater than the length of <code>xpoints</code>*       or the length of <code>ypoints</code>.* @exception  NullPointerException if <code>xpoints</code> or*       <code>ypoints</code> is <code>null</code>.**/', 'coherence': 1}, {'code': 'void calculateBounds(float xpoints[], float ypoints[], int npoints) {float boundsMinX = java.lang.Float.MAX_VALUE;float boundsMinY = java.lang.Float.MAX_VALUE;float boundsMaxX = -java.lang.Float.MAX_VALUE;float boundsMaxY = -java.lang.Float.MAX_VALUE;for (int i = 0; i < npoints; i++) {float x = xpoints[i];boundsMinX = Math.min(boundsMinX, x);boundsMaxX = Math.max(boundsMaxX, x);float y = ypoints[i];boundsMinY = Math.min(boundsMinY, y);boundsMaxY = Math.max(boundsMaxY, y);}bounds = new Rectangle2D.Float(boundsMinX, boundsMinY,boundsMaxX - boundsMinX,boundsMaxY - boundsMinY);', 'comment': '/** Calculates the bounding box of the points passed to the constructor.* Sets <code>bounds</code> to the result.* @param xpoints[] array of <i>x</i> coordinates* @param ypoints[] array of <i>y</i> coordinates* @param npoints the total number of points*/', 'coherence': 1}, {'code': '@Overridepublic void translate(double deltaX, double deltaY) {translate((float) deltaX, (float) deltaY);', 'comment': '/*** Translates the vertices of the <code>Polygon</code> by* <code>deltaX</code> along the x axis and by* <code>deltaY</code> along the y axis.* @param deltaX the amount to translate along the X axis* @param deltaY the amount to translate along the Y axis**/', 'coherence': 1}, {'code': 'public int getWindingRule() {return WIND_EVEN_ODD;', 'comment': '/*** Returns the winding rule for determining the interior of the* path.* @return an integer representing the current winding rule.* @see PathIterator#WIND_NON_ZERO*/', 'coherence': 1}, {'code': 'public void next() {index++;', 'comment': '/*** Moves the iterator forwards, along the primary direction of* traversal, to the next segment of the path when there are* more points in that direction.*/', 'coherence': 1}, {'code': 'public boolean isDone() {return index > poly.npoints;', 'comment': '/*** Tests if there are more points to read.* @return <code>true</code> if there are more points to read;*      <code>false</code> otherwise.*/', 'coherence': 1}, {'code': 'public int currentSegment(float[] coords) {if (index >= poly.npoints) {return SEG_CLOSE;}coords[0] = (float) poly.xpoints[index];coords[1] = (float) poly.ypoints[index];if (transform != null) {transform.transform(coords, 0, coords, 0, 1);}return (index == 0 ? SEG_MOVETO : SEG_LINETO);', 'comment': '/*** Returns the coordinates and type of the current path segment in* the iteration.* The return value is the path segment type:* SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.* A <code>float</code> array of length 2 must be passed in and* can be used to store the coordinates of the point(s).* Each point is stored as a pair of <code>float</code> x,&nbsp;y* coordinates.  SEG_MOVETO and SEG_LINETO types return one* point, and SEG_CLOSE does not return any points.* @param coords a <code>float</code> array that specifies the* coordinates of the point(s)* @return an integer representing the type and coordinates of the*     current path segment.* @see PathIterator#SEG_MOVETO* @see PathIterator#SEG_LINETO* @see PathIterator#SEG_CLOSE*/', 'coherence': 1}, {'code': 'public int getWindingRule() {return WIND_EVEN_ODD;', 'comment': '/*** Returns the winding rule for determining the interior of the* path.* @return an integer representing the current winding rule.* @see PathIterator#WIND_NON_ZERO*/', 'coherence': 1}, {'code': 'public int currentSegment(float[] coords) {if (index >= poly.npoints) {return SEG_CLOSE;}coords[0] = (float) poly.xpoints[index];coords[1] = (float) poly.ypoints[index];if (transform != null) {transform.transform(coords, 0, coords, 0, 1);}return (index == 0 ? SEG_MOVETO : SEG_LINETO);', 'comment': '/*** Returns the coordinates and type of the current path segment in* the iteration.* The return value is the path segment type:* SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.* A <code>float</code> array of length 2 must be passed in and* can be used to store the coordinates of the point(s).* Each point is stored as a pair of <code>float</code> x,&nbsp;y* coordinates.  SEG_MOVETO and SEG_LINETO types return one* point, and SEG_CLOSE does not return any points.* @param coords a <code>float</code> array that specifies the* coordinates of the point(s)* @return an integer representing the type and coordinates of the*     current path segment.* @see PathIterator#SEG_MOVETO* @see PathIterator#SEG_LINETO* @see PathIterator#SEG_CLOSE*/', 'coherence': 1}, {'code': 'public boolean isDone() {return index > poly.npoints;', 'comment': '/*** Tests if there are more points to read.* @return <code>true</code> if there are more points to read;*      <code>false</code> otherwise.*/', 'coherence': 1}, {'code': 'public void next() {index++;', 'comment': '/*** Moves the iterator forwards, along the primary direction of* traversal, to the next segment of the path when there are* more points in that direction.*/', 'coherence': 1}, {'code': 'public int hashCode() {double sum1 = getLeft() + getBottom();double sum2 = getRight() + getTop();double val1 = sum1 * (sum1 + 1)/2 + getLeft();double val2 = sum2 * (sum2 + 1)/2 + getTop();double sum3 = val1 + val2;return java.lang.Float.floatToIntBits((float) (sum3 * (sum3 + 1)/2 + val2));', 'comment': '/*** Returns the hash code for this Insets2DDouble.** @return  a hash code for this Insets2DDouble.*/', 'coherence': 1}, {'code': "public Object clone() {try {return super.clone();} catch (CloneNotSupportedException e) {// this shouldn't happen, since we are Cloneablethrow new InternalError();", 'comment': '/*** Creates a new object of the same class as this object.*/', 'coherence': 1}, {'code': 'public void add(Insets2D i) {set(getTop() + i.getTop(),getLeft() + i.getLeft(),getBottom() + i.getBottom(),getRight() + i.getRight()', 'comment': '/*** Adds the specified insets to the current insets.** @param i The insets to be added.*/', 'coherence': 1}, {'code': 'public void subtractTo(Rectangle2D r) {r.setRect(r.getX() + getLeft(),r.getY() + getTop(),r.getWidth() - getLeft() - getRight(),r.getHeight() - getTop() - getBottom()', 'comment': '/*** Subtracts the current insets to the specified Rectangle2D making the* rectangle smaller.** @param r The Rectangle2D.*/', 'coherence': 1}, {'code': 'public void subtract(Insets2D i) {set(getTop() - i.getTop(),getLeft() - i.getLeft(),getBottom() - i.getBottom(),getRight() - i.getRight()', 'comment': '/*** Subtracts the specified insets from the current insets.** @param i The insets to be subtracted.*/', 'coherence': 1}, {'code': 'public void subtract(double top, double left, double bottom, double right) {set(getTop() - top,getLeft() - left,getBottom() - bottom,getRight() - right', 'comment': '/*** Subtracts the specified insets from the current insets.** @param top The top insets.* @param left The left insets.* @param bottom The bottom insets.* @param right The right insets.*/', 'coherence': 1}, {'code': 'public void add(double top, double left, double bottom, double right) {set(getTop() + top,getLeft() + left,getBottom() + bottom,getRight() + right', 'comment': '/*** Adds the specified insets to the current insets.** @param top The top insets.* @param left The left insets.* @param bottom The bottom insets.* @param right The right insets.*/', 'coherence': 1}, {'code': 'public void set(Insets2D i) {set(i.getTop(), i.getLeft(), i.getBottom(), i.getRight());', 'comment': '/*** Sets the insets.** @param i The new insets.*/', 'coherence': 1}, {'code': 'public void addTo(Rectangle2D r) {r.setRect(r.getX() - getLeft(),r.getY() - getTop(),r.getWidth() + getLeft() + getRight(),r.getHeight() + getTop() + getBottom()', 'comment': '/*** Adds the current insets to the specified Rectangle2D making the* rectangle larger.** @param r The Rectangle2D.*/', 'coherence': 1}, {'code': 'public boolean equals(Object obj) {if (obj instanceof Insets2D) {Insets2D that = (Insets2D)obj;return ((getTop() == that.getTop()) &&(getLeft() == that.getLeft()) &&(getBottom() == that.getBottom()) &&(getRight() == that.getRight()));}return false;', 'comment': '/*** Checks whether two insets objects are equal. Two instances* of <code>Insets2DDouble</code> are equal if the four integer values* of the fields <code>top</code>, <code>left</code>,* <code>bottom</code>, and <code>right</code> are all equal.* @return    <code>true</code> if the two insets are equal;*              otherwise <code>false</code>.* @since     JDK1.1*/', 'coherence': 1}, {'code': 'public Dimension2DDouble(double width, double height) {this.width = width;this.height = height;', 'comment': '/*** Constructs a <code>Dimension2DDouble</code> and initializes* it to the specified width and specified height.** @param width the specified width* @param height the specified height*/', 'coherence': 1}, {'code': 'public Dimension2DDouble(Dimension2DDouble d) {this(d.width, d.height);', 'comment': '/*** Creates an instance of <code>Dimension2DDouble</code> whose width* and height are the same as for the specified dimension.** @param  d   the specified dimension for the*         <code>width</code> and*         <code>height</code> values*/', 'coherence': 1}, {'code': 'public int hashCode() {float sum = (float) (width + height);return Float.floatToIntBits(sum * (sum + 1)/2 + (float) width);', 'comment': '/*** Returns the hash code for this <code>Dimension2DDouble</code>.** @return  a hash code for this <code>Dimension2DDouble</code>*/', 'coherence': 1}, {'code': 'public void setSize(double width, double height) {this.width = width;this.height = height;', 'comment': '/*** Sets the size of this <code>Dimension2DDouble</code> object to* the specified width and height in double precision.* Note that if <code>width</code> or <code>height</code>* are larger than <code>Integer.MAX_VALUE</code>, they will* be reset to <code>Integer.MAX_VALUE</code>.** @param width  the new width for the <code>Dimension2DDouble</code> object* @param height the new height for the <code>Dimension2DDouble</code> object*/', 'coherence': 1}, {'code': 'public Dimension2DDouble() {this(0, 0);', 'comment': '/*** Creates an instance of <code>Dimension2DDouble</code> with a width* of zero and a height of zero.*/', 'coherence': 1}, {'code': 'public void setSize(Dimension2DDouble d) {setSize(d.width, d.height);', 'comment': '/*** Sets the size of this <code>Dimension2DDouble</code> object to the specified size.* This method is included for completeness, to parallel the* <code>setSize</code> method defined by <code>Component</code>.* @param  d  the new size for this <code>Dimension2DDouble</code> object* @see    Dimension2DDouble#getSize* @see    java.awt.Component#setSize* @since  JDK1.1*/', 'coherence': 1}, {'code': 'public double getWidth() {return width;', 'comment': '/*** Returns the width of this dimension in double precision.* @return the width of this dimension in double precision*/', 'coherence': 1}, {'code': 'public double getHeight() {return height;', 'comment': '/*** Returns the height of this dimension in double precision.* @return the height of this dimension in double precision*/', 'coherence': 1}, {'code': 'public Dimension2DDouble getSize() {return new Dimension2DDouble(width, height);', 'comment': '/*** Gets the size of this <code>Dimension2DDouble</code> object.* This method is included for completeness, to parallel the* <code>getSize</code> method defined by <code>Component</code>.** @return   the size of this dimension, a new instance of*       <code>Dimension2DDouble</code> with the same width and height* @see    Dimension2DDouble#setSize* @see    java.awt.Component#getSize* @since  JDK1.1*/', 'coherence': 1}, {'code': 'public boolean equals(Object obj) {if (obj instanceof Dimension2DDouble) {Dimension2DDouble d = (Dimension2DDouble)obj;return (width == d.width) && (height == d.height);}return false;', 'comment': '/*** Checks whether two dimension objects have equal values.*/', 'coherence': 1}, {'code': '@Overridepublic boolean isSelectable() {return isSelectable;', 'comment': '/*** Checks whether this figure is selectable. By default* {@code AbstractFigure} can be selected.*/', 'coherence': 1}, {'code': 'protected void fireFigureRemoved() {if (listenerList.getListenerCount() > 0) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, getBounds());}((FigureListener) listeners[i + 1]).figureRemoved(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': '@Overridepublic void willChange() {if (changingDepth == 0) {fireAreaInvalidated();invalidate();}changingDepth++;', 'comment': '/*** Informs that a figure is about to change something that* affects the contents of its display box.*/', 'coherence': 1}, {'code': '@Overridepublic Tool getTool(Point2D.Double p) {return null;', 'comment': '/*** Returns a specialized tool for the given coordinate.* <p>Returns null, if no specialized tool is available.*/', 'coherence': 1}, {'code': '@Overridepublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {return false;', 'comment': '/*** Handles a mouse click.*/', 'coherence': 1}, {'code': '@Overridepublic void changed() {if (changingDepth == 1) {validate();fireFigureChanged(getDrawingArea());} else if (changingDepth < 0) {throw new InternalError("changed was called without a prior call to willChange. "+changingDepth);}changingDepth--;', 'comment': '/*** Informs that a figure changed the area of its display box.*/', 'coherence': 1}, {'code': '@Overridepublic boolean isTransformable() {return isTransformable;', 'comment': '/*** Checks whether this figure is transformable. By default* {@code AbstractFigure} can be transformed.*/', 'coherence': 1}, {'code': 'protected void fireFigureAdded() {if (listenerList.getListenerCount() > 0) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, getBounds());}((FigureListener) listeners[i + 1]).figureAdded(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': '@Overridepublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {return new ChopRectangleConnector(this);', 'comment': '/*** Returns the Figures connector for the specified location.* By default a ChopBoxConnector is returned.*** @see ChopRectangleConnector*/', 'coherence': 1}, {'code': 'protected void fireFigureHandlesChanged() {Rectangle2D.Double changedArea = getDrawingArea();if (listenerList.getListenerCount() > 0) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, changedArea);}((FigureListener) listeners[i + 1]).figureHandlesChanged(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'protected void fireAttributeChanged(AttributeKey attribute, Object oldValue, Object newValue) {if (listenerList.getListenerCount() > 0 &&(oldValue == null || newValue == null || !oldValue.equals(newValue))) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, attribute, oldValue, newValue);}((FigureListener) listeners[i + 1]).attributeChanged(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'protected void fireAreaInvalidated(Rectangle2D.Double invalidatedArea) {if (listenerList.getListenerCount() > 0) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, invalidatedArea);}((FigureListener) listeners[i + 1]).areaInvalidated(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'protected void fireFigureRequestRemove() {if (listenerList.getListenerCount() > 0) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, getBounds());}((FigureListener) listeners[i + 1]).figureRequestRemove(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public void fireAreaInvalidated() {fireAreaInvalidated(getDrawingArea());', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': '@Overridepublic Collection<Action> getActions(Point2D.Double p) {return Collections.emptyList();', 'comment': '/*** Returns a collection of actions which are presented to the user* in a popup menu.* <p>The collection may contain null entries. These entries are used* interpreted as separators in the popup menu.*/', 'coherence': 1}, {'code': 'protected void fireFigureChanged(Rectangle2D.Double changedArea) {if (listenerList.getListenerCount() > 0) {FigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {// Lazily create the event:if (event == null) {event = new FigureEvent(this, changedArea);}((FigureListener) listeners[i + 1]).figureChanged(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': '@Overridepublic boolean isConnectable() {return isConnectable;', 'comment': '/*** Checks whether this figure is connectable. By default* {@code AbstractFigure} can be connected.*/', 'coherence': 1}, {'code': 'protected void fireUndoableEditHappened(UndoableEdit edit) {if (getDrawing() != null) {getDrawing().fireUndoableEditHappened(edit);', 'comment': '/*** Notify all UndoableEditListener of the Drawing, to which this Figure has* been added to. If this Figure is not part of a Drawing, the event is* lost.*/', 'coherence': 1}, {'code': '@Overridepublic boolean isRemovable() {return isRemovable;', 'comment': '/*** Checks whether this figure is removable. By default* {@code AbstractFigure} can be removed.*/', 'coherence': 1}, {'code': 'protected void fireAreaInvalidated(FigureEvent event) {// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == FigureListener.class) {((FigureListener) listeners[i + 1]).areaInvalidated(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public String getKey() {return key;', 'comment': '/*** Returns the key string.* @return key string.*/', 'coherence': 1}, {'code': 'public UndoableEdit setUndoable(final Figure f, final T value) {if (value == null && !isNullValueAllowed) {throw new NullPointerException("Null value not allowed for AttributeKey " + key);}final Object restoreData = f.getAttributesRestoreData();f.set(this, value);UndoableEdit edit = new AbstractUndoableEdit() {@Overridepublic String getPresentationName() {return AttributeKey.this.getPresentationName();}@Overridepublic void undo() {super.undo();f.willChange();f.restoreAttributesTo(restoreData);f.changed();}@Overridepublic void redo() {super.redo();f.willChange();f.set(AttributeKey.this, value);f.changed();}};return edit;', 'comment': '/*** Sets the attribute and returns an UndoableEditEvent which can be used* to undo it.* <p>* Note: Unlike in previous versions of JHotDraw 7, this method does* not call {@code f.willChange()} before setting the value, and* {@code f.changed()} afterwards.*/', 'coherence': 1}, {'code': 'public T getDefaultValue() {return defaultValue;', 'comment': '/*** Returns the default value of the attribute.** @return the default value.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public T put(Map<AttributeKey, Object> a, T value) {if (value == null && !isNullValueAllowed) {throw new NullPointerException("Null value not allowed for AttributeKey " + key);}return (T) a.put(this, value);', 'comment': '/*** Use this method to perform a type-safe put operation of an attribute* into a Map.** @param a An attribute map.* @param value The new value.* @return The old value.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public T get(Map<AttributeKey, Object> a) {return a.containsKey(this) ? (T) a.get(this) : defaultValue;', 'comment': '/*** Gets the value of the attribute denoted by this AttributeKey from* a Map.** @param a A Map.* @return The value of the attribute.*/', 'coherence': 1}, {'code': 'public AttributeKey(String key, Class<T> clazz, T defaultValue, boolean isNullValueAllowed) {this(key, clazz, defaultValue, isNullValueAllowed, null);', 'comment': '/** Creates a new instance with the specified attribute key, type token class,* default value, and allowing or disallowing null values. */', 'coherence': 1}, {'code': 'public void putClone(Map<AttributeKey, Object> a, T value) {try {put(a, value == null ? null : clazz.cast(Methods.invoke(value, "clone")));} catch (NoSuchMethodException ex) {InternalError e = new InternalError();e.initCause(ex);throw e;', 'comment': '/*** Convenience method for putting a clone of a value on a map.** @param a the map* @param value the attribute value*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public T getClone(Figure f) {T value = f.get(this);try {return value == null ? null : clazz.cast(Methods.invoke(value, "clone"));} catch (NoSuchMethodException ex) {InternalError e = new InternalError();e.initCause(ex);throw e;', 'comment': '/*** Gets a clone of the value from the Figure.*/', 'coherence': 1}, {'code': 'public void setClone(Figure f, T value) {try {f.set(this, value == null ? null : clazz.cast(Methods.invoke(value, "clone")));} catch (NoSuchMethodException ex) {InternalError e = new InternalError();e.initCause(ex);throw e;', 'comment': '/*** Convenience method for setting a clone of a value on a figure.* <p>* Note: Unlike in previous versions of JHotDraw 7, this method does* not call {@code f.willChange()} before setting the value, and* {@code f.changed()} afterwards.** @param f the Figure* @param value the attribute value*/', 'coherence': 1}, {'code': 'public String getPresentationName() {return (labels == null) ? key : labels.getString("attribute." + key + ".text");', 'comment': '/*** Returns a localized human friendly presentation of the key.* @return the presentation name of the key.*/', 'coherence': 1}, {'code': 'public T get(Figure f) {return f.get(this);', 'comment': '/*** Gets the value of the attribute denoted by this AttributeKey from* a Figure.** @param f A figure.* @return The value of the attribute.*/', 'coherence': 1}, {'code': 'public boolean isAssignable(Object value) {if (value == null) {return isNullValueAllowed();}return clazz.isInstance(value);', 'comment': '/*** Returns true if the specified value is assignable with this key.** @param value* @return True if assignable.*/', 'coherence': 1}, {'code': 'public AttributeKey(String key, Class<T> clazz) {this(key, clazz, null, true);', 'comment': '/** Creates a new instance with the specified attribute key, type token class,* default value null, and allowing null values. */', 'coherence': 1}, {'code': 'public void set(Figure f, T value) {if (value == null && !isNullValueAllowed) {throw new NullPointerException("Null value not allowed for AttributeKey " + key);}f.set(this, value);', 'comment': '/*** Convenience method for setting a value on a Figure.* <p>* Note: Unlike in previous versions of JHotDraw 7, this method does* not call {@code f.willChange()} before setting the value, and* {@code f.changed()} afterwards.** @param f the Figure* @param value the attribute value*/', 'coherence': 1}, {'code': 'public AttributeKey(String key, Class<T> clazz, T defaultValue) {this(key, clazz, defaultValue, true);', 'comment': '/** Creates a new instance with the specified attribute key, type token class,* and default value, and allowing null values. */', 'coherence': 1}, {'code': 'public AttributeKey(String key, Class<T> clazz, T defaultValue, boolean isNullValueAllowed, ResourceBundleUtil labels) {this.key = key;this.clazz = clazz;this.defaultValue = defaultValue;this.isNullValueAllowed = isNullValueAllowed;this.labels = (labels == null) ? ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels") : labels;', 'comment': '/** Creates a new instance with the specified attribute key, type token class,* default value, and allowing or disallowing null values.** @param key The key string.* @param clazz This is used as a "type token" for assignability checks* at runtime.* @param isNullValueAllowed whether null values are allowed.* @param labels ResourceBundle for human friendly representation of this* attribute key. The ResourceBundle must have a property named* {@code "attribute." + key + ".text"}.*/', 'coherence': 1}, {'code': 'public boolean isNullValueAllowed() {return isNullValueAllowed;', 'comment': '/*** Returns true if null values are allowed.* @return true if null values are allowed.*/', 'coherence': 1}, {'code': 'public Point2D.Double getPoint(int index) {return path.get(index).getControlPoint(0);', 'comment': '/*** Convenience method for getting the point coordinate of* the first control point of the specified node.*/', 'coherence': 1}, {'code': 'public BezierFigure(boolean isClosed) {path = new BezierPath();set(PATH_CLOSED, isClosed);', 'comment': '/*** Creates an empty BezierFigure, for example without any* <code>BezierPath.Node</code>s.* The BezierFigure will not draw anything, unless at least two nodes* are added to it.** @param isClosed Specifies whether the <code>BezierPath</code> shall* be closed.*/', 'coherence': 1}, {'code': 'public BezierPath.Node getNode(int index) {return (BezierPath.Node) path.get(index).clone();', 'comment': '/*** Gets a control point.*/', 'coherence': 1}, {'code': "public void setStartPoint(Point2D.Double p) {// Add two nodes if we haven't at least two nodesfor (int i=getNodeCount(); i < 2; i++) {addNode(0, new BezierPath.Node(p.x, p.y));}setPoint(0, p);", 'comment': '/*** Convenience method for setting the point coordinate of the start point.* If the BezierFigure has not at least two nodes, nodes are added* to the figure until the BezierFigure has at least two nodes.*/', 'coherence': 1}, {'code': 'public int findNode(Point2D.Double p) {BezierPath tp = path;for (int i=0; i < tp.size(); i++) {BezierPath.Node p2 = tp.get(i);if (p2.x[0] == p.x && p2.y[0] == p.y) {return i;}}return -1;', 'comment': '/*** Finds a control point index.* Returns -1 if no control point could be found.* FIXME - Move this to BezierPath*/', 'coherence': 1}, {'code': '@Overridepublic Point2D.Double getEndPoint() {return getPoint(getNodeCount() - 1, 0);', 'comment': '/*** Convenience method for getting the end point.*/', 'coherence': 1}, {'code': 'public void setPoint(int index, int coord, Point2D.Double p) {BezierPath.Node cp = new BezierPath.Node(path.get(index));cp.setControlPoint(coord, p);setNode(index, cp);', 'comment': '/*** Sets the point coordinate of a control point.*/', 'coherence': 1}, {'code': '@Overridepublic Point2D.Double getStartPoint() {return getPoint(0, 0);', 'comment': '/*** Convenience method for getting the start point.*/', 'coherence': 1}, {'code': 'public int splitSegment(Point2D.Double split, float tolerance) {return path.splitSegment(split, tolerance);', 'comment': '/*** Splits the segment at the given Point2D.Double if a segment was hit.* @return the index of the segment or -1 if no segment was hit.*/', 'coherence': 1}, {'code': 'protected BezierPath getCappedPath() {if (cappedPath == null) {cappedPath = (BezierPath) path.clone();if (isClosed()) {cappedPath.setClosed(true);} else {if (cappedPath.size() > 1) {if (get(START_DECORATION) != null) {BezierPath.Node p0 = cappedPath.get(0);BezierPath.Node p1 = cappedPath.get(1);Point2D.Double pp;if ((p0.getMask() & BezierPath.C2_MASK) != 0) {pp = p0.getControlPoint(2);} else if ((p1.getMask() & BezierPath.C1_MASK) != 0) {pp = p1.getControlPoint(1);} else {pp = p1.getControlPoint(0);}double radius = get(START_DECORATION).getDecorationRadius(this);double lineLength = Geom.length(p0.getControlPoint(0), pp);cappedPath.set(0,0, Geom.cap(pp, p0.getControlPoint(0), - Math.min(radius, lineLength)));}if (get(END_DECORATION) != null) {BezierPath.Node p0 = cappedPath.get(cappedPath.size() - 1);BezierPath.Node p1 = cappedPath.get(cappedPath.size() - 2);Point2D.Double pp;if ((p0.getMask() & BezierPath.C1_MASK) != 0) {pp = p0.getControlPoint(1);} else if ((p1.getMask() & BezierPath.C2_MASK) != 0) {pp = p1.getControlPoint(2);} else {pp = p1.getControlPoint(0);}double radius = get(END_DECORATION).getDecorationRadius(this);double lineLength = Geom.length(p0.getControlPoint(0), pp);cappedPath.set(cappedPath.size() - 1, 0, Geom.cap(pp, p0.getControlPoint(0), -Math.min(radius, lineLength)));}cappedPath.invalidatePath();}}}return cappedPath;', 'comment': '/*** Returns a path which is cappedPath at the ends, to prevent* it from drawing under the end caps.*/--------------// EDITING--------------', 'coherence': 1}, {'code': 'public int joinSegments(Point2D.Double join, float tolerance) {return path.joinSegments(join, tolerance);', 'comment': '/*** Joins two segments into one if the given Point2D.Double hits a node* of the polyline.* @return true if the two segments were joined.*/', 'coherence': 1}, {'code': 'public BezierFigure() {this(false);', 'comment': '/*** Creates an empty <code>BezierFigure</code>, for example without any* <code>BezierPath.Node</code>s.* The BezierFigure will not draw anything, if at least two nodes* are added to it. The <code>BezierPath</code> created by this constructor* is not closed.*/', 'coherence': 1}, {'code': 'public int getNodeCount() {return path.size();', 'comment': '/*** Gets the node count.*/', 'coherence': 1}, {'code': 'public void setPoint(int index, Point2D.Double p) {BezierPath.Node node = path.get(index);double dx = p.x - node.x[0];double dy = p.y - node.y[0];for (int i=0; i < node.x.length; i++) {node.x[i] += dx;node.y[i] += dy;}invalidate();', 'comment': '/*** Sets the point coordinate of control point 0 at the specified node.*/', 'coherence': 1}, {'code': '@Overridepublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {return new ChopBezierConnector(this);', 'comment': '/*** Returns the Figures connector for the specified location.* By default a {@link ChopBezierConnector} is returned.*/', 'coherence': 1}, {'code': 'public BezierPath.Node removeNode(int index) {return path.remove(index);', 'comment': '/*** Removes the Node at the specified index.*/', 'coherence': 1}, {'code': 'public int findSegment(Point2D.Double find, double tolerance) {return getBezierPath().findSegment(find, tolerance);', 'comment': '/*** Gets the segment of the polyline that is hit by* the given Point2D.Double.** @param find a Point on the bezier path* @param tolerance a tolerance, tolerance should take into account* the line width, plus 2 divided by the zoom factor.* @return the index of the segment or -1 if no segment was hit.*/', 'coherence': 1}, {'code': '@Overridepublic void setBounds(Point2D.Double anchor, Point2D.Double lead) {setStartPoint(anchor);setEndPoint(lead);invalidate();', 'comment': '/*** Sets the location of the first and the last <code>BezierPath.Node</code>* of the BezierFigure.* If the BezierFigure has not at least two nodes, nodes are added* to the figure until the BezierFigure has at least two nodes.*/', 'coherence': 1}, {'code': 'public void addNode(final int index, BezierPath.Node p) {final BezierPath.Node newPoint = new BezierPath.Node(p);path.add(index, p);invalidate();', 'comment': '/*** Adds a node to the list of points.*/--------------// COMPOSITE FIGURES--------------', 'coherence': 1}, {'code': 'public BezierPath getBezierPath() {return (BezierPath) path.clone();', 'comment': '/*** Returns a clone of the bezier path of this figure.*/--------------// SHAPE AND BOUNDS--------------', 'coherence': 1}, {'code': 'public Point2D.Double getPoint(int index, int coord) {return path.get(index).getControlPoint(coord);', 'comment': '/*** Gets the point coordinate of a control point.*/', 'coherence': 1}, {'code': 'public void setNode(int index, BezierPath.Node p) {path.set(index, p);invalidate();', 'comment': '/*** Sets a control point.*/--------------// CLONING--------------', 'coherence': 1}, {'code': 'public void addNode(BezierPath.Node p) {addNode(getNodeCount(), p);', 'comment': '/*** Adds a control point.*/--------------// CONNECTING--------------', 'coherence': 1}, {'code': 'public boolean joinSegments(Point2D.Double join, double tolerance) {int i = findSegment(join, tolerance);if (i != -1 && i > 1) {removeNode(i);return true;}return false;', 'comment': '/*** Joins two segments into one if the given Point2D.Double hits a node* of the polyline.* @return true if the two segments were joined.** @param join a Point at a node on the bezier path* @param tolerance a tolerance, tolerance should take into account* the line width, plus 2 divided by the zoom factor.*/', 'coherence': 1}, {'code': 'public int splitSegment(Point2D.Double split, double tolerance) {int i = findSegment(split, tolerance);if (i != -1) {addNode(i + 1, new BezierPath.Node(split));}return i+1;', 'comment': '/*** Splits the segment at the given Point2D.Double if a segment was hit.* @return the index of the segment or -1 if no segment was hit.** @param split a Point on (or near) a line segment on the bezier path* @param tolerance a tolerance, tolerance should take into account* the line width, plus 2 divided by the zoom factor.*/', 'coherence': 1}, {'code': 'protected void removeAllNodes() {path.clear();', 'comment': '/*** Removes the Point2D.Double at the specified index.*/', 'coherence': 1}, {'code': "public void setEndPoint(Point2D.Double p) {// Add two nodes if we haven't at least two nodesfor (int i=getNodeCount(); i < 2; i++) {addNode(0, new BezierPath.Node(p.x, p.y));}setPoint(getNodeCount() - 1, p);", 'comment': '/*** Convenience method for setting the point coordinate of the end point.* If the BezierFigure has not at least two nodes, nodes are added* to the figure until the BezierFigure has at least two nodes.*/', 'coherence': 1}, {'code': 'public void addChangeListener(ChangeListener l) {listenerList.add(ChangeListener.class, l);', 'comment': '/*** Adds a <code>ChangeListener</code>.*/', 'coherence': 1}, {'code': 'public void removeChangeListener(ChangeListener l) {listenerList.remove(ChangeListener.class, l);', 'comment': '/*** Removes a <code>ChangeListener</code>.*/', 'coherence': 1}, {'code': '@Overridepublic void fireUndoableEditHappened(UndoableEdit edit) {UndoableEditEvent event = null;if (listenerList.getListenerCount() > 0) {// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (event == null) {event = new UndoableEditEvent(this, edit);}if (listeners[i] == UndoableEditListener.class) {((UndoableEditListener) listeners[i + 1]).undoableEditHappened(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': '@Overridepublic Object getLock() {return lock;', 'comment': '/*** The drawing view synchronizes on the lock when drawing a drawing.*/', 'coherence': 1}, {'code': 'private void invalidateSortOrder() {needsSorting = true;', 'comment': '/*** Invalidates the sort order.*/', 'coherence': 1}, {'code': 'private void ensureSorted() {if (needsSorting) {Collections.sort(children, FigureLayerComparator.INSTANCE);needsSorting = false;', 'comment': '/*** Ensures that the children are sorted in z-order sequence from back to* front.*/', 'coherence': 1}, {'code': 'public java.util.List<Figure> getFiguresFrontToBack() {ensureSorted();return new ReversedList<Figure>(getChildren());', 'comment': '/*** Returns an iterator to iterate in* Z-order front to back over the children.*/', 'coherence': 1}, {'code': 'protected InputMap createInputMap() {InputMap m = new InputMap();m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), DeleteAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, 0), DeleteAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0), SelectAllAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK), SelectAllAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.META_DOWN_MASK), SelectAllAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), IncreaseHandleDetailLevelAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), MoveConstrainedAction.West.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), MoveConstrainedAction.East.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), MoveConstrainedAction.North.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), MoveConstrainedAction.South.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.ALT_DOWN_MASK), MoveAction.West.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.ALT_DOWN_MASK), MoveAction.East.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.ALT_DOWN_MASK), MoveAction.North.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.ALT_DOWN_MASK), MoveAction.South.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.SHIFT_DOWN_MASK), MoveAction.West.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.SHIFT_DOWN_MASK), MoveAction.East.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.SHIFT_DOWN_MASK), MoveAction.North.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.SHIFT_DOWN_MASK), MoveAction.South.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.CTRL_DOWN_MASK), MoveAction.West.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.CTRL_DOWN_MASK), MoveAction.East.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.CTRL_DOWN_MASK), MoveAction.North.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.CTRL_DOWN_MASK), MoveAction.South.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK), CopyAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.META_DOWN_MASK), CopyAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK), PasteAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.META_DOWN_MASK), PasteAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK), CutAction.ID);m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.META_DOWN_MASK), CutAction.ID);return m;', 'comment': "/** Override this method to create a tool-specific input map, which* overrides the input map of the drawing edtior.* <p>* The implementation of this class creates an input map for the following* action ID's:* <ul>* <li>DeleteAction</li>* <li>SelectAllAction/li>* <li>IncreaseHandleDetailLevelAction</li>* <li>MoveConstrainedAction.West, .East, .North, .South</li>* <li>MoveAction.West, .East, .North, .South</li>* <li>CutAction</li>* <li>CopyAction</li>* <li>PasteAction</li>* </ul>*/", 'coherence': 1}, {'code': 'public DefaultDrawingEditor() {toolHandler = new ToolHandler();setDefaultAttribute(FILL_COLOR, Color.white);setDefaultAttribute(STROKE_COLOR, Color.black);setDefaultAttribute(TEXT_COLOR, Color.black);views = new HashSet<DrawingView>();inputMap = createInputMap();actionMap = createActionMap();', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void setTarget(DrawingEditor newValue) {if (target != null) {target.removePropertyChangeListener(forwarder);}this.target = newValue;if (target != null) {target.addPropertyChangeListener(forwarder);', 'comment': '/*** Sets the target of the proxy.*/', 'coherence': 1}, {'code': 'public DrawingEditorProxy() {forwarder = new Forwarder();', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes,Shape colorShape) {return createSelectionColorButton(editor, attributeKey,swatches, columnCount, labelKey, labels, defaultAttributes,colorShape, new LinkedList<Disposable>());', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Adobe Fireworks:* <ul>* <li>When the user clicks at the button a popup menu with a color palette* is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A shape on the color button displays the color of the selected* figures. If no figures are selected, the default color of the* DrawingEditor is displayed.</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.* @param colorShape This shape is superimposed on the icon of the button.* The shape is drawn with the default color of the DrawingEditor.*/", 'coherence': 1}, {'code': 'public static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels) {return createDrawingColorButton(editor, attributeKey,swatches, columnCount,labelKey, labels,null);', 'comment': '/*** Creates a color button, with an action region and a popup menu. The* button acts on attributes of the Drawing object in the current DrawingView* of the DrawingEditor.** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.*/', 'coherence': 1}, {'code': 'public static void addAlignmentButtonsTo(JToolBar bar, final DrawingEditor editor, java.util.List<Disposable> dsp) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");AbstractSelectedAction d;bar.add(d = new AlignAction.West(editor)).setFocusable(false);dsp.add(d);bar.add(d = new AlignAction.East(editor)).setFocusable(false);dsp.add(d);bar.add(d = new AlignAction.Horizontal(editor)).setFocusable(false);dsp.add(d);bar.add(d = new AlignAction.North(editor)).setFocusable(false);dsp.add(d);bar.add(d = new AlignAction.South(editor)).setFocusable(false);dsp.add(d);bar.add(d = new AlignAction.Vertical(editor)).setFocusable(false);dsp.add(d);bar.addSeparator();bar.add(d = new MoveAction.West(editor)).setFocusable(false);dsp.add(d);bar.add(d = new MoveAction.East(editor)).setFocusable(false);dsp.add(d);bar.add(d = new MoveAction.North(editor)).setFocusable(false);dsp.add(d);bar.add(d = new MoveAction.South(editor)).setFocusable(false);dsp.add(d);bar.addSeparator();bar.add(new BringToFrontAction(editor)).setFocusable(false);dsp.add(d);bar.add(new SendToBackAction(editor)).setFocusable(false);dsp.add(d);', 'comment': '/*** Creates toolbar buttons and adds them to the specified JToolBar.*/', 'coherence': 1}, {'code': 'public static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels) {return createSelectionColorButton(editor, attributeKey,swatches, columnCount,labelKey, labels,null);', 'comment': '/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Adobe Fireworks:* <ul>* <li>When the user clicks at the button a popup menu with a color palette* is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A shape on the color button displays the color of the selected* figures. If no figures are selected, the default color of the* DrawingEditor is displayed.</li>* <li>A rectangle on the color button displays the current default color of* the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,* width, height).</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.*/', 'coherence': 1}, {'code': 'public static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes) {return createDrawingColorButton(editor, attributeKey,swatches, columnCount, labelKey, labels, defaultAttributes,new Rectangle(1, 17, 20, 4));', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button acts on attributes of the Drawing object in the current DrawingView* of the DrawingEditor.** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.*/", 'coherence': 1}, {'code': 'public static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes,Shape colorShape) {return createDrawingColorButton(editor, attributeKey,swatches, columnCount, labelKey, labels, defaultAttributes,colorShape, new LinkedList<Disposable>());', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button acts on attributes of the Drawing object in the current DrawingView* of the DrawingEditor.** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.* @param colorShape This shape is superimposed on the icon of the button.* The shape is drawn with the default color of the DrawingEditor.*/", 'coherence': 1}, {'code': 'public static void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");JButton b;b = bar.add(new PickAttributesAction(editor));b.setFocusable(false);b = bar.add(new ApplyAttributesAction(editor));b.setFocusable(false);bar.addSeparator();addColorButtonsTo(bar, editor);bar.addSeparator();addStrokeButtonsTo(bar, editor);bar.addSeparator();addFontButtonsTo(bar, editor);', 'comment': '/*** Creates toolbar buttons and adds them to the specified JToolBar*/', 'coherence': 1}, {'code': 'public static void addAlignmentButtonsTo(JToolBar bar, final DrawingEditor editor) {addAlignmentButtonsTo(bar, editor, new LinkedList<Disposable>());', 'comment': '/*** Creates toolbar buttons and adds them to the specified JToolBar*/', 'coherence': 1}, {'code': 'public static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes) {return createSelectionColorButton(editor, attributeKey,swatches, columnCount, labelKey, labels, defaultAttributes,new Rectangle(1, 17, 20, 4));', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Adobe Fireworks:* <ul>* <li>When the user clicks at the button a popup menu with a color palette* is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A rectangle on the color button displays the current default color of* the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,* width, height).</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedHashMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.*/", 'coherence': 1}, {'code': 'public static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels) {return createEditorColorButton(editor, attributeKey,swatches, columnCount,labelKey, labels,null);', 'comment': '/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Microsoft Office:* <ul>* <li>When the user clicks on the action region, the default color of the* DrawingEditor is applied to the selected figures.</li>* <li>When the user opens the popup menu, a color palette is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A rectangle on the color button displays the current default color of* the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,* width, height).</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.*/', 'coherence': 1}, {'code': 'public static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor,Tool tool, String labelKey,ResourceBundleUtil labels) {ButtonGroup group = (ButtonGroup) tb.getClientProperty("toolButtonGroup");ToolListener toolHandler = (ToolListener) tb.getClientProperty("toolHandler");JToggleButton t = new JToggleButton();labels.configureToolBarButton(t, labelKey);t.addItemListener(new ToolButtonListener(tool, editor));t.setFocusable(false);tool.addToolListener(toolHandler);group.add(t);tb.add(t);return t;', 'comment': '/*** Method addSelectionToolTo must have been invoked prior to this on the* JToolBar.**/', 'coherence': 1}, {'code': 'public static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches, int columnCount,String labelKey, ResourceBundleUtil labels,Map<AttributeKey, Object> defaultAttributes) {return createEditorColorButton(editor, attributeKey,swatches, columnCount, labelKey, labels, defaultAttributes,new Rectangle(1, 17, 20, 4));', 'comment': "/*** Creates a color button, with an action region and a popup menu. The* button works like the color button in Microsoft Office:* <ul>* <li>When the user clicks on the action region, the default color of the* DrawingEditor is applied to the selected figures.</li>* <li>When the user opens the popup menu, a color palette is displayed.* Choosing a color from the palette changes the default color of the* editor and also changes the color of the selected figures.</li>* <li>A rectangle on the color button displays the current default color of* the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,* width, height).</li>* </ul>** @param editor The DrawingEditor.* @param attributeKey The AttributeKey of the color.* @param swatches A list with labeled colors containing the color palette* of the popup menu. The actual labels are retrieved from the supplied* resource bundle. This is usually a LinkedMap, so that the colors have* a predictable order.* @param columnCount The number of columns of the color palette.* @param labelKey The resource bundle key used for retrieving the icon and* the tooltip of the button.* @param labels The resource bundle.* @param defaultAttributes A set of attributes which are also applied to* the selected figures, when a color is selected. This can be used, to* set attributes that otherwise prevent the color from being shown. For* example, when the color attribute is set, we wan't the gradient attribute* of the Figure to be cleared.*/", 'coherence': 1}, {'code': 'public static AbstractButton createToggleGridButton(final DrawingView view) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");final JToggleButton toggleButton;toggleButton = new JToggleButton();labels.configureToolBarButton(toggleButton, "view.toggleGrid");toggleButton.setFocusable(false);toggleButton.addItemListener(new ItemListener() {public void itemStateChanged(ItemEvent event) {view.setConstrainerVisible(toggleButton.isSelected());//view.getComponent().repaint();}});view.addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {// String constants are internedif (evt.getPropertyName() == DrawingView.CONSTRAINER_VISIBLE_PROPERTY) {toggleButton.setSelected(view.isConstrainerVisible());}}});return toggleButton;', 'comment': '/*** Creates a button which toggles between two GridConstrainer for* a DrawingView.*/', 'coherence': 1}, {'code': 'public DefaultAttributeAction(DrawingEditor editor, AttributeKey key) {this(editor, key, null, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Icon icon) {this(editor, key, null, icon);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void setDrawing(Drawing newValue) {drawing = newValue;// XXX - This does not work, we must pass the drawing editor here!opacitySliderHandler.setDrawing(drawing);opacityFieldHandler.setDrawing(drawing);updatePanel();', 'comment': '/*** Sets the GridConstrainer to be edited by this panel.** @param newValue The GridConstrainer.*/', 'coherence': 1}, {'code': 'private void updateDrawing() {if (drawing != null) {drawing.willChange();drawing.fireUndoableEditHappened(CANVAS_FILL_COLOR.setUndoable(drawing, colorButton.getBackground()));drawing.changed();', 'comment': '/*** Updates the drawing due to changes made on this panel.*/', 'coherence': 1}, {'code': 'public EditCanvasPanel() {labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");initComponents();colorButton.putClientProperty("Quaqua.Button.style", "colorWell");opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);opacityPopupButton.add(opacitySlider);opacityPopupButton.putClientProperty("JButton.buttonType", "toolbar");add(opacityPopupButton);NumberFormatter nf = new NumberFormatter();nf.setMaximum(1d);nf.setMinimum(0d);opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0d, 1d, 100d));opacityFieldHandler=new DrawingAttributeEditorHandler<Double>(CANVAS_FILL_OPACITY, opacityField, null);opacitySliderHandler=new DrawingAttributeEditorHandler<Double>(CANVAS_FILL_OPACITY, opacitySlider, null);', 'comment': '/** Creates new form. */', 'coherence': 1}, {'code': 'private void initComponents() {java.awt.GridBagConstraints gridBagConstraints;bgColorButtonGroup = new javax.swing.ButtonGroup();colorLabel = new javax.swing.JLabel();colorButton = new javax.swing.JButton();opacityLabel = new javax.swing.JLabel();opacityField = new org.jhotdraw.gui.JAttributeTextField<Double>();opacityPopupButton = new org.jhotdraw.gui.JPopupButton();setLayout(new java.awt.GridBagLayout());colorLabel.setText(labels.getString("attribute.canvasFillColor.text")); // NOI18NcolorLabel.setToolTipText(labels.getString("attribute.backgroundColor.toolTipText")); // NOI18Nadd(colorLabel, new java.awt.GridBagConstraints());colorButton.setText(" ");colorButton.setToolTipText(labels.getString("attribute.backgroundColor.toolTipText")); // NOI18NcolorButton.addActionListener(new java.awt.event.ActionListener() {public void actionPerformed(java.awt.event.ActionEvent evt) {colorButtonPerformed(evt);}});add(colorButton, new java.awt.GridBagConstraints());opacityLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jhotdraw/draw/action/images/attributeOpacity.png"))); // NOI18NopacityLabel.setToolTipText(labels.getString("attribute.opacity.toolTipText")); // NOI18NgridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);add(opacityLabel, gridBagConstraints);opacityField.setColumns(3);add(opacityField, new java.awt.GridBagConstraints());opacityPopupButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jhotdraw/draw/action/images/popupIcon.png"))); // NOI18NopacityPopupButton.setToolTipText(labels.getString("attribute.opacity.toolTipText")); // NOI18Nadd(opacityPopupButton, new java.awt.GridBagConstraints());', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public Drawing getDrawing() {return drawing;', 'comment': '/*** Returns the GridConstrainer currently being edited by this panel.** @return The GridConstrainer.*/', 'coherence': 1}, {'code': 'private void updatePanel() {if (drawing != null) {colorButton.setBackground(drawing.get(CANVAS_FILL_COLOR));', 'comment': '/*** Updates the panel due to changes made on the drawing.*/', 'coherence': 1}, {'code': 'public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {this(editor, key, value, null, icon);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {this(editor, key, value, null, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ColorIcon(int rgb) {this(new Color(rgb));', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {this(editor, key, null, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {this(editor, key, name, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {this(editor, key, null, icon);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'private void initComponents() {setLayout(null);', 'comment': '/** This method is called from within the constructor to* initialize the form.<p>* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.<p>* NOTE: To prevent undesired layout effects when using floating* text fields, the DefaultDrawingView must not use a layout manager.*/', 'coherence': 1}, {'code': '@Overridepublic void toggleSelection(Figure figure) {if (selectedFigures.contains(figure)) {removeFromSelection(figure);} else {addToSelection(figure);', 'comment': "/*** If a figure isn't selected it is added to the selection.* Otherwise it is removed from the selection.*/", 'coherence': 1}, {'code': 'private void invalidateHandles() {if (handlesAreValid) {handlesAreValid = false;Rectangle invalidatedArea = null;for (Handle handle : selectionHandles) {handle.removeHandleListener(eventHandler);if (invalidatedArea == null) {invalidatedArea = handle.getDrawingArea();} else {invalidatedArea.add(handle.getDrawingArea());}handle.dispose();}for (Handle handle : secondaryHandles) {handle.removeHandleListener(eventHandler);if (invalidatedArea == null) {invalidatedArea = handle.getDrawingArea();} else {invalidatedArea.add(handle.getDrawingArea());}handle.dispose();}selectionHandles.clear();secondaryHandles.clear();setActiveHandle(null);if (invalidatedArea != null) {repaint(invalidatedArea);', 'comment': '/*** Invalidates the handles.*/', 'coherence': 1}, {'code': '@Overridepublic void selectAll() {Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);selectedFigures.clear();for (Figure figure : drawing.getChildren()) {if (figure.isSelectable()) {selectedFigures.add(figure);}}Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);invalidateHandles();fireSelectionChanged(oldSelection, newSelection);repaint();', 'comment': '/*** Selects all selectable figures.*/', 'coherence': 1}, {'code': 'protected void drawCanvas(Graphics2D g) {Rectangle cb = getCanvasViewBounds();// Retrieve the canvasColor color from the drawingColor canvasColor;if (drawing == null) {canvasColor = CANVAS_FILL_COLOR.getDefaultValue();} else {canvasColor = drawing.get(CANVAS_FILL_COLOR);if (canvasColor != null) {canvasColor = new Color((canvasColor.getRGB() & 0xffffff) | ((int) (drawing.get(CANVAS_FILL_OPACITY) * 255) << 24), true);}}if (canvasColor == null || canvasColor.getAlpha() != 255) {g.setPaint(getBackgroundPaint(cb.x, cb.y));g.fillRect(cb.x, cb.y, cb.width, cb.height);}if (canvasColor != null) {g.setColor(canvasColor);g.fillRect(cb.x, cb.y, cb.width, cb.height);', 'comment': '/** Draws the canvas. If the {@code AttributeKeys.CANVAS_FILL_OPACITY} is* not fully opaque, the canvas area is filled with the background paint* before the {@code AttributeKeys.CANVAS_FILL_COLOR} is drawn.*/', 'coherence': 1}, {'code': "protected void drawDrawingNonvolatileBuffered(Graphics2D g) {Rectangle vr = getVisibleRect();Point shift = new Point(0, 0);if (bufferedArea.contains(vr) ||bufferedArea.width >= vr.width && bufferedArea.height >= vr.height) {// The visible rect fits into the buffered area, but may be shifted; shift the buffered area.shift.x = bufferedArea.x - vr.x;shift.y = bufferedArea.y - vr.y;if (shift.x > 0) {dirtyArea.add(new Rectangle(bufferedArea.x - shift.x, vr.y, shift.x + bufferedArea.width - vr.width, bufferedArea.height));} else if (shift.x < 0) {dirtyArea.add(new Rectangle(bufferedArea.x + vr.width, vr.y, -shift.x + bufferedArea.width - vr.width, bufferedArea.height));}if (shift.y > 0) {dirtyArea.add(new Rectangle(vr.x, bufferedArea.y - shift.y, bufferedArea.width, shift.y + bufferedArea.height - vr.height));} else if (shift.y < 0) {dirtyArea.add(new Rectangle(vr.x, bufferedArea.y + vr.height, bufferedArea.width, -shift.y + bufferedArea.height - vr.height));}bufferedArea.x = vr.x;bufferedArea.y = vr.y;} else {// The buffered drawing area does not match the visible rect;// resize it, and mark everything as dirty.bufferedArea.setBounds(vr);dirtyArea.setBounds(vr);if (drawingBufferNV != null && //(drawingBufferNV.getWidth() != vr.width ||drawingBufferNV.getHeight() != vr.height)) {// The dimension of the drawing buffer does not fit into the visible rect;// throw the buffer away.drawingBufferNV.flush();drawingBufferNV = null;}}// Update the contents of the buffer if necessaryint valid = (drawingBufferNV == null) ? //VolatileImage.IMAGE_INCOMPATIBLE : VolatileImage.IMAGE_OK;switch (valid) {case VolatileImage.IMAGE_INCOMPATIBLE:// old buffer doesn't work with new GraphicsConfig; (re-)create ittry {drawingBufferNV = getGraphicsConfiguration().createCompatibleImage(vr.width, vr.height, Transparency.TRANSLUCENT);} catch (OutOfMemoryError e) {drawingBufferNV = null;}dirtyArea.setBounds(bufferedArea);break;}if (drawingBufferNV == null) {// There is not enough memory available for a drawing buffer;// draw without buffering.drawDrawing(g);return;}if (!dirtyArea.isEmpty()) {// An area of the drawing buffer is dirty; repaint itGraphics2D gBuf = drawingBufferNV.createGraphics();setViewRenderingHints(gBuf);// For shifting and cleaning, we need to erase everything underneathgBuf.setComposite(AlphaComposite.Src);// Perform shifting if neededif (shift.x != 0 || shift.y != 0) {gBuf.copyArea(Math.max(0, -shift.x), Math.max(0, -shift.y), drawingBufferNV.getWidth() - Math.abs(shift.x), drawingBufferNV.getHeight() - Math.abs(shift.y), shift.x, shift.y);shift.x = shift.y = 0;}// Clip the dirty areagBuf.translate(-bufferedArea.x, -bufferedArea.y);gBuf.clip(dirtyArea);// Clear the dirty areagBuf.setBackground(new Color(0x0, true));gBuf.clearRect(dirtyArea.x, dirtyArea.y, dirtyArea.width, dirtyArea.height);gBuf.setComposite(AlphaComposite.SrcOver);// Repaint the dirty areadrawDrawing(gBuf);gBuf.dispose();}g.drawImage(drawingBufferNV, bufferedArea.x, bufferedArea.y, null);dirtyArea.setSize(-1, -1);", 'comment': '/** Draws the drawing double buffered using a buffered image. */', 'coherence': 1}, {'code': '@Overridepublic void printComponent(Graphics gr) {Graphics2D g = (Graphics2D) gr;// Set rendering hints for qualityg.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);drawDrawing(g);', 'comment': "/*** Prints the drawing view.* Uses high quality rendering hints for printing. Only prints the drawing.* Doesn't print the canvasColor, the grid, the handles and the tool.*/", 'coherence': 1}, {'code': 'public boolean isDrawingDoubleBuffered() {return isDrawingDoubleBuffered;', 'comment': '/** Returns true, if the the drawing is double buffered.*/', 'coherence': 1}, {'code': '@Overridepublic Point2D.Double viewToDrawing(Point p) {return new Point2D.Double((p.x + translation.x) / scaleFactor,(p.y + translation.y) / scaleFactor);', 'comment': '/*** Converts view coordinates to drawing coordinates.*/', 'coherence': 1}, {'code': 'public void addToSelection(Figure figure) {if (DEBUG) {System.out.println("DefaultDrawingView" + ".addToSelection(" + figure + ")");}Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);if (selectedFigures.add(figure)) {figure.addFigureListener(handleInvalidator);Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);Rectangle invalidatedArea = null;if (handlesAreValid && getEditor() != null) {for (Handle h : figure.createHandles(detailLevel)) {h.setView(this);selectionHandles.add(h);h.addHandleListener(eventHandler);if (invalidatedArea == null) {invalidatedArea = h.getDrawingArea();} else {invalidatedArea.add(h.getDrawingArea());}}}fireSelectionChanged(oldSelection, newSelection);if (invalidatedArea != null) {repaint(invalidatedArea);', 'comment': '/*** Adds a figure to the current selection.*/', 'coherence': 1}, {'code': '@Overridepublic void paintComponent(Graphics gr) {long start = System.currentTimeMillis();Graphics2D g = (Graphics2D) gr;setViewRenderingHints(g);drawBackground(g);drawCanvas(g);drawConstrainer(g);if (isDrawingDoubleBuffered()) {if (isWindows) {drawDrawingNonvolatileBuffered(g);} else {drawDrawingVolatileBuffered(g);}} else {drawDrawing(g);}drawHandles(g);drawTool(g);', 'comment': '/*** Paints the drawing view.* Uses rendering hints for fast painting. Paints the canvasColor, the* grid, the drawing, the handles and the current tool.*/', 'coherence': 1}, {'code': '@Overridepublic void setBounds(int x, int y, int width, int height) {super.setBounds(x, y, width, height);validateViewTranslation();', 'comment': '/*** Side effect: Changes view Translation.*/', 'coherence': 1}, {'code': 'public void removeFromSelection(Figure figure) {Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);if (selectedFigures.remove(figure)) {Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);invalidateHandles();figure.removeFigureListener(handleInvalidator);fireSelectionChanged(oldSelection, newSelection);repaint();', 'comment': '/*** Removes a figure from the selection.*/', 'coherence': 1}, {'code': "protected void drawDrawingVolatileBuffered(Graphics2D g) {Rectangle vr = getVisibleRect();Point shift = new Point(0, 0);if (bufferedArea.contains(vr) ||bufferedArea.width >= vr.width && bufferedArea.height >= vr.height) {// The visible rect fits into the buffered area, but may be shifted; shift the buffered area.shift.x = bufferedArea.x - vr.x;shift.y = bufferedArea.y - vr.y;if (shift.x > 0) {dirtyArea.add(new Rectangle(bufferedArea.x - shift.x, vr.y, shift.x + bufferedArea.width - vr.width, bufferedArea.height));} else if (shift.x < 0) {dirtyArea.add(new Rectangle(bufferedArea.x + vr.width, vr.y, -shift.x + bufferedArea.width - vr.width, bufferedArea.height));}if (shift.y > 0) {dirtyArea.add(new Rectangle(vr.x, bufferedArea.y - shift.y, bufferedArea.width, shift.y + bufferedArea.height - vr.height));} else if (shift.y < 0) {dirtyArea.add(new Rectangle(vr.x, bufferedArea.y + vr.height, bufferedArea.width, -shift.y + bufferedArea.height - vr.height));}bufferedArea.x = vr.x;bufferedArea.y = vr.y;} else {// The buffered drawing area does not match the visible rect;// resize it, and mark everything as dirty.bufferedArea.setBounds(vr);dirtyArea.setBounds(vr);if (drawingBufferV != null && //(drawingBufferV.getWidth() != vr.width ||drawingBufferV.getHeight() != vr.height)) {// The dimension of the drawing buffer does not fit into the visible rect;// throw the buffer away.drawingBufferV.flush();drawingBufferV = null;}}// Update the contents of the buffer if necessarywhile (true) {int valid = (drawingBufferV == null) ? //VolatileImage.IMAGE_INCOMPATIBLE : //drawingBufferV.validate(getGraphicsConfiguration());switch (valid) {case VolatileImage.IMAGE_INCOMPATIBLE:// old buffer doesn't work with new GraphicsConfig; (re-)create ittry {drawingBufferV = getGraphicsConfiguration().createCompatibleVolatileImage(vr.width, vr.height, Transparency.TRANSLUCENT);} catch (OutOfMemoryError e) {drawingBufferV = null;}dirtyArea.setBounds(bufferedArea);break;case VolatileImage.IMAGE_RESTORED:// image was restored, but buffer lost; redraw everythingdirtyArea.setBounds(bufferedArea);break;}if (drawingBufferV == null) {// There is not enough memory available for a drawing buffer;// draw without buffering.drawDrawing(g);break;}if (!dirtyArea.isEmpty()) {// An area of the drawing buffer is dirty; repaint itGraphics2D gBuf = drawingBufferV.createGraphics();setViewRenderingHints(gBuf);// For shifting and cleaning, we need to erase everything underneathgBuf.setComposite(AlphaComposite.Src);// Perform shifting if neededif (shift.x != 0 || shift.y != 0) {gBuf.copyArea(Math.max(0, -shift.x), Math.max(0, -shift.y), drawingBufferV.getWidth() - Math.abs(shift.x), drawingBufferV.getHeight() - Math.abs(shift.y), shift.x, shift.y);shift.x = shift.y = 0;}// Clip the dirty areagBuf.translate(-bufferedArea.x, -bufferedArea.y);gBuf.clip(dirtyArea);// Clear the dirty areagBuf.setBackground(new Color(0x0, true));gBuf.clearRect(dirtyArea.x, dirtyArea.y, dirtyArea.width, dirtyArea.height);gBuf.setComposite(AlphaComposite.SrcOver);// Repaint the dirty areadrawDrawing(gBuf);gBuf.dispose();}if (!drawingBufferV.contentsLost()) {g.drawImage(drawingBufferV, bufferedArea.x, bufferedArea.y, null);}if (drawingBufferV.contentsLost()) {dirtyArea.setBounds(bufferedArea);} else {dirtyArea.setSize(-1, -1);break;", 'comment': '/** Draws the drawing double buffered using a volatile image. */', 'coherence': 1}, {'code': 'protected Rectangle getCanvasViewBounds() {// Position of the zero coordinate point on the viewint x = -translation.x;int y = -translation.y;int w = getWidth();int h = getHeight();if (getDrawing() != null) {Double cw = getDrawing().get(CANVAS_WIDTH);Double ch = getDrawing().get(CANVAS_HEIGHT);if (cw != null && ch != null) {Point lowerRight = drawingToView(new Point2D.Double(cw, ch));w = lowerRight.x - x;h = lowerRight.y - y;}}return new Rectangle(x, y, w, h);', 'comment': '/*** Returns the bounds of the canvas on the drawing view.** @return The current bounds of the canvas on the drawing view.*/', 'coherence': 1}, {'code': '@Overridepublic boolean isFigureSelected(Figure checkFigure) {return selectedFigures.contains(checkFigure);', 'comment': '/*** Test whether a given figure is selected.*/', 'coherence': 1}, {'code': 'public void setDrawingDoubleBuffered(boolean newValue) {boolean oldValue = isDrawingDoubleBuffered;isDrawingDoubleBuffered =newValue;if (!isDrawingDoubleBuffered && drawingBufferV != null) {drawingBufferV.flush();drawingBufferV = null;}if (!isDrawingDoubleBuffered && drawingBufferNV != null) {drawingBufferNV.flush();drawingBufferNV = null;}firePropertyChange(DRAWING_DOUBLE_BUFFERED_PROPERTY, oldValue, newValue);', 'comment': '/** Sets whether the drawing is double buffered.* <p>* The default value is true.* <p>* This is a bound property.* <p>* If the drawing view is used for editing, you should leave this to true.* If the drawing view is used for viewing only, you should set this to false.*/', 'coherence': 1}, {'code': 'private java.util.List<Handle> getSecondaryHandles() {validateHandles();return Collections.unmodifiableList(secondaryHandles);', 'comment': '/*** Gets the currently active secondary handles.*/', 'coherence': 1}, {'code': '@Overridepublic Set<Figure> getSelectedFigures() {return Collections.unmodifiableSet(selectedFigures);', 'comment': '/*** Gets the current selection as a FigureSelection. A FigureSelection* can be cut, copied, pasted.*/', 'coherence': 1}, {'code': '@Overridepublic Handle findHandle(Point p) {validateHandles();for (Handle handle : new ReversedList<Handle>(getSecondaryHandles())) {if (handle.contains(p)) {return handle;}}for (Handle handle : new ReversedList<Handle>(getSelectionHandles())) {if (handle.contains(p)) {return handle;}}return null;', 'comment': '/*** Finds a handle at a given coordinates.* @return A handle, null if no handle is found.*/', 'coherence': 1}, {'code': 'public void addToSelection(Collection<Figure> figures) {Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);boolean selectionChanged = false;Rectangle invalidatedArea = null;for (Figure figure : figures) {if (selectedFigures.add(figure)) {selectionChanged = true;newSelection.add(figure);figure.addFigureListener(handleInvalidator);if (handlesAreValid && getEditor() != null) {for (Handle h : figure.createHandles(detailLevel)) {h.setView(this);selectionHandles.add(h);h.addHandleListener(eventHandler);if (invalidatedArea == null) {invalidatedArea = h.getDrawingArea();} else {invalidatedArea.add(h.getDrawingArea());}}}}}if (selectionChanged) {fireSelectionChanged(oldSelection, newSelection);if (invalidatedArea != null) {repaint(invalidatedArea);', 'comment': '/*** Adds a collection of figures to the current selection.*/', 'coherence': 1}, {'code': '@Overridepublic Figure findFigure(Point p) {return getDrawing().findFigure(viewToDrawing(p));', 'comment': '/*** Finds a figure at a given coordinates.* @return A figure, null if no figure is found.*/', 'coherence': 1}, {'code': '@Overridepublic Point drawingToView(Point2D.Double p) {return new Point((int) (p.x * scaleFactor) - translation.x,(int) (p.y * scaleFactor) - translation.y);', 'comment': '/*** Converts drawing coordinates to view coordinates.*/', 'coherence': 1}, {'code': '@Overridepublic void clearSelection() {if (getSelectionCount() > 0) {Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);selectedFigures.clear();Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);invalidateHandles();fireSelectionChanged(oldSelection, newSelection);', 'comment': '/*** Clears the current selection.*/', 'coherence': 1}, {'code': 'private void validateViewTranslation() {if (getDrawing() == null) {translation.x = translation.y = 0;return;}Point oldTranslation = (Point) translation.clone();int width = getWidth();int height = getHeight();Insets insets = getInsets();Rectangle2D.Double da = getDrawingArea();Rectangle r = new Rectangle((int) (da.x * scaleFactor), (int) (da.y * scaleFactor), (int) (da.width * scaleFactor), (int) (da.height * scaleFactor));int cw, ch;Double cwd = getDrawing().get(CANVAS_WIDTH);Double chd = getDrawing().get(CANVAS_HEIGHT);if (cwd == null || chd == null) {// The canvas size is not explicitly specified.cw = Math.max(width - insets.left - insets.right, (int) ((Math.max(0, da.x) + da.width) * scaleFactor));ch = Math.max(height - insets.top - insets.bottom, (int) ((Math.max(0, da.y) + da.height) * scaleFactor));//Place the canvas at the top lefttranslation.x = insets.top;translation.y = insets.left;} else {// The canvas size is explicitly specified.cw = (int) (cwd * scaleFactor);ch = (int) (chd * scaleFactor);//Place the canvas at the centerif (cw < width) {translation.x = insets.left + (width - insets.left - insets.right - cw) / -2;}if (ch < height) {translation.y = insets.top + (height - insets.top - insets.bottom - ch) / -2;}}if (r.y + r.height - translation.y > (height - insets.bottom)) {// We cut off the lower part of the drawing -> shift the canvas uptranslation.y = r.y + r.height - (height - insets.bottom);}if (Math.min(0, r.y) - translation.y < insets.top) {// We cut off the upper part of the drawing -> shift the canvas downtranslation.y = Math.min(0, r.y) - insets.top;}if (r.x + r.width - translation.x > (width - insets.right)) {// We cut off the right part of the drawing -> shift the canvas lefttranslation.x = r.x + r.width - (width - insets.right);}if (Math.min(0, r.x) - translation.x < insets.left) {// We cut off the left part of the drawing -> shift the canvas righttranslation.x = Math.min(0, r.x) - insets.left;}if (!oldTranslation.equals(translation)) {bufferedArea.translate(oldTranslation.x - translation.x, oldTranslation.y - translation.y);fireViewTransformChanged();', 'comment': '/*** Updates the view translation taking into account the current dimension* of the view JComponent, the size of the drawing, and the scale factor.*/', 'coherence': 1}, {'code': 'protected void fireSelectionChanged(Set<Figure> oldValue,Set<Figure> newValue) {if (listenerList.getListenerCount() > 0) {FigureSelectionEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >=0; i -=2) {if (listeners[i] == FigureSelectionListener.class) {// Lazily create the event:if (event == null) {event = new FigureSelectionEvent(this, oldValue, newValue);}((FigureSelectionListener) listeners[i + 1]).selectionChanged(event);}}}firePropertyChange(EditableComponent.SELECTION_EMPTY_PROPERTY, oldValue.isEmpty(), newValue.isEmpty());', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.* Also notify listeners who listen for* {@link EditableComponent#SELECTION_EMPTY_PROPERTY}.*/', 'coherence': 1}, {'code': '@Overridepublic int getSelectionCount() {return selectedFigures.size();', 'comment': '/*** Gets the number of selected figures.*/', 'coherence': 1}, {'code': 'public DefaultDrawingView() {initComponents();eventHandler = createEventHandler();setToolTipText("dummy"); // Set a dummy tool tip text to turn tooltips onsetFocusable(true);addFocusListener(eventHandler);setTransferHandler(new DefaultDrawingViewTransferHandler());setBackground(new Color(0xb0b0b0));setOpaque(true);', 'comment': '/** Creates new instance. */', 'coherence': 1}, {'code': '@Overridepublic Collection<Handle> getCompatibleHandles(Handle master) {validateHandles();HashSet<Figure> owners = new HashSet<Figure>();LinkedList<Handle> compatibleHandles = new LinkedList<Handle>();owners.add(master.getOwner());compatibleHandles.add(master);for (Handle handle : getSelectionHandles()) {if (!owners.contains(handle.getOwner()) && handle.isCombinableWith(master)) {owners.add(handle.getOwner());compatibleHandles.add(handle);}}return compatibleHandles;', 'comment': '/*** Gets compatible handles.* @return A collection containing the handle and all compatible handles.*/', 'coherence': 1}, {'code': 'private java.util.List<Handle> getSelectionHandles() {validateHandles();return Collections.unmodifiableList(selectionHandles);', 'comment': '/*** Gets the currently active selection handles.*/', 'coherence': 1}, {'code': 'private void validateHandles() {// Validate handles only, if they are invalid, and if// the DrawingView has a DrawingEditor.if (!handlesAreValid && getEditor() != null) {handlesAreValid = true;selectionHandles.clear();Rectangle invalidatedArea = null;while (true) {for (Figure figure : getSelectedFigures()) {for (Handle handle : figure.createHandles(detailLevel)) {handle.setView(this);selectionHandles.add(handle);handle.addHandleListener(eventHandler);if (invalidatedArea == null) {invalidatedArea = handle.getDrawingArea();} else {invalidatedArea.add(handle.getDrawingArea());}}}if (selectionHandles.size() == 0 && detailLevel != 0) {// No handles are available at the desired detail level.// Retry with detail level 0.detailLevel = 0;continue;}break;}if (invalidatedArea != null) {repaint(invalidatedArea);', 'comment': '/*** Validates the handles.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")protected boolean importData(final JComponent comp, Transferable t, final HashSet<Figure> transferFigures, final Point dropPoint) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler.importData(comp,t)");}boolean retValue;if (comp instanceof DrawingView) {final DrawingView view = (DrawingView) comp;final Drawing drawing = view.getDrawing();if (drawing.getInputFormats() == null ||drawing.getInputFormats().size() == 0) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  import failed; drawing has no import formats");}retValue = false;} else {retValue = false;try {DataFlavor[] transferFlavors = t.getTransferDataFlavors();// Workaround for Mac OS X:// The Apple JVM messes up the sequence of the data flavors.if (System.getProperty("os.name").toLowerCase().startsWith("mac")) {// Search for a suitable input formatSearchLoop:for (InputFormat format : drawing.getInputFormats()) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  trying format:" + format);}for (DataFlavor flavor : transferFlavors) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  trying flavor:" + flavor.getMimeType());}if (format.isDataFlavorSupported(flavor)) {LinkedList<Figure> existingFigures = new LinkedList<Figure>(drawing.getChildren());try {format.read(t, drawing, false);if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  import succeeded");}final LinkedList<Figure> importedFigures = new LinkedList<Figure>(drawing.getChildren());importedFigures.removeAll(existingFigures);view.clearSelection();view.addToSelection(importedFigures);transferFigures.addAll(importedFigures);moveToDropPoint(comp, transferFigures, dropPoint);drawing.fireUndoableEditHappened(new AbstractUndoableEdit() {@Overridepublic String getPresentationName() {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");return labels.getString("edit.paste.text");}@Overridepublic void undo() throws CannotUndoException {super.undo();drawing.removeAll(importedFigures);}@Overridepublic void redo() throws CannotRedoException {super.redo();drawing.addAll(importedFigures);}});retValue = true;break SearchLoop;} catch (IOException e) {if (DEBUG) {System.out.println("  import failed");e.printStackTrace();}// failed to read transferalbe, try with next InputFormat}}}}} else {// Search for a suitable input formatSearchLoop:for (DataFlavor flavor : transferFlavors) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  trying flavor:" + flavor.getMimeType());}for (InputFormat format : drawing.getInputFormats()) {if (format.isDataFlavorSupported(flavor)) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  trying format:" + format);}LinkedList<Figure> existingFigures = new LinkedList<Figure>(drawing.getChildren());try {format.read(t, drawing, false);if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  import succeeded");}final LinkedList<Figure> importedFigures = new LinkedList<Figure>(drawing.getChildren());importedFigures.removeAll(existingFigures);view.clearSelection();view.addToSelection(importedFigures);transferFigures.addAll(importedFigures);moveToDropPoint(comp, transferFigures, dropPoint);drawing.fireUndoableEditHappened(new AbstractUndoableEdit() {@Overridepublic String getPresentationName() {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");return labels.getString("edit.paste.text");}@Overridepublic void undo() throws CannotUndoException {super.undo();drawing.removeAll(importedFigures);}@Overridepublic void redo() throws CannotRedoException {super.redo();drawing.addAll(importedFigures);}});retValue = true;break SearchLoop;} catch (IOException e) {if (DEBUG) {System.out.println("  import failed");e.printStackTrace();}// failed to read transferalbe, try with next InputFormat}}}}}// No input format found? Lets see if we got files - we// can handle theseif (retValue == false && t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {final java.util.List<File> files = (java.util.List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);retValue = true;final LinkedList<Figure> existingFigures = new LinkedList<Figure>(drawing.getChildren());view.getEditor().setEnabled(false);// FIXME - We should perform the following code in a// worker thread.new Worker<LinkedList<Figure>>() {@Overridepublic LinkedList<Figure> construct() throws Exception {for (File file : files) {FileFormatLoop:for (InputFormat format : drawing.getInputFormats()) {if (file.isFile() &&format.getFileFilter().accept(file)) {if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler  importing file " + file);}format.read(file, drawing, false);}}}return new LinkedList<Figure>(drawing.getChildren());}@Overridepublic void failed(Throwable error) {error.printStackTrace();}@Overridepublic void done(final LinkedList<Figure> importedFigures) {importedFigures.removeAll(existingFigures);if (importedFigures.size() > 0) {view.clearSelection();view.addToSelection(importedFigures);transferFigures.addAll(importedFigures);moveToDropPoint(comp, transferFigures, dropPoint);drawing.fireUndoableEditHappened(new AbstractUndoableEdit() {@Overridepublic String getPresentationName() {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");return labels.getString("edit.paste.text");}@Overridepublic void undo() throws CannotUndoException {super.undo();drawing.removeAll(importedFigures);}@Overridepublic void redo() throws CannotRedoException {super.redo();drawing.addAll(importedFigures);}});}}@Overridepublic void finished() {view.getEditor().setEnabled(true);}}.start();}} catch (Throwable e) {if (DEBUG) {e.printStackTrace();}}}} else {retValue = super.importData(comp, t);}if (DEBUG) {System.out.println("DefaultDrawingViewTransferHandler .importData(comp,t):" + retValue);}return retValue;', 'comment': '/** Imports data and stores the transferred figures into the supplied transferFigures collection. */', 'coherence': 1}, {'code': 'public void dragGestureRecognized(DragGestureEvent dge) {JComponent c = (JComponent) dge.getComponent();DefaultDrawingViewTransferHandler th = (DefaultDrawingViewTransferHandler) c.getTransferHandler();Transferable t = transferable;if (t != null) {scrolls = c.getAutoscrolls();c.setAutoscrolls(false);try {//          dge.startDrag(null, t, this);Icon icon = th.getVisualRepresentation(t);Image dragImage;if (icon instanceof ImageIcon) {dragImage = ((ImageIcon) icon).getImage();} else {dragImage = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);Graphics g = ((BufferedImage) dragImage).createGraphics();icon.paintIcon(c, g, 0, 0);g.dispose();}dge.startDrag(null, dragImage, imageOffset, t, this);return;} catch (RuntimeException re) {c.setAutoscrolls(scrolls);}}th.exportDone(c, t, NONE);', 'comment': '/*** a Drag gesture has been recognized*/', 'coherence': 1}, {'code': 'public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {return new ChopDiamondConnector(this);', 'comment': '/*** Returns the Figures connector for the specified location.* By default a ChopDiamondConnector is returned.* @see ChopDiamondConnector*/', 'coherence': 1}, {'code': 'public DiamondFigure() {this(0, 0, 0, 0);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {Point2D.Double anchor = getStartPoint();Point2D.Double lead = getEndPoint();setBounds((Point2D.Double) tx.transform(anchor, anchor),(Point2D.Double) tx.transform(lead, lead));', 'comment': '/*** Moves the Figure to a new location.* @param tx the transformation matrix.*/', 'coherence': 1}, {'code': 'public boolean contains(Point2D.Double p) {Rectangle2D.Double r = (Rectangle2D.Double) rectangle.clone();if (get(IS_QUADRATIC)) {double side = Math.max(r.width, r.height);r.x -= (side - r.width) / 2;r.y -= (side - r.height) / 2;r.width = r.height = side;}//   if (r.contains(p)) {double grow = AttributeKeys.getPerpendicularFillGrowth(this);double growx, growy;if (grow == 0d) {growx = growy = 0d;} else {double w = r.width / 2d;double h = r.height / 2d;double lineLength = Math.sqrt(w * w + h * h);double scale = grow / lineLength;double yb = scale * w;double xa = scale * h;growx = ((yb * yb) / xa + xa);growy = ((xa * xa) / yb + yb);Geom.grow(r, growx, growy);}Path2D.Double diamond = new Path2D.Double();diamond.moveTo((r.x + r.width / 2), r.y);diamond.lineTo((r.x + r.width), (r.y + r.height / 2));diamond.lineTo((r.x + r.width / 2), (r.y + r.height));diamond.lineTo(r.x, (r.y + r.height / 2));diamond.closePath();return diamond.contains(p);', 'comment': '/*** Checks if a Point2D.Double is inside the figure.*/', 'coherence': 1}, {'code': 'public ToolBarLayout() {this(X_AXIS);', 'comment': '/*** Creates a layout manager that will lay out components along the* X-axis.*/', 'coherence': 1}, {'code': 'public AbstractTransferable(DataFlavor flavor) {this.flavors = new DataFlavor[] {flavor};', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getColumns() {return cols;', 'comment': '/*** Gets the number of columns in this layout.* @return   the number of columns in this layout* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public VerticalGridLayout(int rows, int cols, int hgap, int vgap, boolean isVertical) {if ((rows == 0) && (cols == 0)) {throw new IllegalArgumentException("rows and cols cannot both be zero");}this.rows = rows;this.cols = cols;this.hgap = hgap;this.vgap = vgap;this.isVertical = isVertical;', 'comment': '/*** Creates a grid layout with the specified number of rows and* columns. All components in the layout are given equal size.* <p>* In addition, the horizontal and vertical gaps are set to the* specified values. Horizontal gaps are placed at the left and* right edges, and between each of the columns. Vertical gaps are* placed at the top and bottom edges, and between each of the rows.* <p>* One, but not both, of <code>rows</code> and <code>cols</code> can* be zero, which means that any number of objects can be placed in a* row or in a column.* <p>* All <code>VerticalGridLayout</code> constructors defer to this one.* @param   rows   the rows, with the value zero meaning*           any number of rows* @param   cols   the columns, with the value zero meaning*           any number of columns* @param   hgap   the horizontal gap* @param   vgap   the vertical gap* @exception   IllegalArgumentException  if the value of both*      <code>rows</code> and <code>cols</code> is*      set to zero*/', 'coherence': 1}, {'code': 'public void setRows(int rows) {if ((rows == 0) && (this.cols == 0)) {throw new IllegalArgumentException("rows and cols cannot both be zero");}this.rows = rows;', 'comment': '/*** Sets the number of rows in this layout to the specified value.* @param    rows   the number of rows in this layout* @exception  IllegalArgumentException  if the value of both*         <code>rows</code> and <code>cols</code> is set to zero* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public Dimension minimumLayoutSize(Container parent) {synchronized (parent.getTreeLock()) {Insets insets = parent.getInsets();int ncomponents = parent.getComponentCount();int nrows = rows;int ncols = cols;if (nrows > 0) {ncols = (ncomponents + nrows - 1) / nrows;} else {nrows = (ncomponents + ncols - 1) / ncols;}int w = 0;int h = 0;for (int i = 0 ; i < ncomponents ; i++) {Component comp = parent.getComponent(i);Dimension d = comp.getMinimumSize();if (w < d.width) {w = d.width;}if (h < d.height) {h = d.height;}}return new Dimension(insets.left + insets.right + ncols*w + (ncols-1)*hgap,insets.top + insets.bottom + nrows*h + (nrows-1)*vgap);', 'comment': '/*** Determines the minimum size of the container argument using this* grid layout.* <p>* The minimum width of a grid layout is the largest minimum width* of any of the components in the container times the number of columns,* plus the horizontal padding times the number of columns plus one,* plus the left and right insets of the target container.* <p>* The minimum height of a grid layout is the largest minimum height* of any of the components in the container times the number of rows,* plus the vertical padding times the number of rows plus one, plus* the top and bottom insets of the target container.** @param     parent   the container in which to do the layout* @return    the minimum dimensions needed to lay out the*            subcomponents of the specified container*/', 'coherence': 1}, {'code': 'public int getRows() {return rows;', 'comment': '/*** Gets the number of rows in this layout.* @return  the number of rows in this layout* @since   JDK1.1*/', 'coherence': 1}, {'code': 'public void setColumns(int cols) {if ((cols == 0) && (this.rows == 0)) {throw new IllegalArgumentException("rows and cols cannot both be zero");}this.cols = cols;', 'comment': '/*** Sets the number of columns in this layout to the specified value.* Setting the number of columns has no affect on the layout* if the number of rows specified by a constructor or by* the <tt>setRows</tt> method is non-zero. In that case, the number* of columns displayed in the layout is determined by the total* number of components and the number of rows specified.* @param    cols   the number of columns in this layout* @exception  IllegalArgumentException  if the value of both*         <code>rows</code> and <code>cols</code> is set to zero* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public void setVgap(int vgap) {this.vgap = vgap;', 'comment': '/*** Sets the vertical gap between components to the specified value.* @param     vgap  the vertical gap between components* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public VerticalGridLayout() {this(1, 0, 0, 0);', 'comment': '/*** Creates a grid layout with a default of one column per component,* in a single row.*/', 'coherence': 1}, {'code': 'public int getHgap() {return hgap;', 'comment': '/*** Gets the horizontal gap between components.* @return     the horizontal gap between components* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public int getVgap() {return vgap;', 'comment': '/*** Gets the vertical gap between components.* @return     the vertical gap between components* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public void layoutContainer(Container parent) {synchronized (parent.getTreeLock()) {Insets insets = parent.getInsets();int ncomponents = parent.getComponentCount();int nrows = rows;int ncols = cols;boolean ltr = parent.getComponentOrientation().isLeftToRight();if (ncomponents == 0) {return;}if (nrows > 0) {ncols = (ncomponents + nrows - 1) / nrows;} else {nrows = (ncomponents + ncols - 1) / ncols;}int w = parent.getWidth() - (insets.left + insets.right);int h = parent.getHeight() - (insets.top + insets.bottom);w = (w - (ncols - 1) * hgap) / ncols;h = (h - (nrows - 1) * vgap) / nrows;int i;if (ltr) {for (int c = 0, x = insets.left ; c < ncols ; c++, x += w + hgap) {for (int r = 0, y = insets.top ; r < nrows ; r++, y += h + vgap) {if (isVertical) {i = r + c * nrows;} else {i = r * ncols + c;}if (i < ncomponents) {parent.getComponent(i).setBounds(x, y, w, h);}}}} else {for (int c = 0, x = parent.getWidth() - insets.right - w; c < ncols ; c++, x -= w + hgap) {for (int r = 0, y = insets.top ; r < nrows ; r++, y += h + vgap) {if (isVertical) {i = r + c * nrows;} else {i = r * ncols + c;}if (i < ncomponents) {parent.getComponent(i).setBounds(x, y, w, h);', 'comment': "/*** Lays out the specified container using this layout.* <p>* This method reshapes the components in the specified target* container in order to satisfy the constraints of the* <code>VerticalGridLayout</code> object.* <p>* The grid layout manager determines the size of individual* components by dividing the free space in the container into* equal-sized portions according to the number of rows and columns* in the layout. The container's free space equals the container's* size minus any insets and any specified horizontal or vertical* gap. All components in a grid layout are given the same size.** @param    parent   the container in which to do the layout* @see    java.awt.Container* @see    java.awt.Container#doLayout*/", 'coherence': 1}, {'code': 'public void setHgap(int hgap) {this.hgap = hgap;', 'comment': '/*** Sets the horizontal gap between components to the specified value.* @param    hgap   the horizontal gap between components* @since    JDK1.1*/', 'coherence': 1}, {'code': 'public VerticalGridLayout(int rows, int cols) {this(rows, cols, 0, 0);', 'comment': '/*** Creates a grid layout with the specified number of rows and* columns. All components in the layout are given equal size.* <p>* One, but not both, of <code>rows</code> and <code>cols</code> can* be zero, which means that any number of objects can be placed in a* row or in a column.* @param   rows   the rows, with the value zero meaning*           any number of rows.* @param   cols   the columns, with the value zero meaning*           any number of columns.*/', 'coherence': 1}, {'code': 'public Dimension preferredLayoutSize(Container parent) {synchronized (parent.getTreeLock()) {Insets insets = parent.getInsets();int ncomponents = parent.getComponentCount();int nrows = rows;int ncols = cols;if (nrows > 0) {ncols = (ncomponents + nrows - 1) / nrows;} else {nrows = (ncomponents + ncols - 1) / ncols;}int w = 0;int h = 0;for (int i = 0 ; i < ncomponents ; i++) {Component comp = parent.getComponent(i);Dimension d = comp.getPreferredSize();if (w < d.width) {w = d.width;}if (h < d.height) {h = d.height;}}return new Dimension(insets.left + insets.right + ncols*w + (ncols-1)*hgap,insets.top + insets.bottom + nrows*h + (nrows-1)*vgap);', 'comment': '/*** Determines the preferred size of the container argument using* this grid layout.* <p>* The preferred width of a grid layout is the largest preferred* width of any of the components in the container times the number of* columns, plus the horizontal padding times the number of columns* plus one, plus the left and right insets of the target container.* <p>* The preferred height of a grid layout is the largest preferred* height of any of the components in the container times the number of* rows, plus the vertical padding times the number of rows plus one,* plus the top and bottom insets of the target container.** @param   parent   the container in which to do the layout* @return  the preferred dimensions to lay out the*            subcomponents of the specified container*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public static Clipboard getClipboard() {if (instance != null) {return instance;}// Try to access the system clipboardtry {//      instance = new AWTClipboard(Toolkit.getDefaultToolkit().getSystemClipboard());instance = new OSXClipboard(Toolkit.getDefaultToolkit().getSystemClipboard());} catch (SecurityException e1) {// Fall back to JNLP ClipboardServicetry {Class serviceManager = Class.forName("javax.jnlp.ServiceManager");instance = new JNLPClipboard(serviceManager.getMethod("lookup", String.class).invoke(null, "javax.jnlp.ClipboardService"));} catch (Exception e2) {// Fall back to JVM local clipboardinstance = new AWTClipboard(new Clipboard("JVM Local Clipboard"));}}return instance;', 'comment': '/** Returns the ClipboardService instance. If none is set, creates* a new one which tries to access the system clipboard. If this fails,* an instance with a JVM local clipboard is created.** @return system clipboard or a proxy.*/', 'coherence': 1}, {'code': 'public Clipboard getTarget() {return target;', 'comment': '/** Returns the proxy target. */', 'coherence': 1}, {'code': 'public AWTClipboard(Clipboard target) {this.target = target;', 'comment': '/*** Creates a new proxy for the specified target object.** @param target A Clipboard object.*/', 'coherence': 1}, {'code': 'private synchronized void setError(Throwable x) {error = x;', 'comment': '/*** Set the error thrown by constrct.*/', 'coherence': 1}, {'code': 'protected synchronized Throwable getError() {return error;', 'comment': "/*** Get the error produced by the worker thread, or null if it* hasn't thrown one.*/", 'coherence': 1}, {'code': 'public final void run() {try {setValue(construct());} catch (Throwable e) {setError(e);SwingUtilities.invokeLater(new Runnable() {public void run() {failed(getError());finished();}});return;}SwingUtilities.invokeLater(new Runnable() {public void run() {done(getValue());finished();', 'comment': '/*** Calls #construct on the current thread and invokes* #done on the AWT event dispatcher thread.*/', 'coherence': 1}, {'code': 'protected synchronized T getValue() {return value;', 'comment': "/*** Get the value produced by the worker thread, or null if it* hasn't been constructed yet.*/", 'coherence': 1}, {'code': 'protected void failed(Throwable error) {error.printStackTrace();', 'comment': '/*** Called on the event dispatching thread (not on the worker thread)* after the <code>construct</code> method has thrown an error.* <p>* The default implementation prints a stack trace. Subclasses may override* this method to perform failure actions on the Event Dispatch Thread.** @param error The error thrown by construct.*/', 'coherence': 1}, {'code': 'private synchronized void setValue(T x) {value = x;', 'comment': '/*** Set the value produced by construct.*/', 'coherence': 1}, {'code': 'public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {Transferable t = (Transferable) transferables.get(flavor);if (t == null) throw new UnsupportedFlavorException(flavor);return t.getTransferData(flavor);', 'comment': '/*** Returns an object which represents the data to be transferred.  The class* of the object returned is defined by the representation class of the flavor.** @param flavor the requested flavor for the data* @see DataFlavor#getRepresentationClass* @exception IOException        if the data is no longer available*       in the requested flavor.* @exception UnsupportedFlavorException if the requested data flavor is*       not supported.*/', 'coherence': 1}, {'code': 'public DataFlavor[] getTransferDataFlavors() {return (DataFlavor[]) flavors.toArray(new DataFlavor[transferables.size()]);', 'comment': '/*** Returns an array of DataFlavor objects indicating the flavors the data* can be provided in.  The array should be ordered according to preference* for providing the data (from most richly descriptive to least descriptive).* @return an array of data flavors in which this data can be transferred*/', 'coherence': 1}, {'code': 'protected void fireOptionSelected(JOptionPane pane, int option, Object value, Object inputValue) {SheetEvent sheetEvent = null;// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == SheetListener.class) {// Lazily create the event:if (sheetEvent == null) {sheetEvent = new SheetEvent(this, pane, option, value, inputValue);}((SheetListener) listeners[i + 1]).optionSelected(sheetEvent);', 'comment': '/*** Notify all listeners that have registered interest for*   notification on this event type.  The event instance*   is lazily created using the parameters passed into*   the fire method.*/', 'coherence': 1}, {'code': 'public JSheet(Dialog owner) {super(owner);init();', 'comment': '/*** Creates a new JSheet.*/', 'coherence': 1}, {'code': 'private static boolean isDocumentModalitySupported() {return isDocumentModalitySupported;', 'comment': '/*** If this returns true, the JSheet uses native support for* sheet display.*/', 'coherence': 1}, {'code': 'public static void showMessageSheet(Component parentComponent,Object message, int messageType, SheetListener listener) {showMessageSheet(parentComponent, message, messageType, null, listener);', 'comment': '/*** Brings up a sheet that displays a message using a default* icon determined by the <code>messageType</code> parameter.** @param parentComponent determines the <code>Frame</code>*    in which the dialog is displayed; if <code>null</code>,*    or if the <code>parentComponent</code> has no*    <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param messageType the type of message to be displayed:*          <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*      <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param listener This listener is notified when the sheet is dismissed.*/', 'coherence': 1}, {'code': 'private static boolean isNativeSheetSupported() {return isNativeSheetSupported;', 'comment': '/*** If this returns true, the JSheet uses native support for* sheet display.*/', 'coherence': 1}, {'code': 'public static void showOptionSheet(Component parentComponent,Object message, int optionType, int messageType,Icon icon, Object[] options, Object initialValue, SheetListener listener) {JOptionPane pane = new JOptionPane(message, messageType,optionType, icon,options, initialValue);pane.setInitialValue(initialValue);pane.setComponentOrientation(((parentComponent == null) ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());int style = styleFromMessageType(messageType);JSheet sheet = createSheet(pane, parentComponent, style);pane.selectInitialValue();sheet.addSheetListener(listener);sheet.show();sheet.toFront();', 'comment': '/*** Brings up a sheet with a specified icon, where the initial* choice is determined by the <code>initialValue</code> parameter and* the number of choices is determined by the <code>optionType</code>* parameter.* <p>* If <code>optionType</code> is <code>YES_NO_OPTION</code>,* or <code>YES_NO_CANCEL_OPTION</code>* and the <code>options</code> parameter is <code>null</code>,* then the options are* supplied by the look and feel.* <p>* The <code>messageType</code> parameter is primarily used to supply* a default icon from the look and feel.** @param parentComponent determines the <code>Frame</code>*      in which the dialog is displayed;  if*          <code>null</code>, or if the*      <code>parentComponent</code> has no*      <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param optionType an integer designating the options available on the*      dialog: <code>YES_NO_OPTION</code>,*      or <code>YES_NO_CANCEL_OPTION</code>* @param messageType an integer designating the kind of message this is,*          primarily used to determine the icon from the*      pluggable Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*          <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param icon    the icon to display in the dialog* @param options   an array of objects indicating the possible choices*          the user can make; if the objects are components, they*          are rendered properly; non-<code>String</code>*      objects are*          rendered using their <code>toString</code> methods;*          if this parameter is <code>null</code>,*      the options are determined by the Look and Feel* @param initialValue the object that represents the default selection*          for the dialog; only meaningful if <code>options</code>*      is used; can be <code>null</code>* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public boolean isAnimated() {return isAnimated;', 'comment': '/*** If this returns true, the JSheet uses a transition effect when shown* and when hidden.*/', 'coherence': 1}, {'code': 'public static void showMessageSheet(Component parentComponent,Object message, int messageType) {showMessageSheet(parentComponent, message, messageType, null, null);', 'comment': '/*** Brings up a sheet that displays a message using a default* icon determined by the <code>messageType</code> parameter.** @param parentComponent determines the <code>Frame</code>*    in which the dialog is displayed; if <code>null</code>,*    or if the <code>parentComponent</code> has no*    <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param messageType the type of message to be displayed:*          <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*      <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>*/', 'coherence': 1}, {'code': "protected void uninstallSheet() {if (isInstalled) {Window owner = getOwner();if (owner != null) {// Note: We mustn't change the windows focusable state because// this also affects the focusable state of the JSheet.//owner.setFocusableWindowState(true);owner.setEnabled(true);//((JFrame) owner).setResizable(true);owner.removeComponentListener(ownerMovementHandler);if (shiftBackLocation != null) {owner.setLocation(shiftBackLocation);}if (oldFocusOwner != null) {owner.toFront();oldFocusOwner.requestFocus();}}isInstalled = false;", 'comment': '/*** Uninstalls the sheet on the owner.* This method is invoked immediately after the JSheet is hidden.*/', 'coherence': 1}, {'code': 'public static void showMessageSheet(Component parentComponent,Object message, SheetListener listener) {showMessageSheet(parentComponent, message,JOptionPane.INFORMATION_MESSAGE, listener);', 'comment': '/*** Brings up an information-message sheet.** @param parentComponent determines the <code>Frame</code> in*    which the dialog is displayed; if <code>null</code>,*    or if the <code>parentComponent</code> has no*    <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param listener This listener is notified when the sheet is dismissed.*/', 'coherence': 1}, {'code': 'public static void showConfirmSheet(Component parentComponent, Object message, SheetListener listener) {showConfirmSheet(parentComponent, message,JOptionPane.YES_NO_CANCEL_OPTION, listener);', 'comment': '/*** Brings up a sheet with the options <i>Yes</i>,* <i>No</i> and <i>Cancel</i>.** @param parentComponent determines the <code>Frame</code> in which the*      sheet is displayed; if <code>null</code>,*      or if the <code>parentComponent</code> has no*      <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showInputSheet(Component parentComponent,Object message, int messageType, SheetListener listener) {showInputSheet(parentComponent, message,messageType, null, null, null, listener);', 'comment': '/*** Shows a sheet requesting input from the user parented to* <code>parentComponent</code> and message type <code>messageType</code>.** @param parentComponent  the parent <code>Component</code> for the*      dialog* @param message  the <code>Object</code> to display* @param messageType the type of message that is to be displayed:*           <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*      <code>JOptionPane.WARNING_MESSAGE</code>,*           <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'protected void fireOptionSelected(JFileChooser pane, int option) {SheetEvent sheetEvent = null;// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == SheetListener.class) {// Lazily create the event:if (sheetEvent == null) {sheetEvent = new SheetEvent(this, pane, option, null);}((SheetListener) listeners[i + 1]).optionSelected(sheetEvent);', 'comment': '/*** Notify all listeners that have registered interest for*   notification on this event type.  The event instance*   is lazily created using the parameters passed into*   the fire method.*/', 'coherence': 1}, {'code': 'protected void fireOptionSelected(JOptionPane pane) {Object value = pane.getValue();int option;if (value == null) {option = JOptionPane.CLOSED_OPTION;} else {if (pane.getOptions() == null) {if (value instanceof Integer) {option = ((Integer) value).intValue();} else {option = JOptionPane.CLOSED_OPTION;}} else {option = JOptionPane.CLOSED_OPTION;Object[] options = pane.getOptions();for (int i = 0, n = options.length; i < n; i++) {if (options[i].equals(value)) {option = i;break;}}if (option == JOptionPane.CLOSED_OPTION) {value = null;}}}fireOptionSelected(pane, option, value, pane.getInputValue());', 'comment': '/*** Notify all listeners that have registered interest for*   notification on this event type.  The event instance*   is lazily created using the parameters passed into*   the fire method.*/', 'coherence': 1}, {'code': 'public static void showSaveSheet(JFileChooser chooser, Component parent, SheetListener listener) {chooser.setDialogType(JFileChooser.SAVE_DIALOG);showSheet(chooser, parent, null, listener);', 'comment': '/*** Displays a "Save File" file chooser sheet. Note that the* text that appears in the approve button is determined by* the L&F.** @param  parent  the parent component of the dialog,*      can be <code>null</code>.* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showOpenSheet(JFileChooser chooser, Component parent, SheetListener listener) {chooser.setDialogType(JFileChooser.OPEN_DIALOG);showSheet(chooser, parent, null, listener);', 'comment': '/*** Displays an "Open File" file chooser sheet. Note that the* text that appears in the approve button is determined by* the L&F.** @param  parent  the parent component of the dialog,*      can be <code>null</code>.* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': "protected void installSheet() {if (!isNativeSheetSupported() && !isInstalled) {Window owner = getOwner();if (owner != null) {// Determine the location for the sheet and its owner while// the sheet will be visible.// In case we have to shift the owner to fully display the// dialog, we remember the shift back position.Point ownerLoc = owner.getLocation();Point sheetLoc;if (isShowAsSheet()) {if (owner instanceof JFrame) {sheetLoc = new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + owner.getInsets().top + ((JFrame) owner).getRootPane().getContentPane().getY());} else if (owner instanceof JDialog) {sheetLoc = new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + owner.getInsets().top + ((JDialog) owner).getRootPane().getContentPane().getY());} else {sheetLoc = new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + owner.getInsets().top);}if (sheetLoc.x < 0) {owner.setLocation(ownerLoc.x - sheetLoc.x, ownerLoc.y);sheetLoc.x = 0;shiftBackLocation = ownerLoc;oldLocation = owner.getLocation();} else {shiftBackLocation = null;oldLocation = ownerLoc;}} else {sheetLoc = new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + (owner.getHeight() - getHeight()) / 3);}setLocation(sheetLoc);oldFocusOwner = owner.getFocusOwner();// Note: We mustn't change the windows focusable state because// this also affects the focusable state of the JSheet.//owner.setFocusableWindowState(false);owner.setEnabled(false);// ((JFrame) owner).setResizable(false);if (isShowAsSheet()) {owner.addComponentListener(ownerMovementHandler);} else {if (owner instanceof Frame) {setTitle(((Frame) owner).getTitle());}}}isInstalled = true;} else {Window owner = getOwner();Point ownerLoc = owner.getLocation();Point sheetLoc = new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + (owner.getHeight() - getHeight()) / 3);setLocation(sheetLoc);", 'comment': '/*** Installs the sheet on the owner.* This method is invoked just before the JSheet is shown.*/', 'coherence': 1}, {'code': 'public static void showSaveSheet(URIChooser chooser, Component parent, SheetListener listener) {chooser.setDialogType(JFileChooser.SAVE_DIALOG);showSheet(chooser, parent, null, listener);', 'comment': '/*** Displays a "Save File" file chooser sheet. Note that the* text that appears in the approve button is determined by* the L&F.** @param  parent  the parent component of the dialog,*      can be <code>null</code>.* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showSheet(final URIChooser chooser, Component parent,String approveButtonText, SheetListener listener) {if (approveButtonText != null) {chooser.setApproveButtonText(approveButtonText);chooser.setDialogType(URIChooser.CUSTOM_DIALOG);}// Begin Create DialogFrame frame = parent instanceof Frame ? (Frame) parent: (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);if (chooser instanceof JFileChooser) {String title = ((JFileChooser) chooser).getUI().getDialogTitle((JFileChooser) chooser);((JFileChooser) chooser).getAccessibleContext().setAccessibleDescription(title);}final JSheet sheet = new JSheet(frame);sheet.addSheetListener(listener);Container contentPane = sheet.getContentPane();contentPane.setLayout(new BorderLayout());contentPane.add(chooser.getComponent(), BorderLayout.CENTER);// End Create Dialogfinal ActionListener actionListener = new ActionListener() {public void actionPerformed(ActionEvent evt) {int option;if (evt.getActionCommand().equals("ApproveSelection")) {option = JFileChooser.APPROVE_OPTION;} else {option = JFileChooser.CANCEL_OPTION;}sheet.hide();sheet.fireOptionSelected(chooser, option);chooser.removeActionListener(this);}};chooser.addActionListener(actionListener);sheet.addWindowListener(new WindowAdapter() {public void windowClosing(WindowEvent e) {sheet.fireOptionSelected(chooser, JFileChooser.CANCEL_OPTION);chooser.removeActionListener(actionListener);}});chooser.rescanCurrentDirectory();sheet.pack();sheet.show();sheet.toFront();', 'comment': '/*** Displays a custom file chooser sheet with a custom approve button.** @param   parent  the parent component of the dialog;*      can be <code>null</code>* @param   approveButtonText the text of the <code>ApproveButton</code>* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public void setAnimated(boolean newValue) {boolean oldValue = isAnimated;isAnimated = newValue;firePropertyChange("animated", oldValue, newValue);', 'comment': '/*** If this is set to true, the JSheet uses a transition effect when shown* and when hidden.*/--------------// QuaquaUtilities.setWindowAlpha(this, 240);--------------', 'coherence': 1}, {'code': 'public static void showConfirmSheet(Component parentComponent,Object message, int optionType,int messageType, Icon icon, SheetListener listener) {showOptionSheet(parentComponent, message, optionType,messageType, icon, null, null, listener);', 'comment': '/*** Brings up a sheet with a specified icon, where the number of* choices is determined by the <code>optionType</code> parameter.* The <code>messageType</code> parameter is primarily used to supply* a default icon from the look and feel.** @param parentComponent determines the <code>Frame</code> in which the*      dialog is displayed; if <code>null</code>,*      or if the <code>parentComponent</code> has no*      <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the Object to display* @param optionType an int designating the options available on the dialog:*          <code>YES_NO_OPTION</code>,*      or <code>YES_NO_CANCEL_OPTION</code>* @param messageType an int designating the kind of message this is,*          primarily used to determine the icon from the pluggable*          Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*          <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param icon    the icon to display in the dialog* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showInputSheet(Component parentComponent,Object message, SheetListener listener) {showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, listener);', 'comment': '/*** Shows a question-message sheet requesting input from the user* parented to <code>parentComponent</code>.** @param parentComponent  the parent <code>Component</code> for the*    dialog* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'protected void fireOptionSelected(URIChooser pane, int option) {SheetEvent sheetEvent = null;// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == SheetListener.class) {// Lazily create the event:if (sheetEvent == null) {sheetEvent = new SheetEvent(this, pane, option, null);}((SheetListener) listeners[i + 1]).optionSelected(sheetEvent);', 'comment': '/*** Notify all listeners that have registered interest for*   notification on this event type.  The event instance*   is lazily created using the parameters passed into*   the fire method.*/', 'coherence': 1}, {'code': 'public void removeSheetListener(SheetListener l) {listenerList.remove(SheetListener.class, l);', 'comment': '/*** Removes a sheet listener.*/', 'coherence': 1}, {'code': 'public static void showConfirmSheet(Component parentComponent,Object message, int optionType, SheetListener listener) {showConfirmSheet(parentComponent, message, optionType,JOptionPane.QUESTION_MESSAGE, listener);', 'comment': '/*** Brings up a sheet where the number of choices is determined* by the <code>optionType</code> parameter.** @param parentComponent determines the <code>Frame</code> in which the*      sheet is displayed; if <code>null</code>,*      or if the <code>parentComponent</code> has no*      <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param optionType an int designating the options available on the dialog:*          <code>YES_NO_OPTION</code>, or*      <code>YES_NO_CANCEL_OPTION</code>* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public JSheet(Frame owner) {super(owner);init();', 'comment': '/*** Creates a new JSheet.*/', 'coherence': 1}, {'code': 'public static void showConfirmSheet(Component parentComponent,Object message, int optionType, int messageType, SheetListener listener) {showConfirmSheet(parentComponent, message, optionType,messageType, null, listener);', 'comment': '/*** Brings up a sheet where the number of choices is determined* by the <code>optionType</code> parameter, where the* <code>messageType</code>* parameter determines the icon to display.* The <code>messageType</code> parameter is primarily used to supply* a default icon from the Look and Feel.** @param parentComponent determines the <code>Frame</code> in*      which the dialog is displayed; if <code>null</code>,*      or if the <code>parentComponent</code> has no*      <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param optionType an integer designating the options available*      on the dialog: <code>YES_NO_OPTION</code>,*      or <code>YES_NO_CANCEL_OPTION</code>* @param messageType an integer designating the kind of message this is;*          primarily used to determine the icon from the pluggable*          Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*          <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showSheet(final JFileChooser chooser, Component parent,String approveButtonText, SheetListener listener) {if (approveButtonText != null) {chooser.setApproveButtonText(approveButtonText);chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);}// Begin Create DialogFrame frame = parent instanceof Frame ? (Frame) parent: (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);String title = chooser.getUI().getDialogTitle(chooser);chooser.getAccessibleContext().setAccessibleDescription(title);final JSheet sheet = new JSheet(frame);sheet.addSheetListener(listener);Container contentPane = sheet.getContentPane();contentPane.setLayout(new BorderLayout());contentPane.add(chooser, BorderLayout.CENTER);// End Create Dialogfinal ActionListener actionListener = new ActionListener() {public void actionPerformed(ActionEvent evt) {int option;if (evt.getActionCommand().equals("ApproveSelection")) {option = JFileChooser.APPROVE_OPTION;} else {option = JFileChooser.CANCEL_OPTION;}sheet.hide();sheet.fireOptionSelected(chooser, option);chooser.removeActionListener(this);}};chooser.addActionListener(actionListener);sheet.addWindowListener(new WindowAdapter() {public void windowClosing(WindowEvent e) {sheet.fireOptionSelected(chooser, JFileChooser.CANCEL_OPTION);chooser.removeActionListener(actionListener);}});chooser.rescanCurrentDirectory();sheet.pack();sheet.show();sheet.toFront();', 'comment': '/*** Displays a custom file chooser sheet with a custom approve button.** @param   parent  the parent component of the dialog;*      can be <code>null</code>* @param   approveButtonText the text of the <code>ApproveButton</code>* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showSheet(JOptionPane pane, Component parentComponent, SheetListener listener) {final JSheet sheet = createSheet(pane, parentComponent, styleFromMessageType(pane.getMessageType()));sheet.addSheetListener(listener);sheet.show();', 'comment': '/*** Displays an option pane as a sheet on its parent window.** @param pane The option pane.* @param parentComponent The parent of the option pane.* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showMessageSheet(Component parentComponent,Object message, int messageType, Icon icon, SheetListener listener) {showOptionSheet(parentComponent, message, JOptionPane.DEFAULT_OPTION,messageType, icon, null, null, listener);', 'comment': '/*** Brings up a sheet displaying a message, specifying all parameters.** @param parentComponent determines the <code>Frame</code> in which the*      sheet is displayed; if <code>null</code>,*      or if the <code>parentComponent</code> has no*      <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display* @param messageType the type of message to be displayed:*          <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*      <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param icon    an icon to display in the sheet that helps the user*          identify the kind of message that is being displayed* @param listener This listener is notified when the sheet is dismissed.*/', 'coherence': 1}, {'code': 'static Window getWindowForComponent(Component parentComponent) {if (parentComponent == null) {return JOptionPane.getRootFrame();}if (parentComponent instanceof Frame || parentComponent instanceof Dialog) {return (Window) parentComponent;}return getWindowForComponent(parentComponent.getParent());', 'comment': "/*** Returns the specified component's toplevel <code>Frame</code> or* <code>Dialog</code>.** @param parentComponent the <code>Component</code> to check for a*    <code>Frame</code> or <code>Dialog</code>* @return the <code>Frame</code> or <code>Dialog</code> that*    contains the component, or the default*       frame if the component is <code>null</code>,*    or does not have a valid*       <code>Frame</code> or <code>Dialog</code> parent*/", 'coherence': 1}, {'code': 'public static void showOpenSheet(URIChooser chooser, Component parent, SheetListener listener) {chooser.setDialogType(JFileChooser.OPEN_DIALOG);showSheet(chooser, parent, null, listener);', 'comment': '/*** Displays an "Open File" file chooser sheet. Note that the* text that appears in the approve button is determined by* the L&F.** @param  parent  the parent component of the dialog,*      can be <code>null</code>.* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public void addSheetListener(SheetListener l) {listenerList.add(SheetListener.class, l);', 'comment': '/*** Adds a sheet listener.*/', 'coherence': 1}, {'code': 'public static void showMessageSheet(Component parentComponent,Object message) {showMessageSheet(parentComponent, message,JOptionPane.INFORMATION_MESSAGE);', 'comment': '/*** Brings up an information-message sheet.** @param parentComponent determines the <code>Frame</code> in*    which the dialog is displayed; if <code>null</code>,*    or if the <code>parentComponent</code> has no*    <code>Frame</code>, the sheet is displayed as a dialog.* @param message   the <code>Object</code> to display*/', 'coherence': 1}, {'code': 'public static void showInputSheet(Component parentComponent, Object message,Object initialSelectionValue, SheetListener listener) {showInputSheet(parentComponent, message,JOptionPane.QUESTION_MESSAGE, null, null,initialSelectionValue, listener);', 'comment': '/*** Shows a question-message sheet requesting input from the user and* parented to <code>parentComponent</code>. The input value will be* initialized to <code>initialSelectionValue</code>.** @param parentComponent  the parent <code>Component</code> for the*    dialog* @param message the <code>Object</code> to display* @param initialSelectionValue the value used to initialize the input*         field* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'public static void showInputSheet(Component parentComponent,Object message, int messageType, Icon icon,Object[] selectionValues, Object initialSelectionValue, SheetListener listener) {JOptionPane pane = new JOptionPane(message, messageType,JOptionPane.OK_CANCEL_OPTION, icon,null, null);pane.setWantsInput(true);pane.setSelectionValues(selectionValues);pane.setInitialSelectionValue(initialSelectionValue);pane.setComponentOrientation(((parentComponent == null) ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());int style = styleFromMessageType(messageType);JSheet sheet = createSheet(pane, parentComponent, style);pane.selectInitialValue();/*sheet.addWindowListener(new WindowAdapter() {public void windowClosed(WindowEvent evt) {sheet.dispose();}});*/sheet.addSheetListener(listener);sheet.show();sheet.toFront();', 'comment': '/*** Prompts the user for input in a sheet where the* initial selection, possible selections, and all other options can* be specified. The user will able to choose from* <code>selectionValues</code>, where <code>null</code> implies the* user can input* whatever they wish, usually by means of a <code>JTextField</code>.* <code>initialSelectionValue</code> is the initial value to prompt* the user with. It is up to the UI to decide how best to represent* the <code>selectionValues</code>, but usually a* <code>JComboBox</code>, <code>JList</code>, or* <code>JTextField</code> will be used.** @param parentComponent  the parent <code>Component</code> for the*      dialog* @param message  the <code>Object</code> to display* @param messageType the type of message to be displayed:*          <code>JOptionPane.ERROR_MESSAGE</code>,*      <code>JOptionPane.INFORMATION_MESSAGE</code>,*      <code>JOptionPane.WARNING_MESSAGE</code>,*          <code>JOptionPane.QUESTION_MESSAGE</code>,*      or <code>JOptionPane.PLAIN_MESSAGE</code>* @param icon   the <code>Icon</code> image to display* @param selectionValues an array of <code>Object</code>s that*      gives the possible selections* @param initialSelectionValue the value used to initialize the input*         field* @param listener The listener for SheetEvents.*/', 'coherence': 1}, {'code': 'protected void updateText() {if (updatingDepth++ == 0) {if (getFormatter() != null) {try {String newText = getFormatter().valueToString(getValue());setText(newText);if (!isFocusOwner()) {// This is like selectAll(), but we set the// cursor at the start of the field, because// the start of the field contains the most// significant part of the field content.setCaretPosition(getDocument().getLength());moveCaretPosition(0);}} catch (ParseException ex) {//ex.printStackTrace(); do nothing}}}updatingDepth--;', 'comment': '/*** Updates the text of the field from the value.*/', 'coherence': 1}, {'code': 'protected void updateValue() {if (updatingDepth++ == 0) {if (getFormatter() != null) {try {Object newValue = getFormatter().stringToValue(getText());setValue(newValue);} catch (ParseException ex) {//ex.printStackTrace();// do nothing}}}updatingDepth--;', 'comment': '/*** Updates the value from the text of the field.*/', 'coherence': 1}, {'code': 'private AbstractFormatterFactory getDefaultFormatterFactory(Object type) {if (type instanceof DateFormat) {return new DefaultFormatterFactory(new DateFormatter((DateFormat) type));}if (type instanceof NumberFormat) {return new DefaultFormatterFactory(new NumberFormatter((NumberFormat) type));}if (type instanceof Format) {return new DefaultFormatterFactory(new InternationalFormatter((Format) type));}if (type instanceof Date) {return new DefaultFormatterFactory(new DateFormatter());}if (type instanceof Number) {AbstractFormatter displayFormatter = new NumberFormatter();((NumberFormatter) displayFormatter).setValueClass(type.getClass());AbstractFormatter editFormatter = new NumberFormatter(new DecimalFormat("#.#"));((NumberFormatter) editFormatter).setValueClass(type.getClass());return new DefaultFormatterFactory(displayFormatter,displayFormatter, editFormatter);}return new DefaultFormatterFactory(new DefaultFormatter());', 'comment': '/*** Returns an AbstractFormatterFactory suitable for the passed in* Object type.*/', 'coherence': 1}, {'code': 'public void arrangeFramesVertically() {Component[] allFrames = getAllFrames();// do nothing if no frames to work withif (allFrames.length == 0) {return;}manager.setNormalSize();int vertFrames = (int)Math.floor(Math.sqrt(allFrames.length));int horFrames = (int)Math.ceil(Math.sqrt(allFrames.length));// first arrange the windows that have equal sizeint frameWidth = getBounds().width / horFrames;int frameHeight = getBounds().height / vertFrames;int x = 0;int y = 0;int frameIdx = 0;for (int horCnt = 0; horCnt < horFrames-1; horCnt++) {y = 0;for (int vertCnt = 0; vertCnt < vertFrames; vertCnt++) {try {((JInternalFrame)allFrames[frameIdx]).setMaximum(false);} catch (PropertyVetoException e) {e.printStackTrace();}allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);frameIdx++;y = y + frameHeight;}x = x + frameWidth;}// the rest of the frames are tiled down on the last column with equal// heightframeHeight = getBounds().height / (allFrames.length - frameIdx);y = 0;for (; frameIdx < allFrames.length; frameIdx++) {try {((JInternalFrame)allFrames[frameIdx]).setMaximum(false);} catch (PropertyVetoException e) {e.printStackTrace();}allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);y = y + frameHeight;}checkDesktopSize();', 'comment': '/*** Arranges the frames as efficiently as possibly with preference for* keeping vertical size maximal.<br>**/', 'coherence': 1}, {'code': 'public void arrangeFramesHorizontally() {Component[] allFrames = getAllFrames();// do nothing if no frames to work withif (allFrames.length == 0) {return;}manager.setNormalSize();int vertFrames = (int)Math.ceil(Math.sqrt(allFrames.length));int horFrames = (int)Math.floor(Math.sqrt(allFrames.length));// first arrange the windows that have equal sizeint frameWidth = getBounds().width / horFrames;int frameHeight = getBounds().height / vertFrames;int x = 0;int y = 0;int frameIdx = 0;for (int vertCnt = 0; vertCnt < vertFrames-1; vertCnt++) {x = 0;for (int horCnt = 0; horCnt < horFrames; horCnt++) {try {((JInternalFrame)allFrames[frameIdx]).setMaximum(false);} catch (PropertyVetoException e) {e.printStackTrace();}allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);frameIdx++;x = x + frameWidth;}y = y + frameHeight;}// the rest of the frames are tiled down on the last column with equal// heightframeWidth = getBounds().width / (allFrames.length - frameIdx);x = 0;for (; frameIdx < allFrames.length; frameIdx++) {try {((JInternalFrame)allFrames[frameIdx]).setMaximum(false);} catch (PropertyVetoException e) {e.printStackTrace();}allFrames[frameIdx].setBounds(x, y, frameWidth, frameHeight);x = x + frameWidth;}checkDesktopSize();', 'comment': '/*** Arranges the frames as efficiently as possibly with preference for* keeping horizontal size maximal.<br>**/', 'coherence': 1}, {'code': 'public void setAllSize(Dimension d) {setMinimumSize(d);setMaximumSize(d);setPreferredSize(d);setBounds(0, 0, d.width, d.height);', 'comment': '/*** Sets all component size properties ( maximum, minimum, preferred)* to the given dimension.*/', 'coherence': 1}, {'code': 'private void arrangeFramesCascading() {JInternalFrame[] allFrames = getAllFrames();// do nothing if no frames to work withif (allFrames.length == 0) {return;}manager.setNormalSize();Insets insets = getInsets();int x = insets.left;int y = insets.top;int frameOffset=0;for (int i = allFrames.length - 1; i >= 0; i--) {Point p=SwingUtilities.convertPoint(allFrames[i].getContentPane(),0,0,allFrames[i]);frameOffset=Math.max(frameOffset,Math.max(p.x,p.y));}int frameHeight = (getBounds().height-insets.top-insets.bottom) - allFrames.length * frameOffset;int frameWidth = (getBounds().width-insets.left-insets.right) - allFrames.length * frameOffset;for (int i = allFrames.length - 1; i >= 0; i--) {try {allFrames[i].setMaximum(false);} catch (PropertyVetoException e) {e.printStackTrace();}allFrames[i].setBounds(x, y, frameWidth, frameHeight);x = x + frameOffset;y = y + frameOffset;}checkDesktopSize();', 'comment': '/*** Cascade all internal frames*/', 'coherence': 1}, {'code': 'public JPopupButton() {initComponents();setFocusable(false);itemFont = ITEM_FONT;', 'comment': '/** Creates new form JToolBarMenu */', 'coherence': 1}, {'code': 'public void setPopupAnchor(int newValue) {popupAnchor = newValue;', 'comment': '/*** Sets the popup anchor.* <p>* <ul>* <li>SOUTH_WEST places the popup below the button and aligns it with its* left bound.</li>* <li>SOUTH_EAST places the popup below the button and aligns it with its* right bound.</li>* </ul>** @param newValue SwingConstants.SOUTH_WEST or SOUTH_EAST.*/', 'coherence': 1}, {'code': 'public int getPopupAnchor() {return popupAnchor;', 'comment': '/*** Gets the popup anchor.** @return SwingConstants.SOUTH_WEST or SOUTH_EAST.*/', 'coherence': 1}, {'code': 'private void initComponents() {addMouseListener(new java.awt.event.MouseAdapter() {public void mousePressed(java.awt.event.MouseEvent evt) {handleMousePressed(evt);}public void mouseReleased(java.awt.event.MouseEvent evt) {performAction(evt);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public TreePath getSelectionPath() {return selectionPath;', 'comment': '/*** Gets the selected Font.* This is a bound property.** @return The selected font, or null, if no font is selected.*/', 'coherence': 1}, {'code': 'public void addActionListener(ActionListener l) {listenerList.add(ActionListener.class, l);', 'comment': '/*** Adds an <code>ActionListener</code> to the font chooser.** @param l  the listener to be added** @see #approveSelection* @see #cancelSelection*/', 'coherence': 1}, {'code': 'public void setSelectedFont(Font newValue) {Font oldValue = selectedFont;this.selectedFont = newValue;firePropertyChange(SELECTED_FONT_PROPERTY, oldValue, newValue);updateSelectionPath(newValue);', 'comment': '/*** Sets the selected Font.* <p>* Changing the selected font, causes a change of the* selection path, if the selected font is not the last* path segment of the selection path.** This is a bound property.** @param newValue The new selected font, or null if no font is to be* selected.*/', 'coherence': 1}, {'code': 'public void setSelectionPath(TreePath newValue) {TreePath oldValue = selectionPath;this.selectionPath = newValue;firePropertyChange(SELECTION_PATH_PROPERTY, oldValue, newValue);if (selectionPath != null && selectionPath.getPathCount() == 4) {setSelectedFont(((FontFaceNode) selectionPath.getLastPathComponent()).getFont());', 'comment': '/*** Sets the selected Font.* This is a bound property.* <p>* Changing the selection path, causes a change of the* selected font, if the selected font is not the last* path segment of the selection path.** @param newValue The new selected font, or null if no font is to be* selected..*/', 'coherence': 1}, {'code': 'public LabelFigure() {this("Label");', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void cancelSelection() {returnValue = CANCEL_OPTION;if (dialog != null) {dialog.setVisible(false);}fireActionPerformed(CANCEL_SELECTION);', 'comment': '/*** Called by the UI when the user chooses the Cancel button.* This can also be called by the programmer.* This method causes an action event to fire* with the command string equal to* <code>CANCEL_SELECTION</code>.** @see #CANCEL_SELECTION*/', 'coherence': 1}, {'code': '@Overridepublic String getUIClassID() {return uiClassID;', 'comment': '/*** Returns a string that specifies the name of the L&F class* that renders this component.** @return "FontChooserUI"* @see JComponent#getUIClassID* @see UIDefaults#getUI*/', 'coherence': 1}, {'code': 'public Font getSelectedFont() {return selectedFont;', 'comment': '/*** Gets the selected Font.* This is a bound property.** @return The selected font, or null, if no font is selected.*/', 'coherence': 1}, {'code': 'public FontChooserUI getUI() {return (FontChooserUI) ui;', 'comment': '/*** Returns the look and feel (L&F) object that renders this component.** @return the PanelUI object that renders this component* @since 1.4*/', 'coherence': 1}, {'code': 'public synchronized static void loadAllFonts() {if (future == null) {future = new FutureTask<Font[]>(new Callable<Font[]>() {public Font[] call() throws Exception {long start = System.currentTimeMillis();Font[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();long end = System.currentTimeMillis();//System.out.println("JFontChooser has loaded all fonts. Elapsed:"+(end-start));// get rid of bogus fontsArrayList<Font> goodFonts = new ArrayList<Font>(fonts.length);for (Font f : fonts) {Font decoded = Font.decode(f.getFontName());if (decoded.getFontName().equals(f.getFontName()) || decoded.getFontName().endsWith("-Derived")) {goodFonts.add(f);}}return goodFonts.toArray(new Font[goodFonts.size()]);// return fonts;}});new Thread(future).start();', 'comment': '/*** Starts loading all fonts from the local graphics environment* using a worker thread.*/', 'coherence': 1}, {'code': 'public static synchronized Font[] getAllFonts() {loadAllFonts();try {return future.get().clone();} catch (InterruptedException ex) {return new Font[0];} catch (ExecutionException ex) {return new Font[0];', 'comment': '/*** Gets all fonts from the graphics environment. This may take a long* time. It is recommended to call loadAllFonts during the startup* of an application. If you do this, you can retrieve the fonts from* this method from the AWT Event Dispatcher Thread.** @return All fonts.*/', 'coherence': 1}, {'code': '@Overridepublic void updateUI() {// Try to get a browser UI from the UIManager.// Fall back to BasicBrowserUI, if none is available.if (UIManager.get(getUIClassID()) != null) {setUI((FontChooserUI) UIManager.getUI(this));} else {setUI(PaletteFontChooserUI.createUI(this));', 'comment': '/*** Resets the UI property with a value from the current look and feel.** @see JComponent#updateUI*/', 'coherence': 1}, {'code': 'public void removeActionListener(ActionListener l) {listenerList.remove(ActionListener.class, l);', 'comment': '/*** Removes an <code>ActionListener</code> from the font chooser.** @param l  the listener to be removed** @see #addActionListener*/', 'coherence': 1}, {'code': 'public void setUI(FontChooserUI ui) {super.setUI(ui);', 'comment': '/*** Sets the look and feel (L&F) object that renders this component.** @param ui  the PanelUI L&F object* @see UIDefaults#getUI*/', 'coherence': 1}, {'code': 'public void approveSelection() {returnValue = APPROVE_OPTION;if (dialog != null) {dialog.setVisible(false);}fireActionPerformed(APPROVE_SELECTION);', 'comment': '/*** Called by the UI when the user hits the Approve button* (labeled "Open" or "Save", by default). This can also be* called by the programmer.* This method causes an action event to fire* with the command string equal to* <code>APPROVE_SELECTION</code>.** @see #APPROVE_SELECTION*/', 'coherence': 1}, {'code': 'public FontChooserModel getModel() {return model;', 'comment': '/*** Gets the selected Font.* This is a bound property.** @return The selected font, or null, if no font is selected.*/', 'coherence': 1}, {'code': 'protected void updateSelectionPath(Font newValue) {if (newValue == null || selectionPath == null || selectionPath.getPathCount() != 4 ||!((FontFaceNode) selectionPath.getLastPathComponent()).getFont().getFontName().equals(newValue.getFontName())) {if (newValue == null) {setSelectionPath(null);} else {TreePath path = selectionPath;FontCollectionNode oldCollection = (path != null && path.getPathCount() > 1) ? (FontCollectionNode) path.getPathComponent(1) : null;FontFamilyNode oldFamily = (path != null && path.getPathCount() > 2) ? (FontFamilyNode) path.getPathComponent(2) : null;FontFaceNode oldFace = (path != null && path.getPathCount() > 3) ? (FontFaceNode) path.getPathComponent(3) : null;FontCollectionNode newCollection = oldCollection;FontFamilyNode newFamily = oldFamily;FontFaceNode newFace = null;// search in the current familyif (newFace == null && newFamily != null) {for (FontFaceNode face : newFamily.faces()) {if (face.getFont().getFontName().equals(newValue.getFontName())) {newFace = face;break;}}}// search in the current collectionif (newFace == null && newCollection != null) {for (FontFamilyNode family : newCollection.families()) {for (FontFaceNode face : family.faces()) {if (face.getFont().getFontName().equals(newValue.getFontName())) {newFamily = family;newFace = face;break;}}}}// search in all collectionsif (newFace == null) {TreeNode root = (TreeNode) getModel().getRoot();OuterLoop:for (int i = 0, n = root.getChildCount(); i < n; i++) {FontCollectionNode collection = (FontCollectionNode) root.getChildAt(i);for (FontFamilyNode family : collection.families()) {for (FontFaceNode face : family.faces()) {if (face.getFont().getFontName().equals(newValue.getFontName())) {newCollection = collection;newFamily = family;newFace = face;break OuterLoop;}}}}}if (newFace != null) {setSelectionPath(new TreePath(new Object[]{getModel().getRoot(), newCollection, newFamily, newFace}));} else {setSelectionPath(null);', 'comment': '/*** Updates the selection path to the selected font.* <p>* This method is invoked, when a font is selected, and when then* structure of the model has changed.** @param newValue*/', 'coherence': 1}, {'code': 'public JFontChooser() {loadAllFonts();model = new DefaultFontChooserModel.UIResource();model.addTreeModelListener(modelHandler);updateUI();addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {if (evt.getPropertyName() == "ancestor" && evt.getNewValue() != null) {Component ancestor = (Component) evt.getNewValue();try {((DefaultFontChooserModel) model).setFonts(getAllFonts());} catch (Exception ex) {ex.printStackTrace();}JFontChooser.this.removePropertyChangeListener(this);', 'comment': '/** Creates new form JFontChooser */', 'coherence': 1}, {'code': 'protected void fireActionPerformed(String command) {// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();long mostRecentEventTime = EventQueue.getMostRecentEventTime();int modifiers = 0;AWTEvent currentEvent = EventQueue.getCurrentEvent();if (currentEvent instanceof InputEvent) {modifiers = ((InputEvent) currentEvent).getModifiers();} else if (currentEvent instanceof ActionEvent) {modifiers = ((ActionEvent) currentEvent).getModifiers();}ActionEvent e = null;// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length - 2; i >= 0; i -= 2) {if (listeners[i] == ActionListener.class) {// Lazily create the event:if (e == null) {e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED,command, mostRecentEventTime,modifiers);}((ActionListener) listeners[i + 1]).actionPerformed(e);', 'comment': '/*** Notifies all listeners that have registered interest for* notification on this event type. The event instance* is lazily created using the <code>command</code> parameter.*/', 'coherence': 1}, {'code': 'public void setImageData(byte[] imageData) {willChange();this.imageData = imageData;this.bufferedImage = null;changed();', 'comment': '/*** Sets the image data.* This clears the buffered image.*/', 'coherence': 1}, {'code': "public BufferedImage getBufferedImage() {if (bufferedImage == null && imageData != null) {try {bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));} catch (IOException e) {e.printStackTrace();// If we can't create a buffered image from the image data,// there is no use to keep the image data and try again, so// we drop the image data.imageData = null;}}return bufferedImage;", 'comment': '/*** Gets the buffered image. If necessary, this method creates the buffered* image from the image data.*/', 'coherence': 1}, {'code': 'public PickAttributesAction(DrawingEditor editor) {super(editor);labels.configureAction(this, "edit.pickAttributes");setEnabled(true);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ImageFigure() {this(0, 0, 0, 0);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void setImage(byte[] imageData, BufferedImage bufferedImage) {willChange();this.imageData = imageData;this.bufferedImage = bufferedImage;changed();', 'comment': '/*** Sets the image.** @param imageData The image data. If this is null, a buffered image must* be provided.* @param bufferedImage An image constructed from the imageData. If this* is null, imageData must be provided.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public void setBufferedImage(BufferedImage image) {willChange();this.imageData = null;this.bufferedImage = image;changed();', 'comment': '/*** Sets the buffered image.* This clears the image data.*/', 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public byte[] getImageData() {if (bufferedImage != null && imageData == null) {try {ByteArrayOutputStream bout = new ByteArrayOutputStream();ImageIO.write(bufferedImage, "PNG", bout);bout.close();imageData = bout.toByteArray();} catch (IOException e) {e.printStackTrace();// If we can\'t create image data from the buffered image,// there is no use to keep the buffered image and try again, so// we drop the buffered image.bufferedImage = null;}}return imageData;', 'comment': '/*** Gets the image data. If necessary, this method creates the image* data from the buffered image.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {Point2D.Double anchor = getStartPoint();Point2D.Double lead = getEndPoint();setBounds((Point2D.Double) tx.transform(anchor, anchor),(Point2D.Double) tx.transform(lead, lead));', 'comment': '/*** Transforms the figure.* @param tx The transformation.*/', 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public boolean figureContains(Point2D.Double p) {Rectangle2D.Double r = (Rectangle2D.Double) rectangle.clone();double grow = AttributeKeys.getPerpendicularHitGrowth(this) + 1d;Geom.grow(r, grow, grow);return r.contains(p);', 'comment': '/*** Checks if a Point2D.Double is inside the figure.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public GroupFigure() {setConnectable(false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public ZoomAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {this((DrawingView) null, scaleFactor, button);setEditor(editor);', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public GraphicalCompositeFigure() {this(null);', 'comment': '/*** Default constructor which uses nothing as presentation* figure. This constructor is needed by the Storable mechanism.*/', 'coherence': 1}, {'code': 'public Rectangle2D.Double getDrawingArea() {Rectangle2D.Double r = super.getDrawingArea();if (getPresentationFigure() != null) {r.add(getPresentationFigure().getDrawingArea());}return r;', 'comment': '/*** Return the draw area. This method is delegated to the* encapsulated presentation figure.*/', 'coherence': 1}, {'code': 'public GraphicalCompositeFigure(Figure newPresentationFigure) {super();setPresentationFigure(newPresentationFigure);', 'comment': '/*** Constructor which creates a GraphicalCompositeFigure with* a given graphical figure for presenting it.** @param  newPresentationFigure  figure which renders the container*/', 'coherence': 1}, {'code': 'public void setPresentationFigure(Figure newPresentationFigure) {if (this.presentationFigure != null) {this.presentationFigure.removeFigureListener(presentationFigureHandler);if (getDrawing() != null) {this.presentationFigure.removeNotify(getDrawing());}}this.presentationFigure = newPresentationFigure;if (this.presentationFigure != null) {this.presentationFigure.addFigureListener(presentationFigureHandler);if (getDrawing() != null) {this.presentationFigure.addNotify(getDrawing());', 'comment': '/*** Set a figure which renders this BasicCompositeFigure. The presentation* tasks for the BasicCompositeFigure are delegated to this presentation* figure.****** @param newPresentationFigure  figure takes over the presentation tasks*/', 'coherence': 1}, {'code': 'public SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {this(editor, key, null, icon);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {this(editor, key, null, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void setBounds(Point2D.Double anchor, Point2D.Double lead) {if (getLayouter() == null) {super.setBounds(anchor, lead);basicSetPresentationFigureBounds(anchor, lead);} else {Rectangle2D.Double r = getLayouter().layout(this, anchor, lead);basicSetPresentationFigureBounds(new Point2D.Double(r.getX(), r.getY()),new Point2D.Double(Math.max(lead.x, (int) r.getMaxX()),Math.max(lead.y, (int) r.getMaxY())));invalidate();', 'comment': '/*** Moves the figure. This is the* method that subclassers override. Clients usually* call displayBox.*/', 'coherence': 1}, {'code': '@Overridepublic <T> T get(AttributeKey<T> key) {if (getPresentationFigure() != null) {return getPresentationFigure().get(key);} else {return (! attributes.containsKey(key)) ?key.getDefaultValue() :key.get(attributes);', 'comment': '/*** Gets an attribute from the figure.*/', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {super.transform(tx);if (getPresentationFigure() != null) {getPresentationFigure().transform(tx);', 'comment': '/*** Standard presentation method which is delegated to the encapsulated presentation figure.* The presentation figure is moved as well as all contained figures.*/', 'coherence': 1}, {'code': 'public Rectangle2D.Double getBounds() {if (getPresentationFigure() == null) return super.getBounds();return getPresentationFigure().getBounds();', 'comment': '/*** Return the logcal display area. This method is delegated to the encapsulated* presentation figure.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")protected void applyAttributesTo(Figure that) {for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {that.set(entry.getKey(), entry.getValue());', 'comment': '/*** Applies all attributes of this figure to that figure.*/', 'coherence': 1}, {'code': 'public Collection<Handle> createHandles(int detailLevel) {LinkedList<Handle> handles = new LinkedList<Handle>();if (detailLevel == 0) {MoveHandle.addMoveHandles(this, handles);}return handles;', 'comment': '/*** Return default handles from the presentation figure.*/', 'coherence': 1}, {'code': 'public Figure getPresentationFigure() {return presentationFigure;', 'comment': '/*** Get a figure which renders this BasicCompositeFigure. The presentation* tasks for the BasicCompositeFigure are delegated to this presentation* figure.****** @return figure takes over the presentation tasks*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {drawPresentationFigure(g);super.draw(g);', 'comment': '/*** Draw the figure. This method is delegated to the encapsulated presentation figure.*/', 'coherence': 1}, {'code': '@Overridepublic <T> void set(AttributeKey<T> key, T newValue) {if (forbiddenAttributes == null|| ! forbiddenAttributes.contains(key)) {if (getPresentationFigure() != null) {getPresentationFigure().set(key, newValue);}super.set(key, newValue);Object oldValue = attributes.put(key, newValue);', 'comment': '/*** Sets an attribute of the figure.* AttributeKey name and semantics are defined by the class implementing* the figure interface.*/', 'coherence': 1}, {'code': 'public GridConstrainer(double width, double height) {this(width, height, Math.PI / 8d, true);', 'comment': '/*** Creates a new instance with the specified grid size,* and by 11.25Â° (in degrees) for rotations.* The grid is visible.** @param width The width of a grid cell.* @param height The height of a grid cell.*/', 'coherence': 1}, {'code': 'public int getMajorGridSpacing() {return majorGridSpacing;', 'comment': '/*** Spacing between major grid lines.*/', 'coherence': 1}, {'code': 'public GridConstrainer() {this(1d, 1d, 0d, false);', 'comment': '/*** Creates a new instance with a grid of 1x1.*/', 'coherence': 1}, {'code': 'public Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir) {Point2D.Double p0 = constrainPoint((Point2D.Double) p.clone());switch (dir) {case NORTH:case NORTH_WEST:case NORTH_EAST:p.y = p0.y - height;break;case SOUTH:case SOUTH_WEST:case SOUTH_EAST:p.y = p0.y + height;break;}switch (dir) {case WEST:case NORTH_WEST:case SOUTH_WEST:p.x = p0.x - width;break;case EAST:case NORTH_EAST:case SOUTH_EAST:p.x = p0.x + width;break;}return p;', 'comment': '/*** Moves a point to the closest grid point in a direction.*/', 'coherence': 1}, {'code': 'public GridConstrainer(double width, double height, double theta, boolean visible) {if (width <= 0 || height <= 0) {throw new IllegalArgumentException("Width or height is <= 0");}this.width = width;this.height = height;this.theta = theta;this.isVisible = visible;', 'comment': '/*** Creates a new instance with the specified grid size.** @param width The width of a grid cell.* @param height The height of a grid cell.* @param theta The theta for rotations in radians.* @param visible Wether the grid is visible or not.*/', 'coherence': 1}, {'code': 'protected Point2D.Double constrainPoint(Point2D.Double p, TranslationDirection dir) {Point2D.Double p0 = constrainPoint((Point2D.Double) p.clone());switch (dir) {case NORTH:case NORTH_WEST:case NORTH_EAST:if (p0.y < p.y) {p.y = p0.y;} else if (p0.y > p.y) {p.y = p0.y - height;}break;case SOUTH:case SOUTH_WEST:case SOUTH_EAST:if (p0.y < p.y) {p.y = p0.y + height;} else if (p0.y > p.y) {p.y = p0.y;}break;}switch (dir) {case WEST:case NORTH_WEST:case SOUTH_WEST:if (p0.x < p.x) {p.x = p0.x;} else if (p0.x > p.x) {p.x = p0.x - width;}break;case EAST:case NORTH_EAST:case SOUTH_EAST:if (p0.x < p.x) {p.x = p0.x + width;} else if (p0.x > p.x) {p.x = p0.x;}break;}return p;', 'comment': '/*** Constrains the placement of a point towards a direction.* <p>* This method changes the point which is passed as a parameter.** @param p A point on the drawing.* @param dir A direction.* @return Returns the constrained point.*/', 'coherence': 1}, {'code': 'protected Rectangle2D.Double constrainRectangle(Rectangle2D.Double r, TranslationDirection dir) {Point2D.Double p0 = new Point2D.Double(r.x, r.y);switch (dir) {case NORTH:case NORTH_WEST:case WEST:constrainPoint(p0, dir);break;case EAST:case NORTH_EAST:p0.x += r.width;constrainPoint(p0, dir);p0.x -= r.width;break;case SOUTH:case SOUTH_WEST:p0.y += r.height;constrainPoint(p0, dir);p0.y -= r.height;break;case SOUTH_EAST:p0.y += r.height;p0.x += r.width;constrainPoint(p0, dir);p0.y -= r.height;p0.x -= r.width;break;}r.x = p0.x;r.y = p0.y;return r;', 'comment': '/*** Constrains the placement of a rectangle towards a direction.* <p>* This method changes the location of the rectangle which is passed as a* parameter. This method does not change the size of the rectangle.** @param r A rectangle on the drawing.* @param dir A direction.* @return Returns the constrained rectangle.*/', 'coherence': 1}, {'code': 'public GridConstrainer(double width, double height, boolean visible) {this(width, height, Math.PI / 8d, visible);', 'comment': '/*** Creates a new instance with the specified grid size.* and by 11.25Â° (in degrees) for rotations.** @param width The width of a grid cell.* @param height The height of a grid cell.* @param visible Wether the grid is visible or not.*/', 'coherence': 1}, {'code': 'public void setMajorGridSpacing(int newValue) {int oldValue = majorGridSpacing;majorGridSpacing = newValue;firePropertyChange("majorGridSpacing", oldValue, newValue);fireStateChanged();', 'comment': '/*** Spacing between major grid lines.*/', 'coherence': 1}, {'code': 'public Point2D.Double constrainPoint(Point2D.Double p) {p.x = Math.round(p.x / width) * width;p.y = Math.round(p.y / height) * height;return p;', 'comment': '/*** Constrains a point to the closest grid point in any direction.*/', 'coherence': 1}, {'code': 'public java.util.List<Figure> getChildrenFrontToBack() {return children ==  null ?new LinkedList<Figure>() :new ReversedList<Figure>(children);', 'comment': '/*** Returns an iterator to iterate in* Z-order front to back over the children.*/', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {super.transform(tx);for (Figure f : children) {f.transform(tx);}invalidate();', 'comment': '/*** Transforms the figure.*/', 'coherence': 1}, {'code': 'protected void fireFigureAdded(Figure f, int zIndex) {CompositeFigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i] == CompositeFigureListener.class) {// Lazily create the event:if (event == null)event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);((CompositeFigureListener)listeners[i+1]).figureAdded(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public <T> void set(AttributeKey<T> key, T newValue) {super.set(key, newValue);if (isAttributeEnabled(key)) {if (children != null) {for (Figure child : children) {child.set(key, newValue);', 'comment': '/*** Sets an attribute of the figure.* AttributeKey name and semantics are defined by the class implementing* the figure interface.*/--------------// ATTRIBUTES--------------', 'coherence': 1}, {'code': 'protected void fireFigureRemoved(Figure f, int zIndex) {CompositeFigureEvent event = null;// Notify all listeners that have registered interest for// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i] == CompositeFigureListener.class) {// Lazily create the event:if (event == null)event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);((CompositeFigureListener)listeners[i+1]).figureRemoved(event);', 'comment': '/***  Notify all listenerList that have registered interest for* notification on this event type.*/', 'coherence': 1}, {'code': 'public Layouter getLayouter() {return layouter;', 'comment': '/*** Get a Layouter object which encapsulated a layout* algorithm for this figure. Typically, a Layouter* accesses the child components of this figure and arranges* their graphical presentation.*** @return layout strategy used by this figure*/--------------// LAYOUT--------------', 'coherence': 1}, {'code': 'public void layout() {if (getLayouter() != null) {Rectangle2D.Double bounds = getBounds();Point2D.Double p = new Point2D.Double(bounds.x, bounds.y);Rectangle2D.Double r = getLayouter().layout(this, p, p);invalidate();', 'comment': '/*** A layout algorithm is used to define how the child components* should be laid out in relation to each other. The task for* layouting the child components for presentation is delegated* to a Layouter which can be plugged in at runtime.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g) {super.draw(g);for (Figure child : children) {if (child.isVisible()) {child.draw(g);', 'comment': '/*** Draw the figure. This method is delegated to the encapsulated presentation figure.*/', 'coherence': 1}, {'code': 'public boolean contains(Point2D.Double p) {Ellipse2D.Double r = (Ellipse2D.Double) ellipse.clone();double grow = AttributeKeys.getPerpendicularHitGrowth(this);r.x -= grow;r.y -= grow;r.width += grow * 2;r.height += grow * 2;return r.contains(p);', 'comment': '/*** Checks if a Point2D.Double is inside the figure.*/', 'coherence': 1}, {'code': 'public EllipseFigure() {this(0, 0, 0, 0);', 'comment': '/*** Constructs a new {@code EllipseFigure}, initialized to* location (0,&nbsp;0) and size (0,&nbsp;0).*/', 'coherence': 1}, {'code': 'public EllipseFigure(double x, double y, double width, double height) {ellipse = new Ellipse2D.Double(x, y, width, height);', 'comment': '/*** Constructs and initializes an {@code EllipseFigure} from the* specified coordinates.** @param x the x coordinate of the bounding rectangle* @param y the y coordinate of the bounding rectangle* @param width the width of the rectangle* @param height the height of the rectangle*/', 'coherence': 1}, {'code': 'public void mouseReleased(MouseEvent evt) {if (popupTimer != null) {popupTimer.stop();popupTimer = null;}if (isMousePressedPopupTrigger) {isMousePressedPopupTrigger = false;} else {if (evt.isPopupTrigger()) {handlePopupMenu(evt);} else {super.mouseReleased(evt);', 'comment': '/*** MouseListener method for mouseReleased events. If the popup trigger has* been activated, then the appropriate hook method is called.*/', 'coherence': 1}, {'code': 'protected void handlePopupMenu(MouseEvent evt) {Point p = new Point(evt.getX(), evt.getY());Figure figure = getView().findFigure(p);if (figure != null || drawingActions.size() > 0) {showPopupMenu(figure, p, evt.getComponent());} else {popupMenu = null;', 'comment': '/*** Hook method which can be overriden by subclasses to provide* specialised behaviour in the event of a popup trigger.*/', 'coherence': 1}, {'code': 'public DelegationSelectionTool() {this(new LinkedList<Action>(), new LinkedList<Action>());', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public DelegationSelectionTool(Collection<Action> drawingActions, Collection<Action> selectionActions) {this.drawingActions = drawingActions;this.selectionActions = selectionActions;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void mousePressed(final MouseEvent evt) {if (popupTimer != null) {popupTimer.stop();popupTimer = null;}// XXX - When we want to support multiple views, we have to//     implement this://setView((DrawingView)e.getSource());isMousePressedPopupTrigger = evt.isPopupTrigger();if (isMousePressedPopupTrigger) {getView().requestFocus();handlePopupMenu(evt);} else {super.mousePressed(evt);popupTimer = new javax.swing.Timer(1000, new ActionListener() {public void actionPerformed(ActionEvent aevt) {handlePopupMenu(evt);popupTimer = null;}});popupTimer.setRepeats(false);popupTimer.start();', 'comment': '/*** MouseListener method for mousePressed events. If the popup trigger has* been activated, then the appropriate hook method is called.*/', 'coherence': 1}, {'code': 'protected void handleDoubleClick(MouseEvent evt) {if (DEBUG) {System.out.println("DelegationSelectionTool.handleDoubleClick " + evt);}DrawingView v = getView();Point pos = new Point(evt.getX(), evt.getY());Handle handle = v.findHandle(pos);if (handle != null) {if (DEBUG) {System.out.println("DelegationSelectionTool.handleDoubleClick by handle");}handle.trackDoubleClick(pos, evt.getModifiersEx());} else {Point2D.Double p = viewToDrawing(pos);// Note: The search sequence used here, must be// consistent with the search sequence used by the// HandleTracker, the SelectAreaTracker and SelectionTool.// If possible, continue to work with the current selectionFigure figure = null;if (isSelectBehindEnabled()) {for (Figure f : v.getSelectedFigures()) {if (f.contains(p)) {figure = f;break;}}}// If the point is not contained in the current selection,// search for a figure in the drawing.if (figure == null) {figure = v.findFigure(pos);}Figure outerFigure = figure;if (figure != null && figure.isSelectable()) {if (DEBUG) {System.out.println("DelegationSelectionTool.handleDoubleClick by figure");}Tool figureTool = figure.getTool(p);if (figureTool == null) {figure = getDrawing().findFigureInside(p);if (figure != null) {figureTool = figure.getTool(p);}}if (figureTool != null) {setTracker(figureTool);figureTool.mousePressed(evt);} else {if (outerFigure.handleMouseClick(p, evt, getView())) {v.clearSelection();v.addToSelection(outerFigure);} else {v.clearSelection();v.addToSelection(outerFigure);v.setHandleDetailLevel(v.getHandleDetailLevel() + 1);}}}}evt.consume();', 'comment': '/*** Hook method which can be overriden by subclasses to provide* specialised behaviour in the event of a double click.*/', 'coherence': 1}, {'code': 'public DefaultHandleTracker(Handle handle) {masterHandle = handle;multicaster = new HandleMulticaster(handle);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ImageTool(ImageHolderFigure prototype) {super(prototype);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ImageTool(ImageHolderFigure prototype, Map<AttributeKey, Object> attributes) {super(prototype, attributes);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public CreationTool(Figure prototype, Map<AttributeKey, Object> attributes) {this(prototype, attributes, null);', 'comment': '/** Creates a new instance with the specified prototype but without an* attribute set. The CreationTool clones this prototype each time a new* Figure needs to be created. When a new Figure is created, the* CreationTool applies the default attributes from the DrawingEditor to it,* and then it applies the attributes to it, that have been supplied in* this constructor.** @param prototype The prototype used to create a new Figure.* @param attributes The CreationTool applies these attributes to the* prototype after having applied the default attributes from the DrawingEditor.*/', 'coherence': 1}, {'code': 'public CreationTool(Figure prototype, Map<AttributeKey, Object> attributes, String name) {this.prototype = prototype;this.prototypeAttributes = attributes;if (name == null) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");name = labels.getString("edit.createFigure.text");}this.presentationName = name;', 'comment': '/*** Creates a new instance with the specified prototype and attribute set.** @param prototype The prototype used to create a new Figure.* @param attributes The CreationTool applies these attributes to the* prototype after having applied the default attributes from the DrawingEditor.* @param name The name parameter is currently not used.* @deprecated This constructor might go away, because the name parameter* is not used.*/', 'coherence': 1}, {'code': 'public CreationTool(Figure prototype) {this(prototype, null, null);', 'comment': '/** Creates a new instance with the specified prototype but without an* attribute set. The CreationTool clones this prototype each time a new*  Figure needs to be created. When a new Figure is created, the* CreationTool applies the default attributes from the DrawingEditor to it.** @param prototype The prototype used to create a new Figure.*/', 'coherence': 1}, {'code': 'public CreationTool(String prototypeClassName) {this(prototypeClassName, null, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void setToolDoneAfterCreation(boolean newValue) {boolean oldValue = isToolDoneAfterCreation;isToolDoneAfterCreation = newValue;', 'comment': '/*** If this is set to false, the CreationTool does not fire toolDone* after a new Figure has been created. This allows to create multiple* figures consecutively.*/', 'coherence': 1}, {'code': 'protected void creationFinished(Figure createdFigure) {if (createdFigure.isSelectable()) {getView().addToSelection(createdFigure);}if (isToolDoneAfterCreation()) {fireToolDone();', 'comment': '/*** This method allows subclasses to do perform additonal user interactions* after the new figure has been created.* The implementation of this class just invokes fireToolDone.*/', 'coherence': 1}, {'code': 'public ImageTransferable(Image image) {this.image = image;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void setUpdateDrawingEditorDefaults(boolean newValue) {isUpdateDrawingEditorDefaults = newValue;', 'comment': '/*** Set this to true if you want the attribute editor to update the* default values of the drawing editor.** @param newValue*/', 'coherence': 1}, {'code': 'public void setView(DrawingView newValue) {this.view = newValue;updateActiveView();', 'comment': '/*** Attaches the FigureAttributeEditorHandler to the specified DrawingView.* <p>* If a non-null value is provided, the FigureAttributeEditorHandler listens only* to selection changes of the specified view. If a null value is provided,* the FigureAttributeEditorHandler listens to all views of the drawing editor.** @param newValue a drawing view.*/', 'coherence': 1}, {'code': 'public void setDrawingEditor(DrawingEditor newValue) {DrawingEditor oldValue = drawingEditor;if (drawingEditor != null) {drawingEditor.removePropertyChangeListener(eventHandler);}this.drawingEditor = newValue;if (drawingEditor != null) {drawingEditor.addPropertyChangeListener(new WeakPropertyChangeListener(eventHandler));}updateActiveView();', 'comment': '/*** Attaches the FigureAttributeEditorHandler to the specified DrawingEditor.* <p>* The FigureAttributeEditorHandler listens to view changes and selection* changes of the drawing editor and calls setEnabled(boolean) and* updateField(Set&lt;Figure&gt;) on the field accordingly.** @param newValue a drawing editor.*/', 'coherence': 1}, {'code': 'public void setAttributeEditor(AttributeEditor<T> newValue) {if (attributeEditor != null) {attributeEditor.removePropertyChangeListener(eventHandler);}this.attributeEditor = newValue;if (attributeEditor != null) {attributeEditor.addPropertyChangeListener(eventHandler);', 'comment': '/*** Attaches the FigureAttributeEditorHandler to the specified AttributeEditor.*/', 'coherence': 1}, {'code': 'public AttributeEditor<T> getAttributeEditor() {return attributeEditor;', 'comment': '/*** Returns the AttributeEditor to which this FigureAttributeEditorHandler is* attached.*/', 'coherence': 1}, {'code': 'public DrawingView getView() {return view;', 'comment': '/*** Returns the DrawingView to which this FigureAttributeEditorHandler is* attached. Returns null, if the FigureAttributeEditorHandler is attached* to all views of the DrawingEditor.*/', 'coherence': 1}, {'code': 'public boolean isUpdateDrawingEditorDefaults() {return isUpdateDrawingEditorDefaults;', 'comment': '/*** Returns true if the attribute editor updates the* default values of the drawing editor.*/', 'coherence': 1}, {'code': 'public DrawingEditor getDrawingEditor() {return drawingEditor;', 'comment': '/*** Returns the DrawingEditor to which this FigureAttributeEditorHandler is* attached.*/', 'coherence': 1}, {'code': 'public static Object create(final Method listenerMethod,final Object target,final Method targetMethod) {/*** The implementation of the create method uses the Dynamic Proxy API* introduced in JDK 1.3.** Create an instance of the DefaultInvoker and override the invoke* method to handle the invoking the targetMethod on the target.*/InvocationHandler handler = new DefaultInvoker() {@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {// Send all methods except for the targetMethod to// the superclass for handling.if (listenerMethod.equals(method)) {if (targetMethod.getParameterTypes().length == 0) {// Special treatment for parameterless target methods:return targetMethod.invoke(target, new Object[0]);} else {// Regular treatment for target methods having the same// argument list as the listener method.return targetMethod.invoke(target, args);}} else {return super.invoke(proxy, method, args);}}};Class cls = listenerMethod.getDeclaringClass();ClassLoader cl = cls.getClassLoader();return Proxy.newProxyInstance(cl, new Class[]{cls}, handler);', 'comment': '/*** Return an instance of a class that implements the interface that contains* the declaration for <code>listenerMethod</code>.  In this new class,* <code>listenerMethod</code> will apply <code>target.targetMethod</code>* to the incoming Event.*/', 'coherence': 1}, {'code': 'private static Method getListenerMethod(Class listenerInterface,String listenerMethodName) {// given the arguments to create(), find out which listener is desired:Method[] m = listenerInterface.getMethods();Method result = null;for (int i = 0; i < m.length; i++) {if (listenerMethodName.equals(m[i].getName())) {if (result != null) {throw new RuntimeException("ambiguous method: "+m[i]+" vs. "+result);}result = m[i];}}if (result == null) {throw new RuntimeException("no such method "+listenerMethodName+" in "+listenerInterface);}return result;', 'comment': '/* Helper methods for "EZ" version of create(): */--------------/*** Implementation of the InvocationHandler which handles the basic* object methods.*/--------------', 'coherence': 1}, {'code': 'public static Object create(Class listenerInterface,String listenerMethodName,Object target,String targetMethodName) {Method listenerMethod = getListenerMethod(listenerInterface, listenerMethodName);// Search a target method with the same parameter types as the listener method.Method targetMethod =getTargetMethod(target, targetMethodName, listenerMethod.getParameterTypes());// Nothing found? Search a target method with no parametersif (targetMethod == null) {targetMethod = getTargetMethod(target, targetMethodName, new Class[0]);}// Still nothing found? We give up.if (targetMethod == null) {throw new RuntimeException("no such method "+targetMethodName+" in "+target.getClass());}return create(listenerMethod, target, targetMethod);', 'comment': "/*** A convenient version of <code>create(listenerMethod, targetObject, targetMethod)</code>.* This version looks up the listener and target Methods, so you don't have to.*/", 'coherence': 1}, {'code': 'public JNLPClipboard(Object target) {this.target = target;', 'comment': '/*** Creates a new proxy for the specified target object.* The target object must have a getContent and a setContent method* as specified by the {@code javax.jnlp.ClipboardService} interface.** @param target A Clipboard object.*/', 'coherence': 1}, {'code': 'public NetPanel() {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");initComponents();undoManager = new UndoRedoManager();editor = new DefaultDrawingEditor();editor.add(view);addCreationButtonsTo(creationToolbar, editor);ButtonFactory.addAttributesButtonsTo(attributesToolbar, editor);JPopupButton pb = new JPopupButton();pb.setItemFont(UIManager.getFont("MenuItem.font"));labels.configureToolBarButton(pb, "actions");pb.add(new DuplicateAction());pb.addSeparator();pb.add(new GroupAction(editor));pb.add(new UngroupAction(editor));pb.addSeparator();pb.add(new BringToFrontAction(editor));pb.add(new SendToBackAction(editor));pb.addSeparator();pb.add(new CutAction());pb.add(new CopyAction());pb.add(new PasteAction());pb.add(new SelectAllAction());pb.add(new SelectSameAction(editor));pb.addSeparator();pb.add(undoManager.getUndoAction());pb.add(undoManager.getRedoAction());// FIXME - We need a toggle grid action// pb.addSeparator();// pb.add(new ToggleGridAction(editor));JMenu m = new JMenu(labels.getString("view.zoomFactor.text"));JRadioButtonMenuItem rbmi;ButtonGroup group = new ButtonGroup();m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null)));rbmi.setSelected(true);group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null)));group.add(rbmi);m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null)));group.add(rbmi);pb.add(m);pb.setFocusable(false);creationToolbar.addSeparator();creationToolbar.add(pb);DefaultDrawing drawing = new DefaultDrawing();view.setDrawing(drawing);drawing.addUndoableEditListener(undoManager);', 'comment': '/** Creates new instance. */', 'coherence': 1}, {'code': 'private void initComponents() {java.awt.GridBagConstraints gridBagConstraints;toolButtonGroup = new javax.swing.ButtonGroup();scrollPane = new javax.swing.JScrollPane();view = new org.jhotdraw.draw.DefaultDrawingView();jPanel1 = new javax.swing.JPanel();creationToolbar = new javax.swing.JToolBar();attributesToolbar = new javax.swing.JToolBar();setLayout(new java.awt.BorderLayout());scrollPane.setViewportView(view);add(scrollPane, java.awt.BorderLayout.CENTER);jPanel1.setLayout(new java.awt.GridBagLayout());creationToolbar.setFloatable(false);gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.gridx = 0;gridBagConstraints.gridy = 0;gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;jPanel1.add(creationToolbar, gridBagConstraints);attributesToolbar.setFloatable(false);gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.gridx = 0;gridBagConstraints.gridy = 1;gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;jPanel1.add(attributesToolbar, gridBagConstraints);add(jPanel1, java.awt.BorderLayout.SOUTH);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public java.util.List<JToolBar> createToolBars(Application a, View pr) {ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.net.Labels");NetView p = (NetView) pr;DrawingEditor editor;if (p == null) {editor = getSharedEditor();} else {editor = p.getDrawingEditor();}LinkedList<JToolBar> list = new LinkedList<JToolBar>();JToolBar tb;tb = new JToolBar();addCreationButtonsTo(tb, editor);tb.setName(drawLabels.getString("window.drawToolBar.title"));list.add(tb);tb = new JToolBar();ButtonFactory.addAttributesButtonsTo(tb, editor);tb.setName(drawLabels.getString("window.attributesToolBar.title"));list.add(tb);tb = new JToolBar();ButtonFactory.addAlignmentButtonsTo(tb, editor);tb.setName(drawLabels.getString("window.alignmentToolBar.title"));list.add(tb);return list;', 'comment': '/*** Creates toolbars for the application.* This class always returns an empty list. Subclasses may return other* values.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")private void initDrawing(Drawing d) {d.setInputFormats((java.util.List<InputFormat>) Collections.EMPTY_LIST);d.setOutputFormats((java.util.List<OutputFormat>) Collections.EMPTY_LIST);DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new NetFactory());d.addInputFormat(ioFormat);d.addInputFormat(new ImageInputFormat(new ImageFigure()));d.addInputFormat(new TextInputFormat(new TextFigure()));d.addOutputFormat(ioFormat);d.addOutputFormat(new ImageOutputFormat());', 'comment': '/*** Configure Drawing object to support copy and paste.*/', 'coherence': 1}, {'code': 'public String getParameter(String name) {try {return super.getParameter(name);} catch (NullPointerException e) {return null;', 'comment': '/*** We override getParameter() to make it work even if we have no Applet* context.*/', 'coherence': 1}, {'code': 'public void init() {// Set look and feel// -----------------try {UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());} catch (Throwable e) {// Do nothing.// If we can\'t set the desired look and feel, UIManager does// automaticaly the right thing for us.}// Set our own popup factory, because the one that comes with Mac OS X// creates translucent popups which is not useful for color selection// using pop menus.try {PopupFactory.setSharedInstance(new PopupFactory());} catch (Throwable e) {// If we can\'t set the popup factory, we have to use what is there.}// Display copyright info while we are loading the data// ----------------------------------------------------Container c = getContentPane();c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));String[] labels = getAppletInfo().split("\\n");//Strings.split(getAppletInfo(), \'\\n\');for (int i = 0; i < labels.length; i++) {c.add(new JLabel((labels[i].length() == 0) ? " " : labels[i]));}// We load the data using a worker thread// --------------------------------------new Worker<Drawing>() {protected Drawing construct() throws IOException {Drawing result;System.out.println("getParameter.datafile:" + getParameter("datafile"));if (getParameter("data") != null) {NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), new StringReader(getParameter("data")));result = (Drawing) domi.readObject(0);} else if (getParameter("datafile") != null) {URL url = new URL(getDocumentBase(), getParameter("datafile"));InputStream in = url.openConnection().getInputStream();try {NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), in);result = (Drawing) domi.readObject(0);} finally {in.close();}} else {result = null;}return result;}@Overrideprotected void done(Drawing result) {Container c = getContentPane();c.setLayout(new BorderLayout());c.removeAll();c.add(drawingPanel = new NetPanel());if (result != null) {Drawing drawing = (Drawing) result;setDrawing(drawing);}}@Overrideprotected void failed(Throwable value) {Container c = getContentPane();c.setLayout(new BorderLayout());c.removeAll();c.add(drawingPanel = new NetPanel());value.printStackTrace();getDrawing().add(new TextFigure(value.toString()));value.printStackTrace();}@Overrideprotected void finished() {Container c = getContentPane();initDrawing(getDrawing());c.validate();}}.start();', 'comment': '/*** Initializes the applet NetApplet*/', 'coherence': 1}, {'code': 'private void initComponents() {toolButtonGroup = new javax.swing.ButtonGroup();', 'comment': '/** This method is called from within the init() method to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'private JFileChooser getOpenChooser() {if (openChooser == null) {openChooser = new JFileChooser();Drawing d = svgPanel.getDrawing();fileFilterInputFormatMap = new HashMap<javax.swing.filechooser.FileFilter, InputFormat>();javax.swing.filechooser.FileFilter firstFF = null;for (InputFormat format : d.getInputFormats()) {javax.swing.filechooser.FileFilter ff = format.getFileFilter();if (firstFF == null) {firstFF = ff;}fileFilterInputFormatMap.put(ff, format);openChooser.addChoosableFileFilter(ff);}openChooser.setFileFilter(firstFF);openChooser.addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {if (evt.getPropertyName().equals("fileFilterChanged")) {InputFormat inputFormat = fileFilterInputFormatMap.get(evt.getNewValue());openChooser.setAccessory((inputFormat == null) ? null : inputFormat.getInputFormatAccessory());}}});}return openChooser;', 'comment': '/** Lazily creates a JFileChooser and returns it. */--------------/** Opens a drawing from a file. */--------------', 'coherence': 1}, {'code': 'private JFileChooser getSaveChooser() {if (saveChooser == null) {saveChooser = new JFileChooser();Drawing d = svgPanel.getDrawing();fileFilterOutputFormatMap = new HashMap<javax.swing.filechooser.FileFilter, OutputFormat>();javax.swing.filechooser.FileFilter firstFF = null;for (OutputFormat format : d.getOutputFormats()) {javax.swing.filechooser.FileFilter ff = format.getFileFilter();if (firstFF == null) {firstFF = ff;}fileFilterOutputFormatMap.put(ff, format);saveChooser.addChoosableFileFilter(ff);}saveChooser.setFileFilter(firstFF);saveChooser.addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {if (evt.getPropertyName().equals("fileFilterChanged")) {OutputFormat outputFormat = fileFilterOutputFormatMap.get(evt.getNewValue());saveChooser.setAccessory((outputFormat == null) ? null : outputFormat.getOutputFormatAccessory());}}});}return saveChooser;', 'comment': '/** Lazily creates a JFileChooser and returns it. */--------------//GEN-LAST:event_open--------------', 'coherence': 1}, {'code': 'public static void main(String args[]) {java.awt.EventQueue.invokeLater(new Runnable() {public void run() {new SVGDrawingPanelSample().setVisible(true);', 'comment': '/*** @param args the command line arguments*/--------------/** Saves a drawing to a file. */--------------', 'coherence': 1}, {'code': 'public SVGDrawingPanelSample() {initComponents();setSize(new Dimension(600, 400));', 'comment': '/** Creates new form SVGDrawingPanelSample */', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponentsprivate void initComponents() {svgPanel = new org.jhotdraw.samples.svg.SVGDrawingPanel();menuBar = new javax.swing.JMenuBar();fileMenu = new javax.swing.JMenu();openMenuItem = new javax.swing.JMenuItem();saveAsMenuItem = new javax.swing.JMenuItem();FormListener formListener = new FormListener();setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);getContentPane().add(svgPanel, java.awt.BorderLayout.CENTER);fileMenu.setText("File");openMenuItem.setText("Open...");openMenuItem.addActionListener(formListener);fileMenu.add(openMenuItem);saveAsMenuItem.setText("Save As...");saveAsMenuItem.addActionListener(formListener);fileMenu.add(saveAsMenuItem);menuBar.add(fileMenu);setJMenuBar(menuBar);pack();', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public static void main(String[] args) {Application app;String os = System.getProperty("os.name").toLowerCase();if (os.startsWith("mac")) {app = new OSXApplication();} else if (os.startsWith("win")) {//  app = new DefaultMDIApplication();app = new SDIApplication();} else {app = new SDIApplication();}DefaultApplicationModel model = new NetApplicationModel();model.setName("JHotDraw Net");model.setVersion(Main.class.getPackage().getImplementationVersion());model.setCopyright("Copyright 2006-2009 (c) by the authors of JHotDraw and all its contributors.\\n" +"This software is licensed under LGPL and Creative Commons 3.0 Attribution.");model.setViewClassName("org.jhotdraw.samples.net.NetView");app.setModel(model);app.launch(args);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public static void main(String[] args) {try {// Create a DOMStorable objectMyObject obj = new MyObject("Hello World");System.out.println("The name of the original object is:" + obj.getName());// Write the object into a DOM, and then serialize the DOM into a StringNanoXMLDOMOutput out = new NanoXMLDOMOutput(new QuickAndDirtyDOMFactory());out.writeObject(obj);StringWriter writer = new StringWriter();out.save(writer);String serializedString = writer.toString();System.out.println("\\nThe serialized representation of the object is:\\n" + serializedString);// Deserialize a DOM from a String, and then read the object from the DOMStringReader reader = new StringReader(serializedString);NanoXMLDOMInput in = new NanoXMLDOMInput(new QuickAndDirtyDOMFactory(), reader);MyObject obj2 = (MyObject) in.readObject();System.out.println("\\nThe name of the restored object is:" + obj2.getName());} catch (IOException ex) {Logger.getLogger(QuickAndDirtyDOMStorableSample.class.getName()).log(Level.SEVERE, null, ex);', 'comment': '/** DOM Storable objects must have a non-argument constructor. */', 'coherence': 1}, {'code': 'public SelectionToolSample() {LineFigure lf = new LineFigure();lf.setBounds(new Point2D.Double(40,40), new Point2D.Double(200,40));// Add all figures to a drawingDrawing drawing = new DefaultDrawing();drawing.add(lf);// Show the drawingJFrame f = new JFrame("UltraMini");f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);f.setSize(600,300);DrawingView view = new DefaultDrawingView();view.setDrawing(drawing);f.getContentPane().add(view.getComponent());// set up the drawing editorDrawingEditor editor = new DefaultDrawingEditor();editor.add(view);// Activate the following line to see the SelectionTool in full// action.editor.setTool(new SelectionTool());// Activate the following line to only see the SelectAreaTracker in// action.//editor.setTool(new SelectAreaTracker());// Activate the following line to only see the DragTracker in// action.//editor.setTool(new DragTracker(lf));// Activate the following lines to only see the HandleTracker in// action.//view.selectAll();//editor.setTool(new HandleTracker(view.findHandle(view.drawingToView(lf.getStartPoint()))));f.show();', 'comment': '/*** Creates a new instance of SelectionToolSample*/', 'coherence': 1}, {'code': 'public URIChooser getChooser() {return (URIChooser) pane;', 'comment': '/*** Returns the URIChooser pane on the sheet.*/', 'coherence': 1}, {'code': 'public int getOption() {return option;', 'comment': '/*** Returns the option that the JFileChooser or JOptionPane returned.*/', 'coherence': 1}, {'code': 'public SheetEvent(JSheet source, JOptionPane optionPane, int option, Object value, Object inputValue) {super(source);this.pane = optionPane;this.option = option;this.value = value;this.inputValue = inputValue;', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public SheetEvent(JSheet source, URIChooser chooser, int option, Object value) {super(source);this.pane = chooser;this.option = option;this.value = value;', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public Object getPane() {return pane;', 'comment': '/*** Returns the pane on the sheet. This is either a JFileChooser, a URIChooser or a* JOptionPane.*/', 'coherence': 1}, {'code': 'public JFileChooser getFileChooser() {return (JFileChooser) pane;', 'comment': '/*** Returns the JFileChooser pane on the sheet.*/', 'coherence': 1}, {'code': 'public SheetEvent(JSheet source) {super(source);', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public SheetEvent(JSheet source, JFileChooser fileChooser, int option, Object value) {super(source);this.pane = fileChooser;this.option = option;this.value = value;', 'comment': '/*** Creates a new instance.*/', 'coherence': 1}, {'code': 'public Object getValue() {return value;', 'comment': '/*** Returns the value that the JFileChooser or JOptionPane returned.*/', 'coherence': 1}, {'code': 'public JOptionPane getOptionPane() {return (JOptionPane) pane;', 'comment': '/*** Returns the JOptionPane pane on the sheet.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public void setFonts(Font[] fonts) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.gui.Labels");// collect families and sort them alphabeticallyArrayList<FontFamilyNode> families = new ArrayList<FontFamilyNode>();HashMap<String, FontFamilyNode> familyMap = new HashMap<String, FontFamilyNode>();for (Font f : fonts) {String familyName = f.getFamily();FontFamilyNode family;if (familyMap.containsKey(familyName)) {family = familyMap.get(familyName);} else {family = new FontFamilyNode(familyName);familyMap.put(familyName, family);}family.add(new FontFaceNode(f));}families.addAll(familyMap.values());Collections.sort(families);// group families into collectionsroot.removeAllChildren();root.add(new FontCollectionNode(labels.getString("FontCollection.allFonts"), (ArrayList<FontFamilyNode>) families.clone()));// Web-save fontsroot.add(new FontCollectionNode(labels.getString("FontCollection.web"), collectFamiliesNamed(families,"Arial","Arial Black","Comic Sans MS","Georgia","Impact","Times New Roman","Trebuchet MS","Verdana","Webdings")));/*// PDF Fontsroot.add(new FontCollectionNode(labels.getString("FontCollection.pdf"), collectFamiliesNamed(families,"Andale Mono","Courier","Helvetica","Symbol","Times","Zapf Dingbats")));*/// Java System fontsroot.add(new FontCollectionNode(labels.getString("FontCollection.system"), collectFamiliesNamed(families,"Dialog","DialogInput","Monospaced","SansSerif","Serif")));// Serif fontsroot.add(new FontCollectionNode(labels.getString("FontCollection.serif"), collectFamiliesNamed(families,// Fonts on Mac OS X 10.5:"Adobe Caslon Pro","Adobe Garamond Pro","American Typewriter","Arno Pro","Baskerville","Baskerville Old Face","Bell MT","Big Caslon","Bodoni SvtyTwo ITC TT","Bodoni SvtyTwo OS ITC TT","Bodoni SvtyTwo SC ITC TT","Book Antiqua","Bookman Old Style","Calisto MT","Chaparral Pro","Century","Century Schoolbook","Cochin","Footlight MT Light","Garamond","Garamond Premier Pro","Georgia","Goudy Old Style","Hoefler Text","Lucida Bright","Lucida Fax","Minion Pro","Palatino","Times","Times New Roman",// Fonts on Windows XP:"Palatino Linotype","Bitstream Vera Serif Bold","Bodoni MT","Bodoni MT Black","Bodoni MT Condensed","Californian FB","Cambria","Cambria Math","Centaur","Constantia","High Tower Text","Perpetua","Poor Richard","Rockwell Condensed","Slimbach-Black","Slimbach-BlackItalic","Slimbach-Bold","Slimbach-BoldItalic","Slimbach-Book","Slimbach-BookItalic","Slimbach-Medium","Slimbach-MediumItalic","Sylfaen",// Fonts on Windows Vista"Andalus","Angsana New","AngsanaUPC","Arabic Typesetting","Cambria","Cambria Math","Constantia","DaunPenh","David","DilleniaUPC","EucrosiaUPC","Frank Ruehl","IrisUPC","Iskoola Pota","JasmineUPC","KodchiangUPC","Narkisim")));// Sans Serifroot.add(new FontCollectionNode(labels.getString("FontCollection.sansSerif"), collectFamiliesNamed(families,// Fonts on Mac OS X 10.5:"Abadi MT Condensed Extra Bold","Abadi MT Condensed Light","Al Bayan","AppleGothic","Arial","Arial Black","Arial Narrow","Arial Rounded MT Bold","Arial Unicode MS","Bell Gothic Std","Blair MdITC TT","Century Gothic","Frutiger","Futura","Geneva","Gill Sans","Gulim","Helvetica","Helvetica Neue","Lucida Grande","Lucida Sans","Microsoft Sans Serif","Myriad Pro","News Gothic","Tahoma","Trebuchet MS","Verdana",// Fonts on Windows XP:"Franklin Gothic Medium","Lucida Sans Unicode","Agency FB","Berlin Sans FB","Berlin Sans FB Demi Bold","Bitstream Vera Sans Bold","Calibri","Candara","Corbel","Estrangelo Edessa","Eras Bold ITC","Eras Demi ITC","Eras Light ITC","Eras Medium ITC","Franklin Gothic Book","Franklin Gothic Demi","Franklin Gothic Demi Cond","Franklin Gothic Heavy","Franklin Gothic Medium Cond","Gill Sans MT","Gill Sans MT Condensed","Gill Sans MT Ext Condensed Bold","Maiandra GD","MS Reference Sans...","Tw Cen MT","Tw Cen MT Condensed","Tw Cen MT Condensed Extra Bold",// Fonts on Windows Vista:"Aharoni","Browallia New","BrowalliaUPC","Calibri","Candara","Corbel","Cordia New","CordiaUPC","DokChampa","Dotum","Estrangelo Edessa","Euphemia","Freesia UPC","Gautami","Gisha","Kalinga","Kartika","Levenim MT","LilyUPC","Malgun Gothic","Meiryo","Miriam","Segoe UI")));// Scriptsroot.add(new FontCollectionNode(labels.getString("FontCollection.script"), collectFamiliesNamed(families,// Fonts on Mac OS X 10.5:"Apple Chancery","Bickham Script Pro","Blackmoor LET","Bradley Hand ITC TT","Brush Script MT","Brush Script Std","Chalkboard","Charlemagne Std","Comic Sans MS","Curlz MT","Edwardian Script ITC","Footlight MT Light","Giddyup Std","Handwriting - Dakota","Harrington","Herculanum","Kokonor","Lithos Pro","Lucida Blackletter","Lucida Calligraphy","Lucida Handwriting","Marker Felt","Matura MT Script Capitals","Mistral","Monotype Corsiva","Party LET","Papyrus","Santa Fe LET","Savoye LET","SchoolHouse Cursive B","SchoolHouse Printed A","Skia","Snell Roundhand","Tekton Pro","Trajan Pro","Zapfino",// Fonts on Windows XP"Blackadder ITC","Bradley Hand ITC","Chiller","Freestyle Script","French Script MT","Gigi","Harlow Solid Italic","Informal Roman","Juice ITC","Kristen ITC","Kunstler Script","Magneto Bold","Maiandra GD","Old English Text","Palace Script MT","Parchment","Pristina","Rage Italic","Ravie","Script MT Bold","Tempus Sans ITC","Viner Hand ITC","Vivaldi Italic","Vladimir Script",// Fonts on Windows Vista"Segoe Print","Segoe Script")));// Monospacedroot.add(new FontCollectionNode(labels.getString("FontCollection.monospaced"), collectFamiliesNamed(families,// Fonts on Mac OS X 10.5:"Andale Mono","Courier","Courier New","Letter Gothic Std","Lucida Sans Typewriter","Monaco","OCR A Std","Orator Std","Prestige Elite Std",// Fonts on Windows XP:"Lucida Console","Bitstream Vera S...","Consolas","OCR A Extended","OCR B",// Fonts on Windows Vista"Consolas","DotumChe","Miriam Fixed","Rod")));// Decorativeroot.add(new FontCollectionNode(labels.getString("FontCollection.decorative"), collectFamiliesNamed(families,// Fonts on Mac OS X 10.5:"Academy Engraved LET","Arial Black","Bank Gothic","Bauhaus 93","Bernard MT Condensed","Birch Std","Blackoak Std","BlairMdITC TT","Bordeaux Roman Bold LET","Braggadocio","Britannic Bold","Capitals","Colonna MT","Cooper Black","Cooper Std","Copperplate","Copperplate Gothic Bold","Copperplate Gothic Light","Cracked","Desdemona","Didot","Eccentric Std","Engravers MT","Eurostile","Gill Sans Ultra Bold","Gloucester MT Extra Condensed","Haettenschweiler","Hobo Std","Impact","Imprint MT Shadow","Jazz LET","Kino MT","Matura MT Script Capitals","Mesquite Std","Modern No. 20","Mona Lisa Solid ITC TT","MS Gothic","Nueva Std","Onyx","Optima","Perpetua Titling MT","Playbill","Poplar Std","PortagoITC TT","Princetown LET","Rockwell","Rockwell Extra Bold","Rosewood Std","Santa Fe LET","Stencil","Stencil Std","Stone Sans ITC TT","Stone Sans OS ITC TT","Stone Sans Sem ITC TT","Stone Sans Sem OS ITCTT","Stone Sans Sem OS ITC TT","Synchro LET","Wide Latin",// Fonts on Windows XP"Algerian","Bodoni MT Black","Bodoni MT Poster Compressed","Broadway","Castellar","Elephant","Felix Titling","Franklin Gothic Heavy","Gill Sans MT Ext Condensed Bold","Gill Sans Ultra Bold Condensed","Goudy Stout","Jokerman","Juice ITC","Magneto","Magneto Bold","Niagara Engraved","Niagara Solid","Poor Richard","Ravie","Rockwell Condensed","Showcard Gothic","Slimbach-Black","Slimbach-BlackItalic","Snap ITC"// Fonts on Windows Vista:)));root.add(new FontCollectionNode(labels.getString("FontCollection.symbols"), collectFamiliesNamed(families,// Fonts on Mac OS X 10.5:"Apple Symbols","Blackoack Std","Bodoni Ornaments ITC TT","EuropeanPi","Monotype Sorts","MT Extra","Symbol","Type Embellishments One LET","Webdings","Wingdings","Wingdings 2","Wingdings 3","Zapf Dingbats",// Fonts on Windows XP"Bookshelf Symbol"// Fonts on Windows Vista)));// Collect font families, which are not in one of the other collections// (except the collection AllFonts).FontCollectionNode others = new FontCollectionNode(labels.getString("FontCollection.other"));HashSet<FontFamilyNode> otherFamilySet = new HashSet<FontFamilyNode>();otherFamilySet.addAll(families);for (int i = 1, n = root.getChildCount(); i < n; i++) {FontCollectionNode fcn = (FontCollectionNode) root.getChildAt(i);for (FontFamilyNode ffn : fcn.families()) {otherFamilySet.remove(ffn);}}ArrayList<FontFamilyNode> otherFamilies = new ArrayList<FontFamilyNode>();for (FontFamilyNode ffn : otherFamilySet) {otherFamilies.add(ffn.clone());}Collections.sort(otherFamilies);others.addAll(otherFamilies);root.add(others);fireTreeStructureChanged(this, new TreePath(root));', 'comment': '/*** Sets the fonts of the DefaultFontChooserModel.* <p>* Fires treeStructureChanged event on the root node.** @param fonts*/', 'coherence': 1}, {'code': 'protected void fireTreeNodesChanged(Object source, Object[] path,int[] childIndices,Object[] children) {// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();TreeModelEvent e = null;// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i]==TreeModelListener.class) {// Lazily create the event:if (e == null)e = new TreeModelEvent(source, path,childIndices, children);((TreeModelListener)listeners[i+1]).treeNodesChanged(e);', 'comment': '/*** Notifies all listeners that have registered interest for* notification on this event type.  The event instance* is lazily created using the parameters passed into* the fire method.** @param source the node being changed* @param path the path to the root node* @param childIndices the indices of the changed elements* @param children the changed elements* @see EventListenerList*/', 'coherence': 1}, {'code': 'protected void fireTreeNodesRemoved(Object source, Object[] path,int[] childIndices,Object[] children) {// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();TreeModelEvent e = null;// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i]==TreeModelListener.class) {// Lazily create the event:if (e == null)e = new TreeModelEvent(source, path,childIndices, children);((TreeModelListener)listeners[i+1]).treeNodesRemoved(e);', 'comment': '/*** Notifies all listeners that have registered interest for* notification on this event type.  The event instance* is lazily created using the parameters passed into* the fire method.** @param source the node where elements are being removed* @param path the path to the root node* @param childIndices the indices of the removed elements* @param children the removed elements* @see EventListenerList*/', 'coherence': 1}, {'code': 'protected void fireTreeNodesInserted(Object source, Object[] path,int[] childIndices,Object[] children) {// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();TreeModelEvent e = null;// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i]==TreeModelListener.class) {// Lazily create the event:if (e == null)e = new TreeModelEvent(source, path,childIndices, children);((TreeModelListener)listeners[i+1]).treeNodesInserted(e);', 'comment': '/*** Notifies all listeners that have registered interest for* notification on this event type.  The event instance* is lazily created using the parameters passed into* the fire method.** @param source the node where new elements are being inserted* @param path the path to the root node* @param childIndices the indices of the new elements* @param children the new elements* @see EventListenerList*/', 'coherence': 1}, {'code': 'protected void fireTreeStructureChanged(Object source, Object[] path,int[] childIndices,Object[] children) {// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();TreeModelEvent e = null;// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i]==TreeModelListener.class) {// Lazily create the event:if (e == null)e = new TreeModelEvent(source, path,childIndices, children);((TreeModelListener)listeners[i+1]).treeStructureChanged(e);', 'comment': '/*** Notifies all listeners that have registered interest for* notification on this event type.  The event instance* is lazily created using the parameters passed into* the fire method.** @param source the node where the tree model has changed* @param path the path to the root node* @param childIndices the indices of the affected elements* @param children the affected elements* @see EventListenerList*/', 'coherence': 1}, {'code': 'public TreeModelListener[] getTreeModelListeners() {return (TreeModelListener[])listenerList.getListeners(TreeModelListener.class);', 'comment': "/*** Returns an array of all the tree model listeners* registered on this model.** @return all of this model's <code>TreeModelListener</code>s*   or an empty*   array if no tree model listeners are currently registered** @see #addTreeModelListener* @see #removeTreeModelListener** @since 1.4*/", 'coherence': 1}, {'code': 'public void removeTreeModelListener(TreeModelListener l) {listenerList.remove(TreeModelListener.class, l);', 'comment': '/*** Removes a listener previously added with <B>addTreeModelListener()</B>.** @see   #addTreeModelListener* @param   l     the listener to remove*/--------------//  Events--------------', 'coherence': 1}, {'code': 'public void addTreeModelListener(TreeModelListener l) {listenerList.add(TreeModelListener.class, l);', 'comment': '/*** Adds a listener for the TreeModelEvent posted after the tree changes.** @see   #removeTreeModelListener* @param   l   the listener to add*/', 'coherence': 1}, {'code': 'protected void fireTreeStructureChanged(Object source, TreePath path) {// Guaranteed to return a non-null arrayObject[] listeners = listenerList.getListenerList();TreeModelEvent e = null;// Process the listeners last to first, notifying// those that are interested in this eventfor (int i = listeners.length-2; i>=0; i-=2) {if (listeners[i]==TreeModelListener.class) {// Lazily create the event:if (e == null)e = new TreeModelEvent(source, path);((TreeModelListener)listeners[i+1]).treeStructureChanged(e);', 'comment': '/** Notifies all listeners that have registered interest for* notification on this event type.  The event instance* is lazily created using the parameters passed into* the fire method.** @param source the node where the tree model has changed* @param path the path to the root node* @see EventListenerList*/', 'coherence': 1}, {'code': 'public PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {this(pathPrototype, bezierPrototype, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public TogglePropertiesPanelAction(Application app, View view) {super(app, view);setPropertyName("propertiesPanelVisible");ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.odg.Labels");putValue(AbstractAction.NAME, labels.getString("propertiesPanel"));', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'private void initComponents() {java.awt.GridBagConstraints gridBagConstraints;linkLabel = new javax.swing.JLabel();linkField = new org.jhotdraw.gui.JAttributeTextField();opacityLabel = new javax.swing.JLabel();opacityField = new org.jhotdraw.gui.JAttributeTextField();opacityPopupButton = new org.jhotdraw.gui.JPopupButton();setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));setLayout(new java.awt.GridBagLayout());linkLabel.setLabelFor(linkField);linkLabel.setText(labels.getString("link")); // NOI18Nadd(linkLabel, new java.awt.GridBagConstraints());gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;gridBagConstraints.weightx = 1.0;add(linkField, gridBagConstraints);opacityLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jhotdraw/draw/action/images/attributeOpacity.png"))); // NOI18NopacityLabel.setToolTipText(labels.getString("opacity")); // NOI18NgridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);add(opacityLabel, gridBagConstraints);opacityField.setColumns(3);add(opacityField, new java.awt.GridBagConstraints());opacityPopupButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jhotdraw/draw/action/images/popupIcon.png"))); // NOI18Nadd(opacityPopupButton, new java.awt.GridBagConstraints());', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")public ODGPropertiesPanel() {initComponents();opacitySlider = new JAttributeSlider(JSlider.VERTICAL, 0, 100, 100);opacityPopupButton.add(opacitySlider);opacityPopupButton.putClientProperty("JButton.buttonType","toolbar");add(opacityPopupButton);opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0d, 1d, 100d));opacityFieldHandler = new FigureAttributeEditorHandler<Double>(OPACITY, opacityField, editor);opacitySliderHandler = new FigureAttributeEditorHandler<Double>(OPACITY, opacitySlider, editor);linkFieldHandler = new FigureAttributeEditorHandler<String>(LINK, linkField, editor);// set fontsFont font = getFont().deriveFont(11f);for (Component c : getComponents()) {c.setFont(font);}opacitySlider.setFont(font);', 'comment': '/** Creates new instance. */', 'coherence': 1}, {'code': 'public ODGBezierFigure() {this(false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void write(URI f, URIChooser fc) throws IOException {new SVGOutputFormat().write(new File(f), view.getDrawing());', 'comment': '/*** Writes the view to the specified uri.*/', 'coherence': 1}, {'code': 'protected Drawing createDrawing() {Drawing drawing = new ODGDrawing();LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();inputFormats.add(new ODGInputFormat());inputFormats.add(new ImageInputFormat(new SVGImageFigure()));inputFormats.add(new TextInputFormat(new SVGTextFigure()));drawing.setInputFormats(inputFormats);LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();outputFormats.add(new SVGOutputFormat());outputFormats.add(new SVGZOutputFormat());outputFormats.add(new ImageOutputFormat());outputFormats.add(new ImageOutputFormat("JPG", "Joint Photographics Experts Group (JPEG)", "jpg", BufferedImage.TYPE_INT_RGB));outputFormats.add(new ImageOutputFormat("BMP", "Windows Bitmap (BMP)", "bmp", BufferedImage.TYPE_BYTE_INDEXED));outputFormats.add(new ImageMapOutputFormat());drawing.setOutputFormats(outputFormats);return drawing;', 'comment': '/*** Creates a new Drawing for this view.*/', 'coherence': 1}, {'code': 'public void clear() {final Drawing newDrawing = createDrawing();try {SwingUtilities.invokeAndWait(new Runnable() {public void run() {view.getDrawing().removeUndoableEditListener(undo);view.setDrawing(newDrawing);view.getDrawing().addUndoableEditListener(undo);undo.discardAllEdits();}});} catch (InvocationTargetException ex) {ex.printStackTrace();} catch (InterruptedException ex) {ex.printStackTrace();', 'comment': '/*** Clears the view.*/', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")@Overridepublic void read(URI f, URIChooser fc) throws IOException {try {final Drawing drawing = createDrawing();HashMap<FileFilter, InputFormat> fileFilterInputFormatMap = (HashMap<FileFilter, InputFormat>)((JFileURIChooser) fc).getClientProperty("ffInputFormatMap");InputFormat sf = fileFilterInputFormatMap.get(((JFileURIChooser) fc).getFileFilter());if (sf == null) {sf = drawing.getInputFormats().get(0);}sf.read(new File(f), drawing, true);System.out.println("ODCView read(" + f + ") drawing.childCount=" + drawing.getChildCount());SwingUtilities.invokeAndWait(new Runnable() {public void run() {view.getDrawing().removeUndoableEditListener(undo);view.setDrawing(drawing);view.getDrawing().addUndoableEditListener(undo);undo.discardAllEdits();}});} catch (InterruptedException e) {InternalError error = new InternalError();e.initCause(e);throw error;} catch (InvocationTargetException e) {InternalError error = new InternalError();error.initCause(e);throw error;', 'comment': '/*** Reads the view from the specified uri.*/', 'coherence': 1}, {'code': 'public Pageable createPageable() {return new DrawingPageable(view.getDrawing());', 'comment': '/*** Creates a Pageable object for printing the view.*/', 'coherence': 1}, {'code': 'private void initComponents() {scrollPane = new javax.swing.JScrollPane();view = new org.jhotdraw.draw.DefaultDrawingView();propertiesPanel = new org.jhotdraw.samples.odg.ODGPropertiesPanel();setLayout(new java.awt.BorderLayout());scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);scrollPane.setViewportView(view);add(scrollPane, java.awt.BorderLayout.CENTER);add(propertiesPanel, java.awt.BorderLayout.SOUTH);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public void init() {super.init();initComponents();JPanel zoomButtonPanel = new JPanel(new BorderLayout());scrollPane.setLayout(new PlacardScrollPaneLayout());scrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));setEditor(new DefaultDrawingEditor());undo = new UndoRedoManager();view.setDrawing(createDrawing());view.getDrawing().addUndoableEditListener(undo);initActions();undo.addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {setHasUnsavedChanges(undo.hasSignificantEdits());}});ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");JPanel placardPanel = new JPanel(new BorderLayout());javax.swing.AbstractButton pButton;pButton = ButtonFactory.createZoomButton(view);pButton.putClientProperty("Quaqua.Button.style", "placard");pButton.putClientProperty("Quaqua.Component.visualMargin", new Insets(0, 0, 0, 0));pButton.setFont(UIManager.getFont("SmallSystemFont"));placardPanel.add(pButton, BorderLayout.WEST);pButton = ButtonFactory.createToggleGridButton(view);pButton.putClientProperty("Quaqua.Button.style", "placard");pButton.putClientProperty("Quaqua.Component.visualMargin", new Insets(0, 0, 0, 0));pButton.setFont(UIManager.getFont("SmallSystemFont"));labels.configureToolBarButton(pButton, "view.toggleGrid.placard");placardPanel.add(pButton, BorderLayout.EAST);scrollPane.add(placardPanel, JScrollPane.LOWER_LEFT_CORNER);propertiesPanel.setVisible(preferences.getBoolean("propertiesPanelVisible", false));propertiesPanel.setView(view);', 'comment': '/*** Initializes the view.*/', 'coherence': 1}, {'code': 'private void initActions() {getActionMap().put(UndoAction.ID, undo.getUndoAction());getActionMap().put(RedoAction.ID, undo.getRedoAction());', 'comment': '/*** Initializes view specific actions.*/', 'coherence': 1}, {'code': 'public boolean contains(Point2D.Double p) {// XXX - This does not take the stroke width into account!return getTransformedShape().contains(p);', 'comment': '/*** Checks if a Point2D.Double is inside the figure.*/', 'coherence': 1}, {'code': 'public ODGEllipseFigure() {this(0, 0, 0, 0);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {if (get(TRANSFORM) != null ||(tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {if (get(TRANSFORM) == null) {TRANSFORM.setClone(this, tx);} else {AffineTransform t = TRANSFORM.getClone(this);t.preConcatenate(tx);set(TRANSFORM, t);}} else {Point2D.Double anchor = getStartPoint();Point2D.Double lead = getEndPoint();setBounds((Point2D.Double) tx.transform(anchor, anchor),(Point2D.Double) tx.transform(lead, lead));if (get(FILL_GRADIENT) != null &&!get(FILL_GRADIENT).isRelativeToFigureBounds()) {Gradient g = FILL_GRADIENT.getClone(this);g.transform(tx);set(FILL_GRADIENT, g);}if (get(STROKE_GRADIENT) != null &&!get(STROKE_GRADIENT).isRelativeToFigureBounds()) {Gradient g = STROKE_GRADIENT.getClone(this);g.transform(tx);set(STROKE_GRADIENT, g);}}invalidate();', 'comment': '/*** Transforms the figure.** @param tx the transformation.*/', 'coherence': 1}, {'code': 'public CombineAction(DrawingEditor editor) {super(editor, new ODGPathFigure());labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.odg.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public static ComponentUI createUI(JComponent c) {return new PaletteFormattedTextFieldUI();', 'comment': '/*** Creates a UI for a JTextField.** @param c the text field* @return the UI*/', 'coherence': 1}, {'code': '@Overridepublic View create(Element elem) {/* We create our own view here. This view always uses the* text alignment that was specified by the text component. Even* then, when the text is longer than in the text component.** Draws a wavy line if the value of the field is not valid.*/return new FieldView(elem) {/*** Adjusts the allocation given to the view* to be a suitable allocation for a text field.* If the view has been allocated more than the* preferred span vertically, the allocation is* changed to be centered vertically.  Horizontally* the view is adjusted according to the horizontal* alignment property set on the associated JTextField* (if that is the type of the hosting component).** @param a the allocation given to the view, which may need*  to be adjusted.* @return the allocation that the superclass should use.*/protected Shape adjustAllocationXX(Shape a) {if (a != null) {Rectangle bounds = a.getBounds();int vspan = (int) getPreferredSpan(Y_AXIS);int hspan = (int) getPreferredSpan(X_AXIS);if (bounds.height != vspan) {int slop = bounds.height - vspan;bounds.y += slop / 2;bounds.height -= slop;}// horizontal adjustmentsComponent c = getContainer();if (c instanceof JTextField) {JTextField field = (JTextField) c;BoundedRangeModel vis = field.getHorizontalVisibility();int max = Math.max(hspan, bounds.width);int value = vis.getValue();int extent = Math.min(max, bounds.width - 1);if ((value + extent) > max) {value = max - extent;}vis.setRangeProperties(value, extent, vis.getMinimum(),max, false);if (hspan < bounds.width) {// horizontally align the interiorint slop = bounds.width - 1 - hspan;int align = ((JTextField) c).getHorizontalAlignment();if (true /*((JComponent) c).isLeftToRight()*/) {if (align == LEADING) {align = LEFT;} else if (align == TRAILING) {align = RIGHT;}} else {if (align == LEADING) {align = RIGHT;} else if (align == TRAILING) {align = LEFT;}}switch (align) {case SwingConstants.CENTER:bounds.x += slop / 2;bounds.width -= slop;break;case SwingConstants.RIGHT:bounds.x += slop;bounds.width -= slop;break;}} else {// adjust the allocation to match the bounded range.bounds.width = hspan;bounds.x -= vis.getValue();}}return bounds;}return null;}@Overridepublic void paint(Graphics gr, Shape a) {Graphics2D g = (Graphics2D) gr;JFormattedTextField editor = (JFormattedTextField) getComponent();if (!editor.isEditValid()) {Rectangle r = (Rectangle) a;g.setColor(errorIndicatorForeground);g.setStroke(new BasicStroke(2.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{3f,3f},0.5f));g.draw(new Line2D.Float(r.x, r.y+r.height-0.5f, r.x+r.width-1,r.y+r.height-0.5f));}super.paint(g, a);', 'comment': '/*** Creates a view (FieldView) based on an element.** @param elem the element* @return the view*/', 'coherence': 1}, {'code': 'public PaletteFontChooserPreviewPanel() {initComponents();previewLabel.setUI((LabelUI) PaletteLabelUI.createUI(previewLabel));previewLabel.setBackground(Color.WHITE);previewLabel.setForeground(Color.BLACK);previewLabel.setOpaque(true);setPreferredSize(new Dimension(100,50));setMinimumSize(new Dimension(100,50));', 'comment': '/** Creates new form PaletteFontChooserPreviewPanel */', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponentsprivate void initComponents() {previewLabel = new javax.swing.JLabel();setLayout(new java.awt.BorderLayout());previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);add(previewLabel, java.awt.BorderLayout.CENTER);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': '@Overridepublic void installUI(JComponent c) {installComponents(fontChooser);installListeners(fontChooser);', 'comment': '/*** Configures the specified component appropriate for the look and feel.* This method is invoked when the <code>ComponentUI</code> instance is being installed* as the UI delegate on the specified component.  This method should* completely configure the component for the look and feel,* including the following:* <ol>* <li>Install any default property values for color, fonts, borders,*   icons, opacity, etc. on the component.  Whenever possible,*   property values initialized by the client program should <i>not</i>*   be overridden.* <li>Install a <code>LayoutManager</code> on the component if necessary.* <li>Create/add any required sub-components to the component.* <li>Create/install event listeners on the component.* <li>Create/install a <code>PropertyChangeListener</code> on the component in order*   to detect and respond to component property changes appropriately.* <li>Install keyboard UI (mnemonics, traversal, etc.) on the component.* <li>Initialize any appropriate instance data.* </ol>* @param c the component where this UI delegate is being installed** @see #uninstallUI* @see javax.swing.JComponent#setUI* @see javax.swing.JComponent#updateUI*/', 'coherence': 1}, {'code': 'public static ComponentUI createUI(JComponent c) {PaletteFontChooserUI ui = new PaletteFontChooserUI((JFontChooser) c);return ui;', 'comment': '/*** Returns an instance of the UI delegate for the specified component.* Each subclass must provide its own static <code>createUI</code>* method that returns an instance of that UI delegate subclass.* If the UI delegate subclass is stateless, it may return an instance* that is shared by multiple components.  If the UI delegate is* stateful, then it should return a new instance per component.* The default implementation of this method throws an error, as it* should never be invoked.*/', 'coherence': 1}, {'code': 'public void uninstallUI(JComponent c) {uninstallListeners(fontChooser);uninstallComponents(fontChooser);', 'comment': '/*** Reverses configuration which was done on the specified component during* <code>installUI</code>.  This method is invoked when this* <code>UIComponent</code> instance is being removed as the UI delegate* for the specified component.  This method should undo the* configuration performed in <code>installUI</code>, being careful to* leave the <code>JComponent</code> instance in a clean state (no* extraneous listeners, look-and-feel-specific property objects, etc.).* This should include the following:* <ol>* <li>Remove any UI-set borders from the component.* <li>Remove any UI-set layout managers on the component.* <li>Remove any UI-added sub-components from the component.* <li>Remove any UI-added event/property listeners from the component.* <li>Remove any UI-installed keyboard UI from the component.* <li>Nullify any allocated instance data objects to allow for GC.* </ol>* @param c the component from which this UI delegate is being removed;*      this argument is often ignored,*      but might be used if the UI object is stateless*      and shared by multiple components** @see #installUI* @see javax.swing.JComponent#updateUI*/', 'coherence': 1}, {'code': 'public TextCreationTool(TextHolderFigure prototype, Map<AttributeKey,Object> attributes) {super(prototype, attributes);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public TextCreationTool(TextHolderFigure prototype) {super(prototype);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic void mousePressed(MouseEvent e) {TextHolderFigure textHolder = null;// Note: The search sequence used here, must be// consistent with the search sequence used by the// HandleTracker, SelectAreaTracker, DelegationSelectionTool, SelectionTool.// If possible, continue to work with the current selectionDrawingView v = getView();Point2D.Double p = v.viewToDrawing(e.getPoint());Figure pressedFigure = null;if (true /*isSelectBehindEnabled()*/) {for (Figure f : v.getSelectedFigures()) {if (f.contains(p)) {pressedFigure = f;break;}}}// If the point is not contained in the current selection,// search for a figure in the drawing.if (pressedFigure == null) {pressedFigure = getDrawing().findFigureInside(p);}if (pressedFigure instanceof TextHolderFigure) {textHolder = ((TextHolderFigure) pressedFigure).getLabelFor();textHolder = null;}if (textHolder != null) {beginEdit(textHolder);updateCursor(getView(), e.getPoint());return;}if (typingTarget != null) {endEdit();if (isToolDoneAfterCreation()) {fireToolDone();}} else {super.mousePressed(e);// update view so the created figure is drawn before the floating text// figure is overlaid.textHolder = (TextHolderFigure)getCreatedFigure();getView().clearSelection();getView().addToSelection(textHolder);beginEdit(textHolder);updateCursor(getView(), e.getPoint());', 'comment': '/*** Creates a new figure at the location where the mouse was pressed.*/', 'coherence': 1}, {'code': 'public void setRubberbandColor(Color c) {rubberbandColor = c;', 'comment': '/*** Sets the rubberband color for the tool. Setting this to null, disables* the rubberband.** @param c Rubberband color or null.*/', 'coherence': 1}, {'code': '@Overridepublic void mousePressed(MouseEvent e) {TextHolderFigure textHolder = null;// Note: The search sequence used here, must be// consistent with the search sequence used by the// HandleTracker, SelectAreaTracker, DelegationSelectionTool, SelectionTool.// If possible, continue to work with the current selectionDrawingView v = getView();Point2D.Double p = v.viewToDrawing(e.getPoint());Figure pressedFigure = null;if (true /*isSelectBehindEnabled()*/) {for (Figure f : v.getSelectedFigures()) {if (f.contains(p)) {pressedFigure = f;break;}}}// If the point is not contained in the current selection,// search for a figure in the drawing.if (pressedFigure == null) {pressedFigure = getDrawing().findFigureInside(p);}//if (pressedFigure instanceof TextHolderFigure) {textHolder = (TextHolderFigure) pressedFigure;textHolder = null;}if (textHolder != null) {createdFigure = null;beginEdit(textHolder);return;}if (typingTarget != null) {endEdit();if (isToolDoneAfterCreation()) {fireToolDone();}} else {super.mousePressed(e);', 'comment': '/*** Creates a new figure at the mouse location.* If editing is in progress, this finishes editing.*/', 'coherence': 1}, {'code': '@Overrideprotected void creationFinished(Figure createdFigure) {getView().clearSelection();getView().addToSelection(createdFigure);beginEdit((TextHolderFigure) createdFigure);', 'comment': '/*** This method allows subclasses to do perform additonal user interactions* after the new figure has been created.* The implementation of this class just invokes fireToolDone.*/', 'coherence': 1}, {'code': 'public TextAreaCreationTool(TextHolderFigure prototype) {super(prototype);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public PaletteFontChooserSelectionPanel() {labels = ResourceBundleUtil.getBundle("org.jhotdraw.gui.Labels");initComponents();collectionList.setModel(new DefaultListModel());familyList.setModel(new DefaultListModel());faceList.setModel(new DefaultListModel());// Customiziation of Quaqua Look and Feel: Set small scroll barsFont smallSystemFont = new Font("Dialog", Font.PLAIN, 11);collectionsScrollPane.setFont(smallSystemFont);familiesScrollPane.setFont(smallSystemFont);facesScrollPane.setFont(smallSystemFont);', 'comment': '/** Creates new form FontChooserPanel */', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponentsprivate void initComponents() {java.awt.GridBagConstraints gridBagConstraints;collectionsPanel = new javax.swing.JPanel();collectionsScrollPane = new javax.swing.JScrollPane();collectionList = new javax.swing.JList();collectionsLabel = new javax.swing.JLabel();familiesPanel = new javax.swing.JPanel();familiesScrollPane = new javax.swing.JScrollPane();familyList = new javax.swing.JList();familyLabel = new javax.swing.JLabel();facesPanel = new javax.swing.JPanel();facesScrollPane = new javax.swing.JScrollPane();faceList = new javax.swing.JList();faceLabel = new javax.swing.JLabel();setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));setLayout(new java.awt.GridBagLayout());collectionsPanel.setPreferredSize(new java.awt.Dimension(80, 200));collectionsPanel.setLayout(new java.awt.BorderLayout());collectionsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);collectionList.setFont(collectionList.getFont().deriveFont((float)11));collectionsScrollPane.setViewportView(collectionList);collectionsPanel.add(collectionsScrollPane, java.awt.BorderLayout.CENTER);collectionsLabel.setFont(collectionsLabel.getFont().deriveFont((float)11));collectionsLabel.setText(labels.getString("FontCollection.collections")); // NOI18NcollectionsPanel.add(collectionsLabel, java.awt.BorderLayout.PAGE_START);gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;gridBagConstraints.weightx = 0.3;gridBagConstraints.weighty = 1.0;add(collectionsPanel, gridBagConstraints);familiesPanel.setPreferredSize(new java.awt.Dimension(140, 200));familiesPanel.setLayout(new java.awt.BorderLayout());familiesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);familyList.setFont(familyList.getFont().deriveFont((float)11));familiesScrollPane.setViewportView(familyList);familiesPanel.add(familiesScrollPane, java.awt.BorderLayout.CENTER);familyLabel.setFont(familyLabel.getFont().deriveFont((float)11));familyLabel.setText(labels.getString("FontCollection.family")); // NOI18NfamiliesPanel.add(familyLabel, java.awt.BorderLayout.PAGE_START);gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;gridBagConstraints.weightx = 0.4;gridBagConstraints.weighty = 1.0;gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);add(familiesPanel, gridBagConstraints);facesPanel.setPreferredSize(new java.awt.Dimension(80, 200));facesPanel.setLayout(new java.awt.BorderLayout());facesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);facesScrollPane.setPreferredSize(new java.awt.Dimension(130, 240));faceList.setFont(faceList.getFont().deriveFont((float)11));facesScrollPane.setViewportView(faceList);facesPanel.add(facesScrollPane, java.awt.BorderLayout.CENTER);faceLabel.setFont(faceLabel.getFont().deriveFont((float)11));faceLabel.setText(labels.getString("FontCollection.typeface")); // NOI18NfacesPanel.add(faceLabel, java.awt.BorderLayout.PAGE_START);gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;gridBagConstraints.weightx = 0.3;gridBagConstraints.weighty = 1.0;gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);add(facesPanel, gridBagConstraints);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'protected String layoutCL(JLabel label,FontMetrics fontMetrics,String text,Icon icon,Rectangle viewR,Rectangle iconR,Rectangle textR) {return SwingUtilities.layoutCompoundLabel((JComponent) label,fontMetrics,text,icon,label.getVerticalAlignment(),label.getHorizontalAlignment(),label.getVerticalTextPosition(),label.getHorizontalTextPosition(),viewR,iconR,textR,label.getIconTextGap());', 'comment': '/*** Forwards the call to SwingUtilities.layoutCompoundLabel().* This method is here so that a subclass could do Label specific* layout and to shorten the method name a little.** @see SwingUtilities#layoutCompoundLabel*/', 'coherence': 1}, {'code': 'public static ComponentUI createUI(JComponent c) {return labelUI;', 'comment': '/*** Preferred spacing between labels and other components.* Pixels from colon and associated controls (RadioButton,* CheckBox)* /* private final static Insets associatedRegularSpacing = new Insets(8,8,8,8);* private final static Insets associatedSmallSpacing = new Insets(6,6,6,6);* private final static Insets associatedMiniSpacing = new Insets(5,5,5,5);*/', 'coherence': 1}, {'code': 'protected void paintDisabledText(JLabel l, Graphics g, String s, int textX, int textY) {Color c = UIManager.getColor("Label.disabledForeground");g.setColor((c != null) ? c : l.getForeground());int accChar = -1; //l.getDisplayedMnemonicIndex();PaletteUtilities.drawString(g, s, accChar,textX, textY);', 'comment': '/*** Paint label with disabled text color.** @see #paint* @see #paintEnabledText*/', 'coherence': 1}, {'code': 'public MultiIcon(Icon[] icons) {this.icons = icons;generateMissingIcons();', 'comment': '/*** Creates a new instance from an array of icons.* All icons must have the same dimensions.* If an icon is null, an icon is derived for the state from the* other icons.*/', 'coherence': 1}, {'code': 'public MultiIcon(Image[] images) {this.icons = new Icon[images.length];for (int i=0, n = icons.length; i < n; i++) {if (images[i] != null) {icons[i] = new ImageIcon(images[i]);}}generateMissingIcons();', 'comment': '/*** Creates a new instance from an array of images.* All icons must have the same dimensions.* If an icon is null, an icon is derived for the state from the* other icons.*/', 'coherence': 1}, {'code': 'public void add(Point2D.Double c0) {add(new Node(0, c0, c0, c0));', 'comment': '/*** Convenience method for adding a control point with a single* coordinate C0.*/--------------/*** This mask is used to describe which control points in addition to* C0 are in effect.*/--------------', 'coherence': 1}, {'code': 'public Path2D.Double toGeneralPath() {Path2D.Double gp = new Path2D.Double();gp.setWindingRule(windingRule);if (size() == 0) {gp.moveTo(0, 0);gp.lineTo(0, 0 + 1);} else if (size() == 1) {Node current = get(0);gp.moveTo(current.x[0], current.y[0]);gp.lineTo(current.x[0], current.y[0] + 1);} else {Node previous;Node current;previous = current = get(0);gp.moveTo(current.x[0], current.y[0]);for (int i = 1, n = size(); i < n; i++) {previous = current;current = get(i);if ((previous.mask & C2_MASK) == 0) {if ((current.mask & C1_MASK) == 0) {gp.lineTo(current.x[0], current.y[0]);} else {gp.quadTo(current.x[1], current.y[1],current.x[0], current.y[0]);}} else {if ((current.mask & C1_MASK) == 0) {gp.quadTo(previous.x[2], previous.y[2],current.x[0], current.y[0]);} else {gp.curveTo(previous.x[2], previous.y[2],current.x[1], current.y[1],current.x[0], current.y[0]);}}}if (isClosed) {if (size() > 1) {previous = get(size() - 1);current = get(0);if ((previous.mask & C2_MASK) == 0) {if ((current.mask & C1_MASK) == 0) {gp.lineTo(current.x[0], current.y[0]);} else {gp.quadTo(current.x[1], current.y[1],current.x[0], current.y[0]);}} else {if ((current.mask & C1_MASK) == 0) {gp.quadTo(previous.x[2], previous.y[2],current.x[0], current.y[0]);} else {gp.curveTo(previous.x[2], previous.y[2],current.x[1], current.y[1],current.x[0], current.y[0]);}}}gp.closePath();}}return gp;', 'comment': '/** Converts the BezierPath into a Path2D.Double. */', 'coherence': 1}, {'code': 'public Point2D.Double[] toPolygonArray() {Point2D.Double[] points = new Point2D.Double[size()];for (int i = 0, n = size(); i < n; i++) {points[i] = new Point2D.Double(get(i).x[0], get(i).y[0]);}return points;', 'comment': '/*** Creates a polygon array of the bezier path.* @return Point array.*/', 'coherence': 1}, {'code': 'public int indexOfOutermostNode() {if (outer == -1) {Point2D.Double ctr = getCenter();outer = 0;double dist = 0;for (int i = 0, n = size(); i < n; i++) {Node cp = get(i);double d = Geom.length2(ctr.x, ctr.y,cp.x[0],cp.y[0]);if (d > dist) {dist = d;outer = i;}}}return outer;', 'comment': '/*** Return the index of the control point that is furthest from the center**/--------------/*Point2D.Double ctr = getCenter();// Chopped pointdouble cx = -1;double cy = -1;double len = Double.MAX_VALUE;// Try for points along edgevalidatePath();PathIterator i = generalPath.getPathIterator(new AffineTransform(), 1);double[] coords = new double[6];int type = i.currentSegment(coords);double prevX = coords[0];double prevY = coords[1];i.next();for (; ! i.isDone(); i.next()) {i.currentSegment(coords);Point2D.Double chop = Geom.intersect(prevX, prevY,coords[0], coords[1],p.x, p.y,ctr.x, ctr.y);if (chop != null) {double cl = Geom.length2(chop.x, chop.y, p.x, p.y);if (cl < len) {len = cl;cx = chop.x;cy = chop.y;}}prevX = coords[0];prevY = coords[1];}//if (isClosed() && size() > 1) {Node first = get(0);Node last = get(size() - 1);Point2D.Double chop = Geom.intersect(first.x[0], first.y[0],last.x[0], last.y[0],p.x, p.y,ctr.x, ctr.y);if (chop != null) {double cl = Geom.length2(chop.x, chop.y, p.x, p.y);if (cl < len) {len = cl;cx = chop.x;cy = chop.y;}}}// if none found, pick closest vertexif (len == Double.MAX_VALUE) {for (int j = 0, n = size(); j < n; j++) {Node cp = get(j);double l = Geom.length2(cp.x[0], cp.y[0], p.x, p.y);if (l < len) {len = l;cx = cp.x[0];cy = cp.y[0];}}}return new Point2D.Double(cx, cy);*/--------------', 'coherence': 1}, {'code': 'public Point2D.Double get(int index, int coord) {Node c = get(index);return new Point2D.Double(c.x[coord],c.y[coord]);', 'comment': '/*** Convenience method for getting a single coordinate of a control point.*/', 'coherence': 1}, {'code': 'public double getLengthOfPath(double flatness) {double len = 0;PathIterator i = generalPath.getPathIterator(new AffineTransform(), flatness);double[] coords = new double[6];int type = i.currentSegment(coords);double prevX = coords[0];double prevY = coords[1];i.next();for (; !i.isDone(); i.next()) {i.currentSegment(coords);len += Geom.length(prevX, prevY, coords[0], coords[1]);prevX = coords[0];prevY = coords[1];}return len;', 'comment': '/*** Returns the length of the path.** @param flatness the flatness used to approximate the length.*/', 'coherence': 1}, {'code': 'public void transform(AffineTransform tx) {Point2D.Double p = new Point2D.Double();for (Node cp : this) {for (int i = 0; i < 3; i++) {p.x = cp.x[i];p.y = cp.y[i];tx.transform(p, p);cp.x[i] = p.x;cp.y[i] = p.y;}}invalidatePath();', 'comment': '/*** Transforms the BezierPath.* @param tx the transformation.*/', 'coherence': 1}, {'code': 'public void set(int index, int coord, Point2D.Double p) {Node c = get(index);c.x[coord] = p.x;c.y[coord] = p.y;', 'comment': '/*** Convenience method for changing a single coordinate of a control point.*/--------------/** This is a hint for editing tools. If this is set to true,* the editing tools shall keep all control points on the same* line.*/--------------', 'coherence': 1}, {'code': 'public void add(int mask, Point2D.Double c0, Point2D.Double c1, Point2D.Double c2) {add(new Node(mask, c0, c1, c2));', 'comment': '/*** Convenience method for adding a control point with three* coordinates C0, C1 and C2 with a mask.*/--------------/** Control point x coordinates. */--------------', 'coherence': 1}, {'code': 'public double getRelativePositionOnPath(Point2D.Double find, double flatness) {// XXX - This method works only for straight lines!double len = getLengthOfPath(flatness);double relativeLen = 0d;Node v1, v2;BezierPath tempPath = new BezierPath();Node t1, t2;tempPath.add(t1 = new Node());tempPath.add(t2 = new Node());for (int i = 0, n = size() - 1; i < n; i++) {v1 = get(i);v2 = get(i + 1);if (v1.mask == 0 && v2.mask == 0) {if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, flatness)) {relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);return relativeLen / len;} else {relativeLen += Geom.length(v1.x[0], v1.y[0], v2.x[0], v2.y[0]);}} else {t1.setTo(v1);t2.setTo(v2);tempPath.invalidatePath();if (tempPath.outlineContains(find, flatness)) {relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);return relativeLen / len;} else {relativeLen += Geom.length(v1.x[0], v1.y[0], v2.x[0], v2.y[0]);}}}if (isClosed && size() > 1) {v1 = get(size() - 1);v2 = get(0);if (v1.mask == 0 && v2.mask == 0) {if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, flatness)) {relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);return relativeLen / len;}} else {t1.setTo(v1);t2.setTo(v2);tempPath.invalidatePath();if (tempPath.outlineContains(find, flatness)) {relativeLen += Geom.length(v1.x[0], v1.y[0], find.x, find.y);return relativeLen / len;}}}return -1;', 'comment': '/*** Returns the relative position of the specified point on the path.** @param flatness the flatness used to approximate the length.** @return relative position on path, this is a number between 0 and 1.* Returns -1, if the point is not on the path.*/', 'coherence': 1}, {'code': 'public BezierPath clone() {BezierPath that = (BezierPath) super.clone();for (int i = 0, n = this.size(); i < n; i++) {that.set(i, (Node) this.get(i).clone());}return that;', 'comment': '/** Creates a deep copy of the BezierPath. */', 'coherence': 1}, {'code': 'public void arcTo(double rx, double ry,double xAxisRotation,boolean largeArcFlag, boolean sweepFlag,double x, double y) {// Ensure radii are validif (rx == 0 || ry == 0) {lineTo(x, y);return;}// Get the current (x, y) coordinates of the pathNode lastPoint = get(size() - 1);double x0 = ((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.x[2] : lastPoint.x[0];double y0 = ((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.y[2] : lastPoint.y[0];if (x0 == x && y0 == y) {// If the endpoints (x, y) and (x0, y0) are identical, then this// is equivalent to omitting the elliptical arc segment entirely.return;}// Compute the half distance between the current and the final pointdouble dx2 = (x0 - x) / 2d;double dy2 = (y0 - y) / 2d;// Convert angle from degrees to radiansdouble angle = Math.toRadians(xAxisRotation);double cosAngle = Math.cos(angle);double sinAngle = Math.sin(angle);//// Step 1 : Compute (x1, y1)//double x1 = (cosAngle * dx2 + sinAngle * dy2);double y1 = (-sinAngle * dx2 + cosAngle * dy2);// Ensure radii are large enoughrx = Math.abs(rx);ry = Math.abs(ry);double Prx = rx * rx;double Pry = ry * ry;double Px1 = x1 * x1;double Py1 = y1 * y1;// check that radii are large enoughdouble radiiCheck = Px1 / Prx + Py1 / Pry;if (radiiCheck > 1) {rx = Math.sqrt(radiiCheck) * rx;ry = Math.sqrt(radiiCheck) * ry;Prx = rx * rx;Pry = ry * ry;}//// Step 2 : Compute (cx1, cy1)//double sign = (largeArcFlag == sweepFlag) ? -1 : 1;double sq = ((Prx * Pry) - (Prx * Py1) - (Pry * Px1)) / ((Prx * Py1) + (Pry * Px1));sq = (sq < 0) ? 0 : sq;double coef = (sign * Math.sqrt(sq));double cx1 = coef * ((rx * y1) / ry);double cy1 = coef * -((ry * x1) / rx);//// Step 3 : Compute (cx, cy) from (cx1, cy1)//double sx2 = (x0 + x) / 2.0;double sy2 = (y0 + y) / 2.0;double cx = sx2 + (cosAngle * cx1 - sinAngle * cy1);double cy = sy2 + (sinAngle * cx1 + cosAngle * cy1);//// Step 4 : Compute the angleStart (angle1) and the angleExtent (dangle)//double ux = (x1 - cx1) / rx;double uy = (y1 - cy1) / ry;double vx = (-x1 - cx1) / rx;double vy = (-y1 - cy1) / ry;double p, n;// Compute the angle startn = Math.sqrt((ux * ux) + (uy * uy));p = ux; // (1 * ux) + (0 * uy)sign = (uy < 0) ? -1d : 1d;double angleStart = Math.toDegrees(sign * Math.acos(p / n));// Compute the angle extentn = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));p = ux * vx + uy * vy;sign = (ux * vy - uy * vx < 0) ? -1d : 1d;double angleExtent = Math.toDegrees(sign * Math.acos(p / n));if (!sweepFlag && angleExtent > 0) {angleExtent -= 360f;} else if (sweepFlag && angleExtent < 0) {angleExtent += 360f;}angleExtent %= 360f;angleStart %= 360f;//// We can now build the resulting Arc2D in double precision//Arc2D.Double arc = new Arc2D.Double(cx - rx, cy - ry,rx * 2d, ry * 2d,-angleStart, -angleExtent,Arc2D.OPEN);// Create a path iterator of the rotated arcPathIterator i = arc.getPathIterator(AffineTransform.getRotateInstance(angle, arc.getCenterX(), arc.getCenterY()));// Add the segments to the bezier pathdouble[] coords = new double[6];i.next(); // skip first movetowhile (!i.isDone()) {int type = i.currentSegment(coords);switch (type) {case PathIterator.SEG_CLOSE:// ignorebreak;case PathIterator.SEG_CUBICTO:curveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);break;case PathIterator.SEG_LINETO:lineTo(coords[0], coords[1]);break;case PathIterator.SEG_MOVETO:// ignorebreak;case PathIterator.SEG_QUADTO:quadTo(coords[0], coords[1], coords[2], coords[3]);break;}i.next();', 'comment': '/*** Adds an elliptical arc, defined by two radii, an angle from the* x-axis, a flag to choose the large arc or not, a flag to* indicate if we increase or decrease the angles and the final* point of the arc.* <p>* As specified in http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands* <p>* The implementation of this method has been derived from* Apache Batik class org.apache.batik.ext.awt.geom.ExtendedGeneralPath#computArc** @param rx the x radius of the ellipse* @param ry the y radius of the ellipse** @param xAxisRotation the angle from the x-axis of the current* coordinate system to the x-axis of the ellipse in degrees.** @param largeArcFlag the large arc flag. If true the arc* spanning less than or equal to 180 degrees is chosen, otherwise* the arc spanning greater than 180 degrees is chosen** @param sweepFlag the sweep flag. If true the line joining* center to arc sweeps through decreasing angles otherwise it* sweeps through increasing angles** @param x the absolute x coordinate of the final point of the arc.* @param y the absolute y coordinate of the final point of the arc.*/', 'coherence': 1}, {'code': 'public Point2D.Double chop(Point2D.Double p) {validatePath();return Geom.chop(generalPath, p);', 'comment': '/*** Returns a point on the edge of the bezier path which crosses the line* from the center of the bezier path to the specified point.* If no edge crosses the line, the nearest C0 control point is returned.*/', 'coherence': 1}, {'code': 'public void setWindingRule(int newValue) {if (newValue != windingRule) {invalidatePath();int oldValue = windingRule;this.windingRule = newValue;', 'comment': '/*** Sets winding rule for filling the bezier path.* @param newValue Must be Path2D.Double.WIND_EVEN_ODD or Path2D.Double.WIND_NON_ZERO.*/', 'coherence': 1}, {'code': 'public void validatePath() {if (generalPath == null) {generalPath = toGeneralPath();', 'comment': '/*** Recomputes the BezierPath, if it is invalid.*/', 'coherence': 1}, {'code': 'public int findSegment(Point2D.Double find, double tolerance) {// XXX - This works only for straight lines!Node v1, v2;BezierPath tempPath = new BezierPath();Node t1, t2;tempPath.add(t1 = new Node());tempPath.add(t2 = new Node());for (int i = 0, n = size() - 1; i < n; i++) {v1 = get(i);v2 = get(i + 1);if (v1.mask == 0 && v2.mask == 0) {if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, tolerance)) {return i;}} else {t1.setTo(v1);t2.setTo(v2);tempPath.invalidatePath();if (tempPath.outlineContains(find, tolerance)) {return i;}}}if (isClosed && size() > 1) {v1 = get(size() - 1);v2 = get(0);if (v1.mask == 0 && v2.mask == 0) {if (Geom.lineContainsPoint(v1.x[0], v1.y[0], v2.x[0], v2.y[0], find.x, find.y, tolerance)) {return size() - 1;}} else {t1.setTo(v1);t2.setTo(v2);tempPath.invalidatePath();if (tempPath.outlineContains(find, tolerance)) {return size() - 1;}}}return -1;', 'comment': '/*** Gets the segment of the polyline that is hit by* the given Point2D.Double.* @return the index of the segment or -1 if no segment was hit.*/', 'coherence': 1}, {'code': 'public Point2D.Double getPointOnPath(double relative, double flatness) {// This method works only for straight linesif (size() == 0) {return null;} else if (size() == 1) {return get(0).getControlPoint(0);}if (relative <= 0) {return get(0).getControlPoint(0);} else if (relative >= 1) {return get(size() - 1).getControlPoint(0);}validatePath();// Compute the relative point on the pathdouble len = getLengthOfPath(flatness);double relativeLen = len * relative;double pos = 0;double[] coords = new double[6];PathIterator i = generalPath.getPathIterator(new AffineTransform(), flatness);int type = i.currentSegment(coords);double prevX = coords[0];double prevY = coords[1];i.next();for (; !i.isDone(); i.next()) {i.currentSegment(coords);double segLen = Geom.length(prevX, prevY, coords[0], coords[1]);if (pos + segLen >= relativeLen) {//if (true) return new Point2D.Double(coords[0], coords[1]);// Compute the relative Point2D.Double on the line/*return new Point2D.Double(prevX * pos / len + coords[0] * (pos + segLen) / len,prevY * pos / len + coords[1] * (pos + segLen) / len);*/double factor = (relativeLen - pos) / segLen;return new Point2D.Double(prevX * (1 - factor) + coords[0] * factor,prevY * (1 - factor) + coords[1] * factor);}pos += segLen;prevX = coords[0];prevY = coords[1];}throw new InternalError("We should never get here");', 'comment': '/*** Returns a relative point on the path.* Where 0 is the start point of the path and 1 is the end point of the* path.** @param relative a value between 0 and 1.*/', 'coherence': 1}, {'code': 'public int joinSegments(Point2D.Double join, double tolerance) {for (int i = 0; i < size(); i++) {Node p = get(i);if (Geom.length(p.x[0], p.y[0], join.x, join.y) < tolerance) {remove(i);return i;}}return -1;', 'comment': '/*** Joins two segments into one if the given Point2D.Double hits a node* of the bezier path.* @return the index of the joined segment or -1 if no segment was joined.*/', 'coherence': 1}, {'code': 'public boolean outlineContains(Point2D.Double p, double tolerance) {return Shapes.outlineContains(this, p, tolerance);', 'comment': '/*** Returns true, if the outline of this bezier path contains the specified* point.** @param p The point to be tested.* @param tolerance The tolerance for the test.*/', 'coherence': 1}, {'code': 'public Point2D.Double getCenter() {double sx = 0;double sy = 0;for (Node p : this) {sx += p.x[0];sy += p.y[0];}int n = size();return new Point2D.Double(sx / n, sy / n);', 'comment': '/*** Returns the point at the center of the bezier path.*/', 'coherence': 1}, {'code': 'public int splitSegment(Point2D.Double split, double tolerance) {int i = findSegment(split, tolerance);int nextI = (i + 1) % size();if (i != -1) {if ((get(i).mask & C2_MASK) == C2_MASK&& (get(nextI).mask & C1_MASK) == 0) {// quadtoadd(i + 1, new Node(C2_MASK, split, split, split));} else if ((get(i).mask & C2_MASK) == 0&& (get(nextI).mask & C1_MASK) == C1_MASK) {// quadtoadd(i + 1, new Node(C1_MASK, split, split, split));} else if ((get(i).mask & C2_MASK) == C2_MASK&& (get(nextI).mask & C1_MASK) == C1_MASK) {// cubictoadd(i + 1, new Node(C1_MASK | C2_MASK, split, split, split));} else {// linetoadd(i + 1, new Node(split));}}return i + 1;', 'comment': '/*** Splits the segment at the given Point2D.Double if a segment was hit.* @return the index of the segment or -1 if no segment was hit.*/', 'coherence': 1}, {'code': 'public void addAll(Collection<Point2D.Double> points) {for (Point2D.Double c0 : points) {add(new Node(0, c0, c0, c0));', 'comment': '/*** Convenience method for adding multiple control points with a single* coordinate C0.*/--------------/** Control point y coordinates. */--------------', 'coherence': 1}, {'code': 'public void invalidatePath() {generalPath = null;bounds = null;outer = -1;', 'comment': '/*** This must be called after the BezierPath has been changed.*/', 'coherence': 1}, {'code': '@Overridepublic void mousePressed(MouseEvent e) {if (typingTarget != null) {beginEdit(typingTarget);updateCursor(getView(), e.getPoint());', 'comment': '/*** Creates a new figure at the mouse location.* If editing is in progress, this finishes editing.*/', 'coherence': 1}, {'code': 'public TextAreaEditingTool(TextHolderFigure typingTarget) {this.typingTarget = typingTarget;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic void mousePressed(MouseEvent e) {if (typingTarget != null) {beginEdit(typingTarget);updateCursor(getView(), e.getPoint());', 'comment': '/*** If the pressed figure is a TextHolderFigure it can be edited.*/', 'coherence': 1}, {'code': 'public TextEditingTool(TextHolderFigure typingTarget) {this.typingTarget = typingTarget;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'private static double[] reparameterize(ArrayList<Point2D.Double> d, int first, int last, double[] u, Point2D.Double[] bezCurve) {int nPts = last - first + 1;int i;double[] uPrime; /*  New parameter values  */uPrime = new double[nPts];for (i = first; i <= last; i++) {uPrime[i - first] = newtonRaphsonRootFind(bezCurve, d.get(i), u[i - first]);}return (uPrime);', 'comment': '/*** Given set of points and their parameterization, try to find* a better parameterization.** @param d  Array of digitized points.* @param first Indice of first point of region in d.* @param last Indice of last point of region in d.* @param u Current parameter values.* @param bezCurve Current fitted curve.*/', 'coherence': 1}, {'code': 'public static BezierPath fitBezierPath(Point2D.Double[] digitizedPoints, double error) {return fitBezierPath(Arrays.asList(digitizedPoints), error);', 'comment': '/*** Fits a bezier path to the specified list of digitized points.* <p>* This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);** @param digitizedPoints digited points.* @param error the maximal allowed error between the bezier path and the* digitized points.*/', 'coherence': 1}, {'code': 'public static BezierPath fitBezierPath(BezierPath digitizedPoints, double error) {ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>(digitizedPoints.size());for (BezierPath.Node n : digitizedPoints) {d.add(new Point2D.Double(n.x[0], n.y[0]));}return fitBezierPath(d, error);', 'comment': '/*** Fits a bezier path to the specified list of digitized points.* <p>* This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);** @param digitizedPoints digited points.* @param error the maximal allowed error between the bezier path and the* digitized points.*/', 'coherence': 1}, {'code': 'private static double v2Length(Point2D.Double a) {return Math.sqrt(v2SquaredLength(a));', 'comment': '/*** Returns length of input vector.*/', 'coherence': 1}, {'code': 'public static ArrayList<Point2D.Double> reduceNoise(java.util.List<Point2D.Double> digitizedPoints, double weight) {java.util.ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();if (digitizedPoints.size() > 0) {Point2D.Double prev = digitizedPoints.get(0);cleaned.add(prev);double pnWeight = (1d - weight) / 2d; // weight of previous and nextfor (int i = 1, n = digitizedPoints.size() - 1; i < n; i++) {Point2D.Double cur = digitizedPoints.get(i);Point2D.Double next = digitizedPoints.get(i + 1);cleaned.add(new Point2D.Double(cur.x * weight + pnWeight * prev.x + pnWeight * next.x,cur.y * weight + pnWeight * prev.y + pnWeight * next.y));prev = cur;}if (digitizedPoints.size() > 1) {cleaned.add(digitizedPoints.get(digitizedPoints.size() - 1));}}return cleaned;', 'comment': '/*** Reduces noise from the digitized points, by applying an approximation* of a gaussian filter to the data.* <p>* The filter does the following for each point P, with weight 0.5:* <p>* x[i] = 0.5*x[i] + 0.25*x[i-1] + 0.25*x[i+1];* y[i] = 0.5*y[i] + 0.25*y[i-1] + 0.25*y[i+1];**** @param digitizedPoints Digitized points* @param weight Weight of the current point* @return Digitized points with reduced noise.*/', 'coherence': 1}, {'code': 'private static double[] chordLengthParameterize(ArrayList<Point2D.Double> d, int first, int last) {int i;double[] u;  /*  Parameterization    */u = new double[last - first + 1];u[0] = 0.0;for (i = first + 1; i <= last; i++) {u[i - first] = u[i - first - 1] +v2DistanceBetween2Points(d.get(i), d.get(i - 1));}for (i = first + 1; i <= last; i++) {u[i - first] = u[i - first] / u[last - first];}return (u);', 'comment': '/*** Assign parameter values to digitized points* using relative distances between points.** @param d Digitized points.* @param first Indice of first point of region in d.* @param last Indice of last point of region in d.*/', 'coherence': 1}, {'code': 'private static void fitCubic(ArrayList<Point2D.Double> d, int first, int last,Point2D.Double tHat1, Point2D.Double tHat2,double errorSquared, BezierPath bezierPath) {Point2D.Double[] bezCurve; /*Control points of fitted Bezier curve*/double[] u;    /*  Parameter values for point  */double maxError;  /*  Maximum fitting errorSquared   */int[] splitPoint = new int[1]; /*  Point to split point set at.This is an array of size one, because we need it as an input/output parameter.*/int nPts;    /*  Number of points in subset  */double iterationError; /* Error below which you try iterating  */int maxIterations = 4; /*  Max times to try iterating  */Point2D.Double tHatCenter = new Point2D.Double(); /* Unit tangent vector at splitPoint */int i;// clone unit tangent vectors, so that we can alter their coordinates// without affecting the input values.tHat1 = (Point2D.Double) tHat1.clone();tHat2 = (Point2D.Double) tHat2.clone();iterationError = errorSquared * errorSquared;nPts = last - first + 1;/*  Use heuristic if region only has two points in it */if (nPts == 2) {double dist = v2DistanceBetween2Points(d.get(last), d.get(first)) / 3.0;bezCurve = new Point2D.Double[4];for (i = 0; i < bezCurve.length; i++) {bezCurve[i] = new Point2D.Double();}bezCurve[0] = d.get(first);bezCurve[3] = d.get(last);v2Add(bezCurve[0], v2Scale(tHat1, dist), bezCurve[1]);v2Add(bezCurve[3], v2Scale(tHat2, dist), bezCurve[2]);bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y,bezCurve[2].x, bezCurve[2].y,bezCurve[3].x, bezCurve[3].y);return;}/*  Parameterize points, and attempt to fit curve */u = chordLengthParameterize(d, first, last);bezCurve = generateBezier(d, first, last, u, tHat1, tHat2);/*  Find max deviation of points to fitted curve */maxError = computeMaxError(d, first, last, bezCurve, u, splitPoint);if (maxError < errorSquared) {addCurveTo(bezCurve, bezierPath, errorSquared, first == 0 && last == d.size() - 1);return;}/*  If errorSquared not too large, try some reparameterization  *//*  and iteration */if (maxError < iterationError) {double[] uPrime;  /*  Improved parameter values */for (i = 0; i < maxIterations; i++) {uPrime = reparameterize(d, first, last, u, bezCurve);bezCurve = generateBezier(d, first, last, uPrime, tHat1, tHat2);maxError = computeMaxError(d, first, last, bezCurve, uPrime, splitPoint);if (maxError < errorSquared) {addCurveTo(bezCurve, bezierPath, errorSquared, first == 0 && last == d.size() - 1);return;}u = uPrime;}}/* Fitting failed -- split at max errorSquared point and fit recursively */tHatCenter = computeCenterTangent(d, splitPoint[0]);if (first < splitPoint[0]) {fitCubic(d, first, splitPoint[0], tHat1, tHatCenter, errorSquared, bezierPath);} else {bezierPath.lineTo(d.get(splitPoint[0]).x, d.get(splitPoint[0]).y);//   System.err.println("Can\'t split any further " + first + ".." + splitPoint[0]);}v2Negate(tHatCenter);if (splitPoint[0] < last) {fitCubic(d, splitPoint[0], last, tHatCenter, tHat2, errorSquared, bezierPath);} else {bezierPath.lineTo(d.get(last).x, d.get(last).y);', 'comment': '/*** Fit one or multiple subsequent cubic bezier curves to a (sub)set of* digitized points. The digitized points represent a smooth curve without* corners.** @param d  Array of digitized points. Must not contain subsequent* coincident points.* @param first Indice of first point in d.* @param last Indice of last point in d.* @param tHat1 Unit tangent vectors at start point.* @param tHat2 Unit tanget vector at end point.* @param errorSquared User-defined errorSquared squared.* @param bezierPath Path to which the bezier curve segments are added.*/', 'coherence': 1}, {'code': 'private static Point2D.Double computeCenterTangent(ArrayList<Point2D.Double> d, int center) {Point2D.Double V1 = new Point2D.Double(), V2 = new Point2D.Double(),tHatCenter = new Point2D.Double();V1 = v2SubII(d.get(center - 1), d.get(center));V2 = v2SubII(d.get(center), d.get(center + 1));tHatCenter.x = (V1.x + V2.x) / 2.0;tHatCenter.y = (V1.y + V2.y) / 2.0;tHatCenter = v2Normalize(tHatCenter);return tHatCenter;', 'comment': '/*** Approximate unit tangents at "center" of digitized curve.** @param d Digitized points.* @param center Index to "center" end of region.*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2SubII(Point2D.Double a, Point2D.Double b) {Point2D.Double c = new Point2D.Double();c.x = a.x - b.x;c.y = a.y - b.y;return (c);', 'comment': '/*** Subtract Vector a from Vector b.** @param a Vector a - the value is not changed by this method* @param b Vector b - the value is not changed by this method* @return Vector a subtracted by Vector v.*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2Normalize(Point2D.Double v) {double len = v2Length(v);if (len != 0.0) {v.x /= len;v.y /= len;}return v;', 'comment': '/*** Normalizes the input vector and returns it.*/', 'coherence': 1}, {'code': 'private static Point2D.Double bezierII(int degree, Point2D.Double[] V, double t) {int i, j;Point2D.Double q; /* Point on curve at parameter t  */Point2D.Double[] vTemp; /* Local copy of control points    *//* Copy array  */vTemp = new Point2D.Double[degree + 1];for (i = 0; i <= degree; i++) {vTemp[i] = (Point2D.Double) V[i].clone();}/* Triangle computation  */for (i = 1; i <= degree; i++) {for (j = 0; j <= degree - i; j++) {vTemp[j].x = (1.0 - t) * vTemp[j].x + t * vTemp[j + 1].x;vTemp[j].y = (1.0 - t) * vTemp[j].y + t * vTemp[j + 1].y;}}q = vTemp[0];return q;', 'comment': '/*** Evaluate a Bezier curve at a particular parameter value.** @param degree  The degree of the bezier curve.* @param V  Array of control points.* @param t  Parametric value to find point for.*/', 'coherence': 1}, {'code': 'private static double v2DistanceBetween2Points(Point2D.Double a, Point2D.Double b) {return Math.sqrt(v2SquaredDistanceBetween2Points(a, b));', 'comment': '/*** Return the distance between two points*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2Scale(Point2D.Double v, double newlen) {double len = v2Length(v);if (len != 0.0) {v.x *= newlen / len;v.y *= newlen / len;}return v;', 'comment': '/*** Scales the input vector to the new length and returns it.* <p>* This method alters the value of the input point!*/', 'coherence': 1}, {'code': 'public static ArrayList<Integer> findCorners(java.util.List<Point2D.Double> digitizedPoints, double minAngle, double minDistance) {ArrayList<Integer> cornerIndices = new ArrayList<Integer>();double squaredDistance = minDistance * minDistance;int previousCorner = -1;double previousCornerAngle = 0;for (int i = 1, n = digitizedPoints.size(); i < n - 1; i++) {Point2D.Double p = digitizedPoints.get(i);// search for a preceding point for corner detectionPoint2D.Double prev = null;boolean intersectsPreviousCorner = false;for (int j = i - 1; j >= 0; j--) {if (j == previousCorner || v2SquaredDistanceBetween2Points(digitizedPoints.get(j), p) >= squaredDistance) {prev = digitizedPoints.get(j);intersectsPreviousCorner = j < previousCorner;break;}}if (prev == null) {continue;}// search for a succeeding point for corner detectionPoint2D.Double next = null;for (int j = i + 1; j < n; j++) {if (v2SquaredDistanceBetween2Points(digitizedPoints.get(j), p) >= squaredDistance) {next = digitizedPoints.get(j);break;}}if (next == null) {continue;}double aPrev = Math.atan2(prev.y - p.y, prev.x - p.x);double aNext = Math.atan2(next.y - p.y, next.x - p.x);double angle = Math.abs(aPrev - aNext);if (angle < Math.PI - minAngle || angle > Math.PI + minAngle) {if (intersectsPreviousCorner) {cornerIndices.set(cornerIndices.size() - 1, i);} else {cornerIndices.add(i);}previousCorner = i;previousCornerAngle = angle;}}return cornerIndices;', 'comment': '/*** Finds corners in the provided point list, and returns their indices.** @param digitizedPoints List of digitized points.* @param minAngle Minimal angle for corner points* @param minDistance Minimal distance between a point and adjacent points* for corner detection* @return list of corner indices.*/', 'coherence': 1}, {'code': 'private static double v2SquaredDistanceBetween2Points(Point2D.Double a, Point2D.Double b) {double dx = a.x - b.x;double dy = a.y - b.y;return (dx * dx) + (dy * dy);', 'comment': '/*** Return the distance between two points*/', 'coherence': 1}, {'code': 'private static Point2D.Double computeRightTangent(ArrayList<Point2D.Double> d, int end) {Point2D.Double tHat2 = new Point2D.Double();tHat2 = v2SubII(d.get(end - 1), d.get(end));tHat2 = v2Normalize(tHat2);return tHat2;', 'comment': '/*** Approximate unit tangents at "right" endpoint of digitized curve.** @param d Digitized points.* @param end Index to "right" end of region.*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2Negate(Point2D.Double v) {v.x = -v.x;v.y = -v.y;return v;', 'comment': '/*** Negates the input vector and returns it.*/', 'coherence': 1}, {'code': 'private static void addCurveTo(Point2D.Double[] bezCurve, BezierPath bezierPath, double errorSquared, boolean connectsCorners) {BezierPath.Node lastNode = bezierPath.get(bezierPath.size() - 1);double error = Math.sqrt(errorSquared);if (connectsCorners && Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[1].x, bezCurve[1].y, error) &&Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[2].x, bezCurve[2].y, error)) {bezierPath.lineTo(bezCurve[3].x, bezCurve[3].y);} else {bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y,bezCurve[2].x, bezCurve[2].y,bezCurve[3].x, bezCurve[3].y);', 'comment': '/*** Adds the curve to the bezier path.** @param bezCurve* @param bezierPath*/', 'coherence': 1}, {'code': 'public static ArrayList<ArrayList<Point2D.Double>> splitAtCorners(java.util.List<Point2D.Double> digitizedPoints, double maxAngle, double minDistance) {ArrayList<Integer> cornerIndices = findCorners(digitizedPoints, maxAngle, minDistance);ArrayList<ArrayList<Point2D.Double>> segments = new ArrayList<ArrayList<Point2D.Double>>(cornerIndices.size() + 1);if (cornerIndices.size() == 0) {segments.add(new ArrayList<Point2D.Double>(digitizedPoints));} else {segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(0, cornerIndices.get(0) + 1)));for (int i = 1; i < cornerIndices.size(); i++) {segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(cornerIndices.get(i - 1), cornerIndices.get(i) + 1)));}segments.add(new ArrayList<Point2D.Double>(digitizedPoints.subList(cornerIndices.get(cornerIndices.size() - 1), digitizedPoints.size())));}return segments;', 'comment': '/*** Splits the digitized points into multiple segments at each corner point.* <p>* Corner points are both contained as the last point of a segment and* the first point of a subsequent segment.** @param digitizedPoints Digitized points* @param maxAngle maximal angle in radians between the current point and its* predecessor and successor up to which the point does not break the* digitized list into segments. Recommended value 44Â° = 44 * 180d / Math.PI* @return Segments of digitized points, each segment having less than maximal* angle between points.*/', 'coherence': 1}, {'code': 'private static double v2Dot(Point2D.Double a, Point2D.Double b) {return (a.x * b.x) + (a.y * b.y);', 'comment': '/*** Return the dot product of vectors a and b.*/', 'coherence': 1}, {'code': 'private static Point2D.Double computeLeftTangent(ArrayList<Point2D.Double> d, int end) {Point2D.Double tHat1 = new Point2D.Double();tHat1 = v2SubII(d.get(end + 1), d.get(end));tHat1 = v2Normalize(tHat1);return tHat1;', 'comment': '/*** Approximate unit tangents at "left" endpoint of digitized curve.** @param d Digitized points.* @param end Index to "left" end of region.*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2AddII(Point2D.Double a, Point2D.Double b) {Point2D.Double c = new Point2D.Double();c.x = a.x + b.x;c.y = a.y + b.y;return c;', 'comment': '/*** Return vector sum = a+b.*/', 'coherence': 1}, {'code': 'private static Point2D.Double[] generateBezier(ArrayList<Point2D.Double> d, int first, int last, double[] uPrime, Point2D.Double tHat1, Point2D.Double tHat2) {Point2D.Double[] bezCurve;bezCurve = new Point2D.Double[4];for (int i = 0; i < bezCurve.length; i++) {bezCurve[i] = new Point2D.Double();}/*  Use the Wu/Barsky heuristic*/double dist = v2DistanceBetween2Points(d.get(last), d.get(first)) / 3.0;bezCurve[0] = d.get(first);bezCurve[3] = d.get(last);v2Add(bezCurve[0], v2Scale(tHat1, dist), bezCurve[1]);v2Add(bezCurve[3], v2Scale(tHat2, dist), bezCurve[2]);return (bezCurve);', 'comment': '/*** Use least-squares method to find Bezier control points for region.** @param d  Array of digitized points.* @param first Indice of first point in d.* @param last Indice of last point in d.* @param uPrime Parameter values for region .* @param tHat1 Unit tangent vectors at start point.* @param tHat2 Unit tanget vector at end point.* @return A cubic bezier curve consisting of 4 control points.*/', 'coherence': 1}, {'code': 'private static ArrayList<Point2D.Double> removeCoincidentPoints(java.util.List<Point2D.Double> digitizedPoints) {java.util.ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();if (digitizedPoints.size() > 0) {Point2D.Double prev = digitizedPoints.get(0);cleaned.add(prev);for (Point2D.Double p : digitizedPoints) {if (!prev.equals(p)) {cleaned.add(p);prev = p;}}}return cleaned;', 'comment': '/*** Removes sequences of coincident points.* <p>* The purpose of this method, is to clean up a list of digitized points* for later processing using method {@link #splitAtCorners}.* <p>* Use this method only, if you know that the digitized points contain no* quantization errors - which is never the case, unless you want to debug* the curve fitting algorithm of this class.** @param digitizedPoints Digitized points* @return Digitized points without subsequent duplicates.*/', 'coherence': 1}, {'code': 'private static double v2SquaredLength(Point2D.Double a) {return (a.x * a.x) + (a.y * a.y);', 'comment': '/*** Returns squared length of input vector.*/', 'coherence': 1}, {'code': 'public static BezierPath fitBezierPath(java.util.List<Point2D.Double> digitizedPoints, double error) {// Split into segments at cornersArrayList<ArrayList<Point2D.Double>> segments = new ArrayList<ArrayList<Point2D.Double>>();segments = splitAtCorners(digitizedPoints, 77 / 180d * Math.PI, error * error);// Clean up the data in the segmentsfor (int i = 0, n = segments.size(); i < n; i++) {ArrayList<Point2D.Double> seg = segments.get(i);seg = removeClosePoints(seg, error * 2);seg = reduceNoise(seg, 0.8);segments.set(i, seg);}// Create fitted bezier pathBezierPath fittedPath = new BezierPath();// Quickly deal with empty datasetboolean isEmpty = false;for (ArrayList<Point2D.Double> seg : segments) {if (seg.isEmpty()) {isEmpty = false;break;}}if (!isEmpty) {// Process each segment of digitized pointsdouble errorSquared = error * error;for (ArrayList<Point2D.Double> seg : segments) {switch (seg.size()) {case 0:break;case 1:fittedPath.add(new BezierPath.Node(seg.get(0)));break;case 2:if (fittedPath.isEmpty()) {fittedPath.add(new BezierPath.Node(seg.get(0)));}fittedPath.lineTo(seg.get(1).x, seg.get(1).y);break;default:if (fittedPath.isEmpty()) {fittedPath.add(new BezierPath.Node(seg.get(0)));}/*  Unit tangent vectors at endpoints */Point2D.Double tHat1 = new Point2D.Double();Point2D.Double tHat2 = new Point2D.Double();tHat1 = computeLeftTangent(seg, 0);tHat2 = computeRightTangent(seg, seg.size() - 1);fitCubic(seg, 0, seg.size() - 1, tHat1, tHat2, errorSquared, fittedPath);break;}}}return fittedPath;', 'comment': '/*** Fits a bezier path to the specified list of digitized points.** @param digitizedPoints digited points.* @param error the maximal allowed error between the bezier path and the* digitized points.*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2ScaleIII(Point2D.Double v, double s) {Point2D.Double result = new Point2D.Double();result.x = v.x * s;result.y = v.y * s;return result;', 'comment': '/*** Scales the input vector by the specified factor and returns it.* <p>* This method alters the value of the input point!*/', 'coherence': 1}, {'code': 'private static double computeMaxError(ArrayList<Point2D.Double> d, int first, int last, Point2D.Double[] bezCurve, double[] u, int[] splitPoint) {int i;double maxDist;    /*  Maximum error */double dist;    /*  Current error */Point2D.Double P = new Point2D.Double(); /*  Point on curve */Point2D.Double v = new Point2D.Double(); /*  Vector from point to curve */splitPoint[0] = (last - first + 1) / 2;maxDist = 0.0;for (i = first + 1; i < last; i++) {P = bezierII(3, bezCurve, u[i - first]);v = v2SubII(P, d.get(i));dist = v2SquaredLength(v);if (dist >= maxDist) {maxDist = dist;splitPoint[0] = i;}}return (maxDist);', 'comment': '/*** Find the maximum squared distance of digitized points* to fitted curve.** @param d Digitized points.* @param first Indice of first point of region in d.* @param last Indice of last point of region in d.* @param bezCurve Fitted Bezier curve* @param u Parameterization of points** @param splitPoint Point of maximum error (input/output parameter, must be* an array of 1)*/', 'coherence': 1}, {'code': 'public static ArrayList<Point2D.Double> removeClosePoints(java.util.List<Point2D.Double> digitizedPoints, double minDistance) {if (minDistance == 0) {return removeCoincidentPoints(digitizedPoints);} else {double squaredDistance = minDistance * minDistance;java.util.ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();if (digitizedPoints.size() > 0) {Point2D.Double prev = digitizedPoints.get(0);cleaned.add(prev);for (Point2D.Double p : digitizedPoints) {if (v2SquaredDistanceBetween2Points(prev, p) > squaredDistance) {cleaned.add(p);prev = p;}}if (!prev.equals(digitizedPoints.get(digitizedPoints.size() - 1))) {cleaned.set(cleaned.size() - 1, digitizedPoints.get(digitizedPoints.size() - 1));}}return cleaned;', 'comment': '/*** Removes points which are closer together than the specified minimal* distance.* <p>* The minimal distance should be chosen dependent on the size and resolution of the* display device, and on the sampling rate. A good value for mouse input* on a display with 100% Zoom factor is 2.* <p>* The purpose of this method, is to remove points, which add no additional* information about the shape of the curve from the list of digitized points.* <p>* The cleaned up set of digitized points gives better results, when used* as input for method {@link #splitAtCorners}.** @param digitizedPoints Digitized points* @param minDistance minimal distance between two points. If minDistance is* 0, this method only removes sequences of coincident points.* @return Digitized points with a minimal distance.*/', 'coherence': 1}, {'code': 'private static Point2D.Double v2Add(Point2D.Double a, Point2D.Double b, Point2D.Double c) {c.x = a.x + b.x;c.y = a.y + b.y;return c;', 'comment': '/*** Return vector sum c = a+b.* <p>* This method alters the value of c.*/', 'coherence': 1}, {'code': "private static double newtonRaphsonRootFind(Point2D.Double[] Q, Point2D.Double P, double u) {double numerator, denominator;Point2D.Double[] Q1 = new Point2D.Double[3], Q2 = new Point2D.Double[2];  /*  Q' and Q''      */Point2D.Double Q_u = new Point2D.Double(), Q1_u = new Point2D.Double(), Q2_u = new Point2D.Double(); /*u evaluated at Q, Q', & Q''  */double uPrime;    /*  Improved u  */int i;/* Compute Q(u)  */Q_u = bezierII(3, Q, u);/* Generate control vertices for Q'  */for (i = 0; i <= 2; i++) {Q1[i] = new Point2D.Double((Q[i + 1].x - Q[i].x) * 3.0,(Q[i + 1].y - Q[i].y) * 3.0);}/* Generate control vertices for Q'' */for (i = 0; i <= 1; i++) {Q2[i] = new Point2D.Double((Q1[i + 1].x - Q1[i].x) * 2.0,(Q1[i + 1].y - Q1[i].y) * 2.0);}/* Compute Q'(u) and Q''(u)  */Q1_u = bezierII(2, Q1, u);Q2_u = bezierII(1, Q2, u);/* Compute f(u)/f'(u) */numerator = (Q_u.x - P.x) * (Q1_u.x) + (Q_u.y - P.y) * (Q1_u.y);denominator = (Q1_u.x) * (Q1_u.x) + (Q1_u.y) * (Q1_u.y) +(Q_u.x - P.x) * (Q2_u.x) + (Q_u.y - P.y) * (Q2_u.y);/* u = u - f(u)/f'(u) */uPrime = u - (numerator / denominator);return (uPrime);", 'comment': '/*** Use Newton-Raphson iteration to find better root.** @param Q  Current fitted bezier curve.* @param P  Digitized point.* @param u  Parameter value vor P.*/', 'coherence': 1}, {'code': 'public boolean isDone() {return (index >= path.size() + (path.isClosed() ? 2 : 0));', 'comment': '/*** Tests if there are more points to read.* @return true if there are more points to read*/', 'coherence': 1}, {'code': 'public int getWindingRule() {return path.getWindingRule();', 'comment': '/*** Return the winding rule for determining the interior of the* path.* @see PathIterator#WIND_EVEN_ODD* @see PathIterator#WIND_NON_ZERO*/', 'coherence': 1}, {'code': 'public int currentSegment(float[] coords) {int numCoords = 0;int type = 0;if (index == path.size()) {// We only get here for closed pathsif (path.size() > 1) {BezierPath.Node previous = path.get(path.size() - 1);BezierPath.Node current = path.get(0);if ((previous.mask & BezierPath.C2_MASK) == 0) {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 1;type = SEG_LINETO;coords[0] = (float) current.x[0];coords[1] = (float) current.y[0];} else {numCoords = 2;type = SEG_QUADTO;coords[0] = (float) current.x[1];coords[1] = (float) current.y[1];coords[2] = (float) current.x[0];coords[3] = (float) current.y[0];}} else {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 2;type = SEG_QUADTO;coords[0] = (float) previous.x[2];coords[1] = (float) previous.y[2];coords[2] = (float) current.x[0];coords[3] = (float) current.y[0];} else {numCoords = 3;type = SEG_CUBICTO;coords[0] = (float) previous.x[2];coords[1] = (float) previous.y[2];coords[2] = (float) current.x[1];coords[3] = (float) current.y[1];coords[4] = (float) current.x[0];coords[5] = (float) current.y[0];}}}} else if (index > path.size()) {// We only get here for closed pathsreturn SEG_CLOSE;} else if (index == 0) {BezierPath.Node current = path.get(index);coords[0] = (float) current.x[0];coords[1] = (float) current.y[0];numCoords = 1;type = SEG_MOVETO;} else if (index < path.size()) {BezierPath.Node current = path.get(index);BezierPath.Node previous = path.get(index - 1);if ((previous.mask & BezierPath.C2_MASK) == 0) {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 1;type = SEG_LINETO;coords[0] = (float) current.x[0];coords[1] = (float) current.y[0];} else {numCoords = 2;type = SEG_QUADTO;coords[0] = (float) current.x[1];coords[1] = (float) current.y[1];coords[2] = (float) current.x[0];coords[3] = (float) current.y[0];}} else {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 2;type = SEG_QUADTO;coords[0] = (float) previous.x[2];coords[1] = (float) previous.y[2];coords[2] = (float) current.x[0];coords[3] = (float) current.y[0];} else {numCoords = 3;type = SEG_CUBICTO;coords[0] = (float) previous.x[2];coords[1] = (float) previous.y[2];coords[2] = (float) current.x[1];coords[3] = (float) current.y[1];coords[4] = (float) current.x[0];coords[5] = (float) current.y[0];}}}if (affine != null) {affine.transform(coords, 0, coords, 0, numCoords);}return type;', 'comment': '/*** Returns the coordinates and type of the current path segment in* the iteration.* The return value is the path segment type:* SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.* A float array of length 6 must be passed in and may be used to* store the coordinates of the point(s).* Each point is stored as a pair of float x,y coordinates.* SEG_MOVETO and SEG_LINETO types will return one point,* SEG_QUADTO will return two points,* SEG_CUBICTO will return 3 points* and SEG_CLOSE will not return any points.* @see PathIterator#SEG_MOVETO* @see PathIterator#SEG_LINETO* @see PathIterator#SEG_QUADTO* @see PathIterator#SEG_CUBICTO* @see PathIterator#SEG_CLOSE*/', 'coherence': 1}, {'code': 'public void next() {if (! isDone()) {index++;', 'comment': '/*** Moves the iterator to the next segment of the path forwards* along the primary direction of traversal as long as there are* more points in that direction.*/', 'coherence': 1}, {'code': 'public BezierPathIterator(BezierPath path, AffineTransform at) {this.path = path;this.affine = at;', 'comment': '/*** Constructs an iterator given a BezierPath and an optional* AffineTransform.* @see BezierPath#getPathIterator*/', 'coherence': 1}, {'code': 'public int currentSegment(double[] coords) {int numCoords = 0;int type = 0;if (index == path.size()) {// We only get here for closed pathsif (path.size() > 1) {BezierPath.Node previous = path.get(path.size() - 1);BezierPath.Node current = path.get(0);if ((previous.mask & BezierPath.C2_MASK) == 0) {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 1;type = SEG_LINETO;coords[0] = current.x[0];coords[1] = current.y[0];} else {numCoords = 2;type = SEG_QUADTO;coords[0] = current.x[1];coords[1] = current.y[1];coords[2] = current.x[0];coords[3] = current.y[0];}} else {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 2;type = SEG_QUADTO;coords[0] = previous.x[2];coords[1] = previous.y[2];coords[2] = current.x[0];coords[3] = current.y[0];} else {numCoords = 3;type = SEG_CUBICTO;coords[0] = previous.x[2];coords[1] = previous.y[2];coords[2] = current.x[1];coords[3] = current.y[1];coords[4] = current.x[0];coords[5] = current.y[0];}}}} else if (index > path.size()) {// We only get here for closed pathsreturn SEG_CLOSE;} else if (index == 0) {BezierPath.Node current = path.get(index);coords[0] = current.x[0];coords[1] = current.y[0];numCoords = 1;type = SEG_MOVETO;} else if (index < path.size()) {BezierPath.Node current = path.get(index);BezierPath.Node previous = path.get(index - 1);if ((previous.mask & BezierPath.C2_MASK) == 0) {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 1;type = SEG_LINETO;coords[0] = current.x[0];coords[1] = current.y[0];} else {numCoords = 2;type = SEG_QUADTO;coords[0] = current.x[1];coords[1] = current.y[1];coords[2] = current.x[0];coords[3] = current.y[0];}} else {if ((current.mask & BezierPath.C1_MASK) == 0) {numCoords = 2;type = SEG_QUADTO;coords[0] = previous.x[2];coords[1] = previous.y[2];coords[2] = current.x[0];coords[3] = current.y[0];} else {numCoords = 3;type = SEG_CUBICTO;coords[0] = previous.x[2];coords[1] = previous.y[2];coords[2] = current.x[1];coords[3] = current.y[1];coords[4] = current.x[0];coords[5] = current.y[0];}}}if (affine != null) {affine.transform(coords, 0, coords, 0, numCoords);} else {System.arraycopy(coords, 0, coords, 0, numCoords);}return type;', 'comment': '/*** Returns the coordinates and type of the current path segment in* the iteration.* The return value is the path segment type:* SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.* A double array of length 6 must be passed in and may be used to* store the coordinates of the point(s).* Each point is stored as a pair of double x,y coordinates.* SEG_MOVETO and SEG_LINETO types will return one point,* SEG_QUADTO will return two points,* SEG_CUBICTO will return 3 points* and SEG_CLOSE will not return any points.* @see PathIterator#SEG_MOVETO* @see PathIterator#SEG_LINETO* @see PathIterator#SEG_QUADTO* @see PathIterator#SEG_CUBICTO* @see PathIterator#SEG_CLOSE*/', 'coherence': 1}, {'code': 'public BezierPathIterator(BezierPath path) {this(path, null);', 'comment': '/*** Constructs an iterator given a BezierPath.* @see BezierPath#getPathIterator*/', 'coherence': 1}, {'code': 'public static Polygon getConvexHullPolygon(List<Point> points) {Polygon convexHull = new Polygon();for (Point p : getConvexHull(points.toArray(new Point[points.size()]))) {convexHull.addPoint(p.x, p.y);}return convexHull;', 'comment': '/*** Computes the convex hull from a set of points.** @param points* @return convex hull of the points as a polygon object.*/', 'coherence': 1}, {'code': 'public static Polygon2D.Double getConvexHullPath2D(List<Point2D.Double> points) {Polygon2D.Double convexHull = new Polygon2D.Double();for (Point p : getConvexHull(points.toArray(new Point[points.size()]))) {convexHull.add(p);}return convexHull;', 'comment': '/*** Computes the convex hull from a set of points.** @param points* @return convex hull of the points as a Polygon2D object.*/', 'coherence': 1}, {'code': 'public static List<Point2D.Double> getConvexHull2D(List<Point2D.Double> points) {return Arrays.asList(getConvexHull2D(points.toArray(new Point2D.Double[points.size()])));', 'comment': '/*** Computes the convex hull from a set of points.** @param points* @return convex hull of the points*/', 'coherence': 1}, {'code': 'public static Point[] getConvexHull(Point[] points) {// Quickly return if no work is neededif (points.length < 3) {return points.clone();}// Sort points from left to right O(n log n)Point[] sorted = points.clone();Arrays.sort(sorted, new Comparator<Point>() {public int compare(Point o1, Point o2) {int v = o1.x - o2.x;return (v == 0) ? o1.y - o2.y : v;}});Point[] hull = new Point[sorted.length + 2];// Process upper part of convex hull O(n)int upper = 0; // Number of points in upper part of convex hullhull[upper++] = sorted[0];hull[upper++] = sorted[1];for (int i = 2; i < sorted.length; i++) {hull[upper++] = sorted[i];while (upper > 2 && !isRightTurn(hull[upper - 3], hull[upper - 2], hull[upper - 1])) {hull[upper - 2] = hull[upper - 1];upper--;}}// Process lower part of convex hull O(n)int lower = upper; // (lower - number + 1) = number of points in the lower part of the convex hullhull[lower++] = sorted[sorted.length - 2];for (int i = sorted.length - 3; i >= 0; i--) {hull[lower++] = sorted[i];while (lower - upper > 1 && !isRightTurn(hull[lower - 3], hull[lower - 2], hull[lower - 1])) {hull[lower - 2] = hull[lower - 1];lower--;}}lower -= 1;// Reduce arrayPoint[] convexHull = new Point[lower];System.arraycopy(hull, 0, convexHull, 0, lower);return convexHull;', 'comment': '/*** Computes the convex hull from a set of points.** @param points* @return convex hull of the points*/', 'coherence': 1}, {'code': 'public static Point2D.Double[] getConvexHull2D(Point2D.Double[] points) {// Quickly return if no work is neededif (points.length < 3) {return points.clone();}// Sort points from left to right O(n log n)Point2D.Double[] sorted = points.clone();Arrays.sort(sorted, new Comparator<Point2D.Double>() {public int compare(Point2D.Double o1, Point2D.Double o2) {double v = o1.x - o2.x;if (v == 0) {v = o1.y - o2.y;}return (v > 0) ? 1 : ((v < 0) ? -1 : 0);}});Point2D.Double[] hull = new Point2D.Double[sorted.length + 2];// Process upper part of convex hull O(n)int upper = 0; // Number of points in upper part of convex hullhull[upper++] = sorted[0];hull[upper++] = sorted[1];for (int i = 2; i < sorted.length; i++) {hull[upper++] = sorted[i];while (upper > 2 && !isRightTurn2D(hull[upper - 3], hull[upper - 2], hull[upper - 1])) {hull[upper - 2] = hull[upper - 1];upper--;}}// Process lower part of convex hull O(n)int lower = upper; // (lower - number + 1) = number of points in the lower part of the convex hullhull[lower++] = sorted[sorted.length - 2];for (int i = sorted.length - 3; i >= 0; i--) {hull[lower++] = sorted[i];while (lower - upper > 1 && !isRightTurn2D(hull[lower - 3], hull[lower - 2], hull[lower - 1])) {hull[lower - 2] = hull[lower - 1];lower--;}}lower -= 1;// Reduce arrayPoint2D.Double[] convexHull = new Point2D.Double[lower];System.arraycopy(hull, 0, convexHull, 0, lower);return convexHull;', 'comment': '/*** Computes the convex hull from a set of points.** @param points* @return convex hull of the points*/', 'coherence': 1}, {'code': 'public static List<Point> getConvexHull(List<Point> points) {return Arrays.asList(getConvexHull(points.toArray(new Point[points.size()])));', 'comment': '/*** Computes the convex hull from a set of points.** @param points* @return convex hull of the points*/', 'coherence': 1}, {'code': 'public static boolean isRightTurn2D(Point.Double p1, Point.Double p2, Point.Double p3) {if (p1.equals(p2)||p2.equals(p3)) {// no right turn if points are at same locationreturn false;}double val = (p2.x * p3.y + p1.x * p2.y + p3.x * p1.y) - (p2.x * p1.y + p3.x * p2.y + p1.x * p3.y);return val > 0;', 'comment': '/*** Returns true, if the three given points make a right turn.** @param p1 first point* @param p2 second point* @param p3 third point* @return true if right turn.*/', 'coherence': 1}, {'code': 'public static boolean isRightTurn(Point p1, Point p2, Point p3) {if (p1.equals(p2)||p2.equals(p3)) {// no right turn if points are at same locationreturn false;}double val = (p2.x * p3.y + p1.x * p2.y + p3.x * p1.y) - (p2.x * p1.y + p3.x * p2.y + p1.x * p3.y);return val > 0;', 'comment': '/*** Returns true, if the three given points make a right turn.** @param p1 first point* @param p2 second point* @param p3 third point* @return true if right turn.*/', 'coherence': 1}, {'code': 'public static Polygon2D.Double getConvexHullPath2D(Shape shape) {List<Point2D.Double> points = new LinkedList<Point2D.Double>();double[] coords = new double[6];for (PathIterator i = shape.getPathIterator(null); !i.isDone(); i.next()) {switch (i.currentSegment(coords)) {case PathIterator.SEG_CLOSE:break;case PathIterator.SEG_MOVETO:case PathIterator.SEG_LINETO:points.add(new Point2D.Double(coords[0], coords[1]));break;case PathIterator.SEG_QUADTO:points.add(new Point2D.Double(coords[0], coords[1]));points.add(new Point2D.Double(coords[2], coords[3]));break;case PathIterator.SEG_CUBICTO:points.add(new Point2D.Double(coords[0], coords[1]));points.add(new Point2D.Double(coords[2], coords[3]));points.add(new Point2D.Double(coords[4], coords[5]));break;}}Polygon2D.Double convexHull = new Polygon2D.Double();for (Point2D.Double p : getConvexHull2D(points.toArray(new Point2D.Double[points.size()]))) {convexHull.add(p);}return convexHull;', 'comment': '/*** Computes the convex hull from a shape.** @param shape an arbitray shape* @return convex hull of the points as a Polygon2D object.*/', 'coherence': 1}, {'code': 'public void setDragTracker(DragTracker newValue) {dragTracker = newValue;', 'comment': '/*** Method to set a {@code DragTracker}. If you specify null, the* {@code SelectionTool} uses the {@code DefaultDragTracker}.*/', 'coherence': 1}, {'code': 'public void setHandleTracker(HandleTracker newValue) {handleTracker = newValue;', 'comment': '/*** Method to set a {@code HandleTracker}. If you specify null, the* {@code SelectionTool} uses the {@code DefaultHandleTracker}.*/', 'coherence': 1}, {'code': 'public void setSelectAreaTracker(SelectAreaTracker newValue) {selectAreaTracker = newValue;', 'comment': '/*** Method to set a {@code SelectAreaTracker}. If you specify null, the* {@code SelectionTool} uses the {@code DefaultSelectAreaTracker}.*/', 'coherence': 1}, {'code': 'public void setSelectBehindEnabled(boolean newValue) {boolean oldValue = isSelectBehindEnabled;isSelectBehindEnabled = newValue;firePropertyChange(SELECT_BEHIND_ENABLED_PROPERTY, oldValue, newValue);', 'comment': '/*** Sets the selectBehindEnabled property.* This is a bound property.** @param newValue The new value.*/', 'coherence': 1}, {'code': 'protected HandleTracker getHandleTracker(Handle handle) {if (handleTracker == null) {handleTracker = new DefaultHandleTracker();}handleTracker.setHandles(handle, getView().getCompatibleHandles(handle));return handleTracker;', 'comment': '/*** Method to get a {@code HandleTracker} which handles user interaction* for the specified handle.*/', 'coherence': 1}, {'code': 'protected DragTracker getDragTracker(Figure f) {if (dragTracker == null) {dragTracker = new DefaultDragTracker();}dragTracker.setDraggedFigure(f);return dragTracker;', 'comment': '/*** Method to get a {@code DragTracker} which handles user interaction* for dragging the specified figure.*/', 'coherence': 1}, {'code': 'public SelectionTool() {tracker = getSelectAreaTracker();trackerHandler = new TrackerHandler();tracker.addToolListener(trackerHandler);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public boolean isSelectBehindEnabled() {return isSelectBehindEnabled;', 'comment': '/*** Returns the value of the selectBehindEnabled property.* This is a bound property.** @return The property value.*/', 'coherence': 1}, {'code': 'protected SelectAreaTracker getSelectAreaTracker() {if (selectAreaTracker == null) {selectAreaTracker = new DefaultSelectAreaTracker();}return selectAreaTracker;', 'comment': '/*** Method to get a {@code SelectAreaTracker} which handles user interaction* for selecting an area on the drawing.*/', 'coherence': 1}, {'code': 'public static void main(String[] args) {try {// Set up the DefaultDOMFactoryDefaultDOMFactory factory = new DefaultDOMFactory();factory.addStorableClass("MyElementName", MyObject.class);// Create a DOMStorable objectMyObject obj = new MyObject("Hello World");System.out.println("The name of the original object is:" + obj.getName());// Write the object into a DOM, and then serialize the DOM into a StringNanoXMLDOMOutput out = new NanoXMLDOMOutput(factory);out.writeObject(obj);StringWriter writer = new StringWriter();out.save(writer);String serializedString = writer.toString();System.out.println("\\nThe serialized representation of the object is:\\n" + serializedString);// Deserialize a DOM from a String, and then read the object from the DOMStringReader reader = new StringReader(serializedString);NanoXMLDOMInput in = new NanoXMLDOMInput(factory, reader);MyObject obj2 = (MyObject) in.readObject();System.out.println("\\nThe name of the restored object is:" + obj2.getName());} catch (IOException ex) {Logger.getLogger(DefaultDOMStorableSample.class.getName()).log(Level.SEVERE, null, ex);', 'comment': '/** DOM Storable objects must have a non-argument constructor. */', 'coherence': 1}, {'code': 'public static void main(String[] args) {SwingUtilities.invokeLater(new Runnable() {public void run() {// Create a simple drawing consisting of three// text areas and an elbow connection.LabeledEllipseFigure ta = new LabeledEllipseFigure();ta.setBounds(new Point2D.Double(10, 10), new Point2D.Double(100, 100));LabeledEllipseFigure tb = new LabeledEllipseFigure();tb.setBounds(new Point2D.Double(220, 120), new Point2D.Double(310, 210));LabeledEllipseFigure tc = new LabeledEllipseFigure();tc.setBounds(new Point2D.Double(220, 10), new Point2D.Double(310, 100));Drawing drawing = new DefaultDrawing();drawing.add(ta);drawing.add(tb);drawing.add(tc);// Create a frame with a drawing view and a drawing editorJFrame f = new JFrame("My Drawing");f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);f.setSize(400, 300);DrawingView view = new DefaultDrawingView();view.setDrawing(drawing);f.add(view.getComponent());f.add(new JLabel("Press space bar to toggle handles."), BorderLayout.SOUTH);DrawingEditor editor = new DefaultDrawingEditor();editor.add(view);editor.setTool(new DelegationSelectionTool());f.setVisible(true);', 'comment': '/*** Return default handles from the presentation figure.*/', 'coherence': 1}, {'code': 'private static Drawing createDrawing() {// Create a default drawing with// input/output formats for basic clipboard support.DefaultDrawing drawing = new DefaultDrawing();drawing.addInputFormat(new SerializationInputOutputFormat());drawing.addOutputFormat(new SerializationInputOutputFormat());return drawing;', 'comment': '/*** Creates a drawing with input and output formats, so that drawing figures* can be copied and pasted between drawing views.** @return a drawing*/', 'coherence': 1}, {'code': 'private static Drawing createDrawing() {// Create a default drawing with// input/output formats for basic clipboard support.DefaultDrawing drawing = new DefaultDrawing();drawing.addInputFormat(new SerializationInputOutputFormat());drawing.addOutputFormat(new SerializationInputOutputFormat());drawing.addOutputFormat(new ImageOutputFormat());return drawing;', 'comment': '/*** Creates a drawing with input and output formats, so that drawing figures* can be copied and pasted between drawing views.** @return a drawing*/', 'coherence': 1}, {'code': 'public void read(URI f, URIChooser fc) throws IOException {try {final Drawing drawing = createDrawing();boolean success = false;for (InputFormat sfi : drawing.getInputFormats()) {try {sfi.read(new File(f), drawing, true);success = true;break;} catch (Exception e) {// try with the next input format}}if (!success) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");throw new IOException(labels.getFormatted("file.open.unsupportedFileFormat.message", URIUtil.getName(f)));}SwingUtilities.invokeAndWait(new Runnable() {public void run() {view.getDrawing().removeUndoableEditListener(undo);view.setDrawing(drawing);view.getDrawing().addUndoableEditListener(undo);undo.discardAllEdits();}});} catch (InterruptedException e) {InternalError error = new InternalError();e.initCause(e);throw error;} catch (InvocationTargetException e) {InternalError error = new InternalError();error.initCause(e);throw error;', 'comment': '/*** Reads the view from the specified uri.*/', 'coherence': 1}, {'code': 'public void write(URI f, URIChooser fc) throws IOException {Drawing drawing = view.getDrawing();OutputFormat outputFormat = drawing.getOutputFormats().get(0);outputFormat.write(new File(f), drawing);', 'comment': '/*** Writes the view to the specified uri.*/', 'coherence': 1}, {'code': 'public DrawingEditor getEditor() {return editor;', 'comment': '/*** Gets the drawing editor of the view.*/', 'coherence': 1}, {'code': 'public void setEditor(DrawingEditor newValue) {if (editor != null) {editor.remove(view);}editor = newValue;if (editor != null) {editor.add(view);', 'comment': '/*** Sets a drawing editor for the view.*/', 'coherence': 1}, {'code': 'private void initComponents() {scrollPane = new javax.swing.JScrollPane();view = new org.jhotdraw.draw.DefaultDrawingView();setLayout(new java.awt.BorderLayout());scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);scrollPane.setViewportView(view);add(scrollPane, java.awt.BorderLayout.CENTER);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public void init() {super.init();initComponents();JPanel zoomButtonPanel = new JPanel(new BorderLayout());scrollPane.setLayout(new PlacardScrollPaneLayout());scrollPane.setBorder(new EmptyBorder(0,0,0,0));setEditor(new DefaultDrawingEditor());undo = new UndoRedoManager();view.setDrawing(createDrawing());view.getDrawing().addUndoableEditListener(undo);initActions();undo.addPropertyChangeListener(new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {setHasUnsavedChanges(undo.hasSignificantEdits());}});ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");JPanel placardPanel = new JPanel(new BorderLayout());javax.swing.AbstractButton pButton;pButton = ButtonFactory.createZoomButton(view);pButton.putClientProperty("Quaqua.Button.style","placard");pButton.putClientProperty("Quaqua.Component.visualMargin",new Insets(0,0,0,0));pButton.setFont(UIManager.getFont("SmallSystemFont"));placardPanel.add(pButton, BorderLayout.WEST);pButton = ButtonFactory.createToggleGridButton(view);pButton.putClientProperty("Quaqua.Button.style","placard");pButton.putClientProperty("Quaqua.Component.visualMargin",new Insets(0,0,0,0));pButton.setFont(UIManager.getFont("SmallSystemFont"));labels.configureToolBarButton(pButton, "view.toggleGrid.placard");placardPanel.add(pButton, BorderLayout.EAST);scrollPane.add(placardPanel, JScrollPane.LOWER_LEFT_CORNER);', 'comment': '/*** Initializes the view.*/', 'coherence': 1}, {'code': 'private void initActions() {getActionMap().put(UndoAction.ID, undo.getUndoAction());getActionMap().put(RedoAction.ID, undo.getRedoAction());', 'comment': '/*** Initializes view specific actions.*/', 'coherence': 1}, {'code': 'public Pageable createPageable() {return new DrawingPageable(view.getDrawing());', 'comment': '/*** Creates a Pageable object for printing the view.*/', 'coherence': 1}, {'code': 'public void clear() {final Drawing newDrawing = createDrawing();try {SwingUtilities.invokeAndWait(new Runnable() {public void run() {view.getDrawing().removeUndoableEditListener(undo);view.setDrawing(newDrawing);view.getDrawing().addUndoableEditListener(undo);undo.discardAllEdits();}});} catch (InvocationTargetException ex) {ex.printStackTrace();} catch (InterruptedException ex) {ex.printStackTrace();', 'comment': '/*** Clears the view.*/', 'coherence': 1}, {'code': 'protected Drawing createDrawing() {Drawing drawing = new QuadTreeDrawing();DOMStorableInputOutputFormat ioFormat =new DOMStorableInputOutputFormat(new DrawFigureFactory());drawing.addInputFormat(ioFormat);ImageFigure prototype = new ImageFigure();drawing.addInputFormat(new ImageInputFormat(prototype));drawing.addInputFormat(new TextInputFormat(new TextFigure()));TextAreaFigure taf = new TextAreaFigure();taf.setBounds(new Point2D.Double(10,10), new Point2D.Double(60,40));drawing.addInputFormat(new TextInputFormat(taf));drawing.addOutputFormat(ioFormat);drawing.addOutputFormat(new ImageOutputFormat());return drawing;', 'comment': '/*** Creates a new Drawing for this view.*/', 'coherence': 1}, {'code': 'public static void main(String[] args) {ResourceBundleUtil.setVerbose(true);Application app;String os = System.getProperty("os.name").toLowerCase();if (os.startsWith("mac")) {app = new OSXApplication();} else if (os.startsWith("win")) {//app = new DefaultMDIApplication();app = new SDIApplication();} else {app = new SDIApplication();}DrawApplicationModel model = new DrawApplicationModel();model.setName("JHotDraw Draw");model.setVersion(Main.class.getPackage().getImplementationVersion());model.setCopyright("Copyright 2006-2009 (c) by the authors of JHotDraw and all its contributors.\\n" +"This software is licensed under LGPL or Creative Commons 3.0 Attribution.");model.setViewClassName("org.jhotdraw.samples.draw.DrawView");app.setModel(model);app.launch(args);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public AnimationSample() {initComponents();DefaultDrawingView view = new DefaultDrawingView();view.setDrawingDoubleBuffered(false);add(view);setSize(400, 400);Drawing d = new DefaultDrawing();d.set(CANVAS_FILL_COLOR, new Color(0x76a9d2));final EllipseFigure ellipse = new EllipseFigure(160, 160, 80, 80);ellipse.set(STROKE_WIDTH, 7d);d.add(ellipse);view.setDrawing(d);Timer t = new Timer(10, new ActionListener() {public void actionPerformed(ActionEvent e) {double alpha = 2d * Math.PI * (System.currentTimeMillis() % 1000) / 1000d;ellipse.willChange();ellipse.setBounds(new Rectangle2D.Double(160 + Math.sin(alpha) * 100, 160 + Math.cos(alpha) * 100, 80, 80));ellipse.changed();}});t.setRepeats(true);t.start();', 'comment': '/** Creates new form AnimationSample */', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponentsprivate void initComponents() {setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);pack();', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public FontChooserMain() {initComponents();add(new JFontChooser());', 'comment': '/** Creates new form FontChooserMain */', 'coherence': 1}, {'code': '@SuppressWarnings("unchecked")// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponentsprivate void initComponents() {setLayout(new java.awt.BorderLayout());', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public MethodDescriptor[] getMethodDescriptors() {return getMdescriptor();', 'comment': "/*** Gets the bean's <code>MethodDescriptor</code>s.** @return  An array of MethodDescriptors describing the methods* implemented by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'private void initComponents() {//GEN-BEGIN:initComponentstoolButtonGroup = new javax.swing.ButtonGroup();drawingPanel = new org.jhotdraw.samples.draw.DrawingPanel();jToolBar1 = new javax.swing.JToolBar();loadButton = new javax.swing.JButton();saveButton = new javax.swing.JButton();FormListener formListener = new FormListener();getContentPane().add(drawingPanel, java.awt.BorderLayout.CENTER);jToolBar1.setFloatable(false);loadButton.setText("Laden");loadButton.addActionListener(formListener);jToolBar1.add(loadButton);saveButton.setText("Speichern");saveButton.addActionListener(formListener);jToolBar1.add(saveButton);getContentPane().add(jToolBar1, java.awt.BorderLayout.SOUTH);', 'comment': '/** This method is called from within the init() method to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public void init() {// Set look and feel// -----------------try {UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());} catch (Throwable e) {// Do nothing.// If we can\'t set the desired look and feel, UIManager does// automaticaly the right thing for us.}// Display copyright info while we are loading the data// ----------------------------------------------------Container c = getContentPane();c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));String[] lines = getAppletInfo().split("\\n");//Strings.split(getAppletInfo(), \'\\n\');for (int i = 0; i < lines.length; i++) {c.add(new JLabel(lines[i]));}// We load the data using a worker thread// --------------------------------------new Worker<Drawing>() {protected Drawing construct() throws IOException {Drawing result;if (getParameter("data") != null && getParameter("data").length() > 0) {NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), new StringReader(getParameter("data")));result = (Drawing) domi.readObject(0);} else if (getParameter("datafile") != null) {InputStream in = null;try {URL url = new URL(getDocumentBase(), getParameter("datafile"));in = url.openConnection().getInputStream();NanoXMLDOMInput domi = new NanoXMLDOMInput(new DrawFigureFactory(), in);result = (Drawing) domi.readObject(0);} finally {if (in != null) {in.close();}}} else {result = null;}return result;}protected void done(Drawing result) {Container c = getContentPane();c.setLayout(new BorderLayout());c.removeAll();initComponents();if (result != null) {setDrawing(result);}}@Overrideprotected void failed(Throwable result) {Container c = getContentPane();c.setLayout(new BorderLayout());c.removeAll();initComponents();getDrawing().add(new TextFigure(result.toString()));result.printStackTrace();}protected void finished() {Container c = getContentPane();boolean isLiveConnect;try {Class.forName("netscape.javascript.JSObject");isLiveConnect = true;} catch (Throwable t) {isLiveConnect = false;}loadButton.setEnabled(isLiveConnect && getParameter("dataread") != null);saveButton.setEnabled(isLiveConnect && getParameter("datawrite") != null);if (isLiveConnect) {String methodName = getParameter("dataread");if (methodName.indexOf(\'(\') > 0) {methodName = methodName.substring(0, methodName.indexOf(\'(\') - 1);}JSObject win = JSObject.getWindow(DrawLiveConnectApplet.this);Object data = win.call(methodName, new Object[0]);if (data instanceof String) {setData((String) data);}}c.validate();}}.start();', 'comment': '/** Initializes the applet DrawApplet */', 'coherence': 1}, {'code': 'private void readViewportAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a)throws IOException {Object value;Double doubleValue;// width of the viewportvalue = readAttribute(elem, "width", null);if (DEBUG) {System.out.println("SVGInputFormat READ viewport w/h factors:" + viewportStack.peek().widthPercentFactor + "," + viewportStack.peek().heightPercentFactor);}if (value != null) {doubleValue = toLength(elem, (String) value, viewportStack.peek().widthPercentFactor);VIEWPORT_WIDTH.put(a, doubleValue);}// height of the viewportvalue = readAttribute(elem, "height", null);if (value != null) {doubleValue = toLength(elem, (String) value, viewportStack.peek().heightPercentFactor);VIEWPORT_HEIGHT.put(a, doubleValue);}//\'viewport-fill\'//Value:   "none" | <color> | inherit//Initial:   none//Applies to:  viewport-creating elements//Inherited:   no//Percentages:   N/A//Media:   visual//Animatable:   yes//Computed value:     "none" or specified <color> value, except inheritvalue = toPaint(elem, readInheritColorAttribute(elem, "viewport-fill", "none"));if (value == null || (value instanceof Color)) {VIEWPORT_FILL.put(a, (Color) value);}//\'viewport-fill-opacity\'//Value:  <opacity-value> | inherit//Initial:   1.0//Applies to:  viewport-creating elements//Inherited:   no//Percentages:   N/A//Media:   visual//Animatable:   yes//Computed value:     Specified value, except inheritdoubleValue = toDouble(elem, readAttribute(elem, "viewport-fill-opacity", "1.0"));VIEWPORT_FILL_OPACITY.put(a, doubleValue);', 'comment': '/* Reads viewport attributes.*/', 'coherence': 1}, {'code': 'private void readTSpanElement(IXMLElement elem, DefaultStyledDocument doc)throws IOException {try {if (elem.getContent() != null) {doc.insertString(doc.getLength(), toText(elem, elem.getContent()), null);} else {for (IXMLElement node : elem.getChildren()) {if (node instanceof IXMLElement) {IXMLElement child = (IXMLElement) node;if (node.getName() != null && node.getName().equals("tspan")) {readTSpanElement((IXMLElement) node, doc);} else {if (DEBUG) {System.out.println("SVGInputFormat unknown text node " + node.getName());}}} else {if (node.getName() == null) {doc.insertString(doc.getLength(), toText(elem, node.getContent()), null);}}}}} catch (BadLocationException e) {InternalError ex = new InternalError(e.getMessage());ex.initCause(e);throw ex;', 'comment': '/*** Reads an SVG "tspan" element.*/', 'coherence': 1}, {'code': 'private Figure readEllipseElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);readShapeAttributes(elem, a);double cx = toWidth(elem, readAttribute(elem, "cx", "0"));double cy = toHeight(elem, readAttribute(elem, "cy", "0"));double rx = toWidth(elem, readAttribute(elem, "rx", "0"));double ry = toHeight(elem, readAttribute(elem, "ry", "0"));Figure figure = factory.createEllipse(cx, cy, rx, ry, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "ellipse" element.*/', 'coherence': 1}, {'code': 'private double readInheritFontSizeAttribute(IXMLElement elem, String attributeName, String defaultValue)throws IOException {String value = null;if (elem.hasAttribute(attributeName, SVG_NAMESPACE)) {value = elem.getAttribute(attributeName, SVG_NAMESPACE, null);} else if (elem.hasAttribute(attributeName)) {value = elem.getAttribute(attributeName, null);} else if (elem.getParent() != null &&(elem.getParent().getNamespace() == null ||elem.getParent().getNamespace().equals(SVG_NAMESPACE))) {return readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue);} else {value = defaultValue;}if (value.equals("inherit")) {return readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue);} else if (SVG_ABSOLUTE_FONT_SIZES.containsKey(value)) {return SVG_ABSOLUTE_FONT_SIZES.get(value);} else if (SVG_RELATIVE_FONT_SIZES.containsKey(value)) {return SVG_RELATIVE_FONT_SIZES.get(value) * readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue);} else if (value.endsWith("%")) {double factor = Double.valueOf(value.substring(0, value.length() - 1));return factor * readInheritFontSizeAttribute(elem.getParent(), attributeName, defaultValue);} else {//return toScaledNumber(elem, value);return toNumber(elem, value);', 'comment': '/*** Reads a font size attribute that is inherited.* As specified by* http://www.w3.org/TR/SVGMobile12/text.html#FontPropertiesUsedBySVG* http://www.w3.org/TR/2006/CR-xsl11-20060220/#font-getChildCount*/--------------//"http://www.w3.org/Graphics/SVG/feature/1.2/#Listener",--------------', 'coherence': 1}, {'code': 'private Point2D.Double[] toPoints(IXMLElement elem, String str) throws IOException {StringTokenizer tt = new StringTokenizer(str, " ,");Point2D.Double[] points = new Point2D.Double[tt.countTokens() / 2];for (int i = 0; i < points.length; i++) {points[i] = new Point2D.Double(toNumber(elem, tt.nextToken()),toNumber(elem, tt.nextToken()));}return points;', 'comment': '/*** Returns a value as a Point2D.Double array.* as specified in http://www.w3.org/TR/SVGMobile12/shapes.html#PointsBNF*/', 'coherence': 1}, {'code': 'public SVGInputFormat() {this(new DefaultSVGFigureFactory());', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'private String readInheritAttribute(IXMLElement elem, String attributeName, String defaultValue) {if (elem.hasAttribute(attributeName, SVG_NAMESPACE)) {String value = elem.getAttribute(attributeName, SVG_NAMESPACE, null);if (value.equals("inherit")) {return readInheritAttribute(elem.getParent(), attributeName, defaultValue);} else {return value;}} else if (elem.hasAttribute(attributeName)) {String value = elem.getAttribute(attributeName);if (value.equals("inherit")) {return readInheritAttribute(elem.getParent(), attributeName, defaultValue);} else {return value;}} else if (elem.getParent() != null &&(elem.getParent().getNamespace() == null ||elem.getParent().getNamespace().equals(SVG_NAMESPACE))) {return readInheritAttribute(elem.getParent(), attributeName, defaultValue);} else {return defaultValue;', 'comment': '/*** Reads an attribute that is inherited.*/--------------//"http://www.w3.org/Graphics/SVG/feature/1.2/#Scripting",--------------', 'coherence': 1}, {'code': 'private BezierPath[] toPath(IXMLElement elem, String str) throws IOException {LinkedList<BezierPath> paths = new LinkedList<BezierPath>();BezierPath path = null;Point2D.Double p = new Point2D.Double();Point2D.Double c1 = new Point2D.Double();Point2D.Double c2 = new Point2D.Double();StreamPosTokenizer tt;if (toPathTokenizer == null) {tt = new StreamPosTokenizer(new StringReader(str));tt.resetSyntax();tt.parseNumbers();tt.parseExponents();tt.parsePlusAsNumber();tt.whitespaceChars(0, \' \');tt.whitespaceChars(\',\', \',\');toPathTokenizer = tt;} else {tt = toPathTokenizer;tt.setReader(new StringReader(str));}char nextCommand = \'M\';char command = \'M\';Commands:while (tt.nextToken() != StreamPosTokenizer.TT_EOF) {if (tt.ttype > 0) {command = (char) tt.ttype;} else {command = nextCommand;tt.pushBack();}BezierPath.Node node;switch (command) {case \'M\':// absolute-moveto x yif (path != null) {paths.add(path);}path = new BezierPath();if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'M\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'M\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.moveTo(p.x, p.y);nextCommand = \'L\';break;case \'m\':// relative-moveto dx dyif (path != null) {paths.add(path);}path = new BezierPath();if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'m\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'m\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.moveTo(p.x, p.y);nextCommand = \'l\';break;case \'Z\':case \'z\':// close pathp.x = path.get(0).x[0];p.y = path.get(0).y[0];// If the last point and the first point are the same, we// can merge themif (path.size() > 1) {BezierPath.Node first = path.get(0);BezierPath.Node last = path.get(path.size() - 1);if (first.x[0] == last.x[0] &&first.y[0] == last.y[0]) {if ((last.mask & BezierPath.C1_MASK) != 0) {first.mask |= BezierPath.C1_MASK;first.x[1] = last.x[1];first.y[1] = last.y[1];}path.remove(path.size() - 1);}}path.setClosed(true);break;case \'L\':// absolute-lineto x yif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'L\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'L\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.lineTo(p.x, p.y);nextCommand = \'L\';break;case \'l\':// relative-lineto dx dyif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'l\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'l\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.lineTo(p.x, p.y);nextCommand = \'l\';break;case \'H\':// absolute-horizontal-lineto xif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'H\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;path.lineTo(p.x, p.y);nextCommand = \'H\';break;case \'h\':// relative-horizontal-lineto dxif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'h\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;path.lineTo(p.x, p.y);nextCommand = \'h\';break;case \'V\':// absolute-vertical-lineto yif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'V\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.lineTo(p.x, p.y);nextCommand = \'V\';break;case \'v\':// relative-vertical-lineto dyif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'v\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.lineTo(p.x, p.y);nextCommand = \'v\';break;case \'C\':// absolute-curveto x1 y1 x2 y2 x yif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x1 coordinate missing for \'C\' at position " + tt.getStartPosition() + " in " + str);}c1.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y1 coordinate missing for \'C\' at position " + tt.getStartPosition() + " in " + str);}c1.y = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x2 coordinate missing for \'C\' at position " + tt.getStartPosition() + " in " + str);}c2.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y2 coordinate missing for \'C\' at position " + tt.getStartPosition() + " in " + str);}c2.y = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'C\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'C\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);nextCommand = \'C\';break;case \'c\':// relative-curveto dx1 dy1 dx2 dy2 dx dyif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx1 coordinate missing for \'c\' at position " + tt.getStartPosition() + " in " + str);}c1.x = p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy1 coordinate missing for \'c\' at position " + tt.getStartPosition() + " in " + str);}c1.y = p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx2 coordinate missing for \'c\' at position " + tt.getStartPosition() + " in " + str);}c2.x = p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy2 coordinate missing for \'c\' at position " + tt.getStartPosition() + " in " + str);}c2.y = p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'c\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'c\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);nextCommand = \'c\';break;case \'S\':// absolute-shorthand-curveto x2 y2 x ynode = path.get(path.size() - 1);c1.x = node.x[0] * 2d - node.x[1];c1.y = node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x2 coordinate missing for \'S\' at position " + tt.getStartPosition() + " in " + str);}c2.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y2 coordinate missing for \'S\' at position " + tt.getStartPosition() + " in " + str);}c2.y = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'S\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'S\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);nextCommand = \'S\';break;case \'s\':// relative-shorthand-curveto dx2 dy2 dx dynode = path.get(path.size() - 1);c1.x = node.x[0] * 2d - node.x[1];c1.y = node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx2 coordinate missing for \'s\' at position " + tt.getStartPosition() + " in " + str);}c2.x = p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy2 coordinate missing for \'s\' at position " + tt.getStartPosition() + " in " + str);}c2.y = p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'s\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'s\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);nextCommand = \'s\';break;case \'Q\':// absolute-quadto x1 y1 x yif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x1 coordinate missing for \'Q\' at position " + tt.getStartPosition() + " in " + str);}c1.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y1 coordinate missing for \'Q\' at position " + tt.getStartPosition() + " in " + str);}c1.y = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'Q\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'Q\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.quadTo(c1.x, c1.y, p.x, p.y);nextCommand = \'Q\';break;case \'q\':// relative-quadto dx1 dy1 dx dyif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx1 coordinate missing for \'q\' at position " + tt.getStartPosition() + " in " + str);}c1.x = p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy1 coordinate missing for \'q\' at position " + tt.getStartPosition() + " in " + str);}c1.y = p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'q\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'q\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.quadTo(c1.x, c1.y, p.x, p.y);nextCommand = \'q\';break;case \'T\':// absolute-shorthand-quadto x ynode = path.get(path.size() - 1);c1.x = node.x[0] * 2d - node.x[1];c1.y = node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'T\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'T\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.quadTo(c1.x, c1.y, p.x, p.y);nextCommand = \'T\';break;case \'t\':// relative-shorthand-quadto dx dynode = path.get(path.size() - 1);c1.x = node.x[0] * 2d - node.x[1];c1.y = node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for \'t\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for \'t\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.quadTo(c1.x, c1.y, p.x, p.y);nextCommand = \'s\';break;case \'A\': {// absolute-elliptical-arc rx ry x-axis-rotation large-arc-flag sweep-flag x yif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("rx coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}// If rX or rY have negative signs, these are dropped;// the absolute value is used instead.double rx = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("ry coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}double ry = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x-axis-rotation missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}double xAxisRotation = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("large-arc-flag missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}boolean largeArcFlag = tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("sweep-flag missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}boolean sweepFlag = tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}p.x = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}p.y = tt.nval;path.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p.x, p.y);nextCommand = \'A\';break;}case \'a\': {// absolute-elliptical-arc rx ry x-axis-rotation large-arc-flag sweep-flag x yif (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("rx coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}// If rX or rY have negative signs, these are dropped;// the absolute value is used instead.double rx = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("ry coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}double ry = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x-axis-rotation missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}double xAxisRotation = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("large-arc-flag missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}boolean largeArcFlag = tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("sweep-flag missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}boolean sweepFlag = tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}p.x += tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for \'A\' at position " + tt.getStartPosition() + " in " + str);}p.y += tt.nval;path.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p.x, p.y);nextCommand = \'a\';break;}default:if (DEBUG) {System.out.println("SVGInputFormat.toPath aborting after illegal path command: " + command + " found in path " + str);}break Commands;//throw new IOException("Illegal command: "+command);}}if (path != null) {paths.add(path);}return paths.toArray(new BezierPath[paths.size()]);', 'comment': "/*** Returns a value as a BezierPath array.* as specified in http://www.w3.org/TR/SVGMobile12/paths.html#PathDataBNF** Also supports elliptical arc commands 'a' and 'A' as specified in* http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands*/", 'coherence': 1}, {'code': 'private String readAttribute(IXMLElement elem, String attributeName, String defaultValue) {if (elem.hasAttribute(attributeName, SVG_NAMESPACE)) {String value = elem.getAttribute(attributeName, SVG_NAMESPACE, null);if (value.equals("inherit")) {return readAttribute(elem.getParent(), attributeName, defaultValue);} else {return value;}} else if (elem.hasAttribute(attributeName)) {String value = elem.getAttribute(attributeName, null);if (value.equals("inherit")) {return readAttribute(elem.getParent(), attributeName, defaultValue);} else {return value;}} else {return defaultValue;', 'comment': '/*** Reads an attribute that is not inherited, unless its value is "inherit".*/--------------//"http://www.w3.org/Graphics/SVG/feature/1.2/#TimedAnimation",--------------', 'coherence': 1}, {'code': 'private Figure readAElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);CompositeFigure g = factory.createG(a);String href = readAttribute(elem, "xlink:href", null);if (href == null) {href = readAttribute(elem, "href", null);}String target = readAttribute(elem, "target", null);if (DEBUG) {System.out.println("SVGInputFormat.readAElement href=" + href);}for (IXMLElement node : elem.getChildren()) {if (node instanceof IXMLElement) {IXMLElement child = (IXMLElement) node;Figure childFigure = readElement(child);// skip invisible elementsif (readAttribute(child, "visibility", "visible").equals("visible") &&!readAttribute(child, "display", "inline").equals("none")) {if (childFigure != null) {g.basicAdd(childFigure);}}if (childFigure != null) {childFigure.set(LINK, href);childFigure.set(LINK_TARGET, target);} else {if (DEBUG) {System.out.println("SVGInputFormat <a> has no child figure");}}}}return (g.getChildCount() == 1) ? g.getChild(0) : g;', 'comment': '/*** Reads an SVG "a" element.*/', 'coherence': 1}, {'code': 'private double toNumber(IXMLElement elem, String str) throws IOException {return toLength(elem, str, viewportStack.peek().numberFactor);', 'comment': '/*** Returns a value as a number.* http://www.w3.org/TR/SVGMobile12/types.html#DataTypeNumber*/', 'coherence': 1}, {'code': 'private void readTextAttributes(IXMLElement elem, Map<AttributeKey, Object> a)throws IOException {Object value;//\'text-anchor\'//Value:    start | middle | end | inherit//Initial:    start//Applies to:    \'text\' IXMLElement//Inherited:    yes//Percentages:    N/A//Media:    visual//Animatable:    yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "text-anchor", "start");if (SVG_TEXT_ANCHORS.get(value) != null) {TEXT_ANCHOR.put(a, SVG_TEXT_ANCHORS.get(value));}//\'display-align\'//Value:    auto | before | center | after | inherit//Initial:    auto//Applies to:    \'textArea\'//Inherited:    yes//Percentages:    N/A//Media:    visual//Animatable:    yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "display-align", "auto");// XXX - Implement me properlyif (!value.equals("auto")) {if (value.equals("center")) {TEXT_ANCHOR.put(a, TextAnchor.MIDDLE);} else if (value.equals("before")) {TEXT_ANCHOR.put(a, TextAnchor.END);}}//text-align//Value:   start | end | center | inherit//Initial:   start//Applies to:   textArea elements//Inherited:   yes//Percentages:   N/A//Media:   visual//Animatable:   yesvalue = readInheritAttribute(elem, "text-align", "start");// XXX - Implement me properlyif (!value.equals("start")) {TEXT_ALIGN.put(a, SVG_TEXT_ALIGNS.get(value));', 'comment': '/* Reads text attributes as listed in* http://www.w3.org/TR/SVGMobile12/feature.html#Text*/', 'coherence': 1}, {'code': 'private String toText(IXMLElement elem, String value) throws IOException {String space = readInheritAttribute(elem, "xml:space", "default");if (space.equals("default")) {return value.trim().replaceAll("\\\\s++", " ");} else /*if (space.equals("preserve"))*/ {return value;', 'comment': '/*** Reads a text attribute.* This method takes the "xml:space" attribute into account.* http://www.w3.org/TR/SVGMobile12/text.html#WhiteSpace*/', 'coherence': 1}, {'code': 'private void readUseShapeAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a)throws IOException {Object objectValue;String value;double doubleValue;//\'color\'// Value:    <color> | inherit// Initial:     depends on user agent// Applies to:    None. Indirectly affects other properties via currentColor// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified <color> value, except inherit//// value = readInheritAttribute(elem, "color", "black");// if (DEBUG) System.out.println("color="+value);//\'color-rendering\'// Value:     auto | optimizeSpeed | optimizeQuality | inherit// Initial:     auto// Applies to:     container elements , graphics elements and \'animateColor\'// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inherit//// value = readInheritAttribute(elem, "color-rendering", "auto");// if (DEBUG) System.out.println("color-rendering="+value);// \'fill\'// Value:    <paint> | inherit (See Specifying paint)// Initial:     black// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     "none", system paint, specified <color> value or absolute IRIobjectValue = readInheritColorAttribute(elem, "fill", null);if (objectValue != null) {objectValue = toPaint(elem, (String) objectValue);if (objectValue instanceof Color) {FILL_COLOR.put(a, (Color) objectValue);} else if (objectValue instanceof Gradient) {FILL_GRADIENT.put(a, (Gradient) objectValue);} else if (objectValue == null) {FILL_COLOR.put(a, null);} else {FILL_COLOR.put(a, null);if (DEBUG) {System.out.println("SVGInputFormat not implemented  fill=" + objectValue);}}}//\'fill-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "fill-opacity", null);if (objectValue != null) {FILL_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));}// \'fill-rule\'// Value:   nonzero | evenodd | inherit// Initial:    nonzero// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "fill-rule", null);if (value != null) {WINDING_RULE.put(a, SVG_FILL_RULES.get(value));}//\'stroke\'//Value:    <paint> | inherit (See Specifying paint)//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     "none", system paint, specified <color> value// or absolute IRIobjectValue = toPaint(elem, readInheritColorAttribute(elem, "stroke", null));if (objectValue != null) {if (objectValue instanceof Color) {STROKE_COLOR.put(a, (Color) objectValue);} else if (objectValue instanceof Gradient) {STROKE_GRADIENT.put(a, (Gradient) objectValue);}}//\'stroke-dasharray\'//Value:     none | <dasharray> | inherit//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes (non-additive)//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-dasharray", null);if (value != null && !value.equals("none")) {String[] values = toCommaSeparatedArray(value);double[] dashes = new double[values.length];for (int i = 0; i < values.length; i++) {dashes[i] = toNumber(elem, values[i]);}STROKE_DASHES.put(a, dashes);}//\'stroke-dashoffset\'//Value:    <length> | inherit//Initial:     0//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "stroke-dashoffset", null);if (objectValue != null) {doubleValue = toNumber(elem, (String) objectValue);STROKE_DASH_PHASE.put(a, doubleValue);IS_STROKE_DASH_FACTOR.put(a, false);}//\'stroke-linecap\'//Value:     butt | round | square | inherit//Initial:     butt//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-linecap", null);if (value != null) {STROKE_CAP.put(a, SVG_STROKE_LINECAPS.get(value));}//\'stroke-linejoin\'//Value:     miter | round | bevel | inherit//Initial:     miter//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-linejoin", null);if (value != null) {STROKE_JOIN.put(a, SVG_STROKE_LINEJOINS.get(value));}//\'stroke-miterlimit\'//Value:     <miterlimit> | inherit//Initial:     4//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "stroke-miterlimit", null);if (objectValue != null) {doubleValue = toDouble(elem, (String) objectValue, 4d, 1d, Double.MAX_VALUE);STROKE_MITER_LIMIT.put(a, doubleValue);IS_STROKE_MITER_LIMIT_FACTOR.put(a, false);}//\'stroke-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "stroke-opacity", null);if (objectValue != null) {STROKE_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));}//\'stroke-width\'//Value:    <length> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "stroke-width", null);if (objectValue != null) {doubleValue = toNumber(elem, (String) objectValue);STROKE_WIDTH.put(a, doubleValue);', 'comment': '/* Reads shape attributes for the SVG "use" element.*/', 'coherence': 1}, {'code': 'private double toHeight(IXMLElement elem, String str) throws IOException {// XXX - Compute yPercentFactor from viewportreturn toLength(elem, str,viewportStack.peek().heightPercentFactor);', 'comment': '/*** Returns a value as a height.* http://www.w3.org/TR/SVGMobile12/types.html#DataTypeLength*/--------------//"http://www.w3.org/Graphics/SVG/feature/1.2/#Audio",--------------', 'coherence': 1}, {'code': 'private void flattenStyles(IXMLElement elem)throws IOException {if (elem.getName() != null && elem.getName().equals("style") &&readAttribute(elem, "type", "").equals("text/css") &&elem.getContent() != null) {CSSParser cssParser = new CSSParser();cssParser.parse(elem.getContent(), styleManager);} else {if (elem.getNamespace() == null ||elem.getNamespace().equals(SVG_NAMESPACE)) {String style = readAttribute(elem, "style", null);if (style != null) {for (String styleProperty : style.split(";")) {String[] stylePropertyElements = styleProperty.split(":");if (stylePropertyElements.length == 2 &&!elem.hasAttribute(stylePropertyElements[0].trim(), SVG_NAMESPACE)) {//if (DEBUG) System.out.println("flatten:"+Arrays.toString(stylePropertyElements));elem.setAttribute(stylePropertyElements[0].trim(), SVG_NAMESPACE, stylePropertyElements[1].trim());}}}styleManager.applyStylesTo(elem);for (IXMLElement node : elem.getChildren()) {if (node instanceof IXMLElement) {IXMLElement child = (IXMLElement) node;flattenStyles(child);', 'comment': '/*** Flattens all CSS styles.* Styles defined in a "style" attribute and in CSS rules are converted* into attributes with the same name.*/--------------/*** Factor for number values in the user coordinate system.* This is the smaller value of width / viewBox.width and height / viewBox.height.*/--------------', 'coherence': 1}, {'code': 'public static AffineTransform toTransform(IXMLElement elem, String str) throws IOException {AffineTransform t = new AffineTransform();if (str != null && !str.equals("none")) {StreamPosTokenizer tt = new StreamPosTokenizer(new StringReader(str));tt.resetSyntax();tt.wordChars(\'a\', \'z\');tt.wordChars(\'A\', \'Z\');tt.wordChars(128 + 32, 255);tt.whitespaceChars(0, \' \');tt.whitespaceChars(\',\', \',\');tt.parseNumbers();tt.parseExponents();while (tt.nextToken() != StreamPosTokenizer.TT_EOF) {if (tt.ttype != StreamPosTokenizer.TT_WORD) {throw new IOException("Illegal transform " + str);}String type = tt.sval;if (tt.nextToken() != \'(\') {throw new IOException("\'(\' not found in transform " + str);}if (type.equals("matrix")) {double[] m = new double[6];for (int i = 0; i < 6; i++) {if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("Matrix value " + i + " not found in transform " + str + " token:" + tt.ttype + " " + tt.sval);}m[i] = tt.nval;}t.concatenate(new AffineTransform(m));} else if (type.equals("translate")) {double tx, ty;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("X-translation value not found in transform " + str);}tx = tt.nval;if (tt.nextToken() == StreamPosTokenizer.TT_NUMBER) {ty = tt.nval;} else {tt.pushBack();ty = 0;}t.translate(tx, ty);} else if (type.equals("scale")) {double sx, sy;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("X-scale value not found in transform " + str);}sx = tt.nval;if (tt.nextToken() == StreamPosTokenizer.TT_NUMBER) {sy = tt.nval;} else {tt.pushBack();sy = sx;}t.scale(sx, sy);} else if (type.equals("rotate")) {double angle, cx, cy;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("Angle value not found in transform " + str);}angle = tt.nval;if (tt.nextToken() == StreamPosTokenizer.TT_NUMBER) {cx = tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("Y-center value not found in transform " + str);}cy = tt.nval;} else {tt.pushBack();cx = cy = 0;}t.rotate(angle * Math.PI / 180d, cx, cy);} else if (type.equals("skewX")) {double angle;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("Skew angle not found in transform " + str);}angle = tt.nval;t.concatenate(new AffineTransform(1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0));} else if (type.equals("skewY")) {double angle;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("Skew angle not found in transform " + str);}angle = tt.nval;t.concatenate(new AffineTransform(1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0));} else if (type.equals("ref")) {System.err.println("SVGInputFormat warning: ignored ref(...) transform attribute in element " + elem);while (tt.nextToken() != \')\' && tt.ttype != StreamPosTokenizer.TT_EOF) {// ignore tokens between brackets}tt.pushBack();} else {throw new IOException("Unknown transform " + type + " in " + str + " in element " + elem);}if (tt.nextToken() != \')\') {throw new IOException("\')\' not found in transform " + str);}}}return t;', 'comment': '/* Converts an SVG transform attribute value into an AffineTransform* as specified in* http://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute*/', 'coherence': 1}, {'code': 'private void identifyElements(IXMLElement elem) {identifiedElements.put(elem.getAttribute("id"), elem);identifiedElements.put(elem.getAttribute("xml:id"), elem);for (IXMLElement child : elem.getChildren()) {identifyElements(child);', 'comment': '/*** Puts all elments with an "id" or an "xml:id" attribute into the* hashtable {@code identifiedElements}.*/', 'coherence': 1}, {'code': 'public static String[] toCommaSeparatedArray(String str) throws IOException {return str.split("\\\\s*,\\\\s*");', 'comment': '/*** Returns a value as a String array.* The values are separated by commas with optional white space.*/', 'coherence': 1}, {'code': 'public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {long start = System.currentTimeMillis();this.figures = new LinkedList<Figure>();IXMLParser parser;try {parser = XMLParserFactory.createDefaultXMLParser();} catch (Exception ex) {InternalError e = new InternalError("Unable to instantiate NanoXML Parser");e.initCause(ex);throw e;}System.out.println("SVGInputFormat parser created " + (System.currentTimeMillis() - start));IXMLReader reader = new StdXMLReader(in);parser.setReader(reader);System.out.println("SVGInputFormat reader created " + (System.currentTimeMillis() - start));try {document = (IXMLElement) parser.parse();} catch (XMLException ex) {IOException e = new IOException(ex.getMessage());e.initCause(ex);throw e;}System.out.println("SVGInputFormat document created " + (System.currentTimeMillis() - start));// Search for the first \'svg\' element in the XML document// in preorder sequenceIXMLElement svg = document;Stack<Iterator<IXMLElement>> stack = new Stack<Iterator<IXMLElement>>();LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();ll.add(document);stack.push(ll.iterator());while (!stack.empty() && stack.peek().hasNext()) {Iterator<IXMLElement> iter = stack.peek();IXMLElement node = iter.next();Iterator<IXMLElement> children = (node.getChildren() == null) ? null : node.getChildren().iterator();if (!iter.hasNext()) {stack.pop();}if (children != null && children.hasNext()) {stack.push(children);}if (node.getName() != null &&node.getName().equals("svg") &&(node.getNamespace() == null ||node.getNamespace().equals(SVG_NAMESPACE))) {svg = node;break;}}if (svg.getName() == null ||!svg.getName().equals("svg") ||(svg.getNamespace() != null &&!svg.getNamespace().equals(SVG_NAMESPACE))) {throw new IOException("\'svg\' element expected: " + svg.getName());}//long end1 = System.currentTimeMillis();// Flatten CSS StylesinitStorageContext(document);flattenStyles(svg);//long end2 = System.currentTimeMillis();readElement(svg);long end = System.currentTimeMillis();if (DEBUG) {System.out.println("SVGInputFormat elapsed:" + (end - start));}/*if (DEBUG) System.out.println("SVGInputFormat read:"+(end1-start));if (DEBUG) System.out.println("SVGInputFormat flatten:"+(end2-end1));if (DEBUG) System.out.println("SVGInputFormat build:"+(end-end2));*/if (replace) {drawing.removeAllChildren();}drawing.addAll(figures);if (replace) {Viewport viewport = viewportStack.firstElement();drawing.set(VIEWPORT_FILL, VIEWPORT_FILL.get(viewport.attributes));drawing.set(VIEWPORT_FILL_OPACITY, VIEWPORT_FILL_OPACITY.get(viewport.attributes));drawing.set(VIEWPORT_HEIGHT, VIEWPORT_HEIGHT.get(viewport.attributes));drawing.set(VIEWPORT_WIDTH, VIEWPORT_WIDTH.get(viewport.attributes));}// Get rid of all objects we don\'t need anymore to help garbage collector.document.dispose();identifiedElements.clear();elementObjects.clear();viewportStack.clear();styleManager.clear();document = null;identifiedElements = null;elementObjects = null;viewportStack = null;styleManager = null;', 'comment': '/*** This is the main reading method.** @param in The input stream.* @param drawing The drawing to which this method adds figures.* @param replace Whether attributes on the drawing object* should by changed by this method. Set this to false, when reading individual* images from the clipboard.*/--------------/*** Factor for percent values relative to Viewport height.*/--------------', 'coherence': 1}, {'code': 'private String readInheritColorAttribute(IXMLElement elem, String attributeName, String defaultValue) {String value = null;if (elem.hasAttribute(attributeName, SVG_NAMESPACE)) {value = elem.getAttribute(attributeName, SVG_NAMESPACE, null);if (value.equals("inherit")) {return readInheritColorAttribute(elem.getParent(), attributeName, defaultValue);}} else if (elem.hasAttribute(attributeName)) {value = elem.getAttribute(attributeName);if (value.equals("inherit")) {return readInheritColorAttribute(elem.getParent(), attributeName, defaultValue);}} else if (elem.getParent() != null &&(elem.getParent().getNamespace() == null ||elem.getParent().getNamespace().equals(SVG_NAMESPACE))) {value = readInheritColorAttribute(elem.getParent(), attributeName, defaultValue);} else {value = defaultValue;}if (value != null && value.toLowerCase().equals("currentcolor") && !attributeName.equals("color")) {// Lets do some magic stuff for "currentColor" attribute valuevalue = readInheritColorAttribute(elem, "color", "defaultValue");}return value;', 'comment': '/*** Reads a color attribute that is inherited.* This is similar to {@code readInheritAttribute}, but takes care of the* "currentColor" magic attribute value.*/--------------//"http://www.w3.org/Graphics/SVG/feature/1.2/#Handler",--------------', 'coherence': 1}, {'code': 'private Figure readPolygonElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);readShapeAttributes(elem, a);Point2D.Double[] points = toPoints(elem, readAttribute(elem, "points", ""));Figure figure = factory.createPolygon(points, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "polygon" element.*/', 'coherence': 1}, {'code': 'private Figure readRectElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);readShapeAttributes(elem, a);double x = toNumber(elem, readAttribute(elem, "x", "0"));double y = toNumber(elem, readAttribute(elem, "y", "0"));double w = toWidth(elem, readAttribute(elem, "width", "0"));double h = toHeight(elem, readAttribute(elem, "height", "0"));String rxValue = readAttribute(elem, "rx", "none");String ryValue = readAttribute(elem, "ry", "none");if (rxValue.equals("none")) {rxValue = ryValue;}if (ryValue.equals("none")) {ryValue = rxValue;}double rx = toNumber(elem, rxValue.equals("none") ? "0" : rxValue);double ry = toNumber(elem, ryValue.equals("none") ? "0" : ryValue);Figure figure = factory.createRect(x, y, w, h, rx, ry, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "rect" element.*/', 'coherence': 1}, {'code': 'private Color toColor(IXMLElement elem, String value) throws IOException {String str = value;if (str == null) {return null;}str = str.trim().toLowerCase();if (str.equals("currentcolor")) {String currentColor = readInheritAttribute(elem, "color", "black");if (currentColor == null || currentColor.trim().toLowerCase().equals("currentColor")) {return null;} else {return toColor(elem, currentColor);}} else if (SVG_COLORS.containsKey(str)) {return SVG_COLORS.get(str);} else if (str.startsWith("#") && str.length() == 7) {return new Color(Integer.decode(str));} else if (str.startsWith("#") && str.length() == 4) {// Three digits hex valueint th = Integer.decode(str);return new Color((th & 0xf) | ((th & 0xf) << 4) |((th & 0xf0) << 4) | ((th & 0xf0) << 8) |((th & 0xf00) << 8) | ((th & 0xf00) << 12));} else if (str.startsWith("rgb")) {try {StringTokenizer tt = new StringTokenizer(str, "() ,");tt.nextToken();String r = tt.nextToken();String g = tt.nextToken();String b = tt.nextToken();Color c = new Color(r.endsWith("%") ? (int) (Integer.decode(r.substring(0, r.length() - 1)) * 2.55) : Integer.decode(r),g.endsWith("%") ? (int) (Integer.decode(g.substring(0, g.length() - 1)) * 2.55) : Integer.decode(g),b.endsWith("%") ? (int) (Integer.decode(b.substring(0, b.length() - 1)) * 2.55) : Integer.decode(b));return c;} catch (Exception e) {if (DEBUG) {System.out.println("SVGInputFormat.toColor illegal RGB value " + str);}return null;}} else if (str.startsWith("url")) {// FIXME - Implement meif (DEBUG) {System.out.println("SVGInputFormat.toColor not implemented for " + str);}return null;} else {return null;', 'comment': "/*** Reads a color style attribute. This can be a Color or null.* FIXME - Doesn't support url(...) colors yet.*/", 'coherence': 1}, {'code': 'private void readSolidColorElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);// \'solid-color\'//Value:   currentColor | <color> | inherit//Initial:   black//Applies to:   \'solidColor\' elements//Inherited:   no//Percentages:   N/A//Media:   visual//Animatable:   yes//Computed value:     Specified <color> value, except inheritColor color = toColor(elem, readAttribute(elem, "solid-color", "black"));//\'solid-opacity\'//Value:  <opacity-value> | inherit//Initial:   1//Applies to:   \'solidColor\' elements//Inherited:   no//Percentages:   N/A//Media:   visual//Animatable:   yes//Computed value:     Specified value, except inheritdouble opacity = toDouble(elem, readAttribute(elem, "solid-opacity", "1"), 1, 0, 1);if (opacity != 1) {color = new Color(((int) (255 * opacity) << 24) | (0xffffff & color.getRGB()), true);}elementObjects.put(elem, color);', 'comment': '/* Reads solid color attributes.*/', 'coherence': 1}, {'code': 'private Figure readGElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readOpacityAttribute(elem, a);CompositeFigure g = factory.createG(a);for (IXMLElement node : elem.getChildren()) {if (node instanceof IXMLElement) {IXMLElement child = (IXMLElement) node;Figure childFigure = readElement(child);// skip invisible elementsif (readAttribute(child, "visibility", "visible").equals("visible") &&!readAttribute(child, "display", "inline").equals("none")) {if (childFigure != null) {g.basicAdd(childFigure);}}}}readTransformAttribute(elem, a);if (TRANSFORM.get(a) != null) {g.transform(TRANSFORM.get(a));}return g;', 'comment': '/*** Reads an SVG "g" element.*/', 'coherence': 1}, {'code': 'private void readShapeAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a)throws IOException {Object objectValue;String value;double doubleValue;//\'color\'// Value:    <color> | inherit// Initial:     depends on user agent// Applies to:    None. Indirectly affects other properties via currentColor// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified <color> value, except inherit//// value = readInheritAttribute(elem, "color", "black");// if (DEBUG) System.out.println("color="+value);//\'color-rendering\'// Value:     auto | optimizeSpeed | optimizeQuality | inherit// Initial:     auto// Applies to:     container elements , graphics elements and \'animateColor\'// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inherit//// value = readInheritAttribute(elem, "color-rendering", "auto");// if (DEBUG) System.out.println("color-rendering="+value);// \'fill\'// Value:    <paint> | inherit (See Specifying paint)// Initial:     black// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     "none", system paint, specified <color> value or absolute IRIobjectValue = toPaint(elem, readInheritColorAttribute(elem, "fill", "black"));if (objectValue instanceof Color) {FILL_COLOR.put(a, (Color) objectValue);} else if (objectValue instanceof Gradient) {FILL_GRADIENT.putClone(a, (Gradient) objectValue);} else if (objectValue == null) {FILL_COLOR.put(a, null);} else {FILL_COLOR.put(a, null);if (DEBUG) {System.out.println("SVGInputFormat not implemented  fill=" + objectValue);}}//\'fill-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "fill-opacity", "1");FILL_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));// \'fill-rule\'// Value:   nonzero | evenodd | inherit// Initial:    nonzero// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "fill-rule", "nonzero");WINDING_RULE.put(a, SVG_FILL_RULES.get(value));//\'stroke\'//Value:    <paint> | inherit (See Specifying paint)//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     "none", system paint, specified <color> value// or absolute IRIobjectValue = toPaint(elem, readInheritColorAttribute(elem, "stroke", "none"));if (objectValue instanceof Color) {STROKE_COLOR.put(a, (Color) objectValue);} else if (objectValue instanceof Gradient) {STROKE_GRADIENT.putClone(a, (Gradient) objectValue);} else if (objectValue == null) {STROKE_COLOR.put(a, null);} else {STROKE_COLOR.put(a, null);if (DEBUG) {System.out.println("SVGInputFormat not implemented  stroke=" + objectValue);}}//\'stroke-dasharray\'//Value:     none | <dasharray> | inherit//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes (non-additive)//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-dasharray", "none");if (!value.equals("none")) {String[] values = toWSOrCommaSeparatedArray(value);double[] dashes = new double[values.length];for (int i = 0; i < values.length; i++) {dashes[i] = toNumber(elem, values[i]);}STROKE_DASHES.put(a, dashes);}//\'stroke-dashoffset\'//Value:    <length> | inherit//Initial:     0//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritdoubleValue = toNumber(elem, readInheritAttribute(elem, "stroke-dashoffset", "0"));STROKE_DASH_PHASE.put(a, doubleValue);IS_STROKE_DASH_FACTOR.put(a, false);//\'stroke-linecap\'//Value:     butt | round | square | inherit//Initial:     butt//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-linecap", "butt");STROKE_CAP.put(a, SVG_STROKE_LINECAPS.get(value));//\'stroke-linejoin\'//Value:     miter | round | bevel | inherit//Initial:     miter//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-linejoin", "miter");STROKE_JOIN.put(a, SVG_STROKE_LINEJOINS.get(value));//\'stroke-miterlimit\'//Value:     <miterlimit> | inherit//Initial:     4//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritdoubleValue = toDouble(elem, readInheritAttribute(elem, "stroke-miterlimit", "4"), 4d, 1d, Double.MAX_VALUE);STROKE_MITER_LIMIT.put(a, doubleValue);IS_STROKE_MITER_LIMIT_FACTOR.put(a, false);//\'stroke-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "stroke-opacity", "1");STROKE_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));//\'stroke-width\'//Value:    <length> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritdoubleValue = toNumber(elem, readInheritAttribute(elem, "stroke-width", "1"));STROKE_WIDTH.put(a, doubleValue);', 'comment': '/** Reads shape attributes.*/', 'coherence': 1}, {'code': 'private double toLength(IXMLElement elem, String str, double percentFactor) throws IOException {double scaleFactor = 1d;if (str == null || str.length() == 0 || str.equals("none")) {return 0d;}if (str.endsWith("%")) {str = str.substring(0, str.length() - 1);scaleFactor = percentFactor;} else if (str.endsWith("px")) {str = str.substring(0, str.length() - 2);} else if (str.endsWith("pt")) {str = str.substring(0, str.length() - 2);scaleFactor = 1.25;} else if (str.endsWith("pc")) {str = str.substring(0, str.length() - 2);scaleFactor = 15;} else if (str.endsWith("mm")) {str = str.substring(0, str.length() - 2);scaleFactor = 3.543307;} else if (str.endsWith("cm")) {str = str.substring(0, str.length() - 2);scaleFactor = 35.43307;} else if (str.endsWith("in")) {str = str.substring(0, str.length() - 2);scaleFactor = 90;} else if (str.endsWith("em")) {str = str.substring(0, str.length() - 2);// XXX - This doesn\'t workscaleFactor = toLength(elem, readAttribute(elem, "font-size", "0"), percentFactor);} else {scaleFactor = 1d;}return Double.parseDouble(str) * scaleFactor;', 'comment': '/*** Returns a value as a length.* http://www.w3.org/TR/SVGMobile12/types.html#DataTypeLength*/', 'coherence': 1}, {'code': 'public static String[] toWSOrCommaSeparatedArray(String str) throws IOException {String[] result = str.split("(\\\\s*,\\\\s*|\\\\s+)");if (result.length == 1 && result[0].equals("")) {return new String[0];} else {return result;', 'comment': '/*** Returns a value as a String array.* The values are separated by whitespace or by commas with optional white* space.*/', 'coherence': 1}, {'code': 'private void readLineAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a)throws IOException {Object objectValue;String value;double doubleValue;//\'color\'// Value:    <color> | inherit// Initial:     depends on user agent// Applies to:    None. Indirectly affects other properties via currentColor// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified <color> value, except inherit//// value = readInheritAttribute(elem, "color", "black");// if (DEBUG) System.out.println("color="+value);//\'color-rendering\'// Value:     auto | optimizeSpeed | optimizeQuality | inherit// Initial:     auto// Applies to:     container elements , graphics elements and \'animateColor\'// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inherit//// value = readInheritAttribute(elem, "color-rendering", "auto");// if (DEBUG) System.out.println("color-rendering="+value);// \'fill\'// Value:    <paint> | inherit (See Specifying paint)// Initial:     black// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     "none", system paint, specified <color> value or absolute IRIobjectValue = toPaint(elem, readInheritColorAttribute(elem, "fill", "none"));if (objectValue instanceof Color) {FILL_COLOR.put(a, (Color) objectValue);} else if (objectValue instanceof Gradient) {FILL_GRADIENT.putClone(a, (Gradient) objectValue);} else if (objectValue == null) {FILL_COLOR.put(a, null);} else {FILL_COLOR.put(a, null);if (DEBUG) {System.out.println("SVGInputFormat not implemented  fill=" + objectValue);}}//\'fill-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "fill-opacity", "1");FILL_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));// \'fill-rule\'// Value:   nonzero | evenodd | inherit// Initial:    nonzero// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "fill-rule", "nonzero");WINDING_RULE.put(a, SVG_FILL_RULES.get(value));//\'stroke\'//Value:    <paint> | inherit (See Specifying paint)//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     "none", system paint, specified <color> value// or absolute IRIobjectValue = toPaint(elem, readInheritColorAttribute(elem, "stroke", "black"));if (objectValue instanceof Color) {STROKE_COLOR.put(a, (Color) objectValue);} else if (objectValue instanceof Gradient) {STROKE_GRADIENT.putClone(a, (Gradient) objectValue);} else if (objectValue == null) {STROKE_COLOR.put(a, null);} else {STROKE_COLOR.put(a, null);if (DEBUG) {System.out.println("SVGInputFormat not implemented  stroke=" + objectValue);}}//\'stroke-dasharray\'//Value:     none | <dasharray> | inherit//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes (non-additive)//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-dasharray", "none");if (!value.equals("none")) {String[] values = toWSOrCommaSeparatedArray(value);double[] dashes = new double[values.length];for (int i = 0; i < values.length; i++) {dashes[i] = toNumber(elem, values[i]);}STROKE_DASHES.put(a, dashes);}//\'stroke-dashoffset\'//Value:    <length> | inherit//Initial:     0//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritdoubleValue = toNumber(elem, readInheritAttribute(elem, "stroke-dashoffset", "0"));STROKE_DASH_PHASE.put(a, doubleValue);IS_STROKE_DASH_FACTOR.put(a, false);//\'stroke-linecap\'//Value:     butt | round | square | inherit//Initial:     butt//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-linecap", "butt");STROKE_CAP.put(a, SVG_STROKE_LINECAPS.get(value));//\'stroke-linejoin\'//Value:     miter | round | bevel | inherit//Initial:     miter//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "stroke-linejoin", "miter");STROKE_JOIN.put(a, SVG_STROKE_LINEJOINS.get(value));//\'stroke-miterlimit\'//Value:     <miterlimit> | inherit//Initial:     4//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritdoubleValue = toDouble(elem, readInheritAttribute(elem, "stroke-miterlimit", "4"), 4d, 1d, Double.MAX_VALUE);STROKE_MITER_LIMIT.put(a, doubleValue);IS_STROKE_MITER_LIMIT_FACTOR.put(a, false);//\'stroke-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritobjectValue = readInheritAttribute(elem, "stroke-opacity", "1");STROKE_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));//\'stroke-width\'//Value:    <length> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritdoubleValue = toNumber(elem, readInheritAttribute(elem, "stroke-width", "1"));STROKE_WIDTH.put(a, doubleValue);', 'comment': '/** Reads line and polyline attributes.*/', 'coherence': 1}, {'code': 'private void readLinearGradientElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);double x1 = toLength(elem, readAttribute(elem, "x1", "0"), 0.01);double y1 = toLength(elem, readAttribute(elem, "y1", "0"), 0.01);double x2 = toLength(elem, readAttribute(elem, "x2", "1"), 0.01);double y2 = toLength(elem, readAttribute(elem, "y2", "0"), 0.01);boolean isRelativeToFigureBounds = readAttribute(elem, "gradientUnits", "objectBoundingBox").equals("objectBoundingBox");ArrayList<IXMLElement> stops = elem.getChildrenNamed("stop", SVG_NAMESPACE);if (stops.size() == 0) {stops = elem.getChildrenNamed("stop");}if (stops.size() == 0) {// FIXME - Implement xlink support throughouth SVGInputFormatString xlink = readAttribute(elem, "xlink:href", "");if (xlink.startsWith("#") &&identifiedElements.get(xlink.substring(1)) != null) {stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop", SVG_NAMESPACE);if (stops.size() == 0) {stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop");}}}if (stops.size() == 0) {if (DEBUG) {System.out.println("SVGInpuFormat: Warning no stops in linearGradient " + elem);}}double[] stopOffsets = new double[stops.size()];Color[] stopColors = new Color[stops.size()];double[] stopOpacities = new double[stops.size()];for (int i = 0; i < stops.size(); i++) {IXMLElement stopElem = stops.get(i);String offsetStr = readAttribute(stopElem, "offset", "0");if (offsetStr.endsWith("%")) {stopOffsets[i] = toDouble(stopElem, offsetStr.substring(0, offsetStr.length() - 1), 0, 0, 100) / 100d;} else {stopOffsets[i] = toDouble(stopElem, offsetStr, 0, 0, 1);}// \'stop-color\'// Value:    currentColor | <color> | inherit// Initial:    black// Applies to:     \'stop\' elements// Inherited:    no// Percentages:    N/A// Media:    visual// Animatable:    yes// Computed value:     Specified <color> value, except istopColors[i] = toColor(stopElem, readAttribute(stopElem, "stop-color", "black"));if (stopColors[i] == null) {stopColors[i] = new Color(0x0, true);//throw new IOException("stop color missing in "+stopElem);}//\'stop-opacity\'//Value:    <opacity-value> | inherit//Initial:    1//Applies to:     \'stop\' elements//Inherited:    no//Percentages:    N/A//Media:    visual//Animatable:    yes//Computed value:     Specified value, except inheritstopOpacities[i] = toDouble(stopElem, readAttribute(stopElem, "stop-opacity", "1"), 1, 0, 1);}AffineTransform tx = toTransform(elem, readAttribute(elem, "gradientTransform", "none"));Gradient gradient = factory.createLinearGradient(x1, y1, x2, y2,stopOffsets, stopColors, stopOpacities,isRelativeToFigureBounds, tx);elementObjects.put(elem, gradient);', 'comment': '/*** Reads an SVG "linearGradient" element.*/', 'coherence': 1}, {'code': 'private double toDouble(IXMLElement elem, String value) throws IOException {return toDouble(elem, value, 0, Double.MIN_VALUE, Double.MAX_VALUE);', 'comment': '/*** Reads a double attribute.*/', 'coherence': 1}, {'code': 'private Figure readElement(IXMLElement elem)throws IOException {if (DEBUG) {System.out.println("SVGInputFormat.readElement " + elem.getName() + " line:" + elem.getLineNr());}Figure f = null;if (elem.getNamespace() == null ||elem.getNamespace().equals(SVG_NAMESPACE)) {String name = elem.getName();if (name == null) {if (DEBUG) {System.err.println("SVGInputFormat warning: skipping nameless element at line " + elem.getLineNr());}} else if (name.equals("a")) {f = readAElement(elem);} else if (name.equals("circle")) {f = readCircleElement(elem);} else if (name.equals("defs")) {readDefsElement(elem);f = null;} else if (name.equals("ellipse")) {f = readEllipseElement(elem);} else if (name.equals("g")) {f = readGElement(elem);} else if (name.equals("image")) {f = readImageElement(elem);} else if (name.equals("line")) {f = readLineElement(elem);} else if (name.equals("linearGradient")) {readLinearGradientElement(elem);f = null;} else if (name.equals("path")) {f = readPathElement(elem);} else if (name.equals("polygon")) {f = readPolygonElement(elem);} else if (name.equals("polyline")) {f = readPolylineElement(elem);} else if (name.equals("radialGradient")) {readRadialGradientElement(elem);f = null;} else if (name.equals("rect")) {f = readRectElement(elem);} else if (name.equals("solidColor")) {readSolidColorElement(elem);f = null;} else if (name.equals("svg")) {f = readSVGElement(elem);//f = readGElement(elem);} else if (name.equals("switch")) {f = readSwitchElement(elem);} else if (name.equals("text")) {f = readTextElement(elem);} else if (name.equals("textArea")) {f = readTextAreaElement(elem);} else if (name.equals("title")) {//FIXME - Implement reading of title element//f = readTitleElement(elem);} else if (name.equals("use")) {f = readUseElement(elem);} else if (name.equals("style")) {// Nothing to do, style elements have been already// processed in method flattenStyles} else {if (DEBUG) {System.out.println("SVGInputFormat not implemented for <" + name + ">");}}}if (f instanceof SVGFigure) {if (((SVGFigure) f).isEmpty()) {// if (DEBUG) System.out.println("Empty figure "+f);return null;}} else if (f != null) {if (DEBUG) {System.out.println("SVGInputFormat warning: not an SVGFigure " + f);}}return f;', 'comment': '/*** Reads an SVG element of any kind.* @return Returns the Figure, if the SVG element represents a Figure.* Returns null in all other cases.*/', 'coherence': 1}, {'code': 'private Object toPaint(IXMLElement elem, String value) throws IOException {String str = value;if (str == null) {return null;}str = str.trim().toLowerCase();if (str.equals("none")) {return null;} else if (str.equals("currentcolor")) {String currentColor = readInheritAttribute(elem, "color", "black");if (currentColor == null || currentColor.trim().toLowerCase().equals("currentColor")) {return null;} else {return toPaint(elem, currentColor);}} else if (SVG_COLORS.containsKey(str)) {return SVG_COLORS.get(str);} else if (str.startsWith("#") && str.length() == 7) {return new Color(Integer.decode(str));} else if (str.startsWith("#") && str.length() == 4) {// Three digits hex valueint th = Integer.decode(str);return new Color((th & 0xf) | ((th & 0xf) << 4) |((th & 0xf0) << 4) | ((th & 0xf0) << 8) |((th & 0xf00) << 8) | ((th & 0xf00) << 12));} else if (str.startsWith("rgb")) {try {StringTokenizer tt = new StringTokenizer(str, "() ,");tt.nextToken();String r = tt.nextToken();String g = tt.nextToken();String b = tt.nextToken();Color c = new Color(r.endsWith("%") ? (int) (Double.parseDouble(r.substring(0, r.length() - 1)) * 2.55) : Integer.decode(r),g.endsWith("%") ? (int) (Double.parseDouble(g.substring(0, g.length() - 1)) * 2.55) : Integer.decode(g),b.endsWith("%") ? (int) (Double.parseDouble(b.substring(0, b.length() - 1)) * 2.55) : Integer.decode(b));return c;} catch (Exception e) {/*if (DEBUG)*/ System.out.println("SVGInputFormat.toPaint illegal RGB value " + str);e.printStackTrace();return null;}} else if (str.startsWith("url(")) {String href = value.substring(4, value.length() - 1);if (identifiedElements.containsKey(href.substring(1)) &&elementObjects.containsKey(identifiedElements.get(href.substring(1)))) {Object obj = elementObjects.get(identifiedElements.get(href.substring(1)));return obj;}// XXX - Implement meif (DEBUG) {System.out.println("SVGInputFormat.toPaint not implemented for " + href);}return null;} else {return null;', 'comment': "/*** Reads a paint style attribute. This can be a Color or a Gradient or null.* XXX - Doesn't support url(...) colors yet.*/", 'coherence': 1}, {'code': 'private Figure readLineElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);readLineAttributes(elem, a);// Because \'line\' elements are single lines and thus are geometrically// one-dimensional, they have no interior; thus, \'line\' elements are// never filled (see the \'fill\' property).if (FILL_COLOR.get(a) != null && STROKE_COLOR.get(a) == null) {STROKE_COLOR.put(a, FILL_COLOR.get(a));}if (FILL_GRADIENT.get(a) != null && STROKE_GRADIENT.get(a) == null) {STROKE_GRADIENT.put(a, FILL_GRADIENT.get(a));}FILL_COLOR.put(a, null);FILL_GRADIENT.put(a, null);double x1 = toNumber(elem, readAttribute(elem, "x1", "0"));double y1 = toNumber(elem, readAttribute(elem, "y1", "0"));double x2 = toNumber(elem, readAttribute(elem, "x2", "0"));double y2 = toNumber(elem, readAttribute(elem, "y2", "0"));Figure figure = factory.createLine(x1, y1, x2, y2, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "line" element.*/', 'coherence': 1}, {'code': 'private Figure readTextElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);readShapeAttributes(elem, a);readFontAttributes(elem, a);readTextAttributes(elem, a);String[] xStr = toCommaSeparatedArray(readAttribute(elem, "x", "0"));String[] yStr = toCommaSeparatedArray(readAttribute(elem, "y", "0"));Point2D.Double[] coordinates = new Point2D.Double[Math.max(xStr.length, yStr.length)];double lastX = 0;double lastY = 0;for (int i = 0; i < coordinates.length; i++) {if (xStr.length > i) {try {lastX = toNumber(elem, xStr[i]);} catch (NumberFormatException ex) {}}if (yStr.length > i) {try {lastY = toNumber(elem, yStr[i]);} catch (NumberFormatException ex) {}}coordinates[i] = new Point2D.Double(lastX, lastY);}String[] rotateStr = toCommaSeparatedArray(readAttribute(elem, "rotate", ""));double[] rotate = new double[rotateStr.length];for (int i = 0; i < rotateStr.length; i++) {try {rotate[i] = toDouble(elem, rotateStr[i]);} catch (NumberFormatException ex) {rotate[i] = 0;}}DefaultStyledDocument doc = new DefaultStyledDocument();try {if (elem.getContent() != null) {doc.insertString(0, toText(elem, elem.getContent()), null);} else {for (IXMLElement node : elem.getChildren()) {if (node.getName() == null) {doc.insertString(0, toText(elem, node.getContent()), null);} else if (node.getName().equals("tspan")) {readTSpanElement((IXMLElement) node, doc);} else {if (DEBUG) {System.out.println("SVGInputFormat unsupported text node <" + node.getName() + ">");}}}}} catch (BadLocationException e) {InternalError ex = new InternalError(e.getMessage());ex.initCause(e);throw ex;}Figure figure = factory.createText(coordinates, rotate, doc, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "text" element.*/', 'coherence': 1}, {'code': 'private void readGraphicsAttributes(IXMLElement elem, Figure f)throws IOException {Object value;// \'display\'// Value:     inline | block | list-item |// run-in | compact | marker |// table | inline-table | table-row-group | table-header-group |// table-footer-group | table-row | table-column-group | table-column |// table-cell | table-caption | none | inherit// Initial:     inline// Applies to:     \'svg\' , \'g\' , \'switch\' , \'a\' , \'foreignObject\' ,// graphics elements (including the text content block elements) and text// sub-elements (for example, \'tspan\' and \'a\' )// Inherited:     no// Percentages:     N/A// Media:     all// Animatable:     yes// Computed value:     Specified value, except inheritvalue = readAttribute(elem, "display", "inline");if (DEBUG) {System.out.println("SVGInputFormat not implemented display=" + value);}//\'image-rendering\'//Value:     auto | optimizeSpeed | optimizeQuality | inherit//Initial:     auto//Applies to:     images//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "image-rendering", "auto");if (DEBUG) {System.out.println("SVGInputFormat not implemented image-rendering=" + value);}//\'pointer-events\'//Value:    boundingBox | visiblePainted | visibleFill | visibleStroke | visible |//painted | fill | stroke | all | none | inherit//Initial:    visiblePainted//Applies to:    graphics elements//Inherited:    yes//Percentages:    N/A//Media:    visual//Animatable:    yes//Computed value:    Specified value, except inheritvalue = readInheritAttribute(elem, "pointer-events", "visiblePainted");if (DEBUG) {System.out.println("SVGInputFormat not implemented pointer-events=" + value);}// \'shape-rendering\'//Value:     auto | optimizeSpeed | crispEdges |//geometricPrecision | inherit//Initial:     auto//Applies to:     shapes//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "shape-rendering", "auto");if (DEBUG) {System.out.println("SVGInputFormat not implemented shape-rendering=" + value);}//\'text-rendering\'//Value:     auto | optimizeSpeed | optimizeLegibility |//geometricPrecision | inherit//Initial:     auto//Applies to:    text content block elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "text-rendering", "auto");if (DEBUG) {System.out.println("SVGInputFormat not implemented text-rendering=" + value);}//\'vector-effect\'//Value:     non-scaling-stroke | none | inherit//Initial:     none//Applies to:     graphics elements//Inherited:     no//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readAttribute(elem, "vector-effect", "none");if (DEBUG) {System.out.println("SVGInputFormat not implemented vector-effect=" + value);}//\'visibility\'//Value:     visible | hidden | collapse | inherit//Initial:     visible//Applies to:     graphics elements (including the text content block// elements) and text sub-elements (for example, \'tspan\' and \'a\' )//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritvalue = readInheritAttribute(elem, "visibility", null);if (DEBUG) {System.out.println("SVGInputFormat not implemented visibility=" + value);', 'comment': '/* Reads graphics attributes as listed in* http://www.w3.org/TR/SVGMobile12/feature.html#GraphicsAttribute*/', 'coherence': 1}, {'code': 'private void readRadialGradientElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);double cx = toLength(elem, readAttribute(elem, "cx", "0.5"), 0.01);double cy = toLength(elem, readAttribute(elem, "cy", "0.5"), 0.01);double fx = toLength(elem, readAttribute(elem, "fx", readAttribute(elem, "cx", "0.5")), 0.01);double fy = toLength(elem, readAttribute(elem, "fy", readAttribute(elem, "cy", "0.5")), 0.01);double r = toLength(elem, readAttribute(elem, "r", "0.5"), 0.01);boolean isRelativeToFigureBounds =readAttribute(elem, "gradientUnits", "objectBoundingBox").equals("objectBoundingBox");ArrayList<IXMLElement> stops = elem.getChildrenNamed("stop", SVG_NAMESPACE);if (stops.size() == 0) {stops = elem.getChildrenNamed("stop");}if (stops.size() == 0) {// FIXME - Implement xlink support throughout SVGInputFormatString xlink = readAttribute(elem, "xlink:href", "");if (xlink.startsWith("#") &&identifiedElements.get(xlink.substring(1)) != null) {stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop", SVG_NAMESPACE);if (stops.size() == 0) {stops = identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop");}}}double[] stopOffsets = new double[stops.size()];Color[] stopColors = new Color[stops.size()];double[] stopOpacities = new double[stops.size()];for (int i = 0; i < stops.size(); i++) {IXMLElement stopElem = stops.get(i);String offsetStr = readAttribute(stopElem, "offset", "0");if (offsetStr.endsWith("%")) {stopOffsets[i] = toDouble(stopElem, offsetStr.substring(0, offsetStr.length() - 1), 0, 0, 100) / 100d;} else {stopOffsets[i] = toDouble(stopElem, offsetStr, 0, 0, 1);}// \'stop-color\'// Value:    currentColor | <color> | inherit// Initial:    black// Applies to:     \'stop\' elements// Inherited:    no// Percentages:    N/A// Media:    visual// Animatable:    yes// Computed value:     Specified <color> value, except istopColors[i] = toColor(stopElem, readAttribute(stopElem, "stop-color", "black"));if (stopColors[i] == null) {stopColors[i] = new Color(0x0, true);//throw new IOException("stop color missing in "+stopElem);}//\'stop-opacity\'//Value:    <opacity-value> | inherit//Initial:    1//Applies to:     \'stop\' elements//Inherited:    no//Percentages:    N/A//Media:    visual//Animatable:    yes//Computed value:     Specified value, except inheritstopOpacities[i] = toDouble(stopElem, readAttribute(stopElem, "stop-opacity", "1"), 1, 0, 1);}AffineTransform tx = toTransform(elem, readAttribute(elem, "gradientTransform", "none"));Gradient gradient = factory.createRadialGradient(cx, cy, fx, fy, r,stopOffsets, stopColors, stopOpacities,isRelativeToFigureBounds,tx);elementObjects.put(elem, gradient);', 'comment': '/*** Reads an SVG "radialGradient" element.*/', 'coherence': 1}, {'code': 'private Figure readTextAreaElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);readShapeAttributes(elem, a);readFontAttributes(elem, a);readTextAttributes(elem, a);readTextFlowAttributes(elem, a);double x = toNumber(elem, readAttribute(elem, "x", "0"));double y = toNumber(elem, readAttribute(elem, "y", "0"));// XXX - Handle "auto" width and heightdouble w = toWidth(elem, readAttribute(elem, "width", "0"));double h = toHeight(elem, readAttribute(elem, "height", "0"));DefaultStyledDocument doc = new DefaultStyledDocument();try {if (elem.getContent() != null) {doc.insertString(0, toText(elem, elem.getContent()), null);} else {for (IXMLElement node : elem.getChildren()) {if (node.getName() == null) {doc.insertString(doc.getLength(), toText(elem, node.getContent()), null);} else if (node.getName().equals("tbreak")) {doc.insertString(doc.getLength(), "\\n", null);} else if (node.getName().equals("tspan")) {readTSpanElement((IXMLElement) node, doc);} else {if (DEBUG) {System.out.println("SVGInputFormat unknown  text node " + node.getName());}}}}} catch (BadLocationException e) {InternalError ex = new InternalError(e.getMessage());ex.initCause(e);throw ex;}Figure figure = factory.createTextArea(x, y, w, h, doc, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "textArea" element.*/', 'coherence': 1}, {'code': 'private Figure readSwitchElement(IXMLElement elem)throws IOException {for (IXMLElement node : elem.getChildren()) {if (node instanceof IXMLElement) {IXMLElement child = (IXMLElement) node;String[] requiredFeatures = toWSOrCommaSeparatedArray(readAttribute(child, "requiredFeatures", ""));String[] requiredExtensions = toWSOrCommaSeparatedArray(readAttribute(child, "requiredExtensions", ""));String[] systemLanguage = toWSOrCommaSeparatedArray(readAttribute(child, "systemLanguage", ""));String[] requiredFormats = toWSOrCommaSeparatedArray(readAttribute(child, "requiredFormats", ""));String[] requiredFonts = toWSOrCommaSeparatedArray(readAttribute(child, "requiredFonts", ""));boolean isMatch;isMatch = supportedFeatures.containsAll(Arrays.asList(requiredFeatures)) &&requiredExtensions.length == 0 &&requiredFormats.length == 0 &&requiredFonts.length == 0;if (isMatch && systemLanguage.length > 0) {isMatch = false;Locale locale = LocaleUtil.getDefault();for (String lng : systemLanguage) {int p = lng.indexOf(\'-\');if (p == -1) {if (locale.getLanguage().equals(lng)) {isMatch = true;break;}} else {if (locale.getLanguage().equals(lng.substring(0, p)) &&locale.getCountry().toLowerCase().equals(lng.substring(p + 1))) {isMatch = true;break;}}}}if (isMatch) {Figure figure = readElement(child);if (readAttribute(child, "visibility", "visible").equals("visible") &&!readAttribute(child, "display", "inline").equals("none")) {return figure;} else {return null;}}}}return null;', 'comment': '/*** Evaluates an SVG "switch" element.**/--------------//"http://www.w3.org/Graphics/SVG/feature/1.2/#XlinkAttribute",--------------', 'coherence': 1}, {'code': 'private Figure readImageElement(IXMLElement elem)throws IOException {HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();readCoreAttributes(elem, a);readTransformAttribute(elem, a);readOpacityAttribute(elem, a);double x = toNumber(elem, readAttribute(elem, "x", "0"));double y = toNumber(elem, readAttribute(elem, "y", "0"));double w = toWidth(elem, readAttribute(elem, "width", "0"));double h = toHeight(elem, readAttribute(elem, "height", "0"));String href = readAttribute(elem, "xlink:href", null);if (href == null) {href = readAttribute(elem, "href", null);}byte[] imageData = null;if (href != null) {if (href.startsWith("data:")) {int semicolonPos = href.indexOf(\';\');if (semicolonPos != -1) {if (href.indexOf(";base64,") == semicolonPos) {imageData = Base64.decode(href.substring(semicolonPos + 8));} else {throw new IOException("Unsupported encoding in data href in image element:" + href);}} else {throw new IOException("Unsupported data href in image element:" + href);}} else {URL imageUrl = new URL(url, href);// Check whether the imageURL is an SVG image.// Load it as a group.if (imageUrl.getFile().endsWith("svg")) {SVGInputFormat svgImage = new SVGInputFormat(factory);Drawing svgDrawing = new DefaultDrawing();svgImage.read(imageUrl, svgDrawing, true);CompositeFigure svgImageGroup = factory.createG(a);for (Figure f : svgDrawing.getChildren()) {svgImageGroup.add(f);}svgImageGroup.setBounds(new Point2D.Double(x, y), new Point2D.Double(x + w, y + h));return svgImageGroup;}// Read the image data from the URL into a byte arrayByteArrayOutputStream bout = new ByteArrayOutputStream();byte[] buf = new byte[512];int len = 0;try {InputStream in = imageUrl.openStream();try {while ((len = in.read(buf)) > 0) {bout.write(buf, 0, len);}imageData = bout.toByteArray();} finally {in.close();}} catch (FileNotFoundException e) {// Use empty image}}}// Create a buffered image from the image dataBufferedImage bufferedImage = null;if (imageData != null) {try {bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));} catch (IIOException e) {System.err.println("SVGInputFormat warning: skipped unsupported image format.");e.printStackTrace();}}// Delete the image data in case of failureif (bufferedImage == null) {imageData = null;//if (DEBUG) System.out.println("FAILED:"+imageUrl);}// Create a figure from the image data and the buffered image.Figure figure = factory.createImage(x, y, w, h, imageData, bufferedImage, a);elementObjects.put(elem, figure);return figure;', 'comment': '/*** Reads an SVG "image" element.*/', 'coherence': 1}, {'code': 'public void write(OutputStream out, Drawing drawing, java.util.List<Figure> figures) throws IOException {document = new XMLElement("svg", SVG_NAMESPACE);document.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");document.setAttribute("version", "1.2");document.setAttribute("baseProfile", "tiny");writeViewportAttributes(document, drawing.getAttributes());initStorageContext(document);defs = new XMLElement("defs");document.addChild(defs);for (Figure f : figures) {writeElement(document, f);}// Write XML prologPrintWriter writer = new PrintWriter(new OutputStreamWriter(out, "UTF-8"));writer.println("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>");// Write XML contentXMLWriter xmlWriter = new XMLWriter(writer);xmlWriter.write(document, isPrettyPrint);// Flush writerwriter.flush();document.dispose();', 'comment': '/*** All other write methods delegate their work to here.*/', 'coherence': 1}, {'code': 'public static String toNumber(double number) {String str = (isFloatPrecision) ? Float.toString((float) number) : Double.toString(number);if (str.endsWith(".0")) {str = str.substring(0, str.length() - 2);}return str;', 'comment': '/*** Returns a double array as a number attribute value.*/', 'coherence': 1}, {'code': 'protected void writeTransformAttribute(IXMLElement elem, Map<AttributeKey, Object> a)throws IOException {AffineTransform t = TRANSFORM.get(a);if (t != null) {writeAttribute(elem, "transform", toTransform(t), "none");', 'comment': '/* Writes the transform attribute as specified in* http://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute**/', 'coherence': 1}, {'code': 'private void writeFontAttributes(IXMLElement elem, Map<AttributeKey, Object> a)throws IOException {String value;double doubleValue;// \'font-family\'// Value:    [[ <family-name> |// <generic-family> ],]* [<family-name> |// <generic-family>] | inherit// Initial:    depends on user agent// Applies to:    text content elements// Inherited:    yes// Percentages:    N/A// Media:    visual// Animatable:    yes// Computed value:     Specified value, except inheritwriteAttribute(elem, "font-family", FONT_FACE.get(a).getFontName(), "Dialog");// \'font-getChildCount\'// Value:    <absolute-getChildCount> | <relative-getChildCount> |// <length> | inherit// Initial:    medium// Applies to:    text content elements// Inherited:    yes, the computed value is inherited// Percentages:    N/A// Media:    visual// Animatable:    yes// Computed value:     Absolute lengthwriteAttribute(elem, "font-size", FONT_SIZE.get(a), 0d);// \'font-style\'// Value:    normal | italic | oblique | inherit// Initial:    normal// Applies to:    text content elements// Inherited:    yes// Percentages:    N/A// Media:    visual// Animatable:    yes// Computed value:     Specified value, except inheritwriteAttribute(elem, "font-style", (FONT_ITALIC.get(a)) ? "italic" : "normal", "normal");//\'font-variant\'//Value:    normal | small-caps | inherit//Initial:    normal//Applies to:    text content elements//Inherited:    yes//Percentages:    N/A//Media:    visual//Animatable:    no//Computed value:     Specified value, except inherit// XXX - Implement mewriteAttribute(elem, "font-variant", "normal", "normal");// \'font-weight\'// Value:    normal | bold | bolder | lighter | 100 | 200 | 300// | 400 | 500 | 600 | 700 | 800 | 900 | inherit// Initial:    normal// Applies to:    text content elements// Inherited:    yes// Percentages:    N/A// Media:    visual// Animatable:    yes// Computed value:     one of the legal numeric values, non-numeric// values shall be converted to numeric values according to the rules// defined below.writeAttribute(elem, "font-weight", (FONT_BOLD.get(a)) ? "bold" : "normal", "normal");// Note: text-decoration is an SVG 1.1 feature//\'text-decoration\'//Value:    none | [ underline || overline || line-through || blink ] | inherit//Initial:    none//Applies to:    text content elements//Inherited:    no (see prose)//Percentages:    N/A//Media:    visual//Animatable:    yeswriteAttribute(elem, "text-decoration", (FONT_UNDERLINE.get(a)) ? "underline" : "none", "none");', 'comment': '/* Writes font attributes as listed in* http://www.w3.org/TR/SVGMobile12/feature.html#Font*/', 'coherence': 1}, {'code': 'protected void writeOpacityAttribute(IXMLElement elem, Map<AttributeKey, Object> m)throws IOException {//\'opacity\'//Value:    <opacity-value> | inherit//Initial:    1//Applies to:     \'image\' element//Inherited:    no//Percentages:    N/A//Media:    visual//Animatable:    yes//Computed value:     Specified value, except inherit//<opacity-value>//The uniform opacity setting must be applied across an entire object.//Any values outside the range 0.0 (fully transparent) to 1.0//(fully opaque) shall be clamped to this range.//(See Clamping values which are restricted to a particular range.)writeAttribute(elem, "opacity", OPACITY.get(m), 1d);', 'comment': '/* Writes the opacity attribute.*/', 'coherence': 1}, {'code': 'protected void writeShapeAttributes(IXMLElement elem, Map<AttributeKey, Object> m)throws IOException {Color color;String value;int intValue;//\'color\'// Value:    <color> | inherit// Initial:     depends on user agent// Applies to:    None. Indirectly affects other properties via currentColor// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified <color> value, except inherit//// Nothing to do: Attribute \'color\' is not needed.//\'color-rendering\'// Value:     auto | optimizeSpeed | optimizeQuality | inherit// Initial:     auto// Applies to:     container elements , graphics elements and \'animateColor\'// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inherit//// Nothing to do: Attribute \'color-rendering\' is not needed.// \'fill\'// Value:    <paint> | inherit (See Specifying paint)// Initial:     black// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     "none", system paint, specified <color> value or absolute IRIGradient gradient = FILL_GRADIENT.get(m);if (gradient != null) {String id;if (gradientToIDMap.containsKey(gradient)) {id = gradientToIDMap.get(gradient);} else {IXMLElement gradientElem;if (gradient instanceof LinearGradient) {LinearGradient lg = (LinearGradient) gradient;gradientElem = createLinearGradient(document,lg.getX1(), lg.getY1(),lg.getX2(), lg.getY2(),lg.getStopOffsets(),lg.getStopColors(),lg.getStopOpacities(),lg.isRelativeToFigureBounds(),lg.getTransform());} else /*if (gradient instanceof RadialGradient)*/ {RadialGradient rg = (RadialGradient) gradient;gradientElem = createRadialGradient(document,rg.getCX(), rg.getCY(),rg.getFX(), rg.getFY(),rg.getR(),rg.getStopOffsets(),rg.getStopColors(),rg.getStopOpacities(),rg.isRelativeToFigureBounds(),rg.getTransform());}id = getId(gradientElem);gradientElem.setAttribute("id", "xml", id);defs.addChild(gradientElem);gradientToIDMap.put(gradient, id);}writeAttribute(elem, "fill", "url(#" + id + ")", "#000");} else {writeAttribute(elem, "fill", toColor(FILL_COLOR.get(m)), "#000");}//\'fill-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "fill-opacity", FILL_OPACITY.get(m), 1d);// \'fill-rule\'// Value:   nonzero | evenodd | inherit// Initial:    nonzero// Applies to:     shapes and text content elements// Inherited:     yes// Percentages:     N/A// Media:     visual// Animatable:     yes// Computed value:     Specified value, except inheritif (WINDING_RULE.get(m) != WindingRule.NON_ZERO) {writeAttribute(elem, "fill-rule", "evenodd", "nonzero");}//\'stroke\'//Value:    <paint> | inherit (See Specifying paint)//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     "none", system paint, specified <color> value// or absolute IRIgradient = STROKE_GRADIENT.get(m);if (gradient != null) {String id;if (gradientToIDMap.containsKey(gradient)) {id = gradientToIDMap.get(gradient);} else {IXMLElement gradientElem;if (gradient instanceof LinearGradient) {LinearGradient lg = (LinearGradient) gradient;gradientElem = createLinearGradient(document,lg.getX1(), lg.getY1(),lg.getX2(), lg.getY2(),lg.getStopOffsets(),lg.getStopColors(),lg.getStopOpacities(),lg.isRelativeToFigureBounds(),lg.getTransform());} else /*if (gradient instanceof RadialGradient)*/ {RadialGradient rg = (RadialGradient) gradient;gradientElem = createRadialGradient(document,rg.getCX(), rg.getCY(),rg.getFX(), rg.getFY(),rg.getR(),rg.getStopOffsets(),rg.getStopColors(),rg.getStopOpacities(),rg.isRelativeToFigureBounds(),rg.getTransform());}id = getId(gradientElem);gradientElem.setAttribute("id", "xml", id);defs.addChild(gradientElem);gradientToIDMap.put(gradient, id);}writeAttribute(elem, "stroke", "url(#" + id + ")", "none");} else {writeAttribute(elem, "stroke", toColor(STROKE_COLOR.get(m)), "none");}//\'stroke-dasharray\'//Value:     none | <dasharray> | inherit//Initial:     none//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes (non-additive)//Computed value:     Specified value, except inheritdouble[] dashes = STROKE_DASHES.get(m);if (dashes != null) {StringBuilder buf = new StringBuilder();for (int i = 0; i < dashes.length; i++) {if (i != 0) {buf.append(\',\');}buf.append(toNumber(dashes[i]));}writeAttribute(elem, "stroke-dasharray", buf.toString(), null);}//\'stroke-dashoffset\'//Value:    <length> | inherit//Initial:     0//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "stroke-dashoffset", STROKE_DASH_PHASE.get(m), 0d);//\'stroke-linecap\'//Value:     butt | round | square | inherit//Initial:     butt//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "stroke-linecap", strokeLinecapMap.get(STROKE_CAP.get(m)), "butt");//\'stroke-linejoin\'//Value:     miter | round | bevel | inherit//Initial:     miter//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "stroke-linejoin", strokeLinejoinMap.get(STROKE_JOIN.get(m)), "miter");//\'stroke-miterlimit\'//Value:     <miterlimit> | inherit//Initial:     4//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "stroke-miterlimit", STROKE_MITER_LIMIT.get(m), 4d);//\'stroke-opacity\'//Value:     <opacity-value> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "stroke-opacity", STROKE_OPACITY.get(m), 1d);//\'stroke-width\'//Value:    <length> | inherit//Initial:     1//Applies to:     shapes and text content elements//Inherited:     yes//Percentages:     N/A//Media:     visual//Animatable:     yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "stroke-width", STROKE_WIDTH.get(m), 1d);', 'comment': '/* Writes shape attributes.*/', 'coherence': 1}, {'code': 'private void writeViewportAttributes(IXMLElement elem, Map<AttributeKey, Object> a)throws IOException {Object value;Double doubleValue;if (VIEWPORT_WIDTH.get(a) != null && VIEWPORT_HEIGHT.get(a) != null) {// width of the viewportwriteAttribute(elem, "width", toNumber(VIEWPORT_WIDTH.get(a)), null);// height of the viewportwriteAttribute(elem, "height", toNumber(VIEWPORT_HEIGHT.get(a)), null);}//\'viewport-fill\'//Value:   "none" | <color> | inherit//Initial:   none//Applies to:  viewport-creating elements//Inherited:   no//Percentages:   N/A//Media:   visual//Animatable:   yes//Computed value:     "none" or specified <color> value, except inheritwriteAttribute(elem, "viewport-fill", toColor(VIEWPORT_FILL.get(a)), "none");//\'viewport-fill-opacity\'//Value:  <opacity-value> | inherit//Initial:   1.0//Applies to:  viewport-creating elements//Inherited:   no//Percentages:   N/A//Media:   visual//Animatable:   yes//Computed value:     Specified value, except inheritwriteAttribute(elem, "viewport-fill-opacity", VIEWPORT_FILL_OPACITY.get(a), 1.0);', 'comment': '/* Writes viewport attributes.*/', 'coherence': 1}, {'code': 'public static String toTransform(AffineTransform t) throws IOException {StringBuilder buf = new StringBuilder();switch (t.getType()) {case AffineTransform.TYPE_IDENTITY:buf.append("none");break;case AffineTransform.TYPE_TRANSLATION:// translate(<tx> [<ty>]), specifies a translation by tx and ty.// If <ty> is not provided, it is assumed to be zero.buf.append("translate(");buf.append(toNumber(t.getTranslateX()));if (t.getTranslateY() != 0d) {buf.append(\' \');buf.append(toNumber(t.getTranslateY()));}buf.append(\')\');break;/*case AffineTransform.TYPE_GENERAL_ROTATION :case AffineTransform.TYPE_QUADRANT_ROTATION :case AffineTransform.TYPE_MASK_ROTATION :// rotate(<rotate-angle> [<cx> <cy>]), specifies a rotation by// <rotate-angle> degrees about a given point.// If optional parameters <cx> and <cy> are not supplied, the// rotate is about the origin of the current user coordinate// system. The operation corresponds to the matrix// [cos(a) sin(a) -sin(a) cos(a) 0 0].// If optional parameters <cx> and <cy> are supplied, the rotate// is about the point (<cx>, <cy>). The operation represents the// equivalent of the following specification:// translate(<cx>, <cy>) rotate(<rotate-angle>)// translate(-<cx>, -<cy>).buf.append("rotate(");buf.append(toNumber(t.getScaleX()));buf.append(\')\');break;*/case AffineTransform.TYPE_UNIFORM_SCALE:// scale(<sx> [<sy>]), specifies a scale operation by sx// and sy. If <sy> is not provided, it is assumed to be equal// to <sx>.buf.append("scale(");buf.append(toNumber(t.getScaleX()));buf.append(\')\');break;case AffineTransform.TYPE_GENERAL_SCALE:case AffineTransform.TYPE_MASK_SCALE:// scale(<sx> [<sy>]), specifies a scale operation by sx// and sy. If <sy> is not provided, it is assumed to be equal// to <sx>.buf.append("scale(");buf.append(toNumber(t.getScaleX()));buf.append(\' \');buf.append(toNumber(t.getScaleY()));buf.append(\')\');break;default:// matrix(<a> <b> <c> <d> <e> <f>), specifies a transformation// in the form of a transformation matrix of six values.// matrix(a,b,c,d,e,f) is equivalent to applying the// transformation matrix [a b c d e f].buf.append("matrix(");double[] matrix = new double[6];t.getMatrix(matrix);for (int i = 0; i < matrix.length; i++) {if (i != 0) {buf.append(\' \');}buf.append(toNumber(matrix[i]));}buf.append(\')\');break;}return buf.toString();', 'comment': '/* Converts an AffineTransform into an SVG transform attribute value as specified in* http://www.w3.org/TR/SVGMobile12/coords.html#TransformAttribute*/', 'coherence': 1}, {'code': 'public static String toPath(BezierPath[] paths) {StringBuilder buf = new StringBuilder();for (int j = 0; j < paths.length; j++) {BezierPath path = paths[j];if (path.size() == 0) {// nothing to do} else if (path.size() == 1) {BezierPath.Node current = path.get(0);buf.append("M ");buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));//buf.append(" L ");buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0] + 1));} else {BezierPath.Node previous;BezierPath.Node current;previous = current = path.get(0);buf.append("M ");buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));char nextCommand = \'L\';for (int i = 1, n = path.size(); i < n; i++) {previous = current;current = path.get(i);if ((previous.mask & BezierPath.C2_MASK) == 0) {if ((current.mask & BezierPath.C1_MASK) == 0) {if (nextCommand != \'L\') {buf.append(" L ");nextCommand = \'L\';} else {buf.append(\' \');}buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));} else {if (nextCommand != \'Q\') {buf.append(" Q ");nextCommand = \'Q\';} else {buf.append(\' \');}buf.append(toNumber(current.x[1]));buf.append(\' \');buf.append(toNumber(current.y[1]));buf.append(\' \');buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));}} else {if ((current.mask & BezierPath.C1_MASK) == 0) {if (nextCommand != \'Q\') {buf.append(" Q ");nextCommand = \'Q\';} else {buf.append(\' \');}buf.append(toNumber(previous.x[2]));buf.append(\' \');buf.append(toNumber(previous.y[2]));buf.append(\' \');buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));} else {if (nextCommand != \'C\') {buf.append(" C ");nextCommand = \'C\';} else {buf.append(\' \');}buf.append(toNumber(previous.x[2]));buf.append(\' \');buf.append(toNumber(previous.y[2]));buf.append(\' \');buf.append(toNumber(current.x[1]));buf.append(\' \');buf.append(toNumber(current.y[1]));buf.append(\' \');buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));}}}if (path.isClosed()) {if (path.size() > 1) {previous = path.get(path.size() - 1);current = path.get(0);if ((previous.mask & BezierPath.C2_MASK) == 0) {if ((current.mask & BezierPath.C1_MASK) == 0) {if (nextCommand != \'L\') {buf.append(" L ");nextCommand = \'L\';} else {buf.append(\' \');}buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));} else {if (nextCommand != \'Q\') {buf.append(" Q ");nextCommand = \'Q\';} else {buf.append(\' \');}buf.append(toNumber(current.x[1]));buf.append(\' \');buf.append(toNumber(current.y[1]));buf.append(\' \');buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));}} else {if ((current.mask & BezierPath.C1_MASK) == 0) {if (nextCommand != \'Q\') {buf.append(" Q ");nextCommand = \'Q\';} else {buf.append(\' \');}buf.append(toNumber(previous.x[2]));buf.append(\' \');buf.append(toNumber(previous.y[2]));buf.append(\' \');buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));} else {if (nextCommand != \'C\') {buf.append(" C ");nextCommand = \'C\';} else {buf.append(\' \');}buf.append(toNumber(previous.x[2]));buf.append(\' \');buf.append(toNumber(previous.y[2]));buf.append(\' \');buf.append(toNumber(current.x[1]));buf.append(\' \');buf.append(toNumber(current.y[1]));buf.append(\' \');buf.append(toNumber(current.x[0]));buf.append(\' \');buf.append(toNumber(current.y[0]));}}}buf.append(" Z");nextCommand = \'\\0\';}}}return buf.toString();', 'comment': '/** Returns a value as a SVG Path attribute.* as specified in http://www.w3.org/TR/SVGMobile12/paths.html#PathDataBNF*/', 'coherence': 1}, {'code': 'public static String toPoints(Point2D.Double[] points) throws IOException {StringBuilder buf = new StringBuilder();for (int i = 0; i < points.length; i++) {if (i != 0) {buf.append(", ");}buf.append(toNumber(points[i].x));buf.append(\',\');buf.append(toNumber(points[i].y));}return buf.toString();', 'comment': '/*** Returns a Point2D.Double array as a Points attribute value.* as specified in http://www.w3.org/TR/SVGMobile12/shapes.html#PointsBNF*/', 'coherence': 1}, {'code': 'public ViewToolBar() {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");setName(labels.getString(getID() + ".toolbar"));setDisclosureStateCount(3);', 'comment': '/** Creates new instance. */', 'coherence': 1}, {'code': 'public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {if (this.flavor.equals(flavor)) {return new ByteArrayInputStream(data);} else {throw new UnsupportedFlavorException(flavor);', 'comment': '/*** Returns an object which represents the data to be transferred.  The class* of the object returned is defined by the representation class of the flavor.** @param flavor the requested flavor for the data* @see DataFlavor#getRepresentationClass* @exception IOException        if the data is no longer available*       in the requested flavor.* @exception UnsupportedFlavorException if the requested data flavor is*       not supported.*/', 'coherence': 1}, {'code': 'public DataFlavor[] getTransferDataFlavors() {return new DataFlavor[] {flavor};', 'comment': '/*** Returns an array of DataFlavor objects indicating the flavors the data* can be provided in.  The array should be ordered according to preference* for providing the data (from most richly descriptive to least descriptive).* @return an array of data flavors in which this data can be transferred*/', 'coherence': 1}, {'code': 'public XMLTransferable(byte[] data, String mimeType, String humanPresentableName) {this.data = data;this.flavor = new DataFlavor(mimeType, humanPresentableName);', 'comment': '/** Creates new XMLTransferable */', 'coherence': 1}, {'code': 'public PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {this(pathPrototype, bezierPrototype, null);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'protected Drawing createDrawing() {DefaultDrawing drawing = new DefaultDrawing();drawing.addInputFormat(new SVGZInputFormat());drawing.addInputFormat(new ImageInputFormat(new SVGImageFigure()));drawing.addOutputFormat(new SVGOutputFormat());drawing.addOutputFormat(new SVGZOutputFormat());drawing.addOutputFormat(new ImageOutputFormat());drawing.addOutputFormat(new ImageOutputFormat("JPG", "Joint Photographics Experts Group (JPEG)", "jpg", BufferedImage.TYPE_INT_RGB));drawing.addOutputFormat(new ImageOutputFormat("BMP", "Windows Bitmap (BMP)", "bmp", BufferedImage.TYPE_BYTE_INDEXED));return drawing;', 'comment': '/*** Creates the drawing.*/', 'coherence': 1}, {'code': '@Overridepublic final void init() {// set the language of the appletif (getParameter("Locale") != null) {Locale.setDefault(new Locale(getParameter("Locale")));}final ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");// Set look and feel// -----------------try {UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());} catch (Throwable e) {// Do nothing.// If we can\'t set the desired look and feel, UIManager does// automaticaly the right thing for us.}// Set our own popup factory, because the one that comes with Mac OS X// creates translucent popups which is not useful for color selection// using pop menus.try {PopupFactory.setSharedInstance(new PopupFactory());} catch (Throwable e) {// If we can\'t set the popup factory, we have to use what is there.}// Display a progress indicator while we are loading the drawing// ----------------------------------------------------------Container c = getContentPane();final ProgressIndicator progress = new ProgressIndicator(getName(), labels.getString("progressInitializing"));c.add(progress);progress.revalidate();// Load the drawing using a worker thread// --------------------------------------new Worker() {protected Object construct() throws Exception {Thread t = new Thread() {@Overridepublic void run() {drawingComponent = createDrawingComponent();}};t.start();progress.setNote(labels.getString("progressLoading"));Object drawing = loadDrawing(progress);progress.setNote(labels.getString("progressOpeningEditor"));progress.setIndeterminate(true);t.join();return drawing;}protected void done(Object result) {Container c = getContentPane();c.setLayout(new BorderLayout());c.removeAll();c.add(drawingComponent.getComponent());initComponents();if (result != null) {if (result instanceof Drawing) {setDrawing((Drawing) result);} else if (result instanceof Throwable) {setDrawing(createDrawing());getDrawing().add(new SVGTextFigure(result.toString()));((Throwable) result).printStackTrace();}}drawingComponent.revalidate();}protected void failed(Throwable result) {Container c = getContentPane();c.setLayout(new BorderLayout());c.removeAll();Throwable error = (Throwable) result;error.printStackTrace();String message = (error.getMessage() == null) ? error.toString() : error.getMessage();MessagePanel mp = new MessagePanel(UIManager.getIcon("OptionPane.errorIcon"),labels.getFormatted("messageLoadFailed", htmlencode(getParameter("DrawingURL")), htmlencode(message)));c.add(mp);mp.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent evt) {if (evt.getActionCommand().equals("close")) {close();}}});mp.revalidate();}protected void finished() {long end = System.currentTimeMillis();System.out.println("AbstractDrawingApplet startup latency:" + (end - start));}}.start();', 'comment': '/*** Displays a progress indicator and then invokes <code>loadDrawing</code>* on a worker thread. Displays the drawing panel when done successfully.* Displays an error message when done unsuccessfully.** @see #loadDrawing*/', 'coherence': 1}, {'code': '@Overridepublic String getParameter(String name) {try {return super.getParameter(name);} catch (NullPointerException e) {return null;', 'comment': "/*** Same as <code>Applet.getParameter()</code> but doesn't throw a* NullPointerException when used without an Applet context.*/", 'coherence': 1}, {'code': 'private static String htmlencode(String str) {if (str == null) {return "";} else {StringBuilder buf = new StringBuilder();for (char ch : str.toCharArray()) {switch (ch) {case \'<\':buf.append("&lt;");break;case \'>\':buf.append("&gt;");break;case \'&\':buf.append("&amp;");break;default:buf.append(ch);break;}}return buf.toString();', 'comment': "/*** Escapes all '<', '>' and '&' characters in a string.* @param str A String.* @return HTMlEncoded String.*/", 'coherence': 1}, {'code': 'private void setDrawing(Drawing d) {drawingComponent.setDrawing(d);', 'comment': '/*** Sets the drawing on the drawing panel.*/', 'coherence': 1}, {'code': 'public String getParameter(String name, String defaultValue) {try {String value = super.getParameter(name);return (value == null) ? defaultValue : value;} catch (NullPointerException e) {return defaultValue;', 'comment': "/*** Same as <code>Applet.getParameter()</code> but doesn't throw a* NullPointerException when used without an Applet context.*/", 'coherence': 1}, {'code': 'private Drawing getDrawing() {return drawingComponent.getDrawing();', 'comment': '/*** Gets the drawing from the drawing panel.*/', 'coherence': 1}, {'code': '@Overridepublic String getAppletInfo() {return getName() +"\\nVersion " + getVersion() +"\\n\\nCopyright 1996-2010 (c) by the original authors of JHotDraw and all its contributors" +"\\nThis software is licensed under LGPL or" +"\\nCreative Commons 2.5 BY";', 'comment': '/*** Returns information about the applet.*/', 'coherence': 1}, {'code': 'protected Drawing loadDrawing(ProgressIndicator progress) throws IOException {Drawing drawing = createDrawing();if (getParameter("datafile") != null) {ByteArrayOutputStream buf = new ByteArrayOutputStream();URL url = new URL(getDocumentBase(), getParameter("datafile"));URLConnection uc = url.openConnection();// Disable caching. This ensures that we always request the// newest version of the drawing from the server.// (Note: The server still needs to set the proper HTTP caching// properties to prevent proxies from caching the drawing).if (uc instanceof HttpURLConnection) {((HttpURLConnection) uc).setUseCaches(false);}// Read the data into a bufferint contentLength = uc.getContentLength();InputStream in = uc.getInputStream();try {if (contentLength != -1) {in = new BoundedRangeInputStream(in);((BoundedRangeInputStream) in).setMaximum(contentLength + 1);progress.setProgressModel((BoundedRangeModel) in);progress.setIndeterminate(false);}BufferedInputStream bin = new BufferedInputStream(in);bin.mark(512);// Read the data using all supported input formats// until we succeedfinal ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");IOException formatException = null;for (InputFormat format : drawing.getInputFormats()) {try {bin.reset();} catch (IOException e) {uc = url.openConnection();in = uc.getInputStream();in = new BoundedRangeInputStream(in);((BoundedRangeInputStream) in).setMaximum(contentLength + 1);progress.setProgressModel((BoundedRangeModel) in);bin = new BufferedInputStream(in);bin.mark(512);}try {bin.reset();format.read(bin, drawing, true);formatException = null;break;} catch (IOException e) {formatException = e;}}if (formatException != null) {throw formatException;}} finally {in.close();}}return drawing;', 'comment': '/*** Loads the drawing.* By convention this method is invoked on a worker thread.** @param progress A ProgressIndicator to inform the user about the progress* of the operation.* @return The Drawing that was loaded.*/', 'coherence': 1}, {'code': 'protected SVGDrawingPanel createDrawingComponent() {SVGDrawingPanel p = new SVGDrawingPanel();DefaultDrawingEditor editor = new DefaultDrawingEditor();p.setEditor(new DefaultDrawingEditor());return p;', 'comment': '/*** Creates the drawing component.*/', 'coherence': 1}, {'code': 'public String getVersion() {if (version == null) {BufferedReader r = null;try {InputStream resource = SVGApplet.class.getResourceAsStream("version.txt");r = new BufferedReader(new InputStreamReader(resource, "UTF-8"));version = r.readLine();} catch (IOException e) {version = "unknown";} catch (NullPointerException e) {version = "unknown";} finally {if (r != null) {try {r.close();} catch (IOException e) {// suppress}}}}return version;', 'comment': '/*** Gets the version of the applet.*/', 'coherence': 1}, {'code': 'protected void close() {AppletContext appletContext;try {appletContext = getAppletContext();} catch (Throwable e) {appletContext = null;}if (appletContext == null) {System.exit(0);} else {try {appletContext.showDocument(new URL(getDocumentBase(), getParameter("PageURL")));} catch (MalformedURLException ex) {ex.printStackTrace();', 'comment': '/*** Closes the applet. This method can be implemented by invoking* <code>getAppletContext().showDocument(...)</code>.*/', 'coherence': 1}, {'code': 'public SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype, Map<AttributeKey, Object> attributes) {super(imagePrototype, attributes);this.groupPrototype = groupPrototype;this.imagePrototype = imagePrototype;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype) {super(imagePrototype);this.groupPrototype = groupPrototype;this.imagePrototype = imagePrototype;', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public SVGApplicationModel() {gridConstrainer = new GridConstrainer(12, 12);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic List<JToolBar> createToolBars(Application app, View p) {LinkedList<JToolBar> list = new LinkedList<JToolBar>();return list;', 'comment': '/*** Overriden to create no toolbars.** @param app* @param p* @return An empty list.*/', 'coherence': 1}, {'code': 'public static void main(String[] args) {// Debug resource bundleResourceBundleUtil.setVerbose(true);Application app;String os = System.getProperty("os.name").toLowerCase();if (os.startsWith("mac")) {app = new OSXApplication();} else if (os.startsWith("win")) {//  app = new DefaultMDIApplication();app = new SDIApplication();} else {app = new SDIApplication();}SVGApplicationModel model = new SVGApplicationModel();model.setName("JHotDraw SVG");model.setVersion(Main.class.getPackage().getImplementationVersion());model.setCopyright("Copyright 2006-2010 (c) by the authors of JHotDraw.\\n" +"This software is licensed under LGPL and Creative Commons 3.0 Attribution.");model.setViewClassName("org.jhotdraw.samples.svg.SVGView");app.setModel(model);app.launch(args);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public ConvexHullOutlineHandle(SVGPathFigure owner, boolean isTransformHandle, boolean isHoverHandle) {super(owner);if (isTransformHandle) {if (isHoverHandle) {stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;} else {stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;}stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;} else {if (isHoverHandle) {stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;} else {stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;}stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;', 'comment': '/*** Creates a bounds outline handle for resizing or transforming a component.** @param owner*/', 'coherence': 1}, {'code': 'public ConvexHullOutlineHandle(SVGPathFigure owner) {this(owner, false, false);', 'comment': '/*** Creates a bounds outline handle for resizing a component.** @param owner*/', 'coherence': 1}, {'code': 'public ConvexHullOutlineHandle(SVGPathFigure owner, //AttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled,//AttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled,//AttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled,//AttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {super(owner);this.stroke1Enabled = stroke1Enabled;this.strokeColor1Enabled = strokeColor1Enabled;this.stroke2Enabled = stroke2Enabled;this.strokeColor2Enabled = strokeColor2Enabled;this.stroke1Disabled = stroke1Disabled;this.strokeColor1Disabled = strokeColor1Disabled;this.stroke2Disabled = stroke2Disabled;this.strokeColor2Disabled = strokeColor2Disabled;', 'comment': '/*** Creates a bounds outline handle for resizing or transforming a component.** @param owner*/', 'coherence': 1}, {'code': 'public LinkHandle(Figure owner) {super(owner);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Override public void draw(Graphics2D g) {Figure o = getOwner();if (o.get(LINK)!=null&&o.get(LINK).trim().length()>0) {g.setColor((Color) getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));Rectangle r = basicGetBounds();g.drawLine(r.x+(r.width/2)-1, r.y, r.x, r.y);g.drawLine(r.x, r.y, r.x, r.y+r.height-1);g.drawLine(r.x, r.y+r.height-1, r.x+(r.width/2)-1, r.y+r.height-1);g.drawLine(r.x+(r.width/3), r.y+r.height/2, r.x+r.width-1, r.y+r.height/2);g.drawLine(r.x+r.width-1, r.y+r.height/2, (int)(r.x+r.width*.75-1), (int)(r.y+r.height*.25));g.drawLine(r.x+r.width-1, r.y+r.height/2, (int)(r.x+r.width*.75-1), (int)(r.y+r.height*.75));', 'comment': '/*** Draws this handle.*/', 'coherence': 1}, {'code': 'public int getDefaultEventIndex() {return defaultEventIndex;', 'comment': '/*** A bean may have a "default" event that is the event that will* mostly commonly be used by human\'s when using the bean.* @return Index of default event in the EventSetDescriptor array*    returned by getEventSetDescriptors.* <P>  Returns -1 if there is no default event.*/', 'coherence': 1}, {'code': 'public int getDefaultPropertyIndex() {return defaultPropertyIndex;', 'comment': '/*** A bean may have a "default" property that is the property that will* mostly commonly be initially chosen for update by human\'s who are* customizing the bean.* @return  Index of default property in the PropertyDescriptor array*     returned by getPropertyDescriptors.* <P>  Returns -1 if there is no default property.*/', 'coherence': 1}, {'code': 'public EventSetDescriptor[] getEventSetDescriptors() {return getEdescriptor();', 'comment': "/*** Gets the bean's <code>EventSetDescriptor</code>s.** @return  An array of EventSetDescriptors describing the kinds of* events fired by this bean.  May return null if the information* should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public PropertyDescriptor[] getPropertyDescriptors() {return getPdescriptor();', 'comment': '/*** Gets the bean\'s <code>PropertyDescriptor</code>s.** @return An array of PropertyDescriptors describing the editable* properties supported by this bean.  May return null if the* information should be obtained by automatic analysis.* <p>* If a property is indexed, then its entry in the result array will* belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.* A client of getPropertyDescriptors can use "instanceof" to check* if a given PropertyDescriptor is an IndexedPropertyDescriptor.*/', 'coherence': 1}, {'code': 'public BeanDescriptor getBeanDescriptor() {return getBdescriptor();', 'comment': "/*** Gets the bean's <code>BeanDescriptor</code>s.** @return BeanDescriptor describing the editable* properties of this bean.  May return null if the* information should be obtained by automatic analysis.*/", 'coherence': 1}, {'code': 'public ViewSourceAction(Application app, View view) {super(app, view);ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");labels.configureAction(this, ID);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public void read(File f, InputFormat format) throws IOException {if (format == null) {read(f);return;}// Create a new drawing objectDrawing newDrawing = createDrawing();if (newDrawing.getInputFormats().size() == 0) {throw new InternalError("Drawing object has no input formats.");}format.read(f, newDrawing);final Drawing loadedDrawing = newDrawing;Runnable r = new Runnable() {public void run() {// Set the drawing on the Event Dispatcher ThreadsetDrawing(loadedDrawing);}};if (SwingUtilities.isEventDispatchThread()) {r.run();} else {try {SwingUtilities.invokeAndWait(r);} catch (InterruptedException ex) {// suppress silently} catch (InvocationTargetException ex) {InternalError ie = new InternalError("Error setting drawing.");ie.initCause(ex);throw ie;', 'comment': '/*** Reads a drawing from the specified file into the SVGDrawingPanel using* the specified input format.* <p>* This method should be called from a worker thread.* Calling it from the Event Dispatcher Thread will block the user* interface, until the drawing is read.*/', 'coherence': 1}, {'code': 'public void write(File f) throws IOException {// Defensively clone the drawing object, so that we are not// affected by changes of the drawing while we write it into the file.final Drawing[] helper = new Drawing[1];Runnable r = new Runnable() {public void run() {helper[0] = (Drawing) getDrawing().clone();}};if (SwingUtilities.isEventDispatchThread()) {r.run();} else {try {SwingUtilities.invokeAndWait(r);} catch (InterruptedException ex) {// suppress silently} catch (InvocationTargetException ex) {InternalError ie = new InternalError("Error getting drawing.");ie.initCause(ex);throw ie;}}Drawing saveDrawing = helper[0];if (saveDrawing.getOutputFormats().size() == 0) {throw new InternalError("Drawing object has no output formats.");}// Try out all output formats until we find one which accepts the// filename entered by the user.for (OutputFormat format : saveDrawing.getOutputFormats()) {if (format.getFileFilter().accept(f)) {format.write(f, saveDrawing);// We get here if writing was successful.// We can return since we are done.return;}}throw new IOException("No output format for " + f.getName());', 'comment': '/*** Writes the drawing from the SVGDrawingPanel into a file.* <p>* This method should be called from a worker thread.* Calling it from the Event Dispatcher Thread will block the user* interface, until the drawing is written.*/', 'coherence': 1}, {'code': 'public void read(File f) throws IOException {// Create a new drawing objectDrawing newDrawing = createDrawing();if (newDrawing.getInputFormats().size() == 0) {throw new InternalError("Drawing object has no input formats.");}// Try out all input formats until we succeedIOException firstIOException = null;for (InputFormat format : newDrawing.getInputFormats()) {try {format.read(f, newDrawing);final Drawing loadedDrawing = newDrawing;Runnable r = new Runnable() {public void run() {// Set the drawing on the Event Dispatcher ThreadsetDrawing(loadedDrawing);}};if (SwingUtilities.isEventDispatchThread()) {r.run();} else {try {SwingUtilities.invokeAndWait(r);} catch (InterruptedException ex) {// suppress silently} catch (InvocationTargetException ex) {InternalError ie = new InternalError("Error setting drawing.");ie.initCause(ex);throw ie;}}// We get here if reading was successful.// We can return since we are done.return;//} catch (IOException e) {// We get here if reading failed.// We only preserve the exception of the first input format,// because that\'s the one which is best suited for this drawing.if (firstIOException == null) {firstIOException = e;}}}throw firstIOException;', 'comment': '/*** Reads a drawing from the specified file into the SVGDrawingPanel.* <p>* This method should be called from a worker thread.* Calling it from the Event Dispatcher Thread will block the user* interface, until the drawing is read.*/', 'coherence': 1}, {'code': 'public void write(File f, OutputFormat format) throws IOException {if (format == null) {write(f);return;}// Defensively clone the drawing object, so that we are not// affected by changes of the drawing while we write it into the file.final Drawing[] helper = new Drawing[1];Runnable r = new Runnable() {public void run() {helper[0] = (Drawing) getDrawing().clone();}};if (SwingUtilities.isEventDispatchThread()) {r.run();} else {try {SwingUtilities.invokeAndWait(r);} catch (InterruptedException ex) {// suppress silently} catch (InvocationTargetException ex) {InternalError ie = new InternalError("Error getting drawing.");ie.initCause(ex);throw ie;}}// Write drawing to fileDrawing saveDrawing = helper[0];format.write(f, saveDrawing);', 'comment': '/*** Writes the drawing from the SVGDrawingPanel into a file using the* specified output format.* <p>* This method should be called from a worker thread.* Calling it from the Event Dispatcher Thread will block the user* interface, until the drawing is written.*/', 'coherence': 1}, {'code': 'public Drawing createDrawing() {Drawing drawing = new QuadTreeDrawing();LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();inputFormats.add(new SVGZInputFormat());inputFormats.add(new ImageInputFormat(new SVGImageFigure(), "PNG", "Portable Network Graphics (PNG)", "png", "image/png"));inputFormats.add(new ImageInputFormat(new SVGImageFigure(), "JPG", "Joint Photographics Experts Group (JPEG)", "jpg","image/jpg"));inputFormats.add(new ImageInputFormat(new SVGImageFigure(), "GIF", "Graphics Interchange Format (GIF)", "gif", "image/gif"));inputFormats.add(new TextInputFormat(new SVGTextFigure()));drawing.setInputFormats(inputFormats);LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();outputFormats.add(new SVGOutputFormat());outputFormats.add(new SVGZOutputFormat());outputFormats.add(new ImageOutputFormat());outputFormats.add(new ImageOutputFormat("JPG", "Joint Photographics Experts Group (JPEG)", "jpg", BufferedImage.TYPE_INT_RGB));outputFormats.add(new ImageOutputFormat("BMP", "Windows Bitmap (BMP)", "bmp", BufferedImage.TYPE_BYTE_INDEXED));outputFormats.add(new ImageMapOutputFormat());drawing.setOutputFormats(outputFormats);return drawing;', 'comment': '/*** Creates a new Drawing object which can be used with this* {@code SVGDrawingPanel}.*/', 'coherence': 1}, {'code': 'private void initComponents() {java.awt.GridBagConstraints gridBagConstraints;toolButtonGroup = new javax.swing.ButtonGroup();scrollPane = new javax.swing.JScrollPane();view = new org.jhotdraw.draw.DefaultDrawingView();toolsPanel = new javax.swing.JPanel();toolsScrollPane = new javax.swing.JScrollPane();toolsPane = new javax.swing.JPanel();creationToolBar = new org.jhotdraw.samples.svg.gui.ToolsToolBar();actionToolBar = new org.jhotdraw.samples.svg.gui.ActionsToolBar();fillToolBar = new org.jhotdraw.samples.svg.gui.FillToolBar();strokeToolBar = new org.jhotdraw.samples.svg.gui.StrokeToolBar();fontToolBar = new org.jhotdraw.samples.svg.gui.FontToolBar();arrangeToolBar = new org.jhotdraw.samples.svg.gui.ArrangeToolBar();alignToolBar = new org.jhotdraw.samples.svg.gui.AlignToolBar();figureToolBar = new org.jhotdraw.samples.svg.gui.FigureToolBar();linkToolBar = new org.jhotdraw.samples.svg.gui.LinkToolBar();canvasToolBar = new org.jhotdraw.samples.svg.gui.CanvasToolBar();viewToolBar = new org.jhotdraw.samples.svg.gui.ViewToolBar();setBackground(new java.awt.Color(255, 255, 255));setLayout(new java.awt.BorderLayout());scrollPane.setBorder(null);scrollPane.setViewportView(view);add(scrollPane, java.awt.BorderLayout.CENTER);toolsPanel.setBackground(new java.awt.Color(255, 255, 255));toolsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));toolsPanel.setOpaque(true);toolsPanel.setLayout(new java.awt.GridBagLayout());toolsScrollPane.setBorder(PaletteLookAndFeel.getInstance().getBorder("Ribbon.border"));toolsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);toolsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);toolsScrollPane.setMinimumSize(new java.awt.Dimension(0, 0));toolsPane.setForeground(new java.awt.Color(153, 153, 153));toolsPane.add(creationToolBar);toolsPane.add(actionToolBar);toolsPane.add(fillToolBar);strokeToolBar.setMargin(new java.awt.Insets(0, 10, 0, 0));toolsPane.add(strokeToolBar);toolsPane.add(fontToolBar);toolsPane.add(arrangeToolBar);toolsPane.add(alignToolBar);toolsPane.add(figureToolBar);toolsPane.add(linkToolBar);toolsPane.add(canvasToolBar);toolsPane.add(viewToolBar);toolsScrollPane.setViewportView(toolsPane);gridBagConstraints = new java.awt.GridBagConstraints();gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;gridBagConstraints.weightx = 1.0;gridBagConstraints.weighty = 1.0;toolsPanel.add(toolsScrollPane, gridBagConstraints);add(toolsPanel, java.awt.BorderLayout.SOUTH);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'public SVGDrawingPanel() {labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");try {prefs = PreferencesUtil.userNodeForPackage(getClass());} catch (SecurityException e) {// prefs is null, because we are not permitted to read preferences}initComponents();toolsPane.setLayout(new ToolBarLayout());toolsPane.setBackground(new Color(0xf0f0f0));toolsPane.setOpaque(true);viewToolBar.setView(view);undoManager = new UndoRedoManager();Drawing drawing = createDrawing();view.setDrawing(drawing);drawing.addUndoableEditListener(undoManager);// Try to install the DnDDrawingViewTransferHandler// Since this class only works on J2SE 6, we have to use reflection.try {view.setTransferHandler((TransferHandler) Class.forName("org.jhotdraw.draw.DnDDrawingViewTransferHandler").newInstance());} catch (Exception e) {// bail silently}// Sort the toolbars according to the user preferencesArrayList<JToolBar> sortme = new ArrayList<JToolBar>();for (Component c : toolsPane.getComponents()) {if (c instanceof JToolBar) {sortme.add((JToolBar) c);}}Collections.sort(sortme, new Comparator<JToolBar>() {public int compare(JToolBar tb1, JToolBar tb2) {int i1 = prefs.getInt("toolBarIndex." + tb1.getName(), 0);int i2 = prefs.getInt("toolBarIndex." + tb2.getName(), 0);return i1 - i2;}});toolsPane.removeAll();for (JToolBar tb : sortme) {toolsPane.add(tb);}toolsPane.addContainerListener(containerHandler = new ContainerListener() {public void componentAdded(ContainerEvent e) {int i = 0;for (Component c : toolsPane.getComponents()) {if (c instanceof JToolBar) {JToolBar tb = (JToolBar) c;prefs.putInt("toolBarIndex." + tb.getName(), i);i++;}}}public void componentRemoved(ContainerEvent e) {}});setEditor(new DefaultDrawingEditor());', 'comment': '/** Creates new instance. */', 'coherence': 1}, {'code': 'public CombineAction(DrawingEditor editor) {this(editor, new SVGPathFigure(true), true);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': 'public SVGBezierFigure() {this(false);', 'comment': '/** Creates a new instance. */', 'coherence': 1}, {'code': '@Overridepublic int findSegment(Point2D.Double find, double tolerance) {// Apply inverse of transform to pointif (get(TRANSFORM) != null) {try {find = (Point2D.Double) get(TRANSFORM).inverseTransform(find, new Point2D.Double());} catch (NoninvertibleTransformException ex) {System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");}}return getBezierPath().findSegment(find, tolerance);', 'comment': '/*** Gets the segment of the polyline that is hit by* the given Point2D.Double.* @return the index of the segment or -1 if no segment was hit.*/', 'coherence': 1}, {'code': '@Overridepublic boolean joinSegments(Point2D.Double join, double tolerance) {// Apply inverse of transform to pointif (get(TRANSFORM) != null) {try {join = (Point2D.Double) get(TRANSFORM).inverseTransform(join, new Point2D.Double());} catch (NoninvertibleTransformException ex) {System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");}}int i = getBezierPath().findSegment(join, tolerance);if (i != -1 && i > 1) {removeNode(i);return true;}return false;', 'comment': '/*** Joins two segments into one if the given Point2D.Double hits a node* of the polyline.* @return true if the two segments were joined.** @param join a Point at a node on the bezier path* @param tolerance a tolerance, tolerance should take into account* the line width, plus 2 divided by the zoom factor.*/', 'coherence': 1}, {'code': '@Overridepublic int splitSegment(Point2D.Double split, double tolerance) {// Apply inverse of transform to pointif (get(TRANSFORM) != null) {try {split = (Point2D.Double) get(TRANSFORM).inverseTransform(split, new Point2D.Double());} catch (NoninvertibleTransformException ex) {System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");}}int i = getBezierPath().findSegment(split, tolerance);if (i != -1) {addNode(i + 1, new BezierPath.Node(split));}return i + 1;', 'comment': '/*** Splits the segment at the given Point2D.Double if a segment was hit.* @return the index of the segment or -1 if no segment was hit.** @param split a Point on (or near) a segment of the bezier path* @param tolerance a tolerance, tolerance should take into account* the line width, plus 2 divided by the zoom factor.*/', 'coherence': 1}, {'code': 'protected Drawing createDrawing() {return svgPanel.createDrawing();', 'comment': '/*** Creates a new Drawing for this View.*/', 'coherence': 1}, {'code': 'public Pageable createPageable() {return new DrawingPageable(svgPanel.getDrawing());', 'comment': '/*** Creates a Pageable object for printing the View.*/', 'coherence': 1}, {'code': 'public void read(final URI uri, URIChooser chooser) throws IOException {try {JFileURIChooser fc = (JFileURIChooser) chooser;final Drawing drawing = createDrawing();// We start with the selected uri format in the uri chooser,// and then try out all formats we can import.// We need to try out all formats, because the user may have// chosen to load a uri without having used the uri chooser.InputFormat selectedFormat = fileFilterInputFormatMap.get(fc.getFileFilter());boolean success = false;if (selectedFormat != null) {try {selectedFormat.read(new File(uri), drawing, true);success = true;} catch (Exception e) {e.printStackTrace();// try with the next input format}}if (!success) {for (InputFormat sfi : drawing.getInputFormats()) {if (sfi != selectedFormat) {try {sfi.read(new File(uri), drawing, true);success = true;break;} catch (Exception e) {// try with the next input format}}}}if (!success) {ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");throw new IOException(labels.getFormatted("file.open.unsupportedFileFormat.message", URIUtil.getName(uri)));}SwingUtilities.invokeAndWait(new Runnable() {public void run() {Drawing oldDrawing = svgPanel.getDrawing();svgPanel.setDrawing(drawing);firePropertyChange(DRAWING_PROPERTY, oldDrawing, svgPanel.getDrawing());undo.discardAllEdits();}});} catch (InterruptedException e) {InternalError error = new InternalError();e.initCause(e);throw error;} catch (InvocationTargetException e) {InternalError error = new InternalError();error.initCause(e);throw error;', 'comment': '/*** Reads the view from the specified uri.*/', 'coherence': 1}, {'code': '@Overridepublic void init() {super.init();initComponents();JPanel zoomButtonPanel = new JPanel(new BorderLayout());undo = svgPanel.getUndoRedoManager();Drawing oldDrawing = svgPanel.getDrawing();svgPanel.setDrawing(createDrawing());firePropertyChange(DRAWING_PROPERTY, oldDrawing, svgPanel.getDrawing());svgPanel.getDrawing().addUndoableEditListener(undo);initActions();undo.addPropertyChangeListener(propertyHandler = new PropertyChangeListener() {public void propertyChange(PropertyChangeEvent evt) {setHasUnsavedChanges(undo.hasSignificantEdits());', 'comment': '/*** Initializes the View.*/', 'coherence': 1}, {'code': 'private void initComponents() {svgPanel = new org.jhotdraw.samples.svg.SVGDrawingPanel();setLayout(new java.awt.BorderLayout());add(svgPanel, java.awt.BorderLayout.CENTER);', 'comment': '/** This method is called from within the constructor to* initialize the form.* WARNING: Do NOT modify this code. The content of this method is* always regenerated by the Form Editor.*/', 'coherence': 1}, {'code': 'private void initActions() {getActionMap().put(UndoAction.ID, undo.getUndoAction());getActionMap().put(RedoAction.ID, undo.getRedoAction());', 'comment': '/*** Initializes view specific actions.*/', 'coherence': 1}, {'code': 'public void clear() {final Drawing newDrawing = createDrawing();try {Runnable r = new Runnable() {public void run() {Drawing oldDrawing = svgPanel.getDrawing();svgPanel.setDrawing(newDrawing);firePropertyChange(DRAWING_PROPERTY, oldDrawing, newDrawing);if (oldDrawing != null) {oldDrawing.removeAllChildren();}undo.discardAllEdits();}};if (SwingUtilities.isEventDispatchThread()) {r.run();} else {SwingUtilities.invokeAndWait(r);}} catch (InvocationTargetException ex) {ex.printStackTrace();} catch (InterruptedException ex) {ex.printStackTrace();', 'comment': '/*** Clears the view.*/', 'coherence': 1}, {'code': 'public void write(URI uri, URIChooser chooser) throws IOException {new SVGOutputFormat().write(new File(uri), svgPanel.getDrawing());', 'comment': '/*** Writes the view to the specified uri.*/', 'coherence': 1}, {'code': 'public DateTitle() {this(DateFormat.LONG);', 'comment': '/*** Default constructor - builds a new DateTitle that displays the current date in the default* (LONG) format for the locale, positioned to the bottom right of the chart.* <P>* The color will be black in 12 point, plain Helvetica font (maps to Arial on Win32 systems* without Helvetica).*/', 'coherence': 1}, {'code': 'public DateTitle(int dateStyle, Locale locale, Font font, Paint paint) {this(dateStyle, locale, font, paint, AbstractTitle.BOTTOM, AbstractTitle.RIGHT,AbstractTitle.MIDDLE, new Insets(2, 2, 2, 2));', 'comment': '/*** Standard constructor - builds a new DateTitle object with the specified attributes and the* following defaults:  location = BOTTOM, alignment = RIGHT, insets = new Insets(2, 2, 2, 2).* @param dateStyle the Date style to use (SHORT, MEDIUM, LONG, or FULL constants from*          java.util.DateFormat);* @param locale the locale to use to format this date (if you are unsure what to use here, use*         Locale.getDefault() for your default locale);* @param font the font used to display the date;* @param paint the paint used to display the date;*/', 'coherence': 1}, {'code': 'public DateTitle(int dateStyle, Locale locale, Font font, Paint paint, int position,int horizontalAlignment, int verticalAlignment, Insets insets) {super(DateFormat.getDateInstance(dateStyle, locale).format(new Date()),font, paint, position, horizontalAlignment, verticalAlignment, insets);', 'comment': '/*** Full constructor - builds a new DateTitle with the specified attributes.* @param location the relative location of this title (use constants in AbstractTitle);* @param alignment the text alignment of this title (use constants in AbstractTitle);* @param dateStyle the Date style to use (SHORT, MEDIUM, LONG, or FULL constants from*          java.text.DateFormat);* @param locale the locale to use to format this date (if you are unsure what to use here, use*         Locale.getDefault() for your default locale);* @param font the font used to display the date;* @param paint the paint used to display the date;* @param insets the blank space around the outside of the title;*/', 'coherence': 1}, {'code': 'public static JFreeChart createXYChart(String title, String xAxisLabel, String yAxisLabel,XYDataset data, boolean legend) {JFreeChart chart = null;try {NumberAxis xAxis = new HorizontalNumberAxis(xAxisLabel);xAxis.setAutoRangeIncludesZero(false);Axis yAxis = new VerticalNumberAxis(yAxisLabel);XYPlot plot = new XYPlot(xAxis, yAxis);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createXYChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createXYChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates an XY (line) plot with default settings.* @param title The chart title.* @param xAxisLabel A label for the X-axis.* @param yAxisLabel A label for the Y-axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createLineChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);Plot plot = new LinePlot(categoryAxis, valueAxis);chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createLineChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createLineChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a line chart with default settings.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createHighLowChart(String title, String timeAxisLabel,String valueAxisLabel, HighLowDataset data,boolean legend) {JFreeChart chart = null;try {Axis timeAxis = new HorizontalDateAxis(timeAxisLabel);NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);HighLowPlot plot = new HighLowPlot(timeAxis, valueAxis);chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createHighLowChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createHighLowChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates and returns a default instance of a high-low-open-close chart based on the specified* dataset.* <P>* Added by Andrzej Porebski.  Amended by David Gilbert.* @param title The chart title.* @param timeAxisLabel A label for the time axis.* @param valueAxisLabel A label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createVerticalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);Plot plot = new VerticalBarPlot(categoryAxis, valueAxis);chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createVerticalBarChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createVerticalBarChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a vertical bar chart with default settings.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createStackedHorizontalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new VerticalCategoryAxis(categoryAxisLabel);Axis valueAxis = new HorizontalNumberAxis(valueAxisLabel);HorizontalBarPlot plot = new HorizontalBarPlot(valueAxis, categoryAxis);plot.setRenderer(new StackedHorizontalBarRenderer());chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createStackedHorizontalBarChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createStackedHorizontalBarChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a stacked horizontal bar chart with default settings.  This is still experimental at* this point!* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createVerticalXYBarChart(String title, String xAxisLabel,String yAxisLabel, IntervalXYDataset data,boolean legend) {JFreeChart chart = null;try {HorizontalDateAxis timeAxis = new HorizontalDateAxis(xAxisLabel);Axis valueAxis = new VerticalNumberAxis(yAxisLabel);Plot plot = new VerticalXYBarPlot(timeAxis, valueAxis, new Insets(0,0,0,0), Color.white,new BasicStroke(), Color.gray);chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createVerticalXYBarChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createVerticalXYBarChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates and returns a default instance of a VerticalXYBarChart based on the specified* dataset.* @param title The chart title.* @param xAxisLabel A label for the X-axis.* @param yAxisLabel A label for the Y-axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createPieChart(String title, PieDataset data, boolean legend) {JFreeChart chart = null;try {Plot plot = new PiePlot();chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// can\'t see how this could happen for a pie chartSystem.err.println("ChartFactory.createPieChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// can\'t see how this could happen for a pie chartSystem.err.println("ChartFactory.createPieChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a pie chart with default settings.* @param title The chart title.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createVerticalBarChart3D(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);Axis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);// the insets here are a workaround for the fact that the plot area is no longer a// rectangle, so it is overlapping the title.  To be fixed...plot.setInsets(new Insets(20, 2, 2, 2));plot.setRenderer(new VerticalBarRenderer3D());chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createVerticalBarChart3D(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createVerticalBarChart3D(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a vertical 3D-effect bar chart with default settings.* <P>* Added by Serge V. Grachov.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createTimeSeriesChart(String title, String timeAxisLabel,String valueAxisLabel, XYDataset data,boolean legend) {JFreeChart chart = null;try {Axis timeAxis = new HorizontalDateAxis(timeAxisLabel);NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);valueAxis.setAutoRangeIncludesZero(false);  // override defaultXYPlot plot = new XYPlot(timeAxis, valueAxis);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createTimeSeriesChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createTimeSeriesChart(...) : axis not compatible.");}return chart;', 'comment': '/*** Creates and returns a time series chart.  A time series chart is an XYPlot with a date* axis (horizontal) and a number axis (vertical), and each data item is connected with a line.* <P>* Note that you can supply a TimeSeriesDataset to this method as it is a subclass of* XYDataset.* @param title The chart title.* @param timeAxisLabel A label for the time axis.* @param valueAxisLabel A label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createHorizontalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new VerticalCategoryAxis(categoryAxisLabel);Axis valueAxis = new HorizontalNumberAxis(valueAxisLabel);Plot plot = new HorizontalBarPlot(valueAxis, categoryAxis);chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createHorizontalBarChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createHorizontalBarChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a horizontal bar chart with default settings.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createScatterPlot(String title, String xAxisLabel, String yAxisLabel,XYDataset data, boolean legend) {JFreeChart chart = null;try {Axis xAxis = new HorizontalNumberAxis(xAxisLabel);Axis yAxis = new VerticalNumberAxis(yAxisLabel);XYPlot plot = new XYPlot(xAxis, yAxis);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES));chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createScatterPlot(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createScatterPlot(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a scatter plot with default settings.* @param title The chart title.* @param xAxisLabel A label for the X-axis.* @param yAxisLabel A label for the Y-axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createStackedVerticalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {JFreeChart chart = null;try {Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);VerticalBarPlot plot = new VerticalBarPlot(categoryAxis, valueAxis);plot.setRenderer(new StackedVerticalBarRenderer());chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);}catch (AxisNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createStackedVerticalBarChart(...) : axis not compatible.");}catch (PlotNotCompatibleException e) {// this won\'t happen unless you mess with the axis constructors aboveSystem.err.println("ChartFactory.createStackedVerticalBarChart(...) : plot not compatible.");}return chart;', 'comment': '/*** Creates a stacked vertical bar chart with default settings.  This is still experimental at* this point!* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public void setTrailGapPercent(double percent) {if (this.trailGapPercent!=percent) {trailGapPercent = Math.min(percent, MAX_TRAIL_GAP_PERCENT);notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap after the last bar on the chart, and notifies registered listeners that the plot* has been modified.* @param percent The new gap value.*/', 'coherence': 1}, {'code': 'public BarPlot(Axis horizontalAxis, Axis verticalAxis) throws AxisNotCompatibleException,PlotNotCompatibleException{this(horizontalAxis, verticalAxis,new Insets(2, 2, 2, 2),DEFAULT_INTRO_GAP_PERCENT,DEFAULT_TRAIL_GAP_PERCENT,DEFAULT_CATEGORY_GAPS_PERCENT,DEFAULT_ITEM_GAPS_PERCENT);', 'comment': '/*** Constructs a bar plot with the specified axes...other attributes take default values.*/', 'coherence': 1}, {'code': 'public double getItemGapsPercent() {return itemGapsPercent;', 'comment': '/*** Returns the gap between one bar and the next within the same category, measured in Java 2D* User Space units.*/', 'coherence': 1}, {'code': 'public void setIntroGapPercent(double percent) {if (this.introGapPercent!=percent) {this.introGapPercent = Math.min(percent, MAX_INTRO_GAP_PERCENT);notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap before the first bar on the chart, and notifies registered listeners that the* plot has been modified.* @param percent The new gap value.*/', 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis axis) throws AxisNotCompatibleException {super.setVerticalAxis(axis);', 'comment': "/*** Sets the vertical axis for the plot.* <P>* This method should throw an exception if the axis doesn't implement the required interfaces.* @param axis The new vertical axis.*/", 'coherence': 1}, {'code': 'public void setCategoryGapsPercent(double percent) {if (this.categoryGapsPercent!=percent) {this.categoryGapsPercent=Math.min(percent, MAX_CATEGORY_GAPS_PERCENT);notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap between the last bar in one category and the first bar in the* next category, and notifies registered listeners that the plot has been modified.* @param gap The new gap value.*/', 'coherence': 1}, {'code': 'public double getIntroGapPercent() {return introGapPercent;', 'comment': '/*** Returns the gap before the first bar on the chart, as a percentage of the available drawing* space (0.05 = 5 percent).*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {super.setHorizontalAxis(axis);', 'comment': "/*** Sets the horizontal axis for the plot.* <P>* This method should throw an exception if the axis doesn't implement the required interfaces.* @param axis The new horizontal axis.*/", 'coherence': 1}, {'code': 'public BarPlot(Axis horizontal, Axis vertical, Insets insets,double introGapPercent, double trailGapPercent,double categoryGapsPercent, double itemGapsPercent)throws AxisNotCompatibleException, PlotNotCompatibleException {super(horizontal, vertical);this.insets = insets;this.introGapPercent = introGapPercent;this.trailGapPercent = trailGapPercent;this.categoryGapsPercent = categoryGapsPercent;this.itemGapsPercent = itemGapsPercent;', 'comment': '/*** Standard constructor: returns a BarPlot with attributes specified by the caller.* @param horizontal The horizontal axis;* @param vertical The vertical axis;* @param introGapPercent The gap before the first bar in the plot, as a percentage of the*            available drawing space;* @param trailGapPercent The gap after the last bar in the plot, as a percentage of the*            available drawing space;* @param categoryGapsPercent The percentage of drawing space allocated to the gap between the*               last bar in one category and the first bar in the next category;* @param itemGapsPercent The gap between bars within the same category;*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a* CategoryDataset.*/', 'coherence': 1}, {'code': 'public double getTrailGapPercent() {return trailGapPercent;', 'comment': '/*** Returns the gap following the last bar on the chart, as a percentage of the available* drawing space.*/', 'coherence': 1}, {'code': 'public double getCategoryGapsPercent() {return categoryGapsPercent;', 'comment': '/*** Returns the percentage of the drawing space that is allocated to providing gaps between the* categories.*/', 'coherence': 1}, {'code': 'public java.util.List getCategories() {return getDataset().getCategories();', 'comment': '/*** A convenience method that returns a list of the categories in the data source.*/', 'coherence': 1}, {'code': 'public void setLabelFont(Font font) {// check arguments...if (font==null) {throw new IllegalArgumentException("Axis.setLabelFont(...): null not permitted.");}// make the change (if necessary)...if (!this.labelFont.equals(font)) {this.labelFont = font;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the font for the axis label.* <P>* Registered listeners are notified of a general change to the axis.* @param font The new label font.*/', 'coherence': 1}, {'code': 'public void setTickMarksVisible(boolean flag) {if (flag!=tickMarksVisible) {tickMarksVisible = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that indicates whether or not the tick marks are showing.* <P>* Registered listeners are notified of a general change to the axis.* @param flag The flag.*/', 'coherence': 1}, {'code': 'public Insets getTickLabelInsets() {return this.tickLabelInsets;', 'comment': '/*** Returns the insets for the tick labels.* @return The insets for the tick labels.*/', 'coherence': 1}, {'code': 'public void setLabel(String label) {String existing = this.label;if (existing!=null) {if (!existing.equals(label)) {this.label = label;notifyListeners(new AxisChangeEvent(this));}}else {if (label!=null) {this.label = label;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the label for the axis.* <P>* Registered listeners are notified of a general change to the axis.* @param label The new label for the axis (null permitted).*/', 'coherence': 1}, {'code': 'public void setTickLabelFont(Font font) {// check arguments...if (font==null) {throw new IllegalArgumentException("Axis.setTickLabelFont(...): null not permitted.");}// apply change if necessary...if (!this.tickLabelFont.equals(font)) {this.tickLabelFont = font;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the font for the tick labels.* <P>* Registered listeners are notified of a general change to the axis.* @param font The new tick label font.*/', 'coherence': 1}, {'code': 'public void setTickMarkStroke(Stroke stroke) {// check arguments...if (stroke==null) {throw new IllegalArgumentException("Axis.setTickMarkStroke(...): null not permitted.");}// make the change (if necessary)...if (!this.tickMarkStroke.equals(stroke)) {this.tickMarkStroke = stroke;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the pen/brush used to draw tick marks (if they are showing).* <P>* Registered listeners are notified of a general change to the axis.* @param stroke The new pen/brush (null not permitted).*/', 'coherence': 1}, {'code': 'public String getLabel() {return label;', 'comment': '/*** Returns the label for the axis.* @return The label for the axis (null possible).*/', 'coherence': 1}, {'code': 'public boolean isTickLabelsVisible() {return tickLabelsVisible;', 'comment': '/*** Returns a flag indicating whether or not the tick labels are visible.* @return A flag indicating whether or not the tick labels are visible.*/', 'coherence': 1}, {'code': 'public void addChangeListener(AxisChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the axis.* @param listener The object that is being registered.*/', 'coherence': 1}, {'code': 'public Insets getLabelInsets() {return this.labelInsets;', 'comment': '/*** Returns the insets for the label (that is, the amount of blank space that should be left* around the label).*/', 'coherence': 1}, {'code': 'public Stroke getTickMarkStroke() {return tickMarkStroke;', 'comment': '/*** Returns the pen/brush used to draw tick marks (if they are showing).* @return The pen/brush used to draw tick marks.*/', 'coherence': 1}, {'code': 'public boolean isTickMarksVisible() {return tickMarksVisible;', 'comment': '/*** Returns the flag that indicates whether or not the tick marks are showing.* @return The flag that indicates whether or not the tick marks are showing.*/', 'coherence': 1}, {'code': 'protected void notifyListeners(AxisChangeEvent event) {java.util.Iterator iterator = listeners.iterator();while (iterator.hasNext()) {AxisChangeListener listener = (AxisChangeListener)iterator.next();listener.axisChanged(event);', 'comment': '/*** Notifies all registered listeners that the axis has changed.  The AxisChangeEvent provides* information about the change.* @param event Information about the change to the axis.*/', 'coherence': 1}, {'code': 'protected void drawVerticalString(String text, Graphics2D g2, float x, float y) {AffineTransform saved = g2.getTransform();// apply a 90 degree rotationAffineTransform rotate = AffineTransform.getRotateInstance(-Math.PI/2, x, y);g2.transform(rotate);g2.drawString(text, x, y);g2.setTransform(saved);', 'comment': '/*** A utility method for drawing text vertically.* @param text The text.* @param g2 The graphics device.* @param x The x-coordinate.* @param y The y-coordinate.*/', 'coherence': 1}, {'code': 'protected Axis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible,Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean tickMarkVisible, Stroke tickMarkStroke) {this.label = label;this.labelFont = labelFont;this.labelPaint = labelPaint;this.labelInsets = labelInsets;this.tickLabelsVisible = tickLabelsVisible;this.tickLabelFont = tickLabelFont;this.tickLabelPaint = tickLabelPaint;this.tickLabelInsets = tickLabelInsets;this.tickMarksVisible = tickMarksVisible;this.tickMarkStroke = tickMarkStroke;this.ticks = new java.util.ArrayList();this.listeners = new java.util.ArrayList();', 'comment': '/*** Constructs an axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param tickMarksVisible Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public Font getLabelFont() {return labelFont;', 'comment': '/*** Returns the font for the axis label.* @return The font for the axis label.*/', 'coherence': 1}, {'code': 'protected double getMaxTickLabelWidth(Graphics2D g2, Rectangle2D plotArea) {double maxWidth = 0.0;Font font = getTickLabelFont();FontRenderContext frc = g2.getFontRenderContext();Iterator iterator = this.ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();Rectangle2D labelBounds = font.getStringBounds(tick.getText(), frc);if (labelBounds.getWidth()>maxWidth) {maxWidth = labelBounds.getWidth();}}return maxWidth;', 'comment': '/*** Returns the maximum width of the ticks in the working list (that is set up by* refreshTicks()).* @param g2 The graphics device.* @param plotArea The area within which the plot is to be drawn.*/', 'coherence': 1}, {'code': 'public void removeChangeListener(AxisChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Deregisters an object for notification of changes to the axis.* @param listener The object to deregister.*/', 'coherence': 1}, {'code': 'public Plot getPlot() {return plot;', 'comment': '/*** Returns the plot that the axis is assigned to.* <P>* This method will return null if the axis is not currently assigned to a plot.* @return The plot that the axis is assigned to.*/', 'coherence': 1}, {'code': 'public Paint getTickLabelPaint() {return this.tickLabelPaint;', 'comment': '/*** Returns the color/shade used for the tick labels.* @return The color/shade used for the tick labels.*/', 'coherence': 1}, {'code': 'public void setLabelPaint(Paint paint) {// check arguments...if (paint==null) {throw new IllegalArgumentException("Axis.setLabelPaint(...): null not permitted.");}// make the change (if necessary)...if (!this.labelPaint.equals(paint)) {this.labelPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the color/shade used to draw the axis label.* <P>* Registered listeners are notified of a general change to the axis.* @param paint The new color/shade for the axis label.*/', 'coherence': 1}, {'code': 'public void setTickLabelInsets(Insets insets) {// check arguments...if (insets==null) {throw new IllegalArgumentException("Axis.setTickLabelInsets(...): null not permitted.");}// apply change if necessary...if (!this.tickLabelInsets.equals(insets)) {this.tickLabelInsets = insets;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the insets for the tick labels, and notifies registered listeners that the axis has* been modified.* @param insets The new tick label insets.*/', 'coherence': 1}, {'code': 'public Paint getLabelPaint() {return this.labelPaint;', 'comment': '/*** Returns the color/shade used to draw the axis label.* @return The color/shade used to draw the axis label.*/', 'coherence': 1}, {'code': 'public void setLabelInsets(Insets insets) {if (!insets.equals(this.labelInsets)) {this.labelInsets = insets;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the insets for the axis label, and notifies registered listeners that the axis has been* modified.* @param insets The new label insets;*/', 'coherence': 1}, {'code': 'protected Axis(String label) {this(label,DEFAULT_AXIS_LABEL_FONT,DEFAULT_AXIS_LABEL_PAINT,DEFAULT_AXIS_LABEL_INSETS,true,  // tick labels visibleDEFAULT_TICK_LABEL_FONT,DEFAULT_TICK_LABEL_PAINT,DEFAULT_TICK_LABEL_INSETS,true,  // tick marks visibleDEFAULT_TICK_STROKE);', 'comment': '/*** Constructs an axis, using default values where necessary.* @param label The axis label (null permitted).*/', 'coherence': 1}, {'code': 'public void setPlot(Plot plot) throws PlotNotCompatibleException {if (this.isCompatiblePlot(plot)) {this.plot = plot;}else throw new PlotNotCompatibleException("Axis.setPlot(...): "+"plot not compatible with axis.");', 'comment': "/*** Sets a reference to the plot that the axis is assigned to.* <P>* This method is called by Plot in the setHorizontalAxis() and setVerticalAxis() methods.* You shouldn't need to call the method yourself.* @param plot The plot that the axis belongs to.*/", 'coherence': 1}, {'code': 'public void setTickLabelsVisible(boolean flag) {if (flag!=tickLabelsVisible) {tickLabelsVisible = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that determines whether or not the tick labels are visible.* <P>* Registered listeners are notified of a general change to the axis.* @param flag The flag.*/', 'coherence': 1}, {'code': 'public Font getTickLabelFont() {return tickLabelFont;', 'comment': '/*** Returns the font used for the tick labels (if showing).* @return The font used for the tick labels.*/', 'coherence': 1}, {'code': 'public void setTickLabelPaint(Paint paint) {// check arguments...if (paint==null) {throw new IllegalArgumentException("Axis.setTickLabelPaint(...): null not permitted.");}// make the change (if necessary)...if (!this.tickLabelPaint.equals(paint)) {this.tickLabelPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the color/shade used to draw tick labels (if they are showing).* <P>* Registered listeners are notified of a general change to the axis.* @param paint The new color/shade.*/', 'coherence': 1}, {'code': 'public Paint getFillPaint() {return fillPaint;', 'comment': '/*** Returns the Paint object used to fill the bar.* @return The Paint used to fill the bar.*/', 'coherence': 1}, {'code': 'public Bar(double x, double y, double width, double height) {this(x, y, width, height, new BasicStroke(), Color.gray, Color.green);', 'comment': '/*** Standard constructor: returns a new Bar object, with some default attributes.* @param x The x-coordinate of the bar;* @param y The y-coordinate of the bar;* @param width The width of the bar;* @param height The height of the bar;*/', 'coherence': 1}, {'code': 'public Rectangle2D getArea() {return area;', 'comment': '/*** Returns the rectangle that is the outline of the bar.* @return The outline of the bar;*/', 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return outlinePaint;', 'comment': '/*** Returns the Paint object used to draw the outline of the bar.* @return The Paint used to draw the outline of the bar.*/', 'coherence': 1}, {'code': 'public Bar(double x, double y, double width, double height,Stroke outlineStroke, Paint outlinePaint, Paint fillPaint){this.area = new Rectangle2D.Double(x, y, width, height);this.outlineStroke = outlineStroke;this.outlinePaint = outlinePaint;this.fillPaint = fillPaint;', 'comment': '/*** Full constructor: returns a new Bar object with attributes as defined by the caller.* @param x The x-coordinate of the bar;* @param y The y-coordinate of the bar;* @param width The width of the bar;* @param height The height of the bar;* @param outlineStroke The Stroke used to draw the outline of the bar;* @param outlinePaint The Paint used to draw the outline of the bar;* @param fillPaint The Paint used to draw the interior of the bar.*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return outlineStroke;', 'comment': '/*** Returns the Stroke object used to draw the outline of the bar.* @return The Stroke used to draw the outline of the bar.*/', 'coherence': 1}, {'code': 'public CategoryAxis(String label, Font labelFont, Paint labelPaint, Insets labelInsets,boolean showCategoryLabels, Font categoryLabelFont, Paint categoryLabelPaint,Insets categoryLabelInsets, boolean showTickMarks, Stroke tickMarkStroke) {super(label, labelFont, labelPaint, labelInsets,showCategoryLabels, categoryLabelFont, categoryLabelPaint, categoryLabelInsets,showTickMarks, tickMarkStroke);', 'comment': '/*** Standard constructor: returns a new CategoryAxis with attributes as specified by the* caller.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param labelPaint The paint used to draw the axis label;* @param labelInsets Determines the amount of blank space around the label;* @param showCategoryLabels Flag indicating whether or not category (tick) labels are visible;* @param categoryLabelFont The font used to display category (tick) labels;* @param categoryLabelPaint The paint used to draw category (tick) labels;* @param showTickMarks Flag indicating whether or not tick marks are visible;* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public Date getMinimumDate() {return this.minimumDate;', 'comment': '/*** Returns the earliest date visible on the axis.* @return The earliest date visible on the axis.*/', 'coherence': 1}, {'code': 'public Date getMaximumDate() {return this.maximumDate;', 'comment': '/*** Returns the latest date visible on the axis.* @return The latest date visible on the axis.*/', 'coherence': 1}, {'code': 'protected Date nextStandardDate(Date date, int field, int units) {Date previous = previousStandardDate(date, field, units);Calendar calendar = Calendar.getInstance();calendar.setTime(previous);calendar.add(field, units);return calendar.getTime();', 'comment': '/*** Returns the first "standard" date (based on the specified field and units).*/', 'coherence': 1}, {'code': 'public void setTickUnit(DateUnit unit) {this.tickUnit = unit;this.notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the tick unit for the axis.*/', 'coherence': 1}, {'code': 'public DateAxis(String label, Font labelFont, Paint labelPaint, Insets labelInsets,boolean showTickLabels, Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean showTickMarks, Stroke tickMarkStroke,boolean autoRange, Date minimumDate, Date maximumDate,boolean autoTickUnit, DateUnit tickUnit, SimpleDateFormat tickLabelFormatter,boolean showGridLines, Stroke gridStroke, Paint gridPaint) {super(label, labelFont, labelPaint, labelInsets,showTickLabels, tickLabelFont, tickLabelPaint, tickLabelInsets,showTickMarks, tickMarkStroke, autoRange,autoTickUnit, showGridLines, gridStroke, gridPaint);this.minimumDate = minimumDate;this.maximumDate = maximumDate;this.tickUnit = tickUnit;this.tickLabelFormatter = tickLabelFormatter;', 'comment': '/*** Full constructor - initialises the attributes for a ValueAxis.  This is an abstract class,* subclasses include HorizontalValueAxis and VerticalValueAxis.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param labelPaint The paint used to draw the axis label;* @param labelInsets Determines the amount of blank space around the label;* @param showTickLabels Flag indicating whether or not tick labels are visible;* @param tickLabelFont The font used to display tick labels;* @param tickLabelPaint The paint used to draw tick labels;* @param tickLabelInsets Determines the amount of blank space around tick labels;* @param showTickMarks Flag indicating whether or not tick marks are visible;* @param tickMarkStroke The stroke used to draw tick marks (if visible);* @param autoRange Flag indicating whether or not the axis range is automatically adjusted to*          fit the data;* @param minimumDate The earliest date showing on the axis;* @param maximumDate The latest date showing on the axis;* @param autoTickUnit A flag indicating whether or not the tick unit is automatically*            calculated;* @param tickUnit The tick unit;* @param showGridLines Flag indicating whether or not grid lines are visible for this axis;* @param gridStroke The Stroke used to display grid lines (if visible);* @param gridPaint The Paint used to display grid lines (if visible).*/', 'coherence': 1}, {'code': 'public void setMaximumDate(Date maximumDate) {this.maximumDate = maximumDate;this.notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the maximum date visible on the axis.* @param maximumDate The new maximum date;*/', 'coherence': 1}, {'code': 'public void setMinimumDate(Date minimumDate) {this.minimumDate = minimumDate;this.notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the minimum date visible on the axis.* @param minimumDate The new minimum date;*/', 'coherence': 1}, {'code': 'public DateAxis(String label) {super(label);this.minimumDate = new Date();this.maximumDate = new Date();this.tickUnit = new DateUnit(Calendar.DATE, 1);this.tickLabelFormatter = new SimpleDateFormat();', 'comment': '/*** Standard constructor: builds a DateAxis with mostly default attributes.*/', 'coherence': 1}, {'code': 'protected int findAxisMagnitudeIndex() {long axisMagnitude = this.maximumDate.getTime()-this.minimumDate.getTime();int index = 0;while(index<standardTickUnitMagnitudes.length-1) {if (axisMagnitude<standardTickUnitMagnitudes[index]) break;index++;}return Math.max(0, index-1);', 'comment': '/*** Returns the index of the largest tick unit that will fit within the axis range.*/', 'coherence': 1}, {'code': 'public SimpleDateFormat getTickLabelFormatter() {return tickLabelFormatter;', 'comment': '/*** Returns the format object used to format tick labels.*/', 'coherence': 1}, {'code': 'protected Date previousStandardDate(Date date, int field, int units) {int milliseconds;int seconds;int minutes;int hours;int days;int months;int years;Calendar calendar = Calendar.getInstance();calendar.setTime(date);int current = calendar.get(field);int value = units*(current/units);switch (field) {case(Calendar.MILLISECOND) : {calendar.set(Calendar.MILLISECOND, value);}case(Calendar.SECOND)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);hours = calendar.get(Calendar.HOUR_OF_DAY);minutes = calendar.get(Calendar.MINUTE);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, days, hours, minutes, value);return calendar.getTime();}case(Calendar.MINUTE)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);hours = calendar.get(Calendar.HOUR_OF_DAY);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, days, hours, value, 0);return calendar.getTime();}case(Calendar.HOUR_OF_DAY)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, days, value, 0, 0);return calendar.getTime();}case(Calendar.DATE)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, value, 0, 0, 0);return calendar.getTime();}case(Calendar.MONTH)     : {years = calendar.get(Calendar.YEAR);calendar.clear(Calendar.MILLISECOND);calendar.set(years, value, 1, 0, 0, 0);return calendar.getTime();}case(Calendar.YEAR)    : {calendar.clear(Calendar.MILLISECOND);calendar.set(value, 0, 1, 0, 0, 0);return calendar.getTime();}default: return null;', 'comment': '/*** Returns the previous "standard" date (based on the specified field and units).*/', 'coherence': 1}, {'code': 'public Date calculateHighestVisibleTickValue(DateUnit unit) {return this.previousStandardDate(maximumDate, unit.getField(), unit.getCount());', 'comment': '/*** Calculates and returns the value of the highest visible tick on the axis.*/', 'coherence': 1}, {'code': 'public DateUnit getTickUnit() {return tickUnit;', 'comment': '/*** Returns the tick unit for the axis;* @return The tick unit for the axis.*/', 'coherence': 1}, {'code': 'public Date calculateLowestVisibleTickValue(DateUnit unit) {return this.nextStandardDate(minimumDate, unit.getField(), unit.getCount());', 'comment': '/*** Calculates and returns the value of the lowest visible tick on the axis.*/', 'coherence': 1}, {'code': 'protected AbstractTitle(int position, int horizontalAlignment, int verticalAlignment) {this(position, horizontalAlignment, verticalAlignment, new Insets(2, 2, 2, 2));', 'comment': '/*** Standard constrcutor - builds an abstract title with the specified position and alignment,* with a default inset of 2 pixels around the title.  This class defines constants for the valid* position and alignment values---an IllegalArgumentException will be thrown if invalid values* are passed to this constructor.* @param position The relative position of the title (TOP, BOTTOM, RIGHT and LEFT---or NORTH,*         SOUTH, EAST and WEST if you prefer);* @param horizontalAlignment The horizontal alignment of the title (LEFT, CENTER or RIGHT);* @param verticalAlignment The vertical alignment of the title (TOP, MIDDLE or BOTTOM);* @exception IllegalArgumentException If an invalid location or alignment value is passed;*/', 'coherence': 1}, {'code': 'public void addChangeListener(TitleChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the title.* @param listener The object that is being registered;*/', 'coherence': 1}, {'code': 'public void removeChangeListener(TitleChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Unregisters an object for notification of changes to the chart title.* @param listener The object that is being unregistered;*/', 'coherence': 1}, {'code': 'public void setNotify(boolean flag) {this.notify = flag;', 'comment': '/*** Sets the flag that indicates whether or not the notification mechanism is enabled.  There are* certain situations (such as cloning) where you want to turn notification off temporarily.* @param flag A boolean that indicates whether or not the notification mechanism is enabled;*/', 'coherence': 1}, {'code': 'public void setPosition(int position) {if (this.position!=position) {// check that the position is validthis.position = position;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the position for the title.* @param position The relative position of the title (use one of the constants TOP, BOTTOM,*         RIGHT and LEFT, or the equivalent NORTH, SOUTH, EAST and WEST);*/', 'coherence': 1}, {'code': 'public void setInsets(Insets insets) {if (!this.insets.equals(insets)) {this.insets = insets;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the insets for the title, and notifies registered listeners of the change.* @param insets The new insets value;*/', 'coherence': 1}, {'code': 'public boolean getNotify() {return this.notify;', 'comment': '/*** Returns the flag that indicates whether or not the notification mechanism is enabled.* @return A boolean that indicates whether or not the notification mechanism is enabled;*/', 'coherence': 1}, {'code': 'public void setHorizontalAlignment(int alignment) {if (this.horizontalAlignment!=alignment) {this.horizontalAlignment = alignment;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the horizontal alignment for the title, and notifies any registered listeners of the* change.  The constants LEFT, CENTER and RIGHT (defined in this class) can be used to specify* the alignment.* @param alignment The new horizontal alignment (LEFT, CENTER or RIGHT).*/', 'coherence': 1}, {'code': 'public int getPosition() {return this.position;', 'comment': '/*** Returns the relative position of the title---represented by one of four integer constants* defined in this class: TOP, BOTTOM, RIGHT or LEFT (or the equivalent NORTH, SOUTH, EAST and* WEST).* @return The title position;*/', 'coherence': 1}, {'code': 'public Object clone() {AbstractTitle duplicate = null;try {duplicate = (AbstractTitle)(super.clone());}catch (CloneNotSupportedException e) {// this should never happen because Cloneable is implementedthrow new RuntimeException("AbstractTitle.clone()");}duplicate.setNotify(false);duplicate.setInsets((Insets)this.getInsets().clone());duplicate.setNotify(true);return duplicate;', 'comment': '/*** Returns a clone of the title. One situation when this is useful is when editing the title* properties - you can edit a clone, and then it is easier to cancel the changes if necessary.* @return A clone of the title;*/', 'coherence': 1}, {'code': 'public int getVerticalAlignment() {return this.verticalAlignment;', 'comment': '/*** Returns the vertical alignment of the title.  The constants TOP, MIDDLE and BOTTOM (defined* in this class) are used.* @return The vertical alignment of the title (TOP, MIDDLE or BOTTOM);*/', 'coherence': 1}, {'code': 'protected AbstractTitle() {this(TOP, CENTER, MIDDLE);', 'comment': '/*** Default constructor - builds an AbstractTitle positioned at the top of the page, centered* horizontally and vertically within its space.*/', 'coherence': 1}, {'code': 'public int getHorizontalAlignment() {return this.horizontalAlignment;', 'comment': '/*** Returns the horizontal alignment of the title.  The constants LEFT, CENTER and RIGHT (defined* in this class) are used.* @return The horizontal alignment of the title (LEFT, CENTER or RIGHT);*/', 'coherence': 1}, {'code': 'public Insets getInsets() {return this.insets;', 'comment': '/*** Returns the insets (the blank space around the edges) for this title.*/', 'coherence': 1}, {'code': 'protected AbstractTitle(int position, int horizontalAlignment, int verticalAlignment,Insets insets) {// check positionif (!this.isValidPosition(position)) {throw new IllegalArgumentException("AbstractTitle: Invalid position.");}// check the horizontal and vertical alignmentif ((horizontalAlignment!=LEFT) &&(horizontalAlignment!=CENTER) &&(horizontalAlignment!=RIGHT)) {throw new IllegalArgumentException("AbstractTitle: Invalid horizontal alignment.");}if ((verticalAlignment!=TOP) &&(verticalAlignment!=BOTTOM) &&(verticalAlignment!=MIDDLE)) {throw new IllegalArgumentException("AbstractTitle: Invalid vertical alignment.");}this.position = position;this.horizontalAlignment = horizontalAlignment;this.verticalAlignment = verticalAlignment;this.insets = insets;this.listeners = new java.util.ArrayList();this.notify = true;', 'comment': '/*** Full constructor - builds an abstract title with the specified position and alignment. This* class defines constants for the valid position and alignment values---an* IllegalArgumentException will be thrown if invalid values are passed to this constructor.* @param position The relative position of the title (TOP, BOTTOM, RIGHT and LEFT---or NORTH,*         SOUTH, EAST and WEST if you prefer);* @param horizontalAlignment The horizontal alignment of the title (LEFT, CENTER or RIGHT);* @param verticalAlignment The vertical alignment of the title (TOP, MIDDLE or BOTTOM);* @exception IllegalArgumentException If an invalid location or alignment value is passed;*/', 'coherence': 1}, {'code': 'public void setVerticalAlignment(int alignment) {if (this.verticalAlignment!=alignment) {this.verticalAlignment = alignment;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the vertical alignment for the title, and notifies any registered listeners of the change.* The constants TOP, MIDDLE and BOTTOM (defined in this class) can be used to specify the* alignment.* @param alignment The new vertical alignment (TOP, MIDDLE or BOTTOM);*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelif (this.label!=null) {g2.setFont(labelFont);g2.setPaint(labelPaint);Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());if (labelDrawnVertical) {double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);drawVerticalString(label, g2, (float)xx, (float)yy);}else {double xx = drawArea.getX()+labelInsets.left;double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;g2.drawString(label, (float)xx, (float)yy);}}// draw the tick labels and marks and gridlinesthis.refreshTicks(g2, drawArea, plotArea);double xx = plotArea.getX();g2.setFont(tickLabelFont);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float yy = (float)this.translatedValue(tick.getNumericalValue(), plotArea);if (tickLabelsVisible) {g2.setPaint(this.tickLabelPaint);g2.drawString(tick.getText(), tick.getX(), tick.getY());}if (tickMarksVisible) {g2.setStroke(this.getTickMarkStroke());Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,plotArea.getX()+2, yy);g2.draw(mark);}if (showGridLines) {g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Double(xx, yy,plotArea.getMaxX(), yy);g2.draw(gridline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn.* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean labelDrawnVertical,boolean tickLabelsVisible, Font tickLabelFont, Paint tickLabelPaint,Insets tickLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, boolean autoRangeIncludesZero,Number autoRangeMinimum,Number minimumAxisValue, Number maximumAxisValue,boolean autoTickUnitSelection,NumberTickUnit tickUnit,boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint) {super(label,labelFont, labelPaint, labelInsets,tickLabelsVisible,tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible,tickMarkStroke,autoRange, autoRangeIncludesZero, autoRangeMinimum,minimumAxisValue, maximumAxisValue,autoTickUnitSelection, tickUnit,gridLinesVisible, gridStroke, gridPaint);this.labelDrawnVertical = labelDrawnVertical;', 'comment': '/*** Constructs a vertical number axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param labelDrawnVertical Flag indicating whether or not the label is drawn vertically.* @param tickLabelsVisible Flag indicating whether or not tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param showTickMarks Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis is automatically scaled to fit the*          data.* @param autoRangeIncludesZero A flag indicating whether or not zero *must* be displayed on*                axis.* @param autoRangeMinimum The smallest automatic range allowed.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.* @param autoTickUnitSelection A flag indicating whether or not the tick units are*                selected automatically.* @param tickUnit The tick unit.* @param showGridLines Flag indicating whether or not grid lines are visible for this axis.* @param gridStroke The pen/brush used to display grid lines (if visible).* @param gridPaint The color used to display grid lines (if visible).*/', 'coherence': 1}, {'code': 'private void selectAutoTickUnit(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// calculate the tick label height...FontRenderContext frc = g2.getFontRenderContext();double tickLabelHeight = tickLabelFont.getLineMetrics("123", frc).getHeight()+this.tickLabelInsets.top+this.tickLabelInsets.bottom;// now find the smallest tick unit that will accommodate the labels...double zero = this.translatedValue(Plot.ZERO, plotArea);// start with the current tick unit...NumberTickUnit candidate1= (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(this.tickUnit);double y = this.translatedValue(candidate1.getValue(), plotArea);double unitHeight = Math.abs(y-zero);// then extrapolate...double bestguess = (tickLabelHeight/unitHeight) * candidate1.value.doubleValue();NumberTickUnit guess = new NumberTickUnit(new Double(bestguess), null);NumberTickUnit candidate2= (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(guess);this.tickUnit = candidate2;', 'comment': "/*** Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as* possible (selected from an array of 'standard' tick units) without the labels overlapping.* @param g2 The graphics device;* @param drawArea The area in which the plot and axes should be drawn;* @param plotArea The area in which the plot should be drawn;*/", 'coherence': 1}, {'code': 'public double translatedValue(Number dataValue, Rectangle2D plotArea) {double value = dataValue.doubleValue();double axisMin = minimumAxisValue.doubleValue();double axisMax = maximumAxisValue.doubleValue();double maxY = plotArea.getMaxY();double minY = plotArea.getMinY();return maxY - (((value - axisMin)/(axisMax - axisMin)) * (maxY - minY));', 'comment': '/*** Translates the data value to the display coordinates (Java 2D User Space) of the chart.* @param dataValue The value to be plotted;* @param plotArea The plot area in Java 2D User Space.*/', 'coherence': 1}, {'code': 'public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the width of the axis label...double labelWidth = 0.0;if (label!=null) {Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());labelWidth = labelInsets.left+labelInsets.right;if (this.labelDrawnVertical) {labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation}else {labelWidth = labelWidth + labelBounds.getWidth();}}// calculate the width required for the tick labels (if visible);double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {this.refreshTicks(g2, drawArea, drawArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);}return labelWidth+tickLabelWidth;', 'comment': '/*** Returns the width required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis(String label, Font labelFont,Number minimumAxisValue, Number maximumAxisValue) {this(label,labelFont,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true, // vertical axis labeltrue, // tick labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true, // tick marks visibleAxis.DEFAULT_TICK_STROKE,true, // auto rangetrue, // auto range includes zeroNumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,minimumAxisValue,maximumAxisValue,true, // auto tick unit selectionNumberAxis.DEFAULT_TICK_UNIT,true, // grid lines visibleValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT);', 'comment': '/*** Constructs a vertical number axis.* @param label The axis label (null permitted).* @param labelFont The font for displaying the axis label.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.*/', 'coherence': 1}, {'code': 'public void autoAdjustRange() {if (plot!=null) {if (plot instanceof VerticalValuePlot) {VerticalValuePlot vvp = (VerticalValuePlot)plot;Number u = vvp.getMaximumVerticalDataValue();double upper = this.DEFAULT_MAXIMUM_AXIS_VALUE.doubleValue();if (u!=null) {upper = u.doubleValue();}Number l = vvp.getMinimumVerticalDataValue();double lower = this.DEFAULT_MINIMUM_AXIS_VALUE.doubleValue();if (l!=null) {lower = l.doubleValue();}double range = upper-lower;// ensure the autorange is at least <minRange> in size...double minRange = this.autoRangeMinimumSize.doubleValue();if (range<minRange) {upper = (upper+lower+minRange)/2;lower = (upper+lower-minRange)/2;}if (this.autoRangeIncludesZero()) {if (upper!=0.0) upper = Math.max(0.0, upper+upperMargin*range);if (lower!=0.0) lower = Math.min(0.0, lower-lowerMargin*range);}else {if (upper!=0.0) upper = upper+upperMargin*range;if (lower!=0.0) lower = lower-lowerMargin*range;}this.minimumAxisValue=new Double(lower);this.maximumAxisValue=new Double(upper);', 'comment': '/*** Rescales the axis to ensure that all data is visible.*/', 'coherence': 1}, {'code': 'public boolean isLabelDrawnVertical() {return this.labelDrawnVertical;', 'comment': '/*** Returns a flag that indicates whether or not the axis label is drawn with a vertical* orientation (this saves space).* @return A flag that indicates whether or not the axis label is drawn with a vertical* orientation.*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();g2.setFont(tickLabelFont);if (this.autoTickUnit) {selectAutoTickUnit(g2, drawArea, plotArea);}double size = this.tickUnit.getValue().doubleValue();int count = this.calculateVisibleTickCount();double lowestTickValue = this.calculateLowestVisibleTickValue();//tickLabelFormatter = new DecimalFormat(tickLabelFormatter.toPattern());for (int i=0; i<count; i++) {Number currentTickValue = new Double(lowestTickValue+(i*size));double yy = this.translatedValue(currentTickValue, plotArea);String tickLabel = this.valueToString(currentTickValue);Rectangle2D tickLabelBounds = tickLabelFont.getStringBounds(tickLabel,g2.getFontRenderContext());float x = (float)(plotArea.getX()-tickLabelBounds.getWidth()-tickLabelInsets.left-tickLabelInsets.right);float y = (float)(yy+(tickLabelBounds.getHeight()/2));Tick tick = new Tick(currentTickValue, tickLabel, x, y);ticks.add(tick);', 'comment': '/*** Calculates the positions of the tick labels for the axis, storing the results in the* tick label list (ready for drawing).* @param g2 The graphics device.* @param drawArea The area in which the plot and the axes should be drawn.* @param plotArea The area in which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,NumberAxis.DEFAULT_MINIMUM_AXIS_VALUE,NumberAxis.DEFAULT_MAXIMUM_AXIS_VALUE);this.autoRange = true;', 'comment': '/*** Constructs a vertical number axis, using default values where necessary.* @param label The axis label (null permitted).*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedHeight) {// calculate the width of the axis label...double labelWidth = 0.0;if (label!=null) {Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());labelWidth = labelInsets.left+labelInsets.right;if (this.labelDrawnVertical) {labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation}else {labelWidth = labelWidth + labelBounds.getWidth();}}// calculate the width of the tick labelsdouble tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {Rectangle2D approximatePlotArea = new Rectangle2D.Double(drawArea.getX(), drawArea.getY(),drawArea.getWidth(),drawArea.getHeight()-reservedHeight);this.refreshTicks(g2, drawArea, approximatePlotArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, approximatePlotArea);}return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,drawArea.getHeight()-reservedHeight);', 'comment': '/*** Returns area in which the axis will be displayed.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area in which the plot and axes should be drawn;* @param reservedHeight The height reserved for the horizontal axis;*/', 'coherence': 1}, {'code': 'public void configure() {if (isAutoRange()) {autoAdjustRange();', 'comment': '/*** Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets* the maximum and minimum values.*/', 'coherence': 1}, {'code': 'public void setLabelDrawnVertical(boolean flag) {if (this.labelDrawnVertical!=flag) {this.labelDrawnVertical = flag;this.notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that controls whether or not the axis label is drawn with a vertical* orientation.* @param flag The flag.*/', 'coherence': 1}, {'code': 'public ValueAxis getDomainAxis() {return (ValueAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns the horizontal axis cast as a ValueAxis.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumDomainValue(data);}else return null;', 'comment': '/*** Returns the minimum value in either the domain or the range, whichever is displayed against* the horizontal axis for the particular type of plot implementing this interface.*/', 'coherence': 1}, {'code': 'public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis, Insets insets,Paint background, Stroke outlineStroke, Paint outlinePaint)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontalAxis, verticalAxis, insets, background, outlineStroke, outlinePaint);', 'comment': '/*** Standard constructor.* @param horizontalAxis The horizontal axis for the plot;* @param verticalAxis The vertical axis for the plot;* @param insets Amount of blank space around the plot area;* @param background The Paint used to fill the plot background;* @param outlineStroke The Stroke used to draw an outline around the plot;* @param outlinePaint Storage for registered change listeners.*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue()  {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum Y value from the datasource.* <P>* This method can return null if the data source is null.*/', 'coherence': 1}, {'code': 'public Number getMaximumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumRangeValue(data);}else return null;', 'comment': '/*** Returns the maximum Y value from the datasource.* <P>* This method can return null if the data source is null.*/', 'coherence': 1}, {'code': 'public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontalAxis, verticalAxis);', 'comment': '/*** Standard constructor.* @param horizontalAxis The horizontal axis for the plot;* @param verticalAxis The vertical axis for the plot;*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) return true;else if (axis instanceof HorizontalDateAxis) return true;else return false;', 'comment': '/*** Returns true if the specified axis is compatible with the plot with regard to operating as* the horizontal axis.* <P>* This plot requires the horizontal axis to be a subclass of HorizontalNumberAxis or* HorizontalDateAxis.* @param axis The axis.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea) {// adjust the drawing area for plot insets (if any)...if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...HorizontalAxis ha = getHorizontalAxis();VerticalAxis va = getVerticalAxis();double hAxisAreaHeight = ha.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-hAxisAreaHeight);// draw the background and axes...drawOutlineAndBackground(g2, plotArea);getDomainAxis().draw(g2, drawArea, plotArea);getRangeAxis().draw(g2, drawArea, plotArea);// now get the data and plot the bars...IntervalXYDataset data = (IntervalXYDataset)chart.getDataset();if (data!=null) {Shape savedClip = g2.getClip();g2.clip(plotArea);double translatedVerticalZero = getRangeAxis().translatedValue(Plot.ZERO, plotArea);int seriesCount = data.getSeriesCount();for (int series = 0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);for (int item = 0; item<itemCount; item++) {drawBar(g2, plotArea, data, series, item, getDomainAxis(), getRangeAxis(),translatedVerticalZero);}}g2.setClip(savedClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) return true;else return false;', 'comment': '/*** Returns true if the specified axis is compatible with the plot with regard to operating as* the vertical axis.* <P>* This plot requires the vertical axis to be a subclass of VerticalNumberAxis.* @param axis The axis.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis getRangeAxis() {return (VerticalNumberAxis)verticalAxis;', 'comment': '/*** A convenience method that returns the vertical axis cast as a VerticalNumberAxis.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumDomainValue(data);}else return null;', 'comment': '/*** Returns the maximum value in either the domain or the range, whichever is displayed against* the horizontal axis for the particular type of plot implementing this interface.*/', 'coherence': 1}, {'code': 'public Number getY(int series, Number x) {// for a linear fit, this will return the y for the formula//  y = a + bx//  These are in the private variable linear_fit//  a = linear_fit[i][0]//  b = linear_fit[i][1]return new Double(linear_fit[series][0] + linear_fit[series][1] * x.doubleValue());', 'comment': '/*** Returns a y-value for any given x-value.* @param x The x value.* @param series The series.* @return The y value.*/', 'coherence': 1}, {'code': 'public String getName() { return "Linear Fit"; }', 'comment': '/*** @return The name that you want to see in the legend.*/', 'coherence': 1}, {'code': 'public void setXYDataset(XYDataset data) {this.dataset = data;// build the x and y data arrays to be passed to the// statistics class to get a linear fit and store them// for each dataset in the datasets VectorVector datasets = new Vector();for(int i = 0; i < data.getSeriesCount(); i++) {int seriessize = data.getItemCount(i);Number[] x_data = new Number[seriessize];Number[] y_data = new Number[seriessize];for(int j = 0; j < seriessize; j++) {x_data[j] = data.getXValue(i,j);y_data[j] = data.getYValue(i,j);}Vector pair = new Vector();pair.addElement(x_data);pair.addElement(y_data);datasets.addElement(pair);}// put in the linear fit arraylinear_fit = new double[datasets.size()][2];for(int i = 0; i < datasets.size(); i++) {Vector pair = (Vector)datasets.elementAt(i);linear_fit[i] = Statistics.getLinearFit((Number[])pair.elementAt(0),(Number[])pair.elementAt(1));', 'comment': '/*** @param data The dataset.*/', 'coherence': 1}, {'code': 'public int barWidthsPerCategory(CategoryDataset data) {return data.getSeriesCount();', 'comment': '/*** This will be a method in the renderer that tells whether there is one bar width per category* or onebarwidth per series per category.*/', 'coherence': 1}, {'code': 'public void drawBar(Graphics2D g2, Rectangle2D plotArea, BarPlot plot, ValueAxis valueAxis,CategoryDataset data, int series, Object category, int categoryIndex,double translatedZero, double itemWidth,double categorySpan, double categoryGapSpan,double itemSpan, double itemGapSpan) {// first check the value we are plotting...Number value = data.getValue(series, category);if (value!=null) {// BAR Xdouble rectX = plotArea.getX()// intro gap+ plotArea.getWidth()*plot.getIntroGapPercent()// bars in completed categories+ categoryIndex*categorySpan/data.getCategoryCount()// gaps between completed categories+ (categoryIndex*categoryGapSpan/(data.getCategoryCount()-1))// bars+gaps completed in current category+ (series*itemSpan/(data.getCategoryCount()*data.getSeriesCount()))+ (series*itemGapSpan/(data.getCategoryCount()*(data.getSeriesCount()-1)));// BAR Ydouble translatedValue = valueAxis.translatedValue(value, plotArea);double rectY = Math.min(translatedZero, translatedValue);// BAR WIDTHdouble rectWidth = itemWidth;// BAR HEIGHTdouble rectHeight = Math.abs(translatedValue-translatedZero);Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);Paint seriesPaint = plot.getSeriesPaint(series);g2.setPaint(seriesPaint);g2.fill(bar);GeneralPath bar3dRight = null;GeneralPath bar3dTop = null;double effect3d = 0.00;VerticalAxis vAxis = plot.getVerticalAxis();if (rectHeight != 0 && vAxis instanceof VerticalNumberAxis3D) {effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();bar3dRight = new GeneralPath();bar3dRight.moveTo((float)(rectX+rectWidth), (float)rectY);bar3dRight.lineTo((float)(rectX+rectWidth), (float)(rectY+rectHeight));bar3dRight.lineTo((float)(rectX+rectWidth+effect3d),(float)(rectY+rectHeight-effect3d));bar3dRight.lineTo((float)(rectX+rectWidth+effect3d), (float)(rectY-effect3d));if (seriesPaint instanceof Color) {g2.setPaint( ((Color) seriesPaint).darker());}g2.fill(bar3dRight);bar3dTop = new GeneralPath();bar3dTop.moveTo( (float) rectX, (float) rectY);bar3dTop.lineTo((float) (rectX+effect3d), (float) (rectY-effect3d));bar3dTop.lineTo((float) (rectX+rectWidth+effect3d), (float) (rectY-effect3d));bar3dTop.lineTo((float) (rectX+rectWidth), (float) (rectY) );if (seriesPaint instanceof Color) {g2.setPaint( ((Color) seriesPaint)); //.brighter());}g2.fill(bar3dTop);}if (itemWidth>3) {g2.setStroke(plot.getSeriesOutlineStroke(series));//g2.setStroke(new BasicStroke(0.25f));g2.setPaint(plot.getSeriesOutlinePaint(series));g2.draw(bar);if (bar3dRight != null) {g2.draw(bar3dRight);}if (bar3dTop != null) {g2.draw(bar3dTop);', 'comment': '/*** Renders an individual bar...there are bug-fixes that have been applied to VerticalBarRenderer* that need to be applied here too.*/', 'coherence': 1}, {'code': 'public boolean hasItemGaps() {return true;', 'comment': '/*** Returns true, since there are (potentially) gaps between bars in this representation.*/', 'coherence': 1}, {'code': 'public VerticalCategoryAxis(String label) {super(label);this.verticalLabel = true;', 'comment': '/*** Standard constructor - builds a VerticalCategoryAxis with mostly default attributes.* @param label The axis label;*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();CategoryPlot categoryPlot = (CategoryPlot)plot;Dataset data = categoryPlot.getDataset();if (data!=null) {Font font = this.getTickLabelFont();g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();int categoryIndex = 0;Iterator iterator = categoryPlot.getDataset().getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();String label = category.toString();Rectangle2D labelBounds = font.getStringBounds(label, frc);LineMetrics metrics = font.getLineMetrics(label, frc);float xx = (float)(plotArea.getX()-tickLabelInsets.right-labelBounds.getWidth());float yy = (float)(categoryPlot.getCategoryCoordinate(categoryIndex, plotArea)+labelBounds.getHeight()/2);Tick tick = new Tick(category, label, xx, yy);ticks.add(tick);categoryIndex = categoryIndex+1;', 'comment': '/*** Creates a temporary list of ticks that can be used when drawing the axis.* @param g2 The graphics device (used to get font measurements);* @param drawArea The area where the plot and axes will be drawn;* @param plotArea The area inside the axes;*/', 'coherence': 1}, {'code': 'public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the width of the axis label...Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());double labelWidth = this.labelInsets.left+labelInsets.right;if (this.verticalLabel) {labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation}else {labelWidth = labelWidth + labelBounds.getWidth();}// calculate the width required for the tick labels (if visible);double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {this.refreshTicks(g2, drawArea, drawArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);}return labelWidth+tickLabelWidth;', 'comment': '/*** Estimates the height required for the axis, given a specific drawing area, without any* information about the width of the vertical axis.* <P>* Supports the HorizontalAxisLead interface.* @param g2 The graphics device (used to obtain font information);* @param drawArea The area within which the axis should be drawn;* @param plot The plot that the axis belongs to.*/', 'coherence': 1}, {'code': 'public VerticalCategoryAxis(String label, Font labelFont,Paint labelPaint, Insets labelInsets,boolean verticalLabel,boolean showTickLabels, Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean showTickMarks, Stroke tickMarkStroke) {super(label, labelFont, labelPaint, labelInsets,showTickLabels, tickLabelFont, tickLabelPaint, tickLabelInsets,showTickMarks, tickMarkStroke);this.verticalLabel = verticalLabel;', 'comment': '/*** Full constructor: returns a new VerticalCategoryAxis with attributes as specified by the* caller.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param labelPaint The paint used to draw the axis label;* @param labelInsets Determines the amount of blank space around the label;* @param verticalLabel Flag indicating whether or not the axis label is drawn vertically;* @param showCategoryLabels Flag indicating whether or not category (tick) labels are visible;* @param categoryLabelFont The font used to display category (tick) labels;* @param categoryLabelPaint The paint used to draw category (tick) labels;* @param showTickMarks Flag indicating whether or not tick marks are visible;* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis3D) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'protected Shape calculateBackgroundPlotArea(Rectangle2D plotArea) {VerticalAxis vAxis = getVerticalAxis();double effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();GeneralPath backgroundPlotArea = new GeneralPath();backgroundPlotArea.moveTo((float) plotArea.getX(), (float)plotArea.getY());backgroundPlotArea.lineTo((float)(plotArea.getX()+effect3d),(float)(plotArea.getY()-effect3d));backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()),(float)(plotArea.getY()-effect3d));backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()),(float)(plotArea.getY()+plotArea.getHeight()-effect3d));backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()-effect3d),(float)(plotArea.getY()+plotArea.getHeight()));backgroundPlotArea.lineTo((float) plotArea.getX(),(float)(plotArea.getY()+plotArea.getHeight()));backgroundPlotArea.lineTo((float) plotArea.getX(),(float) plotArea.getY());return backgroundPlotArea;', 'comment': '/*** Returns the shape of the background for the 3D-effect bar plot.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelg2.setFont(labelFont);g2.setPaint(labelPaint);FontRenderContext frc = g2.getFontRenderContext();LineMetrics metrics = labelFont.getLineMetrics(label, frc);Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);if (verticalLabel) {double xx = drawArea.getX()+labelInsets.left+metrics.getHeight()-metrics.getDescent()-metrics.getLeading();double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);drawVerticalString(label, g2, (float)xx, (float)yy);}else {double xx = drawArea.getX()+labelInsets.left;double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;g2.drawString(label, (float)xx, (float)yy);}// draw the category labelsif (this.tickLabelsVisible) {g2.setFont(tickLabelFont);g2.setPaint(tickLabelPaint);this.refreshTicks(g2, drawArea, plotArea);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();g2.drawString(tick.getText(), tick.getX(), tick.getY());', 'comment': '/*** Draws the CategoryAxis on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the axis should be drawn;* @param plotArea The area within which the plot is being drawn.*/', 'coherence': 1}, {'code': 'protected boolean isCompatiblePlot(Plot plot) {if (plot instanceof CategoryPlot) return true;else return false;', 'comment': '/*** Returns true if the specified plot is compatible with the axis, and false otherwise.* @param plot The plot;*/', 'coherence': 1}, {'code': 'protected void drawBars(Graphics2D g2, Shape backgroundPlotArea, Rectangle2D plotArea) {VerticalAxis vAxis = getVerticalAxis();double effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();// draw far 3d axisif ((outlineStroke!=null) && (outlinePaint!=null)) {g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(new Line2D.Double(plotArea.getX()+effect3d, plotArea.getY()-effect3d,plotArea.getX()+effect3d, plotArea.getY()+plotArea.getHeight()-effect3d));g2.draw(new Line2D.Double(plotArea.getX(), plotArea.getY()+plotArea.getHeight(),plotArea.getX()+effect3d, plotArea.getY()+plotArea.getHeight()-effect3d));g2.draw(new Line2D.Double(plotArea.getX()+effect3d,plotArea.getY()+plotArea.getHeight()-effect3d,plotArea.getX()+plotArea.getWidth(),plotArea.getY()+plotArea.getHeight()-effect3d));}super.drawBars(g2, backgroundPlotArea, plotArea);', 'comment': '/*** Draws the bars...*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedHeight) {// calculate the width of the axis label...Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());double labelWidth = this.labelInsets.left+labelInsets.right;if (this.verticalLabel) {labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation}else {labelWidth = labelWidth + labelBounds.getWidth();}// calculate the width required for the tick labels (if visible);double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {this.refreshTicks(g2, drawArea, drawArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);}return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,drawArea.getHeight()-reservedHeight);', 'comment': '/*** Returns the area required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param drawArea The area within which the plot should be drawn;* @param reservedHeight The height reserved by the horizontal axis.*/', 'coherence': 1}, {'code': 'public VerticalBarPlot3D(Axis horizontalAxis, Axis verticalAxis)throws AxisNotCompatibleException, PlotNotCompatibleException{this(horizontalAxis, verticalAxis, new Insets(2,2,2,2), 0.1, 0.1, 0.2, 0.0);', 'comment': '/*** Standard constructor - builds a VerticalBarPlot with mostly default attributes.* @param horizontalAxis The horizontal axis;* @param verticalAxis The vertical axis;*/', 'coherence': 1}, {'code': 'public VerticalBarPlot3D(Axis horizontal, Axis vertical, Insets insets,double introGap, double trailGap, double categoryGap, double seriesGap)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontal, vertical, insets,introGap, trailGap, categoryGap, seriesGap);', 'comment': '/*** Standard constructor: returns a BarPlot with attributes specified by the caller.* @param horizontal The horizontal axis.* @param vertical The vertical axis.* @param introGap The gap before the first bar in the plot.* @param trailGap The gap after the last bar in the plot.* @param categoryGap The gap between the last bar in one category and the first bar in the next*          category.* @param seriesGap The gap between bars within the same category.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;* @return True if the axis is compatible with the plot, and false otherwise.*/', 'coherence': 1}, {'code': 'double calculateBarWidth(Rectangle2D plotArea) {CategoryDataset data = getDataset();// series, category and bar countsint categoryCount = data.getCategoryCount();int seriesCount = data.getSeriesCount();int barCount = renderer.barWidthsPerCategory(data)*categoryCount;// calculate the plot width (bars are vertical) less whitespacedouble usable = plotArea.getWidth() *(1.0 - introGapPercent - trailGapPercent - categoryGapsPercent);if (renderer.barWidthsPerCategory(data)>1) {//    usable = usable - ((seriesCount-1) * categoryCount * seriesGap);}// and thus the width of the barsreturn usable/barCount;', 'comment': '/*** Returns the width of each bar in the chart.* @param area The area within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public void addVerticalLine(Number location, Paint color) {if (verticalLines == null) {verticalLines = new ArrayList();verticalColors = new ArrayList();}verticalColors.add(color);verticalLines.add(location);', 'comment': '/*** Adds a vertical of the given color at location with the given color.* @return void*/', 'coherence': 1}, {'code': 'public ValueAxis getHorizontalValueAxis() {return (ValueAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* ValueAxis.* @return The horizontal axis cast as a ValueAxis.*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setHorizontalAxis(axis);', 'comment': "/*** Sets the horizontal axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param axis The new horizontal axis.*/", 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea) {// adjust the drawing area for plot insets (if any)...if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...HorizontalAxis hAxis = getHorizontalAxis();VerticalAxis vAxis = getVerticalAxis();double hAxisAreaHeight = hAxis.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);// ...and therefore what is left for the plot itself...Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-hAxisAreaHeight);// draw the plot background and axes...drawOutlineAndBackground(g2, plotArea);this.horizontalAxis.draw(g2, drawArea, plotArea);this.verticalAxis.draw(g2, drawArea, plotArea);// now get the data and plot it (the visual representation will depend on the renderer// that has been set)...XYDataset data = this.getDataset();if (data!=null) {Shape originalClip = g2.getClip();g2.clip(plotArea);drawVerticalLines(g2, plotArea);drawHorizontalLines(g2, plotArea);double transRangeZero = this.getVerticalValueAxis().translatedValue(Plot.ZERO, plotArea);int seriesCount = data.getSeriesCount();for (int series=0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);for (int item=0; item<itemCount; item++) {renderer.drawItem(g2, plotArea, this, (ValueAxis)hAxis, (ValueAxis)vAxis,data, series, item, transRangeZero);}}g2.setClip(originalClip);', 'comment': '/*** Draws the XY plot on a Java 2D graphics device (such as the screen or a printer).* <P>* XYPlot now relies on an XYItemRenderer to draw each item in the plot.  This allows the* visual representation of the plot to be changed easily.* @param g2 The graphics device;* @param drawArea The area within which the plot (including axis labels) should be drawn;*/', 'coherence': 1}, {'code': 'protected void drawBars(Graphics2D g2, Shape backgroundPlotArea, Rectangle2D plotArea) {// now get the data and plot the bars...CategoryDataset data = this.getDataset();if (data!=null) {Shape savedClip = g2.getClip();g2.clip(backgroundPlotArea);int seriesCount = data.getSeriesCount();int categoryCount = data.getCategoryCount();int barCount = renderer.barWidthsPerCategory(data);double translatedZero = getValueAxis().translatedValue(Plot.ZERO, plotArea);// work out the span dimensions for the categories...double categorySpan = 0.0;double categoryGapSpan = 0.0;if (categoryCount>1) {categorySpan = plotArea.getWidth()* (1-introGapPercent-trailGapPercent-categoryGapsPercent);categoryGapSpan = plotArea.getWidth()*categoryGapsPercent;}else {categorySpan = plotArea.getWidth()*(1-introGapPercent-trailGapPercent);}// work out the item span...double itemSpan = categorySpan;double itemGapSpan = 0.0;if (seriesCount>1) {if (renderer.hasItemGaps()) {itemGapSpan = plotArea.getWidth()*itemGapsPercent;itemSpan = itemSpan - itemGapSpan;}}double itemWidth = itemSpan/(categoryCount*renderer.barWidthsPerCategory(data));int categoryIndex = 0;Iterator iterator = data.getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();for (int series=0; series<seriesCount; series++) {renderer.drawBar(g2, plotArea, this, getValueAxis(), data, series,category, categoryIndex,translatedZero, itemWidth, categorySpan, categoryGapSpan,itemSpan, itemGapSpan);}categoryIndex++;}// draw a line at zero...Line2D baseline = new Line2D.Double(plotArea.getX(), translatedZero,plotArea.getMaxX(), translatedZero);g2.setStroke(new BasicStroke());g2.draw(baseline);g2.setClip(savedClip);', 'comment': '/*** Draws charts bars* @param g2 The graphics device;* @param backgroundPlotArea The area within which will be clipped* @param plotArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'private void drawVerticalLines(Graphics2D g2, Rectangle2D plotArea) {// Draw any vertical linesif (verticalLines != null) {for (int i=0; i<verticalLines.size(); i++) {g2.setPaint((Paint)verticalColors.get(i));g2.setStroke(new BasicStroke(1));g2.drawLine((int)getHorizontalValueAxis().translatedValue((Number)verticalLines.get(i), plotArea),0,(int)getHorizontalValueAxis().translatedValue((Number)verticalLines.get(i), plotArea),(int)(plotArea.getHeight()));', 'comment': '/*** Support method for the draw(...) method.*/', 'coherence': 1}, {'code': 'public double getCategoryCoordinate(int category, Rectangle2D area) {// calculate first part of result...double result = area.getX() + (area.getWidth()*introGapPercent);// then add some depending on how many categories...int categoryCount = getDataset().getCategoryCount();if (categoryCount>1) {double categorySpan = area.getWidth()* (1-introGapPercent-trailGapPercent-categoryGapsPercent);double categoryGapSpan = area.getWidth()*categoryGapsPercent;result = result+ (category+0.5)*(categorySpan/categoryCount)+ (category)*(categoryGapSpan/(categoryCount-1));}else {result = result+ (category+0.5)*area.getWidth()*(1-introGapPercent-trailGapPercent);}return result;', 'comment': '/*** Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.* @param category The index of the category of interest (first category index = 0);* @param area The region within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public XYPlot(Axis horizontalAxis, Axis verticalAxis) throws AxisNotCompatibleException,PlotNotCompatibleException{super(horizontalAxis, verticalAxis);this.renderer = new StandardXYItemRenderer();', 'comment': '/*** Constructs an XYPlot with the specified axes (other attributes take default values).* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public void addHorizontalLine(Number location, Paint color) {if (horizontalLines == null) {horizontalLines = new ArrayList();horizontalColors = new ArrayList();}horizontalColors.add(color);horizontalLines.add(location);', 'comment': '/*** Adds a horizontal line at location with given color.* @return void*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "XY Plot";', 'comment': '/*** Returns the plot type as a string.* @return A short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea) {// adjust the drawing area for the plot insets (if any)...if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}if ((drawArea.getWidth()>=MINIMUM_WIDTH_TO_DRAW) && (drawArea.getHeight()>=MINIMUM_HEIGHT_TO_DRAW)) {// estimate the area required for drawing the axes...HorizontalAxis hAxis = getHorizontalAxis();VerticalAxis vAxis = getVerticalAxis();double hAxisAreaHeight = hAxis.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);// and thus the area available for plotting...Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-hAxisAreaHeight);Shape backgroundPlotArea = calculateBackgroundPlotArea(plotArea);// draw the background and axes...drawOutlineAndBackground(g2, backgroundPlotArea);getCategoryAxis().draw(g2, drawArea, plotArea);getValueAxis().draw(g2, drawArea, plotArea);drawBars(g2, backgroundPlotArea, plotArea);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param drawArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumDomainValue(data);}else return null;', 'comment': '/*** Returns the maximum value in the domain, since this is plotted against the horizontal axis* for an XYPlot.* @return The maximum value to be plotted against the horizontal axis.*/', 'coherence': 1}, {'code': 'public void setRenderer(VerticalBarRenderer renderer) {this.renderer = renderer;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the renderer for the bar plot.* @param renderer The renderer.*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* an XYPlot.* @return The minimum value to be plotted against the vertical axis.*/', 'coherence': 1}, {'code': 'public CategoryAxis getCategoryAxis() {return (CategoryAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* CategoryAxis.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumDomainValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the domain, since this is plotted against the horizontal axis* for an XYPlot.* @return The minimum value to be plotted against the horizontal axis.*/', 'coherence': 1}, {'code': 'public VerticalBarPlot(Axis horizontalAxis, Axis verticalAxis)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontalAxis, verticalAxis);this.renderer = new VerticalBarRenderer();', 'comment': '/*** Standard constructor - builds a VerticalBarPlot with mostly default attributes.* @param horizontalAxis The horizontal axis;* @param verticalAxis The vertical axis;*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Bar Plot";', 'comment': '/*** Returns a short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public void setXYItemRenderer(XYItemRenderer renderer) {this.renderer = renderer;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the item renderer, and notifies all listeners of a change to the plot.* @param renderer The new renderer.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof CategoryAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis;*/', 'coherence': 1}, {'code': 'protected Shape calculateBackgroundPlotArea(Rectangle2D plotArea) {return plotArea;', 'comment': "/*** Returns chart's backgroud area*/", 'coherence': 1}, {'code': 'private void drawHorizontalLines(Graphics2D g2, Rectangle2D plotArea) {// Draw any horizontal linesif (horizontalLines != null) {for (int i=0; i<horizontalLines.size(); i++) {g2.setPaint((Paint)horizontalColors.get(i));g2.setStroke(new BasicStroke(1));g2.drawLine(0,(int)getVerticalValueAxis().translatedValue((Number)horizontalLines.get(i), plotArea),(int)(plotArea.getWidth()),(int)getVerticalValueAxis().translatedValue((Number)horizontalLines.get(i), plotArea));', 'comment': '/*** Support method for the draw(...) method.*/', 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis vAxis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setVerticalAxis(vAxis);', 'comment': "/*** Sets the vertical axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param vAxis The new vertical axis.*/", 'coherence': 1}, {'code': 'public void addHorizontalLine(Number location) {addHorizontalLine(location, Color.red);', 'comment': '/*** Adds a horizontal line at location with default color red.* @return void*/', 'coherence': 1}, {'code': 'public VerticalBarPlot(Axis horizontal, Axis vertical, Insets insets,double introGapPercent, double trailGapPercent,double categoryGapPercent, double seriesGapPercent)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontal, vertical, insets,introGapPercent, trailGapPercent, categoryGapPercent, seriesGapPercent);this.renderer = new VerticalBarRenderer();', 'comment': '/*** Standard constructor: returns a BarPlot with attributes specified by the caller.* @param horizontal The horizontal axis.* @param vertical The vertical axis.* @param introGapPercent The gap before the first bar in the plot, as a percentage of the*            available drawing space.* @param trailGapPercent The gap after the last bar in the plot, as a percentage of the*            available drawing space.* @param categoryGapsPercent The percentage of drawing space allocated to the gap between the*               last bar in one category and the first bar in the next category.* @param itemGapsPercent The gap between bars within the same category.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) {return true;}else if (axis instanceof HorizontalDateAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis;* @return True if the axis is compatible with the plot, and false otherwise.*/', 'coherence': 1}, {'code': 'public XYItemRenderer getItemRenderer() {return this.renderer;', 'comment': '/*** Returns a reference to the current item renderer.* @return A reference to the current item renderer.*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a CategoryDataset.*/', 'coherence': 1}, {'code': 'public void addVerticalLine(Number location) {addVerticalLine(location, Color.blue);', 'comment': '/*** Adds a vertical line at location with default color blue.* @return void*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* BarPlot.*/', 'coherence': 1}, {'code': 'public ValueAxis getVerticalValueAxis() {return (ValueAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* ValueAxis.* @return The vertical axis cast as a ValueAxis.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'public XYDataset getDataset() {return (XYDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as an XYDataset.* @return The dataset for the plot, cast as an XYDataset.*/', 'coherence': 1}, {'code': 'public java.util.List getCategories() {return getDataset().getCategories();', 'comment': '/*** A convenience method that returns a list of the categories in the dataset.*/', 'coherence': 1}, {'code': 'public void drawOutlineAndBackground(Graphics2D g2, Shape area) {if (backgroundPaint!=null) {g2.setPaint(backgroundPaint);g2.fill(area);}if ((outlineStroke!=null) && (outlinePaint!=null)) {g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(area);', 'comment': '/*** Draws the plot outline and background.* @param g2 The graphics device.* @param area The area for the plot.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis getValueAxis() {return (VerticalNumberAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* VerticalNumberAxis.*/', 'coherence': 1}, {'code': 'public int barWidthsPerCategory(CategoryDataset data) {return data.getSeriesCount();', 'comment': '/*** Returns the number of bar-widths displayed in each category.  For this renderer, there is one* bar per series, so we return the number of series.*/', 'coherence': 1}, {'code': 'public boolean hasItemGaps() {return true;', 'comment': '/*** Returns true, since for this renderer there are gaps between the items in one category.*/', 'coherence': 1}, {'code': 'public void drawBar(Graphics2D g2, Rectangle2D plotArea, BarPlot plot, ValueAxis valueAxis,CategoryDataset data, int series, Object category, int categoryIndex,double translatedZero, double itemWidth,double categorySpan, double categoryGapSpan,double itemSpan, double itemGapSpan) {// first check the value we are plotting...Number value = data.getValue(series, category);if (value!=null) {// BAR Xdouble rectX = plotArea.getX()+plotArea.getWidth()*plot.getIntroGapPercent();int categories = data.getCategoryCount();int seriesCount = data.getSeriesCount();if (categories>1) {rectX = rectX// bars in completed categories+ categoryIndex*(categorySpan/categories)// gaps between completed categories+ (categoryIndex*(categoryGapSpan/(categories-1))// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount)));if (seriesCount>1) {rectX = rectX+ (series*itemGapSpan/(categories*(seriesCount-1)));}}else {rectX = rectX// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount));if (seriesCount>1) {rectX = rectX+ (series*itemGapSpan/(categories*(seriesCount-1)));}}// BAR Ydouble translatedValue = valueAxis.translatedValue(value, plotArea);double rectY = Math.min(translatedZero, translatedValue);// BAR WIDTHdouble rectWidth = itemWidth;// BAR HEIGHTdouble rectHeight = Math.abs(translatedValue-translatedZero);Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);Paint seriesPaint = plot.getSeriesPaint(series);g2.setPaint(seriesPaint);g2.fill(bar);if (itemWidth>3) {g2.setStroke(plot.getSeriesStroke(series));g2.setPaint(plot.getSeriesOutlinePaint(series));g2.draw(bar);', 'comment': '/*** Handles the rendering of a single bar.* @param g2* @param plotArea* @param plot* @param valueAxis* @param data* @param series* @param category* @param categoryIndex* @param translatedZero* @param itemWidth* @param categorySpan* @param categoryGapSpan* @param itemSpan* @param itemGapSpan*/', 'coherence': 1}, {'code': 'public void setGridPaint(Paint paint) {gridPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the Paint used to color the grid lines (if visible) and notifies registered listeners* that the axis has been modified.* @param paint The new grid paint.*/', 'coherence': 1}, {'code': 'public Paint getGridPaint() {return gridPaint;', 'comment': '/*** Returns the Paint used to color the grid lines (if visible).*/', 'coherence': 1}, {'code': 'public ValueAxis(String label, Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible,Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, boolean autoTickUnit,boolean showGridLines, Stroke gridStroke, Paint gridPaint) {super(label, labelFont, labelPaint, labelInsets,tickLabelsVisible, tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible, tickMarkStroke);this.autoRange = autoRange;this.autoTickUnit = autoTickUnit;this.showGridLines = showGridLines;this.gridStroke = gridStroke;this.gridPaint = gridPaint;', 'comment': '/*** Constructs a value axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param tickMarksVisible Flag indicating whether or not the tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis range is automatically adjusted to*          fit the data.* @param autoTickUnit A flag indicating whether or not the tick unit is automatically*           selected.* @param showGridLines Flag indicating whether or not grid lines are visible for this axis.* @param gridStroke The Stroke used to display grid lines (if visible).* @param gridPaint The Paint used to display grid lines (if visible).*/', 'coherence': 1}, {'code': 'public void setGridStroke(Stroke stroke) {gridStroke = stroke;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the Stroke used to draw the grid lines (if visible) and notifies registered listeners* that the axis has been modified.* @param stroke The new grid line stroke.*/', 'coherence': 1}, {'code': 'public boolean isShowGridLines() {return showGridLines;', 'comment': '/*** Returns true if the grid lines are visible for this axis, and false otherwise.*/', 'coherence': 1}, {'code': 'public void setShowGridLines(boolean show) {showGridLines = show;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the visibility of the grid lines and notifies registered listeners that the axis has* been modified.* @param show The new setting.*/', 'coherence': 1}, {'code': 'public void setAutoTickValue(boolean flag) {if (this.autoTickUnit!=flag) {this.autoTickUnit = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets a flag indicating whether or not the tick unit is automatically selected from a* range of standard tick units.* <P>* Registered listeners are notified of a change to the axis.* @param flag The new value of the flag.*/', 'coherence': 1}, {'code': 'public ValueAxis(String label) {super(label);this.autoRange = true;this.autoTickUnit = true;this.showGridLines = true;this.gridStroke = ValueAxis.DEFAULT_GRID_LINE_STROKE;this.gridPaint = Color.gray;', 'comment': '/*** Constructs a value axis.* @param label The axis label.*/', 'coherence': 1}, {'code': 'public Stroke getGridStroke() {return gridStroke;', 'comment': '/*** Returns the Stroke used to draw the grid lines (if visible).*/', 'coherence': 1}, {'code': 'public void setAutoRange(boolean auto) {if (this.autoRange!=auto) {this.autoRange=auto;if (autoRange) autoAdjustRange();notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets a flag that determines whether or not the axis range is automatically adjusted to fit* the data, and notifies registered listeners that the axis has been modified.* @param auto Flag indicating whether or not the axis is automatically scaled to fit the data.*/', 'coherence': 1}, {'code': 'public boolean isAutoTickUnit() {return autoTickUnit;', 'comment': '/*** Returns A flag indicating whether or not the tick unit is automatically selected from a* range of standard tick units.* @return A flag indicating whether or not the tick unit is automatically selected.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis3D(String label, Font labelFont,Number minimumAxisValue, Number maximumAxisValue) {this(label, labelFont, Color.black, new Insets(4, 4, 4, 4), true,true, new Font("Arial", Font.PLAIN, 10), Color.black, new Insets(2, 1, 2, 1),true, new BasicStroke(1), false, true, new Double(0.00001),minimumAxisValue, maximumAxisValue,true, NumberAxis.DEFAULT_TICK_UNIT,/* new Double(5.0), new DecimalFormat("0"), */false, new BasicStroke(1), Color.lightGray, DEFAULT_EFFECT_3D);', 'comment': '/*** Standard constructor: returns a VerticalValueAxis with some default attributes.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param minimumAxisValue The lowest value shown on the axis;* @param maximumAxisValue The highest value shown on the axis;*/', 'coherence': 1}, {'code': 'public boolean isAutoRange() {return autoRange;', 'comment': '/*** Returns true if the axis range is automatically adjusted to fit the data, and false* otherwise.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis3D(String label, Font labelFont, Paint labelPaint, Insets labelInsets,boolean verticalLabel,boolean showTickLabels, Font tickLabelFont, Paint tickLabelPaint,Insets tickLabelInsets,boolean showTickMarks, Stroke tickMarkStroke,boolean autoRange, boolean autoRangeIncludesZero,Number autoRangeMinimum,Number minimumAxisValue, Number maximumAxisValue,boolean autoTickUnit, NumberTickUnit tickUnit,/*Number tickValue, DecimalFormat formatter,*/boolean showGridLines, Stroke gridStroke, Paint gridPaint,double effect3d) {super(label, labelFont, labelPaint, labelInsets, verticalLabel, showTickLabels,tickLabelFont, tickLabelPaint,tickLabelInsets, showTickMarks, tickMarkStroke,autoRange, autoRangeIncludesZero, autoRangeMinimum,minimumAxisValue, maximumAxisValue,autoTickUnit, tickUnit,/* tickValue, formatter, */showGridLines, gridStroke, gridPaint);this.effect3d = effect3d;', 'comment': "/*** Full constructor: returns a new VerticalValueAxis.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param labelPaint The paint used to draw the axis label;* @param labelInsets Determines the amount of blank space around the label;* @param verticalLabel Flag indicating whether or not the label is drawn vertically;* @param showTickLabels Flag indicating whether or not tick labels are visible;* @param tickLabelFont The font used to display tick labels;* @param tickLabelPaint The paint used to draw tick labels;* @param tickLabelInsets Determines the amount of blank space around tick labels;* @param showTickMarks Flag indicating whether or not tick marks are visible;* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis is automatically scaled to fit the*          data;* @param autoRangeIncludesZero - A flag indicating whether or not zero *must* be displayed on*                axis;* @param autoRangeMinimum - the smallest automatic range allowed;* @param minimumAxisValue The lowest value shown on the axis;* @param maximumAxisValue The highest value shown on the axis;* @param autoTickUnit A flag indicating whether or not the tick units are automatically*           selected.* @param showGridLines Flag indicating whether or not grid lines are visible for this axis;* @param gridStroke The Stroke used to display grid lines (if visible);* @param gridPaint The Paint used to display grid lines (if visible).* @param effect3d 'Z' axis deep*/", 'coherence': 1}, {'code': 'public VerticalNumberAxis3D(String label) {super(label);', 'comment': '/*** Standard constructor - builds a VerticalValueAxis with mostly default attributes.* @param label The axis label;*/', 'coherence': 1}, {'code': 'public void setTitle(String text) {this.title = text;', 'comment': '/*** Sets the title to the specified text and notifies registered listeners that the title has* been modified.* @param text The new chart title;*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelif (this.label!=null) {g2.setFont(labelFont);g2.setPaint(labelPaint);Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());if (labelDrawnVertical) {double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);drawVerticalString(label, g2, (float)xx, (float)yy);}else {double xx = drawArea.getX()+labelInsets.left;double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;g2.drawString(label, (float)xx, (float)yy);}}// draw the tick labels and marks and gridlinesthis.refreshTicks(g2, drawArea, plotArea);double xx = plotArea.getX();g2.setFont(tickLabelFont);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float yy = (float)this.translatedValue(tick.getNumericalValue(), plotArea);if (tickLabelsVisible) {g2.setPaint(this.tickLabelPaint);g2.drawString(tick.getText(), tick.getX(), tick.getY());}if (tickMarksVisible) {g2.setStroke(this.getTickMarkStroke());Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,plotArea.getX(), yy);g2.draw(mark);}if (showGridLines) {g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Double(xx+effect3d, yy-effect3d,plotArea.getMaxX(), yy-effect3d);g2.draw(gridline);Line2D grid3Dline = new Line2D.Double(xx, yy,xx+effect3d, yy-effect3d);g2.draw(grid3Dline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param drawArea The area within which the chart should be drawn.* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public void removeChangeListener(TitleChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Unregisters an object for notification of changes to the chart title.* @param listener The object that is being unregistered.*/', 'coherence': 1}, {'code': 'protected Title(String title) {this.title = title;this.listeners = new java.util.ArrayList();', 'comment': '/*** Standard constructor - builds a Title object.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis3D() {super(null);', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public double getEffect3d() {return effect3d;', 'comment': "/*** Return axis 3d deep along 'Z' axis.*/", 'coherence': 1}, {'code': 'public String getTitle() {return this.title;', 'comment': '/*** Returns the title text.*/', 'coherence': 1}, {'code': 'public void addChangeListener(TitleChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the title.* @param listener The object that is being registered.*/--------------//notifyListeners(new TitleChangeEvent(this));--------------', 'coherence': 1}, {'code': 'public static Title createInstance(String title, Font font) {return new StandardTitle(title, font);', 'comment': '/*** Static factory method that returns a concrete subclass of Title.* @param title The chart title;* @param font The font for displaying the chart title;*/', 'coherence': 1}, {'code': 'public String getText() {return text;', 'comment': '/*** Returns the text version of the tick value.* @return The formatted version of the tick value;*/', 'coherence': 1}, {'code': 'public Tick(String text, float x, float y) {this(text, text, x, y);', 'comment': '/*** Standard constructor: creates a Tick with the specified properties.* @param formattedValue The formatted version of the tick value;* @param x The x-coordinate of the tick;* @param y The y-coordinate of the tick;*/', 'coherence': 1}, {'code': 'public Tick(Object value, String text, float x, float y) {this.value = value;this.text = text;this.x=x;this.y=y;', 'comment': '/*** Standard constructor: creates a Tick with the specified properties.* @param value The tick value;* @param formattedValue The formatted version of the tick value;* @param x The x-coordinate of the tick;* @param y The y-coordinate of the tick;*/', 'coherence': 1}, {'code': 'public float getX() {return x;', 'comment': '/*** Returns the x-coordinate of the tick.* @return The x-coordinate of the tick.*/', 'coherence': 1}, {'code': 'public Number getNumericalValue() {if (value instanceof Number) {return (Number)value;}else if (value instanceof Date) {return new Long(((Date)value).getTime());}else return null;', 'comment': '/*** Returns the numerical value of the tick, or null if the value is not a Number.* @return The tick value;*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D titleArea) {if (this.position == TOP || this.position == BOTTOM) {drawHorizontal(g2, titleArea);}else throw new RuntimeException("TextTitle.draw(...) - invalid title position.");', 'comment': '/*** Draws the title on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param chartArea The area within which the title (and plot) should be drawn;* @return The area used by the title;*/', 'coherence': 1}, {'code': 'public Paint getPaint() {return this.paint;', 'comment': '/*** Returns the paint used to display the title.* @return  An object that implements the Paint interface used to paint this title;*/', 'coherence': 1}, {'code': 'public Font getFont() {return this.font;', 'comment': '/*** Returns the current title font.* @return  A Font object of the font used to render this title;*/', 'coherence': 1}, {'code': 'public double getPreferredWidth(Graphics2D g2) {g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();Rectangle2D titleBounds = font.getStringBounds(text, frc);double titleWidth = insets.left+titleBounds.getWidth()+insets.right;return titleWidth;', 'comment': '/*** Returns the preferred width of the title.*/', 'coherence': 1}, {'code': 'public void setPaint(Paint paint) {if (!this.paint.equals(paint)) {this.paint = paint;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the Paint used to display the title and notifies registered listeners that the title has* been modified.* @param paint The new paint for displaying the chart title;*/', 'coherence': 1}, {'code': 'public TextTitle(String text) {this(text, new Font("Dialog", Font.PLAIN, 12));', 'comment': '/*** Default constructor - builds a TextTitle with some default attributes.*/', 'coherence': 1}, {'code': 'public void setText(String text) {if (!this.text.equals(text)) {this.text = text;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the title to the specified text. This method notifies registered listeners that the* title has been modified.* @param text A String of the new chart title;*/', 'coherence': 1}, {'code': 'public boolean isValidPosition(int position) {if ((position==AbstractTitle.TOP) || (position==AbstractTitle.BOTTOM)) return true;else return false;', 'comment': '/*** Returns true for the positions that are valid for TextTitle (TOP and BOTTOM for now) and* false for all other positions.*/', 'coherence': 1}, {'code': 'public TextTitle(String text, Font font, Paint paint, int position, int horizontalAlignment,int verticalAlignment, Insets insets) {super(position, horizontalAlignment, verticalAlignment, insets);this.text = text;this.font = font;this.paint = paint;', 'comment': '/** Full constructor - builds a TextTitle with the specified properties. */', 'coherence': 1}, {'code': 'public TextTitle(String text, Font font) {this(text, font, Color.black);', 'comment': '/*** Default constructor - builds a TextTitle with some default attributes.*/', 'coherence': 1}, {'code': 'public void setFont(Font font) {if (!this.font.equals(font)) {this.font = font;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the title font to the specified font and notifies registered listeners that the title* has been modified.* @param font  A Font object of the new font;*/', 'coherence': 1}, {'code': 'protected void drawHorizontal(Graphics2D g2, Rectangle2D titleArea) {g2.setFont(this.font);g2.setPaint(this.paint);FontRenderContext frc = g2.getFontRenderContext();Rectangle2D titleBounds = font.getStringBounds(text, frc);LineMetrics lineMetrics = font.getLineMetrics(text, frc);double titleWidth = titleBounds.getWidth();double titleHeight = lineMetrics.getHeight();double titleY = titleArea.getY()+insets.top;// work out the vertical alignment...if (this.verticalAlignment==TOP) {titleY = titleY+titleHeight-lineMetrics.getLeading()-lineMetrics.getDescent();}else if (this.verticalAlignment==MIDDLE) {double space = (titleArea.getHeight()-insets.top-insets.bottom-titleHeight);titleY = titleY+(space/2)+titleHeight-lineMetrics.getLeading()-lineMetrics.getDescent();}else if (this.verticalAlignment==BOTTOM) {titleY = titleArea.getMaxY()-insets.bottom-lineMetrics.getLeading()-lineMetrics.getDescent();}// work out the horizontal alignment...double titleX = titleArea.getX()+insets.left;if (this.horizontalAlignment==CENTER) {titleX = titleX+((titleArea.getWidth()-insets.left-insets.right)/2)-(titleWidth/2);}else if (this.horizontalAlignment==LEFT) {titleX = titleArea.getX()+insets.left;}else if (this.horizontalAlignment == RIGHT) {titleX = titleArea.getMaxX()-insets.right-titleWidth;}g2.drawString(text, (float)(titleX), (float)(titleY));', 'comment': '/*** Draws the title on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param chartArea The area within which the title (and plot) should be drawn;*/', 'coherence': 1}, {'code': 'public TextTitle(String text, Font font, Paint paint) {this(text, font, paint, TOP, CENTER, MIDDLE, new Insets(2, 2, 2, 2));', 'comment': '/*** Default constructor - builds a TextTitle with some default attributes.*/', 'coherence': 1}, {'code': 'public double getPreferredHeight(Graphics2D g2) {g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();LineMetrics lineMetrics = font.getLineMetrics(text, frc);double titleHeight = insets.top+lineMetrics.getHeight()+insets.bottom;return titleHeight;', 'comment': '/*** Returns the preferred height of the title.*/', 'coherence': 1}, {'code': 'public String getText() {return text;', 'comment': '/*** Returns the title text.* @return A String of the title text;*/', 'coherence': 1}, {'code': 'public JFreeChart getChart() {return chart;', 'comment': '/*** Returns a reference to the chart that generated the change event.*/', 'coherence': 1}, {'code': 'public void setChart(JFreeChart chart) {this.chart = chart;', 'comment': '/*** Sets the chart that generated the change event.* @param chart The chart that generated the event.*/', 'coherence': 1}, {'code': 'public int getType() {return this.type;', 'comment': '/*** Returns the event type.*/', 'coherence': 1}, {'code': 'public ChartChangeEvent(Object source, JFreeChart chart, int type) {super(source);this.chart = chart;this.type = type;', 'comment': '/*** Full constructor: returns a new ChartChangeEvent object with the specified type.*/', 'coherence': 1}, {'code': 'public ChartChangeEvent(Object source) {this(source, null, GENERAL);', 'comment': '/*** Standard constructor: returns a new ChartChangeEvent object, type GENERAL.* @param source The source of the event (could be the chart, a title, an axis etc.)*/', 'coherence': 1}, {'code': 'public ChartChangeEvent(Object source, JFreeChart chart) {this(source, chart, GENERAL);', 'comment': '/*** Standard constructor: returns a new ChartChangeEvent object, type GENERAL.* @param source The source of the event (could be the chart, a title, an axis etc.);* @param chart The chart that generated the event;*/', 'coherence': 1}, {'code': 'public boolean getPlotShapes() {return this.plotShapes;', 'comment': '/*** Returns true if shapes are being plotted by the renderer.*/', 'coherence': 1}, {'code': 'public StandardXYItemRenderer(int type) {if (type==SHAPES) this.plotShapes=true;if (type==LINES) this.plotLines=true;if (type==SHAPES_AND_LINES) {this.plotShapes = true;this.plotLines = true;', 'comment': '/*** Standard constructor.* @param The type of renderer.  Use one of the constants SHAPES, LINES or SHAPES_AND_LINES.*/', 'coherence': 1}, {'code': 'public StandardXYItemRenderer() {this.plotShapes = true;this.plotLines = false;', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public void drawItem(Graphics2D g2, Rectangle2D plotArea,Plot plot, ValueAxis horizontalAxis, ValueAxis verticalAxis,XYDataset data, int series, int item,double translatedRangeZero) {Paint seriesPaint = plot.getSeriesPaint(series);Stroke seriesStroke = plot.getSeriesStroke(series);g2.setPaint(seriesPaint);g2.setStroke(seriesStroke);// get the data point...Number x1 = data.getXValue(series, item);Number y1 = data.getYValue(series, item);double transX1 = horizontalAxis.translatedValue(x1, plotArea);double transY1 = verticalAxis.translatedValue(y1, plotArea);if (this.plotShapes) {Shape shape = plot.getShape(series, item, transX1, transY1, shapeScale);g2.draw(shape);}if (this.plotLines) {if (item>0) {// get the previous data point...Number x0 = data.getXValue(series, item-1);Number y0 = data.getYValue(series, item-1);double transX0 = horizontalAxis.translatedValue(x0, plotArea);double transY0 = verticalAxis.translatedValue(y0, plotArea);Line2D line = new Line2D.Double(transX0, transY0, transX1, transY1);g2.draw(line);', 'comment': "/*** Draws the visual representation of a single data item.* @param g2 The graphics device.* @param plotArea The area within which the plot is being drawn.* @param plot The plot (can be used to obtain standard color information etc).* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param data The dataset.* @param series The series index.* @param item The item index.* @param translatedRangeZero Zero on the range axis (supplied so that, if it is required, it*    doesn't have to be calculated repeatedly).*/", 'coherence': 1}, {'code': 'public AxisChangeEvent(Axis axis) {super(axis);this.axis = axis;', 'comment': '/*** Default constructor: returns a new AxisChangeEvent.* @param axis The axis that generated the event.*/', 'coherence': 1}, {'code': 'public boolean getPlotLines() {return this.plotLines;', 'comment': '/*** Returns true if lines are being plotted by the renderer.*/', 'coherence': 1}, {'code': 'public TickUnit getNearestTickUnit(TickUnit unit) {int index = Collections.binarySearch(units, unit);if (index>=0) {return (TickUnit)units.get(index);}else {index = -(index + 1);return (TickUnit)units.get(Math.min(index, units.size()));', 'comment': '/*** Returns the tick unit in the collection that is closest in size to the specified unit.*/', 'coherence': 1}, {'code': 'public int barWidthsPerCategory(CategoryDataset data) {return data.getSeriesCount();', 'comment': '/***  This renderer shows each series within a category as a separate bar (as opposed to a*  stacked bar renderer).*  @param data The data being plotted.*/', 'coherence': 1}, {'code': 'public boolean hasItemGaps() {return true;', 'comment': '/*** Returns true, since for this renderer there are gaps between the items in one category.*/', 'coherence': 1}, {'code': 'public void drawBar(Graphics2D g2, Rectangle2D plotArea, BarPlot plot, ValueAxis valueAxis,CategoryDataset data, int series, Object category, int categoryIndex,double translatedZero, double itemWidth,double categorySpan, double categoryGapSpan,double itemSpan, double itemGapSpan) {// first check the value we are plotting...Number value = data.getValue(series, category);if (value!=null) {// Xdouble translatedValue = valueAxis.translatedValue(value, plotArea);double rectX = Math.min(translatedZero, translatedValue);// Ydouble rectY = plotArea.getY() + plotArea.getHeight()*plot.getIntroGapPercent();int categories = data.getCategoryCount();int seriesCount = data.getSeriesCount();if (categories>1) {rectY = rectY// bars in completed categories+ (categoryIndex*categorySpan/categories)// gaps between completed categories+ (categoryIndex*categoryGapSpan/(categories-1))// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount));if (seriesCount>1) {rectY = rectY+ (series*itemGapSpan/(categories*(seriesCount-1)));}}else {rectY = rectY// bars+gaps completed in current category;+ (series*itemSpan/(categories*seriesCount));if (seriesCount>1) {rectY = rectY+ (series*itemGapSpan/(categories*(seriesCount-1)));}}// WIDTHdouble rectWidth = Math.abs(translatedValue-translatedZero);// HEIGHTdouble rectHeight = itemWidth;// DRAW THE BAR...Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);Paint seriesPaint = plot.getSeriesPaint(series);g2.setPaint(seriesPaint);g2.fill(bar);if (itemWidth>BAR_OUTLINE_WIDTH_THRESHOLD) {g2.setStroke(plot.getSeriesStroke(series));g2.setPaint(plot.getSeriesOutlinePaint(series));g2.draw(bar);', 'comment': '/*** Draws the bar for a single (series, category) data item.* @param g2* @param plotArea* @param plot* @param valueAxis* @param data* @param series* @param category* @param categoryIndex* @param translatedZero* @param itemWidth* @param categorySpan* @param categoryGapSpan* @param itemSpan* @param itemGapSpan*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {if (series==0) {return "y = cosine(x)";}else if (series==1) {return "y = 2*sine(x)";}else return "Error";', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return new Double(-10.0+translate+(item*0.2));', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public SampleXYDataset() {this.translate = 0.0;', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'private double getMaxTickLabelHeight(Graphics2D g2, Rectangle2D drawArea, boolean vertical) {Font font = getTickLabelFont();g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();double maxHeight = 0.0;if (vertical) {Iterator iterator = this.ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();Rectangle2D labelBounds = font.getStringBounds(tick.getText(), frc);if (labelBounds.getWidth()>maxHeight) {maxHeight = labelBounds.getWidth();}}}else {LineMetrics metrics = font.getLineMetrics("Sample", frc);maxHeight = metrics.getHeight();}return maxHeight;', 'comment': '/*** A utility method for determining the height of the tallest tick label.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return 2;', 'comment': '/*** Returns the number of series in the data source.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {if (series==0) {return new Double(Math.cos(-10.0+translate+(item/10.0)));}else return new Double(2*(Math.sin(-10.0+translate+(item/10.0))));', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'private boolean tickLabelsFit(int index,Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// generate one label at a time until all are done OR there is an overlap (so fit==FALSE)SimpleDateFormat dateFormatter = new SimpleDateFormat(standardTickFormats[index]);DateUnit units = new DateUnit(this.standardTickUnits[index][0], this.standardTickUnits[index][1]);double lastLabelExtent = Double.NEGATIVE_INFINITY;double labelExtent;boolean labelsFit = true;Date tickDate = this.calculateLowestVisibleTickValue(units);while (tickDate.before(this.maximumDate) && labelsFit) {double xx = this.translatedValue(tickDate, plotArea);String tickLabel = dateFormatter.format(tickDate);Rectangle2D tickLabelBounds = tickLabelFont.getStringBounds(tickLabel,g2.getFontRenderContext());if (this.verticalTickLabels) {labelExtent = xx-(tickLabelBounds.getHeight()/2);if (labelExtent<lastLabelExtent) labelsFit = false;lastLabelExtent = xx+(tickLabelBounds.getHeight()/2);}else {labelExtent = xx-(tickLabelBounds.getWidth()/2);if (labelExtent<lastLabelExtent) labelsFit = false;lastLabelExtent = xx+(tickLabelBounds.getWidth()/2);}tickDate = units.addToDate(tickDate);}return labelsFit;', 'comment': '/*** Determines whether or not the tick labels fit given the available space.*/--------------// there are two special cases to handle--------------', 'coherence': 1}, {'code': 'private void calculateAutoTickUnits(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// find the index of the largest standard tick magnitude that fits into the axis rangeint index = this.findAxisMagnitudeIndex();boolean labelsFit = true;while (labelsFit && index>0) {index=index-1;labelsFit = tickLabelsFit(index, g2, drawArea, plotArea);}if (labelsFit) {this.autoTickIndex=index;}else {this.autoTickIndex=Math.min(index+1, this.standardTickUnitMagnitudes.length);}this.tickLabelFormatter.applyPattern(this.standardTickFormats[autoTickIndex]);this.tickUnit = new DateUnit(this.standardTickUnits[autoTickIndex][0],this.standardTickUnits[autoTickIndex][1]);', 'comment': '/*** Determines an appropriate tick value for the axis...*/', 'coherence': 1}, {'code': 'public void configure() {if (isAutoRange()) {this.autoAdjustRange();', 'comment': '/*** Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets* the maximum and minimum values.*/', 'coherence': 1}, {'code': 'public double translatedValue(Date date, Rectangle2D plotArea) {double value = (double)date.getTime();double axisMin = (double)minimumDate.getTime();double axisMax = (double)maximumDate.getTime();double plotX = plotArea.getX();double plotMaxX = plotArea.getMaxX();return plotX + ((value - axisMin)/(axisMax - axisMin)) * (plotMaxX - plotX);', 'comment': '/*** Translates the data value to the display coordinates (Java 2D User Space) of the chart.* @param date The date to be plotted;* @param plotArea The plot area in Java 2D User Space.*/', 'coherence': 1}, {'code': 'public void setVerticalTickLabels(boolean flag) {this.verticalTickLabels = flag;this.notifyListeners(new com.jrefinery.chart.event.AxisChangeEvent(this));', 'comment': "/*** Sets the flag that determines whether the tick labels are drawn 'vertically'.* @param flag The new value of the flag;*/", 'coherence': 1}, {'code': 'public HorizontalDateAxis(String label) {super(label);this.verticalTickLabels = false;', 'comment': '/*** Standard constructor - builds a HorizontalDateAxis with some default attributes.* @param label The axis label;* @param labelFont The font for displaying the axis label;*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {// calculate the height of the axis label...LineMetrics metrics = labelFont.getLineMetrics(label, g2.getFontRenderContext());double labelHeight = this.labelInsets.top+metrics.getHeight()+this.labelInsets.bottom;// calculate the height required for the tick labels (if visible);double tickLabelHeight = tickLabelInsets.top+tickLabelInsets.bottom;if (tickLabelsVisible) {g2.setFont(tickLabelFont);this.refreshTicks(g2, drawArea, drawArea);tickLabelHeight = tickLabelHeight+getMaxTickLabelHeight(g2, drawArea,this.verticalTickLabels);}return new Rectangle2D.Double(drawArea.getX(), drawArea.getMaxY(),drawArea.getWidth()-reservedWidth,labelHeight+tickLabelHeight);', 'comment': '/*** Returns area in which the axis will be displayed.*/', 'coherence': 1}, {'code': 'public HorizontalDateAxis(String label, Font labelFont,Paint labelPaint, Insets labelInsets,boolean showTickLabels, Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean verticalTickLabels,boolean showTickMarks, Stroke tickMarkStroke,boolean autoRange, Date minimumDate, Date maximumDate,boolean autoUnits, DateUnit tickUnits, SimpleDateFormat tickLabelFormatter,boolean showGridLines, Stroke gridStroke, Paint gridPaint) {super(label, labelFont, labelPaint, labelInsets,showTickLabels, tickLabelFont, tickLabelPaint, tickLabelInsets,showTickMarks, tickMarkStroke,autoRange, minimumDate, maximumDate, autoUnits, tickUnits, tickLabelFormatter,showGridLines, gridStroke, gridPaint);this.verticalTickLabels = verticalTickLabels;', 'comment': '/*** Full constructor: returns a new HorizontalDateAxis with attributes as specified by the* caller. There are other constructors that use default values for some attributes.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param labelPaint The paint used to draw the axis label;* @param labelInsets The blank space around the axis label;* @param showTickLabels Flag indicating whether or not tick labels are visible;* @param tickLabelFont Font for displaying tick labels;* @param tickLabelPaint The paint used to display the tick labels;* @param tickLabelInsets The blank space around the tick labels;* @param verticalTickLabels A flag indicating whether or not tick labels are drawn vertically;* @param showTickMarks Flag indicating whether or not tick marks are visible;* @param tickMarkStroke The stroke used to draw tick marks (if visible);* @param autoScale Flag indicating whether or not the axis is automatically scaled to fit the*          data;* @param min The lowest value shown on the axis;* @param max The highest value shown on the axis;* @param autoUnits A flag indicating whether or not the tick units are automatically calculated;* @param tickUnits The tick units;* @param tickLabelFormatter The format object used to display tick labels;* @param showGridLines Flag indicating whether or not grid lines are visible for this axis;* @param gridStroke The Stroke used to display grid lines (if visible);* @param gridPaint The Paint used to display grid lines (if visible).*/', 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the height of the axis label...double labelHeight = 0.0;if (label!=null) {LineMetrics metrics = labelFont.getLineMetrics(label, g2.getFontRenderContext());labelHeight = this.labelInsets.top+metrics.getHeight()+this.labelInsets.bottom;}// calculate the height required for the tick labels (if visible);double tickLabelHeight = tickLabelInsets.top+tickLabelInsets.bottom;if (tickLabelsVisible) {g2.setFont(tickLabelFont);this.refreshTicks(g2, drawArea, drawArea);tickLabelHeight = tickLabelHeight+getMaxTickLabelHeight(g2, drawArea,this.verticalTickLabels);}return labelHeight+tickLabelHeight;', 'comment': '/*** Returns the height required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();g2.setFont(tickLabelFont);if (this.autoTickUnit) {calculateAutoTickUnits(g2, drawArea, plotArea);}Date tickDate = this.calculateLowestVisibleTickValue(tickUnit);while (tickDate.before(this.maximumDate)) {// work out the value, label and positiondouble xx = this.translatedValue(tickDate, plotArea);String tickLabel = this.tickLabelFormatter.format(tickDate);Rectangle2D tickLabelBounds = tickLabelFont.getStringBounds(tickLabel,g2.getFontRenderContext());float x = 0.0f;float y = 0.0f;if (this.verticalTickLabels) {x = (float)(xx+tickLabelBounds.getHeight()/2);y = (float)(plotArea.getMaxY()+tickLabelInsets.top+tickLabelBounds.getWidth());}else {x = (float)(xx-tickLabelBounds.getWidth()/2);y = (float)(plotArea.getMaxY()+tickLabelInsets.top+tickLabelBounds.getHeight());}Tick tick = new Tick(tickDate, tickLabel, x, y);ticks.add(tick);tickDate = this.tickUnit.addToDate(tickDate);', 'comment': '/*** Recalculates the ticks for the date axis.*/', 'coherence': 1}, {'code': 'public void autoAdjustRange() {if (plot!=null) {if (plot instanceof HorizontalValuePlot) {HorizontalValuePlot hvp = (HorizontalValuePlot)plot;Number u = hvp.getMaximumHorizontalDataValue();long upper = new Date().getTime()+24L*60L*60L*1000L;if (u!=null) {upper = u.longValue();}Number l = hvp.getMinimumHorizontalDataValue();long lower = new Date().getTime();if (l!=null) {lower = l.longValue();}long range = upper-lower;upper = upper+(range/20);lower = lower-(range/20);this.minimumDate=new Date(lower);this.maximumDate=new Date(upper);', 'comment': '/*** Rescales the axis to ensure that all data is visible.*/', 'coherence': 1}, {'code': 'public boolean getVerticalTickLabels() {return this.verticalTickLabels;', 'comment': "/*** Returns a flag indicating whether the tick labels are drawn 'vertically'.*/", 'coherence': 1}, {'code': 'public HorizontalDateAxis() {super(null);this.verticalTickLabels = false;', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public HorizontalDateAxis(String label, Font labelFont,Date minimumDate, Date maximumDate) {this(label, labelFont, Color.black, new Insets(4, 4, 4, 4),true, new Font("Arial", Font.PLAIN, 10), Color.black, new Insets(1, 2, 1, 1),true, true, new BasicStroke(1),false, minimumDate, maximumDate, false, new DateUnit(Calendar.DATE, 1),new SimpleDateFormat(), false, null, null);', 'comment': '/*** Standard constructor: returns a HorizontalValueAxis with some default attributes.* @param label The axis label;* @param labelFont The font for displaying the axis label;* @param min The lowest value shown on the axis;* @param max The highest value shown on the axis;*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelif (this.label!=null) {g2.setFont(labelFont);g2.setPaint(labelPaint);FontRenderContext frc = g2.getFontRenderContext();Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);LineMetrics lm = labelFont.getLineMetrics(label, frc);float labelx = (float)(plotArea.getX()+plotArea.getWidth()/2-labelBounds.getWidth()/2);float labely = (float)(drawArea.getMaxY()-labelInsets.bottom-lm.getDescent()-lm.getLeading());g2.drawString(label, labelx, labely);}// draw the tick labels and marksthis.refreshTicks(g2, drawArea, plotArea);float maxY = (float)plotArea.getMaxY();g2.setFont(getTickLabelFont());Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float xx = (float)this.translatedValue(tick.getNumericalValue(), plotArea);if (tickLabelsVisible) {g2.setPaint(this.tickLabelPaint);if (this.verticalTickLabels) {drawVerticalString(tick.getText(), g2, tick.getX(), tick.getY());}else {g2.drawString(tick.getText(), tick.getX(), tick.getY());}}if (tickMarksVisible) {g2.setStroke(this.getTickMarkStroke());Line2D mark = new Line2D.Float(xx, maxY-2, xx, maxY+2);g2.draw(mark);}if (showGridLines) {g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(), xx,(float)plotArea.getMinY());g2.draw(gridline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn;* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public double translatedValue(Number dataValue, Rectangle2D plotArea) {double value = dataValue.doubleValue();double axisMin = (double)minimumDate.getTime();double axisMax = (double)maximumDate.getTime();double plotX = plotArea.getX();double plotMaxX = plotArea.getMaxX();return plotX + ((value - axisMin)/(axisMax - axisMin)) * (plotMaxX - plotX);', 'comment': '/*** Translates the data value to the display coordinates (Java 2D User Space) of the chart.* @param dataValue The value to be plotted;* @param plotArea The plot area in Java 2D User Space.*/', 'coherence': 1}, {'code': 'public void setDrawOpenCloseTicks(boolean draw) {if (drawOpenClose != draw) {drawOpenClose = draw;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the property that tells this plot to draw open/close marks.* Once the value of this property is set, all listeners are notified* of the change.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea) {if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// we can cast the axes because HiLowPlot enforces support of these interfacesHorizontalAxis ha = getHorizontalAxis();VerticalAxis va = getVerticalAxis();double h = ha.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, h);// compute the plot areaRectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-h);drawOutlineAndBackground(g2, plotArea);// draw the axesthis.horizontalAxis.draw(g2, drawArea, plotArea);this.verticalAxis.draw(g2, drawArea, plotArea);Shape originalClip = g2.getClip();g2.clip(plotArea);java.util.List lines = getLines(plotArea);   // area should be remaining area onlyfor (int i=0; i<lines.size(); i++) {HighLow l = (HighLow)lines.get(i);g2.setPaint(l.getPaint());g2.setStroke(l.getStroke());g2.draw(l.getLine());if (getDrawOpenCloseTicks()) {g2.draw(l.getOpenTickLine());g2.draw(l.getCloseTickLine());}}g2.setClip(originalClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) {return true;}else if (axis instanceof HorizontalDateAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis.*/', 'coherence': 1}, {'code': 'private java.util.List getLines(Rectangle2D plotArea) {ArrayList elements = new ArrayList();HighLowDataset data = getDataset();if (data != null) {int seriesCount = data.getSeriesCount();for (int series=0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);//if (itemCount % 4 != 0)//  continue;for(int itemIndex = 0; itemIndex < itemCount; itemIndex++) {Number x = data.getXValue(series, itemIndex);Number yHigh  = data.getHighValue(series,itemIndex);Number yLow   = data.getLowValue(series,itemIndex);Number yOpen  = data.getOpenValue(series,itemIndex);Number yClose = data.getCloseValue(series,itemIndex);double xx = getHorizontalValueAxis().translatedValue(x, plotArea);double yyHigh = getVerticalValueAxis().translatedValue(yHigh, plotArea);double yyLow = getVerticalValueAxis().translatedValue(yLow, plotArea);double yyOpen = getVerticalValueAxis().translatedValue(yOpen, plotArea);double yyClose = getVerticalValueAxis().translatedValue(yClose, plotArea);Paint p = this.getSeriesPaint(series);Stroke s = this.getSeriesStroke(series);elements.add(new HighLow(xx, yyHigh, yyLow, yyOpen, yyClose, s, p));}}}return elements;', 'comment': '/*** Returns a list of HighLow elements that will fit inside the specified area.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumDomainValue(data);}else return null;', 'comment': '/*** Returns the maximum value in the domain, since this is plotted against the horizontal axis* for a HighLowPlot.*/', 'coherence': 1}, {'code': 'public boolean getDrawOpenCloseTicks() {return drawOpenClose;', 'comment': '/*** Returns true if this plot draws open/close marks.*/', 'coherence': 1}, {'code': 'public HighLowPlot(Axis horizontalAxis, Axis verticalAxis) throws AxisNotCompatibleException,PlotNotCompatibleException{super(horizontalAxis, verticalAxis);', 'comment': '/*** Standard constructor: returns an HiLowPlot with attributes specified by the caller.** @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public HighLowDataset getDataset() {return (HighLowDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as an HighLowDataset.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis){if (axis instanceof VerticalNumberAxis)return true;elsereturn false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.  The vertical axis for this plot must be an instance of* VerticalNumberAxis.* @param axis The vertical axis.*/', 'coherence': 1}, {'code': 'public ValueAxis getHorizontalValueAxis() {return (ValueAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* HorizontalValueAxis.*/', 'coherence': 1}, {'code': 'public ValueAxis getVerticalValueAxis() {return (ValueAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* VerticalNumberAxis.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "HiLow Plot";', 'comment': '/*** Returns the plot type as a string. This implementation returns "HiLow Plot".*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* a HighLowPlot.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumDomainValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the domain, since this is plotted against the horizontal axis* for a HighLowPlot.*/', 'coherence': 1}, {'code': 'public void setRenderer(HorizontalBarRenderer renderer) {this.renderer = renderer;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the renderer for the bar plot.* @param renderer The renderer.*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setHorizontalAxis(axis);', 'comment': "/*** Sets the horizontal axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param axis The new horizontal axis;*/", 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis vAxis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setVerticalAxis(vAxis);', 'comment': "/*** Sets the vertical axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param vAxis The new vertical axis;*/", 'coherence': 1}, {'code': 'public double getCategoryCoordinate(int category, Rectangle2D area) {// calculate first part of result...double result = area.getY()+(area.getHeight()*introGapPercent);// then add some depending on how many categories...int categoryCount = getDataset().getCategoryCount();if (categoryCount>1) {double categorySpan = area.getHeight()*(1-introGapPercent-trailGapPercent-categoryGapsPercent);double categoryGapSpan = area.getHeight()*categoryGapsPercent;result = result+ (category+0.5)*(categorySpan/categoryCount)+ (category)*(categoryGapSpan/(categoryCount-1));}else {result = result+ (category+0.5)*area.getHeight()*(1-introGapPercent-trailGapPercent);}return result;', 'comment': '/*** Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.* @param category The index of the category of interest (first category index = 0).* @param area The region within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a CategoryDataset.*/', 'coherence': 1}, {'code': 'double calculateBarWidth(Rectangle2D plotArea) {CategoryDataset data = getDataset();// series, category and bar countsint categoryCount = data.getCategoryCount();int seriesCount = data.getSeriesCount();int barCount = renderer.barWidthsPerCategory(data)*categoryCount;// calculate the plot height (bars are horizontal) less whitespacedouble usable = plotArea.getHeight() *(1.0 - introGapPercent - trailGapPercent - categoryGapsPercent);if (renderer.barWidthsPerCategory(data)>1) {//    usable = usable - ((seriesCount-1) * categoryCount * seriesGap);}// and thus the width of the barsreturn usable/barCount;', 'comment': '/*** Returns the width of each bar in the chart.* @param plotArea The area within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the horizontal axis for* a HorizontalBarPlot.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalCategoryAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'public java.util.List getCategories() {return getDataset().getCategories();', 'comment': '/*** A convenience method that returns a list of the categories in the data source.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis;*/', 'coherence': 1}, {'code': 'public CategoryAxis getCategoryAxis() {return (CategoryAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* CategoryAxis.*/', 'coherence': 1}, {'code': 'public HorizontalBarPlot(Axis horizontalAxis, Axis verticalAxis, Insets insets,double introGapPercent, double trailGapPercent,double categoryGapPercent, double seriesGapPercent)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontalAxis, verticalAxis, insets,introGapPercent, trailGapPercent, categoryGapPercent, seriesGapPercent);this.renderer = new HorizontalBarRenderer();', 'comment': '/*** Standard constructor: returns a BarPlot with attributes specified by the caller.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param introGapPercent The gap before the first bar in the plot.* @param trailGapPercent The gap after the last bar in the plot.* @param categoryGapPercent The gap between the last bar in one category and the first bar in*               the next category.* @param seriesGapPercent The gap between bars within the same category.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea) {// adjust the drawing area for the plot insets (if any)...if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...VerticalAxis vAxis = getVerticalAxis();HorizontalAxis hAxis = getHorizontalAxis();double vAxisAreaWidth = vAxis.reserveWidth(g2, this, drawArea);Rectangle2D hAxisArea = hAxis.reserveAxisArea(g2, this, drawArea, vAxisAreaWidth);// and this the area available for plotting...Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisAreaWidth,drawArea.getY(),drawArea.getWidth()-vAxisAreaWidth,drawArea.getHeight()-hAxisArea.getHeight());// draw the background and axes...drawOutlineAndBackground(g2, plotArea);getCategoryAxis().draw(g2, drawArea, plotArea);getValueAxis().draw(g2, drawArea, plotArea);// now get the data and plot the bars...CategoryDataset data = this.getDataset();if (data!=null) {Shape savedClip = g2.getClip();g2.clip(plotArea);// draw a line at zero...double translatedZero = getValueAxis().translatedValue(Plot.ZERO, plotArea);Line2D baseline = new Line2D.Double(translatedZero, plotArea.getY(),translatedZero, plotArea.getMaxY());g2.setStroke(new BasicStroke());g2.draw(baseline);int seriesCount = data.getSeriesCount();int categoryCount = data.getCategoryCount();int barCount = renderer.barWidthsPerCategory(data);// work out the span dimensions for the categories...double categorySpan = 0.0;double categoryGapSpan = 0.0;if (categoryCount>1) {categorySpan = plotArea.getHeight()*(1-introGapPercent-trailGapPercent-categoryGapsPercent);categoryGapSpan = plotArea.getHeight()*categoryGapsPercent;}else {categorySpan = plotArea.getHeight()*(1-introGapPercent-trailGapPercent);}// work out the item span...double itemSpan = categorySpan;double itemGapSpan = 0.0;if (seriesCount>1) {if (renderer.hasItemGaps()) {itemGapSpan = plotArea.getHeight()*itemGapsPercent;itemSpan = itemSpan - itemGapSpan;}}double itemWidth = itemSpan/(categoryCount*renderer.barWidthsPerCategory(data));int categoryIndex = 0;Iterator iterator = data.getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();for (int series=0; series<seriesCount; series++) {renderer.drawBar(g2, plotArea, this, this.getValueAxis(), data, series,category, categoryIndex,translatedZero, itemWidth, categorySpan, categoryGapSpan,itemSpan, itemGapSpan);}categoryIndex++;}g2.setClip(savedClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public HorizontalNumberAxis getValueAxis() {return (HorizontalNumberAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* VerticalValueAxis.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Horizontal Bar Plot";', 'comment': '/*** Returns a short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public HorizontalBarPlot(Axis horizontalAxis, Axis verticalAxis)throws AxisNotCompatibleException, PlotNotCompatibleException{super(horizontalAxis, verticalAxis);this.renderer = new HorizontalBarRenderer();', 'comment': '/*** Constructs a horizontal bar plot with the specified axes.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public Line2D getCloseTickLine() {return getTickLine(getLine().getX1(), getValue(CLOSE), getTickSize());', 'comment': '/*** Returns the line. for close tick*/', 'coherence': 1}, {'code': 'public void setValue(int valueType, double newValue) {if (valueType == OPEN)open = newValue;elseclose = newValue;', 'comment': '/*** Sets either OPEN or Close value depending on the valueType.* @param valueType* @param newValue*/', 'coherence': 1}, {'code': 'public void setTickSize(double newSize) {tickSize = newSize;', 'comment': '/*** Sets the width of the open/close tick.* @param newSize*/', 'coherence': 1}, {'code': 'public double getTickSize() {return tickSize;', 'comment': '/*** Returns the width of the open/close tick.*/', 'coherence': 1}, {'code': 'public HighLow(double x, double high, double low, double open, double close,Stroke stroke, Paint paint) {this.line = new Line2D.Double(x, high, x, low);this.open = open;this.close = close;this.stroke = stroke;this.paint = paint;', 'comment': '/*** Constructs a high-low item.* @param x* @param high* @param low* @param open* @param close* @param stroke* @param paint*/', 'coherence': 1}, {'code': 'public Line2D getOpenTickLine() {return getTickLine(getLine().getX1(), getValue(OPEN), (-1) * getTickSize());', 'comment': '/*** Returns the line for open tick.*/', 'coherence': 1}, {'code': 'public double getValue(int valueType) {if (valueType == OPEN)return open;elsereturn close;', 'comment': '/*** Returns either OPEN or Close value depending on the valueType.* @param valueType*/', 'coherence': 1}, {'code': 'public Stroke getStroke() {return stroke;', 'comment': '/*** Returns the Stroke object used to draw the line.*/', 'coherence': 1}, {'code': 'public Line2D getLine() {return line;', 'comment': '/*** Returns the line.*/', 'coherence': 1}, {'code': 'public HighLow(double x, double high, double low) {this(x, high, low, high, low, new BasicStroke(), Color.blue);', 'comment': '/*** Constructs a high-low item, with default values for the open/close and colors.* @param x* @param high* @param low*/', 'coherence': 1}, {'code': 'public HighLow(double x, double high, double low, double open, double close) {this(x, high, low, open, close, new BasicStroke(), Color.blue);', 'comment': '/*** Constructs a high-low item, with default values for the colors.* @param x* @param high* @param low* @param open* @param close*/', 'coherence': 1}, {'code': 'public int getCount() {return this.count;', 'comment': '/*** Returns the number of units.*/', 'coherence': 1}, {'code': 'public DateUnit(int field, int count) {this.field = field;this.count = count;', 'comment': '/*** Builds a DateUnit.*/', 'coherence': 1}, {'code': 'public int getField() {return this.field;', 'comment': '/*** Returns the field used for this DateUnit.*/', 'coherence': 1}, {'code': 'public boolean getVerticalTickLabels() {return this.verticalTickLabels;', 'comment': "/*** Returns a flag indicating whether the tick labels are drawn 'vertically'.*/", 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the height of the axis label...LineMetrics metrics = labelFont.getLineMetrics(label, g2.getFontRenderContext());double labelHeight = this.labelInsets.top+metrics.getHeight()+this.labelInsets.bottom;// calculate the height required for the tick labels (if visible);double tickLabelHeight = tickLabelInsets.top+tickLabelInsets.bottom;if (tickLabelsVisible) {g2.setFont(tickLabelFont);this.refreshTicks(g2, drawArea, drawArea);tickLabelHeight = tickLabelHeight+getMaxTickLabelHeight(g2, drawArea,this.verticalTickLabels);}return labelHeight+tickLabelHeight;', 'comment': '/*** Returns the height required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public void autoAdjustRange() {if (plot!=null) {if (plot instanceof HorizontalValuePlot) {HorizontalValuePlot hvp = (HorizontalValuePlot)plot;Number u = hvp.getMaximumHorizontalDataValue();double upper = this.DEFAULT_MAXIMUM_AXIS_VALUE.doubleValue();if (u!=null) {upper = u.doubleValue();}Number l = hvp.getMinimumHorizontalDataValue();double lower = this.DEFAULT_MINIMUM_AXIS_VALUE.doubleValue();if (l!=null) {lower = l.doubleValue();}double range = upper-lower;// ensure the autorange is at least <minRange> in size...double minRange = this.autoRangeMinimumSize.doubleValue();if (range<minRange) {upper = (upper+lower+minRange)/2;lower = (upper+lower-minRange)/2;}if (this.autoRangeIncludesZero()) {if (upper!=0.0) upper = Math.max(0.0, upper+upperMargin*range);if (lower!=0.0) lower = Math.min(0.0, lower-lowerMargin*range);}else {if (upper!=0.0) upper = upper+upperMargin*range;if (lower!=0.0) lower = lower-lowerMargin*range;}this.minimumAxisValue=new Double(lower);this.maximumAxisValue=new Double(upper);', 'comment': '/*** Rescales the axis to ensure that all data is visible.*/', 'coherence': 1}, {'code': 'public void setVerticalTickLabels(boolean flag) {this.verticalTickLabels = flag;this.notifyListeners(new com.jrefinery.chart.event.AxisChangeEvent(this));', 'comment': "/*** Sets the flag that determines whether the tick labels are drawn 'vertically'.* @param flag The new value of the flag;*/", 'coherence': 1}, {'code': 'public double translatedValue(Number dataValue, Rectangle2D plotArea) {double value = dataValue.doubleValue();double axisMin = minimumAxisValue.doubleValue();double axisMax = maximumAxisValue.doubleValue();double plotX = plotArea.getX();double plotMaxX = plotArea.getMaxX();return plotX + ((value - axisMin)/(axisMax - axisMin)) * (plotMaxX - plotX);', 'comment': '/*** Translates the data value to the display coordinates (Java 2D User Space) of the chart.* @param dataValue The value to be plotted;* @param plotArea The plot area in Java 2D User Space;*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();g2.setFont(tickLabelFont);if (this.autoTickUnit) {selectAutoTickUnit(g2, drawArea, plotArea);}double size = this.tickUnit.getValue().doubleValue();int count = this.calculateVisibleTickCount();double lowestTickValue = this.calculateLowestVisibleTickValue();//tickLabelFormatter = new DecimalFormat(tickLabelFormatter.toPattern());for (int i=0; i<count; i++) {Number currentTickValue = new Double(lowestTickValue+(i*size));double xx = this.translatedValue(currentTickValue, plotArea);String tickLabel = this.valueToString(currentTickValue);Rectangle2D tickLabelBounds = tickLabelFont.getStringBounds(tickLabel,g2.getFontRenderContext());float x = 0.0f;float y = 0.0f;if (this.verticalTickLabels) {x = (float)(xx+tickLabelBounds.getHeight()/2);y = (float)(plotArea.getMaxY()+tickLabelInsets.top+tickLabelBounds.getWidth());}else {x = (float)(xx-tickLabelBounds.getWidth()/2);y = (float)(plotArea.getMaxY()+tickLabelInsets.top+tickLabelBounds.getHeight());}Tick tick = new Tick(currentTickValue, tickLabel, x, y);ticks.add(tick);', 'comment': '/*** Calculates the positions of the tick labels for the axis, storing the results in the* tick label list (ready for drawing).* @param g2 The graphics device.* @param drawArea The area in which the plot and the axes should be drawn.* @param plotArea The area in which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {// calculate the height of the axis label...LineMetrics metrics = labelFont.getLineMetrics(label, g2.getFontRenderContext());double labelHeight = this.labelInsets.top+metrics.getHeight()+this.labelInsets.bottom;// calculate the height required for the tick labels (if visible);double tickLabelHeight = tickLabelInsets.top+tickLabelInsets.bottom;if (tickLabelsVisible) {g2.setFont(tickLabelFont);this.refreshTicks(g2, drawArea, drawArea);tickLabelHeight = tickLabelHeight+getMaxTickLabelHeight(g2, drawArea,this.verticalTickLabels);}return new Rectangle2D.Double(drawArea.getX(), drawArea.getMaxY(),drawArea.getWidth()-reservedWidth,labelHeight+tickLabelHeight);', 'comment': '/*** Returns area in which the axis will be displayed.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot and axes should be drawn;* @param reservedWidth The space already reserved for the vertical axis;*/', 'coherence': 1}, {'code': 'public HorizontalNumberAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible,Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean verticalTickLabels,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, boolean autoRangeIncludesZero,Number autoRangeMinimumSize,Number minimumAxisValue, Number maximumAxisValue,boolean autoTickUnitSelection, NumberTickUnit tickUnit,boolean gridLinesVisible,Stroke gridStroke, Paint gridPaint) {super(label,labelFont, labelPaint, labelInsets,tickLabelsVisible,tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible, tickMarkStroke,autoRange, autoRangeIncludesZero,autoRangeMinimumSize,minimumAxisValue, maximumAxisValue,autoTickUnitSelection, tickUnit,gridLinesVisible,gridStroke, gridPaint);this.verticalTickLabels = verticalTickLabels;', 'comment': "/*** Constructs a horizontal number axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The color used to draw the axis label.* @param labelInsets The blank space around the axis label.* @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.* @param tickLabelFont Font for displaying the tick labels.* @param tickLabelPaint The color used to display the tick labels.* @param tickLabelInsets The blank space around the tick labels.* @param verticalTickLabels A flag indicating whether or not tick labels are drawn vertically.* @param tickMarksVisible Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis range is automatically determined to*          fit the data.* @param autoRangeIncludesZero A flag indicating whether or not the axis range *must* include*                zero.* @param autoRangeMinimum The smallest axis range permitted (avoids problems with a 'zero'*             range).* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.* @param autoTickUnit A flag indicating whether or not the tick value is automatically*           selected from the range of standard tick units.* @param tickUnit The tick unit.* @param gridLinesVisible Flag indicating whether or not grid lines are visible for this axis;* @param gridStroke The Stroke used to display grid lines (if visible);* @param gridPaint The Paint used to display grid lines (if visible).*/", 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelg2.setFont(labelFont);g2.setPaint(labelPaint);FontRenderContext frc = g2.getFontRenderContext();Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);LineMetrics lm = labelFont.getLineMetrics(label, frc);float labelx = (float)(plotArea.getX()+plotArea.getWidth()/2-labelBounds.getWidth()/2);float labely = (float)(drawArea.getMaxY()-labelInsets.bottom-lm.getDescent()-lm.getLeading());g2.drawString(label, labelx, labely);// draw the tick labels and marksthis.refreshTicks(g2, drawArea, plotArea);float maxY = (float)plotArea.getMaxY();g2.setFont(getTickLabelFont());Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float xx = (float)this.translatedValue(tick.getNumericalValue(), plotArea);if (tickLabelsVisible) {g2.setPaint(this.tickLabelPaint);if (this.verticalTickLabels) {drawVerticalString(tick.getText(), g2, tick.getX(), tick.getY());}else {g2.drawString(tick.getText(), tick.getX(), tick.getY());}}if (tickMarksVisible) {g2.setStroke(this.getTickMarkStroke());Line2D mark = new Line2D.Float(xx, maxY-2, xx, maxY+2);g2.draw(mark);}if (showGridLines) {g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(), xx,(float)plotArea.getMinY());g2.draw(gridline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn;* @param plotArea The area within which the plot should be drawn (a subset of the drawArea);*/', 'coherence': 1}, {'code': 'private double getMaxTickLabelHeight(Graphics2D g2, Rectangle2D drawArea, boolean vertical) {Font font = getTickLabelFont();g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();double maxHeight = 0.0;if (vertical) {Iterator iterator = this.ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();Rectangle2D labelBounds = font.getStringBounds(tick.getText(), frc);if (labelBounds.getWidth()>maxHeight) {maxHeight = labelBounds.getWidth();}}}else {LineMetrics metrics = font.getLineMetrics("Sample", frc);maxHeight = metrics.getHeight();}return maxHeight;', 'comment': "/*** A utility method for determining the height of the tallest tick label.* @param g2 The graphics device;* @param drawArea The area within which the plot and axes should be drawn;* @param vertical A flag that indicates whether or not the tick labels are 'vertical';*/", 'coherence': 1}, {'code': 'public void configure() {if (isAutoRange()) {autoAdjustRange();', 'comment': '/*** Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets* the maximum and minimum values.*/', 'coherence': 1}, {'code': 'public HorizontalNumberAxis(String label, Font labelFont,Number minimumAxisValue, Number maximumAxisValue) {this(label,labelFont,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true,  // tick labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,false,  // tick labels drawn verticallytrue,  // tick marks visibleAxis.DEFAULT_TICK_STROKE,false, // no auto range selectiontrue,  // auto range includes zeroNumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,minimumAxisValue, maximumAxisValue,true,  // auto tick unit selectionNumberAxis.DEFAULT_TICK_UNIT,true,  // grid lines visibleValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT);', 'comment': '/*** Constructs a horizontal number axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.*/', 'coherence': 1}, {'code': 'public HorizontalNumberAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,NumberAxis.DEFAULT_MINIMUM_AXIS_VALUE,NumberAxis.DEFAULT_MAXIMUM_AXIS_VALUE);this.autoRange = true;', 'comment': '/*** Constructs a horizontal number axis, using default values where necessary.* @param label The axis label.*/', 'coherence': 1}, {'code': 'private void selectAutoTickUnit(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// calculate the tick label width...FontRenderContext frc = g2.getFontRenderContext();double tickLabelWidth = this.tickLabelInsets.left+this.tickLabelInsets.right;if (this.verticalTickLabels) {tickLabelWidth += tickLabelFont.getStringBounds("123", frc).getHeight();}else {double w1 = tickLabelFont.getStringBounds(this.valueToString(this.minimumAxisValue), frc).getWidth();double w2 = tickLabelFont.getStringBounds(this.valueToString(this.maximumAxisValue), frc).getWidth();tickLabelWidth += Math.max(w1, w2);}// perhaps take the greater of the label widths for the lower and upper axis bounds,// as they should be representative most of the time...// now find the smallest tick unit that will accommodate the labels...double zero = this.translatedValue(Plot.ZERO, plotArea);// start with the current tick unit...NumberTickUnit candidate1= (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(this.tickUnit);double x = this.translatedValue(candidate1.getValue(), plotArea);double unitWidth = Math.abs(x-zero);// then extrapolate...double bestguess = (tickLabelWidth/unitWidth) * candidate1.value.doubleValue();NumberTickUnit guess = new NumberTickUnit(new Double(bestguess), null);NumberTickUnit candidate2= (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(guess);this.tickUnit = candidate2;', 'comment': "/*** Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as* possible (selected from an array of 'standard' tick units) without the labels overlapping.* @param g2 The graphics device;* @param drawArea The area in which the plot and axes should be drawn;* @param plotArea The area in which the plot should be drawn;*/", 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the height of the axis label...Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());double labelHeight = this.labelInsets.top+labelInsets.bottom+labelBounds.getHeight();// calculate the height required for the tick labels (if visible);double tickLabelHeight = 0.0;if (tickLabelsVisible) {g2.setFont(tickLabelFont);this.refreshTicks(g2, drawArea, drawArea);tickLabelHeight = tickLabelInsets.top+tickLabelInsets.bottom+getMaxTickLabelHeight(g2, drawArea, this.verticalCategoryLabels);}return labelHeight+tickLabelHeight;', 'comment': '/*** Estimates the height required for the axis, given a specific drawing area, without any* information about the width of the vertical axis.* <P>* Supports the HorizontalAxis interface.* @param g2 The graphics device (used to obtain font information);* @param plot The plot that the axis belongs to;* @param drawArea The area within which the axis should be drawn;*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();CategoryPlot categoryPlot = (CategoryPlot)plot;Dataset data = categoryPlot.getDataset();if (data!=null) {FontRenderContext frc = g2.getFontRenderContext();Font font = this.getTickLabelFont();g2.setFont(font);int categoryIndex = 0;float xx = 0.0f;float yy = 0.0f;Iterator iterator = categoryPlot.getDataset().getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();String label = category.toString();Rectangle2D labelBounds = font.getStringBounds(label, frc);LineMetrics metrics = font.getLineMetrics(label, frc);if (this.verticalCategoryLabels) {xx = (float)(categoryPlot.getCategoryCoordinate(categoryIndex, plotArea)+labelBounds.getHeight()/2);yy = (float)(plotArea.getMaxY()+tickLabelInsets.top+labelBounds.getWidth());}else {xx = (float)(categoryPlot.getCategoryCoordinate(categoryIndex, plotArea)-labelBounds.getWidth()/2);yy = (float)(plotArea.getMaxY()+tickLabelInsets.top+metrics.getHeight()-metrics.getDescent());}Tick tick = new Tick(category, label, xx, yy);ticks.add(tick);categoryIndex = categoryIndex+1;', 'comment': '/*** Creates a temporary list of ticks that can be used when drawing the axis.* @param g2 The graphics device (used to get font measurements);* @param drawArea The area where the plot and axes will be drawn;* @param plotArea The area inside the axes;*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelg2.setFont(labelFont);g2.setPaint(labelPaint);FontRenderContext frc = g2.getFontRenderContext();Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);LineMetrics lm = labelFont.getLineMetrics(label, frc);float labelx = (float)(plotArea.getX()+plotArea.getWidth()/2-labelBounds.getWidth()/2);float labely = (float)(drawArea.getMaxY()-labelInsets.bottom-lm.getDescent()-lm.getLeading());g2.drawString(label, labelx, labely);// draw the category labelsif (this.tickLabelsVisible) {g2.setFont(tickLabelFont);g2.setPaint(tickLabelPaint);this.refreshTicks(g2, drawArea, plotArea);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();if (this.verticalCategoryLabels) {this.drawVerticalString(tick.getText(), g2, tick.getX(), tick.getY());}else {g2.drawString(tick.getText(), tick.getX(), tick.getY());', 'comment': '/*** Draws the HorizontalCategoryAxis on a Java 2D graphics device (such as the screen or a* printer).* @param g2 The graphics device;* @param drawArea The area within which the axis should be drawn;* @param plotArea The area within which the plot is being drawn.*/', 'coherence': 1}, {'code': 'public HorizontalCategoryAxis(String label) {super(label);this.verticalCategoryLabels = false;', 'comment': '/*** Standard constructor - builds a HorizontalCategoryAxis with defaults for most attributes.* @param label The axis label;*/', 'coherence': 1}, {'code': 'public boolean getVerticalCategoryLabels() {return this.verticalCategoryLabels;', 'comment': "/*** Returns a flag indicating whether the category labels are drawn 'vertically'.*/", 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {// calculate the height of the axis label...Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());double labelHeight = this.labelInsets.top+labelInsets.bottom+labelBounds.getHeight();// calculate the height required for the tick labels (if visible);double tickLabelHeight = 0.0;if (tickLabelsVisible) {g2.setFont(tickLabelFont);this.refreshTicks(g2, drawArea, drawArea);tickLabelHeight = tickLabelInsets.top+tickLabelInsets.bottom+getMaxTickLabelHeight(g2, drawArea, this.verticalCategoryLabels);}return new Rectangle2D.Double(drawArea.getX(),drawArea.getMaxY()-labelHeight-tickLabelHeight,drawArea.getWidth()-reservedWidth,labelHeight+tickLabelHeight);', 'comment': '/*** Returns the area required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;* @param reservedWidth The width reserved by the vertical axis;*/', 'coherence': 1}, {'code': 'private double getMaxTickLabelHeight(Graphics2D g2, Rectangle2D drawArea, boolean vertical) {Font font = getTickLabelFont();g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();double maxHeight = 0.0;if (vertical) {Iterator iterator = this.ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();Rectangle2D labelBounds = font.getStringBounds(tick.getText(), frc);if (labelBounds.getWidth()>maxHeight) {maxHeight = labelBounds.getWidth();}}}else {LineMetrics metrics = font.getLineMetrics("Sample", frc);maxHeight = metrics.getHeight();}return maxHeight;', 'comment': '/*** A utility method for determining the height of the tallest tick label.*/', 'coherence': 1}, {'code': 'public HorizontalCategoryAxis(String label, Font labelFont, Paint labelPaint,Insets labelInsets,boolean showCategoryLabels, boolean verticalCategoryLabels,Font categoryLabelFont, Paint categoryLabelPaint,Insets categoryLabelInsets,boolean showTickMarks, Stroke tickMarkStroke) {super(label, labelFont, labelPaint, labelInsets,showCategoryLabels, categoryLabelFont, categoryLabelPaint, categoryLabelInsets,showTickMarks, tickMarkStroke);this.verticalCategoryLabels = verticalCategoryLabels;', 'comment': '/*** Full constructor: returns a new HorizontalCategoryAxis with attributes as specified by the* caller.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param showCategoryLabels Flag indicating whether or not category (tick) labels are visible.* @param verticalCategoryLabels Flag indicating whether or not the category labels are drawn*                 vertically.* @param categoryLabelFont The font used to display category (tick) labels.* @param categoryLabelPaint The paint used to draw category (tick) labels.* @param categoryLabelInsets Determines the blank space around each category (tick) label.* @param showTickMarks Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public void setVerticalCategoryLabels(boolean flag) {this.verticalCategoryLabels = flag;this.notifyListeners(new com.jrefinery.chart.event.AxisChangeEvent(this));', 'comment': "/*** Sets the flag that determines whether the category labels are drawn 'vertically'.* @param flag The new value of the flag;*/", 'coherence': 1}, {'code': 'protected boolean isCompatiblePlot(Plot plot) {if (plot instanceof CategoryPlot) return true;else return false;', 'comment': '/*** Returns true if the specified plot is compatible with the axis, and false otherwise.* @param plot The plot;*/', 'coherence': 1}, {'code': 'private Date createDateTime(int year, int month, int day, int hour, int minute) {GregorianCalendar calendar = new GregorianCalendar(year, month, day, hour, minute);return calendar.getTime();', 'comment': '/*** Returns a java.util.Date for the specified year, month, day, hour and minute.*/', 'coherence': 1}, {'code': 'private void displayXYPlotZeroData() {if (xyPlotZeroDataFrame==null) {// create a default chart based on some sample data...String title = "XY Plot (zero series)";String xAxisLabel = "X Axis";String yAxisLabel = "Y Axis";XYDataset data = new EmptyXYDataset();JFreeChart chart = ChartFactory.createXYChart(title, xAxisLabel, yAxisLabel, data, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));// and present it in a frame...xyPlotZeroDataFrame = new JFreeChartFrame("XYPlot", chart);xyPlotZeroDataFrame.pack();SwingRefinery.positionFrameRandomly(xyPlotZeroDataFrame);xyPlotZeroDataFrame.show();}else {xyPlotZeroDataFrame.show();xyPlotZeroDataFrame.requestFocus();', 'comment': '/*** Displays an XYPlot in its own frame.*/', 'coherence': 1}, {'code': 'private Date createDate(int year, int month, int day) {GregorianCalendar calendar = new GregorianCalendar(year, month, day);return calendar.getTime();', 'comment': '/*** Returns a java.util.Date for the specified year, month and day.*/', 'coherence': 1}, {'code': 'private void displayPieChartTwo() {if (pieChartTwoFrame==null) {// create a default chart based on some sample data...String title = "Pie Chart";CategoryDataset data = createCategoryDataset();PieDataset extracted = Datasets.createPieDataset(data, "Category 2");JFreeChart chart = ChartFactory.createPieChart(title, extracted, true);// then customise it a little...chart.setLegend(null);chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.orange));PiePlot pie = (PiePlot)chart.getPlot();pie.setSectionLabelType(PiePlot.NAME_AND_PERCENT_LABELS);// and present it in a frame...pieChartTwoFrame = new JFreeChartFrame("Pie Chart 2", chart);pieChartTwoFrame.pack();SwingRefinery.positionFrameRandomly(pieChartTwoFrame);pieChartTwoFrame.show();}else {pieChartTwoFrame.show();pieChartTwoFrame.requestFocus();', 'comment': '/*** Displays pie chart two in its own frame.*/', 'coherence': 1}, {'code': 'private void displayLineChart() {if (lineChartFrame==null) {// create a default chart based on some sample data...String title = "Line Chart";String categoryAxisLabel = "Categories";String valueAxisLabel = "Values";CategoryDataset data = createCategoryDataset();JFreeChart chart = ChartFactory.createLineChart(title, categoryAxisLabel, valueAxisLabel,data, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.yellow));// and present it in a frame...lineChartFrame = new JFreeChartFrame("Line Chart", chart);lineChartFrame.pack();SwingRefinery.positionFrameRandomly(lineChartFrame);lineChartFrame.show();}else {lineChartFrame.show();lineChartFrame.requestFocus();', 'comment': '/*** Displays a line chart in its own frame.*/', 'coherence': 1}, {'code': 'public static void main(String[] args) {JFreeChartDemo f = new JFreeChartDemo();f.pack();SwingRefinery.centerFrameOnScreen(f);// and show it...f.show();', 'comment': '/*** The starting point for the demonstration application.*/', 'coherence': 1}, {'code': 'public CategoryDataset createSingleSeriesCategoryDataset() {Number[][] data = new Integer[][]{ { new Integer(10), new Integer(-4), new Integer(15), new Integer(14) } };return new DefaultCategoryDataset(data);', 'comment': '/*** Creates and returns a category dataset for the demo charts.*/', 'coherence': 1}, {'code': 'private void displayVerticalBarChart() {if (verticalBarChartFrame==null) {CategoryDataset categoryData = createCategoryDataset();JFreeChart chart = ChartFactory.createVerticalBarChart("Vertical Bar Chart","Categories", "Values", categoryData, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));Plot plot = chart.getPlot();HorizontalCategoryAxis hAxis = (HorizontalCategoryAxis)plot.getAxis(Plot.HORIZONTAL_AXIS);hAxis.setVerticalCategoryLabels(true);// and present it in a panel...verticalBarChartFrame = new JFreeChartFrame("Vertical Bar Chart", chart);verticalBarChartFrame.pack();SwingRefinery.positionFrameRandomly(verticalBarChartFrame);verticalBarChartFrame.show();}else {verticalBarChartFrame.show();verticalBarChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void displayScatterPlot() {if (scatterPlotFrame==null) {// create a default chart based on some sample data...String title = "Scatter Plot";String xAxisLabel = "X Axis";String yAxisLabel = "Y Axis";XYDataset scatterData = new SampleXYDataset2();JFreeChart chart = ChartFactory.createScatterPlot(title, xAxisLabel,yAxisLabel, scatterData, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.green));// and present it in a frame...scatterPlotFrame = new JFreeChartFrame("XYPlot", chart);scatterPlotFrame.pack();SwingRefinery.positionFrameRandomly(scatterPlotFrame);scatterPlotFrame.show();}else {scatterPlotFrame.show();scatterPlotFrame.requestFocus();', 'comment': '/*** Displays a scatter plot in its own frame.*/', 'coherence': 1}, {'code': 'private void displayVerticalStacked3DBarChart() {if (verticalStacked3DBarChartFrame==null) {// create a default chart based on some sample data...String title = "Vertical Stacked 3D Bar Chart";String categoryAxisLabel = "Categories";String valueAxisLabel = "Values";CategoryDataset categoryData = createCategoryDataset();JFreeChart chart = ChartFactory.createStackedVerticalBarChart3D(title, categoryAxisLabel,valueAxisLabel, categoryData, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));Plot plot = chart.getPlot();VerticalNumberAxis valueAxis = (VerticalNumberAxis)plot.getAxis(Plot.VERTICAL_AXIS);//valueAxis.setAutoRange(false);valueAxis.setMinimumAxisValue(new Double(-32.0));valueAxis.setMaximumAxisValue(new Double(85.0));// and present it in a panel...verticalStacked3DBarChartFrame = new JFreeChartFrame("Vertical Stacked 3D Bar Chart", chart);verticalStacked3DBarChartFrame.pack();SwingRefinery.positionFrameRandomly(verticalStacked3DBarChartFrame);verticalStacked3DBarChartFrame.show();}else {verticalStacked3DBarChartFrame.show();verticalStacked3DBarChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private JTabbedPane createTabbedPane() {JTabbedPane tabs = new JTabbedPane();Font font = new Font("Dialog", Font.PLAIN, 12);JPanel barPanel = new JPanel(new LCBLayout(20));barPanel.setPreferredSize(new Dimension(360, 20));barPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));JPanel piePanel = new JPanel(new LCBLayout(20));piePanel.setPreferredSize(new Dimension(360, 20));piePanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));JPanel xyPanel = new JPanel(new LCBLayout(20));xyPanel.setPreferredSize(new Dimension(360, 20));xyPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));JPanel timeSeriesPanel = new JPanel(new LCBLayout(20));timeSeriesPanel.setPreferredSize(new Dimension(360, 20));timeSeriesPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));JPanel otherPanel = new JPanel(new LCBLayout(20));otherPanel.setPreferredSize(new Dimension(360, 20));otherPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));JPanel testPanel = new JPanel(new LCBLayout(20));testPanel.setPreferredSize(new Dimension(360, 20));testPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));barPanel.add(SwingRefinery.createJLabel("Horizontal Bar Chart: ", font));barPanel.add(new DescriptionPanel(new JTextArea("Displays horizontal bars, representing data from a CategoryDataset.")));JButton b1 = SwingRefinery.createJButton("Display", font);b1.setActionCommand("HORIZONTAL_BAR_CHART");b1.addActionListener(this);barPanel.add(b1);barPanel.add(SwingRefinery.createJLabel("Horizontal Stacked Bar Chart: ", font));barPanel.add(new DescriptionPanel(new JTextArea("Displays stacked horizontal bars, representing data from a CategoryDataset.")));JButton b2 = SwingRefinery.createJButton("Display", font);b2.setActionCommand("HORIZONTAL_STACKED_BAR_CHART");b2.addActionListener(this);barPanel.add(b2);barPanel.add(SwingRefinery.createJLabel("Vertical Bar Chart: ", font));barPanel.add(new DescriptionPanel(new JTextArea("Displays vertical bars, representing data from a CategoryDataset.")));JButton b3 = SwingRefinery.createJButton("Display", font);b3.setActionCommand("VERTICAL_BAR_CHART");b3.addActionListener(this);barPanel.add(b3);barPanel.add(SwingRefinery.createJLabel("Vertical 3D Bar Chart: ", font));barPanel.add(new DescriptionPanel(new JTextArea("Displays stacked vertical bars with a 3D effect, representing data from a CategoryDataset.")));JButton b6 = SwingRefinery.createJButton("Display", font);b6.setActionCommand("VERTICAL_3D_BAR_CHART");b6.addActionListener(this);barPanel.add(b6);barPanel.add(SwingRefinery.createJLabel("Vertical Stacked Bar Chart: ", font));barPanel.add(new DescriptionPanel(new JTextArea("Displays stacked vertical bars, representing data from a CategoryDataset.")));JButton b4 = SwingRefinery.createJButton("Display", font);b4.setActionCommand("VERTICAL_STACKED_BAR_CHART");b4.addActionListener(this);barPanel.add(b4);barPanel.add(SwingRefinery.createJLabel("Vertical Stacked 3D Bar Chart: ", font));barPanel.add(new DescriptionPanel(new JTextArea("Displays stacked vertical bars with a 3D effect, representing data from a CategoryDataset.")));JButton b5 = SwingRefinery.createJButton("Display", font);b5.setActionCommand("VERTICAL_STACKED_3D_BAR_CHART");b5.addActionListener(this);barPanel.add(b5);otherPanel.add(SwingRefinery.createJLabel("Line Chart: ", font));otherPanel.add(new DescriptionPanel(new JTextArea("A chart displaying lines and or shapes, representing data in a CategoryDataset.")));JButton b8 = SwingRefinery.createJButton("Display", font);b8.setActionCommand("LINE_CHART");b8.addActionListener(this);otherPanel.add(b8);piePanel.add(SwingRefinery.createJLabel("Pie Chart: ", font));piePanel.add(new DescriptionPanel(new JTextArea("A pie chart showing one section exploded.")));JButton b9 = SwingRefinery.createJButton("Display", font);b9.setActionCommand("PIE_CHART_1");b9.addActionListener(this);piePanel.add(b9);piePanel.add(SwingRefinery.createJLabel("Pie Chart 2: ", font));piePanel.add(new DescriptionPanel(new JTextArea("A pie chart showing percentage labels.")));JButton b10 = SwingRefinery.createJButton("Display", font);b10.setActionCommand("PIE_CHART_2");b10.addActionListener(this);piePanel.add(b10);otherPanel.add(SwingRefinery.createJLabel("Scatter Plot: ", font));otherPanel.add(new DescriptionPanel(new JTextArea("A scatter plot, based on data from an XYDataset.")));JButton b11 = SwingRefinery.createJButton("Display", font);b11.setActionCommand("SCATTER_PLOT");b11.addActionListener(this);otherPanel.add(b11);xyPanel.add(SwingRefinery.createJLabel("XY Plot: ", font));xyPanel.add(new DescriptionPanel(new JTextArea("A line chart, based on data from an XYDataset.")));JButton b12 = SwingRefinery.createJButton("Display", font);b12.setActionCommand("XY_PLOT");b12.addActionListener(this);xyPanel.add(b12);testPanel.add(SwingRefinery.createJLabel("Null Data: ", font));testPanel.add(new DescriptionPanel(new JTextArea("A chart with a null dataset.")));JButton b13 = SwingRefinery.createJButton("Display", font);b13.setActionCommand("XY_PLOT_NULL");b13.addActionListener(this);testPanel.add(b13);testPanel.add(SwingRefinery.createJLabel("Zero Data: ", font));testPanel.add(new DescriptionPanel(new JTextArea("A chart with a dataset containing zero series..")));JButton b14 = SwingRefinery.createJButton("Display", font);b14.setActionCommand("XY_PLOT_ZERO");b14.addActionListener(this);testPanel.add(b14);timeSeriesPanel.add(SwingRefinery.createJLabel("Time Series Chart: ", font));timeSeriesPanel.add(new DescriptionPanel(new JTextArea("A time series chart, based on data from an XYDataset.")));JButton b15 = SwingRefinery.createJButton("Display", font);b15.setActionCommand("TIME_SERIES_CHART");b15.addActionListener(this);timeSeriesPanel.add(b15);timeSeriesPanel.add(SwingRefinery.createJLabel("Time Series 2: ", font));timeSeriesPanel.add(new DescriptionPanel(new JTextArea("A time series chart with a moving average, based on data from an XYDataset.")));JButton b16 = SwingRefinery.createJButton("Display", font);b16.setActionCommand("TIME_SERIES_WITH_MA_CHART");b16.addActionListener(this);timeSeriesPanel.add(b16);testPanel.add(SwingRefinery.createJLabel("Chart in JScrollPane: ", font));testPanel.add(new DescriptionPanel(new JTextArea("A chart embedded in a JScrollPane.")));JButton b18 = SwingRefinery.createJButton("Display", font);b18.setActionCommand("TIME_SERIES_CHART_SCROLL");b18.addActionListener(this);testPanel.add(b18);timeSeriesPanel.add(SwingRefinery.createJLabel("High/Low/Open/Close Chart: ", font));timeSeriesPanel.add(new DescriptionPanel(new JTextArea("A high/low/open/close chart based on data in HighLowDataset.")));JButton b19 = SwingRefinery.createJButton("Display", font);b19.setActionCommand("HIGH_LOW_CHART");b19.addActionListener(this);timeSeriesPanel.add(b19);otherPanel.add(SwingRefinery.createJLabel("Vertical XY Bar Chart: ", font));otherPanel.add(new DescriptionPanel(new JTextArea("A chart showing vertical bars, based on data in an IntervalXYDataset.")));JButton b7 = SwingRefinery.createJButton("Display", font);b7.setActionCommand("VERTICAL_XY_BAR_CHART");b7.addActionListener(this);otherPanel.add(b7);testPanel.add(SwingRefinery.createJLabel("Dynamic Chart: ", font));testPanel.add(new DescriptionPanel(new JTextArea("A dynamic chart, to test the event notification mechanism.")));JButton b20 = SwingRefinery.createJButton("Display", font);b20.setActionCommand("DYNAMIC_CHART");b20.addActionListener(this);testPanel.add(b20);tabs.add("Bar Charts", new JScrollPane(barPanel));tabs.add("Pie Charts", new JScrollPane(piePanel));tabs.add("XY Charts", new JScrollPane(xyPanel));tabs.add("Time Series Charts", new JScrollPane(timeSeriesPanel));tabs.add("Other Charts", new JScrollPane(otherPanel));tabs.add("Test Charts", new JScrollPane(testPanel));return tabs;', 'comment': '/*** Creates a tabbed pane containing descriptions of the demo charts.*/', 'coherence': 1}, {'code': 'private void displayNullXYPlot() {if (this.xyPlotNullDataFrame==null) {// create a default chart based on some sample data...String title = "XY Plot (null data)";String xAxisLabel = "X Axis";String yAxisLabel = "Y Axis";XYDataset data = null;JFreeChart chart = ChartFactory.createXYChart(title, xAxisLabel, yAxisLabel, data, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));// and present it in a panel...xyPlotNullDataFrame = new JFreeChartFrame("XY Plot with NULL data", chart);xyPlotNullDataFrame.pack();SwingRefinery.positionFrameRandomly(xyPlotNullDataFrame);xyPlotNullDataFrame.show();}else {xyPlotNullDataFrame.show();xyPlotNullDataFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void displayTimeSeriesChart() {if (this.timeSeriesChartFrame==null) {// create a default chart based on some sample data...String title = "Time Series Chart";String xAxisLabel = "Date";String yAxisLabel = "USD per GBP";XYDataset data = createXYDataset();JFreeChart chart = ChartFactory.createTimeSeriesChart(title, xAxisLabel, yAxisLabel, data,true);// then customise it a little...TextTitle subtitle = new TextTitle("Value of GBP", new Font("Arial", Font.BOLD, 12));chart.addTitle(subtitle);chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.blue));Plot plot = chart.getPlot();// and present it in a frame...timeSeriesChartFrame = new JFreeChartFrame("Time Series Chart", chart);timeSeriesChartFrame.pack();SwingRefinery.positionFrameRandomly(timeSeriesChartFrame);timeSeriesChartFrame.show();}else {timeSeriesChartFrame.show();timeSeriesChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void displayDynamicXYChart() {if (dynamicXYChartFrame==null) {SampleXYDataset data = new SampleXYDataset();JFreeChart chart = ChartFactory.createXYChart("Dynamic XY Chart", "X", "Y", data, true);SampleXYDatasetThread update = new SampleXYDatasetThread(data);dynamicXYChartFrame = new JFreeChartFrame("Dynamic Chart", chart);dynamicXYChartFrame.pack();SwingRefinery.positionFrameRandomly(dynamicXYChartFrame);dynamicXYChartFrame.show();Thread thread = new Thread(update);thread.start();', 'comment': '/*** Displays an XY chart that is periodically updated by a background thread.  This is to* demonstrate the event notification system that automatically updates charts as required.*/', 'coherence': 1}, {'code': 'public XYDataset createHighLowDataset() {Object[][][] data = new Object[][][] { {{ createDate(1999, Calendar.JANUARY,4), new Double(47) },{ createDate(1999, Calendar.JANUARY,4), new Double(33) },{ createDate(1999, Calendar.JANUARY,4), new Double(35) },{ createDate(1999, Calendar.JANUARY,4), new Double(33) },{ createDate(1999, Calendar.JANUARY,5), new Double(47) },{ createDate(1999, Calendar.JANUARY,5), new Double(32) },{ createDate(1999, Calendar.JANUARY,5), new Double(41) },{ createDate(1999, Calendar.JANUARY,5), new Double(37) },{ createDate(1999, Calendar.JANUARY,6), new Double(49) },{ createDate(1999, Calendar.JANUARY,6), new Double(43) },{ createDate(1999, Calendar.JANUARY,6), new Double(46) },{ createDate(1999, Calendar.JANUARY,6), new Double(48) },{ createDate(1999, Calendar.JANUARY,7), new Double(51) },{ createDate(1999, Calendar.JANUARY,7), new Double(39) },{ createDate(1999, Calendar.JANUARY,7), new Double(40) },{ createDate(1999, Calendar.JANUARY,7), new Double(47) },{ createDate(1999, Calendar.JANUARY,8), new Double(60) },{ createDate(1999, Calendar.JANUARY,8), new Double(40) },{ createDate(1999, Calendar.JANUARY,8), new Double(46) },{ createDate(1999, Calendar.JANUARY,8), new Double(53) },{ createDate(1999, Calendar.JANUARY,9), new Double(62) },{ createDate(1999, Calendar.JANUARY,9), new Double(55) },{ createDate(1999, Calendar.JANUARY,9), new Double(57) },{ createDate(1999, Calendar.JANUARY,9), new Double(61) },{ createDate(1999, Calendar.JANUARY,10), new Double(65) },{ createDate(1999, Calendar.JANUARY,10), new Double(56) },{ createDate(1999, Calendar.JANUARY,10), new Double(62) },{ createDate(1999, Calendar.JANUARY,10), new Double(59) },{ createDate(1999, Calendar.JANUARY,11), new Double(55) },{ createDate(1999, Calendar.JANUARY,11), new Double(43) },{ createDate(1999, Calendar.JANUARY,11), new Double(45) },{ createDate(1999, Calendar.JANUARY,11), new Double(47) },{ createDate(1999, Calendar.JANUARY,12), new Double(54) },{ createDate(1999, Calendar.JANUARY,12), new Double(33) },{ createDate(1999, Calendar.JANUARY,12), new Double(40) },{ createDate(1999, Calendar.JANUARY,12), new Double(51) },{ createDate(1999, Calendar.JANUARY,13), new Double(58) },{ createDate(1999, Calendar.JANUARY,13), new Double(42) },{ createDate(1999, Calendar.JANUARY,13), new Double(44) },{ createDate(1999, Calendar.JANUARY,13), new Double(57) },{ createDate(1999, Calendar.JANUARY,14), new Double(54) },{ createDate(1999, Calendar.JANUARY,14), new Double(38) },{ createDate(1999, Calendar.JANUARY,14), new Double(43) },{ createDate(1999, Calendar.JANUARY,14), new Double(52) },{ createDate(1999, Calendar.JANUARY,15), new Double(48) },{ createDate(1999, Calendar.JANUARY,15), new Double(41) },{ createDate(1999, Calendar.JANUARY,15), new Double(44) },{ createDate(1999, Calendar.JANUARY,15), new Double(41) },{ createDate(1999, Calendar.JANUARY,17), new Double(60) },{ createDate(1999, Calendar.JANUARY,17), new Double(30) },{ createDate(1999, Calendar.JANUARY,17), new Double(34) },{ createDate(1999, Calendar.JANUARY,17), new Double(44) },{ createDate(1999, Calendar.JANUARY,18), new Double(58) },{ createDate(1999, Calendar.JANUARY,18), new Double(44) },{ createDate(1999, Calendar.JANUARY,18), new Double(54) },{ createDate(1999, Calendar.JANUARY,18), new Double(56) },{ createDate(1999, Calendar.JANUARY,19), new Double(54) },{ createDate(1999, Calendar.JANUARY,19), new Double(32) },{ createDate(1999, Calendar.JANUARY,19), new Double(42) },{ createDate(1999, Calendar.JANUARY,19), new Double(53) },{ createDate(1999, Calendar.JANUARY,20), new Double(53) },{ createDate(1999, Calendar.JANUARY,20), new Double(39) },{ createDate(1999, Calendar.JANUARY,20), new Double(50) },{ createDate(1999, Calendar.JANUARY,20), new Double(49) },{ createDate(1999, Calendar.JANUARY,21), new Double(47) },{ createDate(1999, Calendar.JANUARY,21), new Double(38) },{ createDate(1999, Calendar.JANUARY,21), new Double(41) },{ createDate(1999, Calendar.JANUARY,21), new Double(40) },{ createDate(1999, Calendar.JANUARY,22), new Double(55) },{ createDate(1999, Calendar.JANUARY,22), new Double(37) },{ createDate(1999, Calendar.JANUARY,22), new Double(43) },{ createDate(1999, Calendar.JANUARY,22), new Double(45) },{ createDate(1999, Calendar.JANUARY,23), new Double(54) },{ createDate(1999, Calendar.JANUARY,23), new Double(42) },{ createDate(1999, Calendar.JANUARY,23), new Double(50) },{ createDate(1999, Calendar.JANUARY,23), new Double(42) },{ createDate(1999, Calendar.JANUARY,24), new Double(48) },{ createDate(1999, Calendar.JANUARY,24), new Double(37) },{ createDate(1999, Calendar.JANUARY,24), new Double(37) },{ createDate(1999, Calendar.JANUARY,24), new Double(47) },{ createDate(1999, Calendar.JANUARY,25), new Double(58) },{ createDate(1999, Calendar.JANUARY,25), new Double(33) },{ createDate(1999, Calendar.JANUARY,25), new Double(39) },{ createDate(1999, Calendar.JANUARY,25), new Double(41) },{ createDate(1999, Calendar.JANUARY,26), new Double(47) },{ createDate(1999, Calendar.JANUARY,26), new Double(31) },{ createDate(1999, Calendar.JANUARY,26), new Double(36) },{ createDate(1999, Calendar.JANUARY,26), new Double(41) },{ createDate(1999, Calendar.JANUARY,27), new Double(58) },{ createDate(1999, Calendar.JANUARY,27), new Double(44) },{ createDate(1999, Calendar.JANUARY,27), new Double(49) },{ createDate(1999, Calendar.JANUARY,27), new Double(44) },{ createDate(1999, Calendar.JANUARY,28), new Double(46) },{ createDate(1999, Calendar.JANUARY,28), new Double(41) },{ createDate(1999, Calendar.JANUARY,28), new Double(43) },{ createDate(1999, Calendar.JANUARY,28), new Double(44) },{ createDate(1999, Calendar.JANUARY,29), new Double(56) },{ createDate(1999, Calendar.JANUARY,29), new Double(39) },{ createDate(1999, Calendar.JANUARY,29), new Double(39) },{ createDate(1999, Calendar.JANUARY,29), new Double(51) },{ createDate(1999, Calendar.JANUARY,30), new Double(56) },{ createDate(1999, Calendar.JANUARY,30), new Double(39) },{ createDate(1999, Calendar.JANUARY,30), new Double(47) },{ createDate(1999, Calendar.JANUARY,30), new Double(49) },{ createDate(1999, Calendar.JANUARY,31), new Double(53) },{ createDate(1999, Calendar.JANUARY,31), new Double(39) },{ createDate(1999, Calendar.JANUARY,31), new Double(52) },{ createDate(1999, Calendar.JANUARY,31), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(51) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(45) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(34) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(57) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(56) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(49) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(40) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(40) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(55) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(39) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(53) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(50) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(33) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(59) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(34) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(57) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(48) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(39) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(55) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(60) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(32) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(56) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(36) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(56) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(53) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(54) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(49) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(45) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(55) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(54) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(49) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(35) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(35) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(53) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(48) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(40) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(48) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(41) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(41) } }};return new DefaultXYDataset(new String[] { "IBM" }, data);', 'comment': '/*** Creates and returns a sample high-low dataset for the demo.  Added by Andrzej Porebski.*/', 'coherence': 1}, {'code': 'private void displayHighLowChart() {if (this.highLowChartFrame==null) {// create a default chart based on some sample data...String title = "High-Low/Open-Close Chart";String timeAxisLabel = "Date";String valueAxisLabel = "Price ($ per share)";HighLowDataset data = new SampleHighLowDataset();JFreeChart chart = ChartFactory.createHighLowChart(title, timeAxisLabel, valueAxisLabel,data, true);// then customise it a little...TextTitle subtitle = new TextTitle("IBM Stock Price", new Font("Arial", Font.BOLD, 12));chart.addTitle(subtitle);chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.magenta));// and present it in a frame...highLowChartFrame = new JFreeChartFrame("High/Low/Open/Close Chart", chart);highLowChartFrame.pack();SwingRefinery.positionFrameRandomly(highLowChartFrame);highLowChartFrame.show();}else {highLowChartFrame.show();highLowChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void displayVerticalXYBarChart() {if (verticalXYBarChartFrame==null) {// create a default chart based on some sample data...String title = "Time Series Bar Chart";String xAxisLabel = "X Axis";String yAxisLabel = "Y Axis";TimeSeriesCollection data = createTestTimeSeriesCollection1();JFreeChart chart = ChartFactory.createVerticalXYBarChart(title, xAxisLabel, yAxisLabel,data, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));// and present it in a panel...verticalXYBarChartFrame = new JFreeChartFrame("Vertical XY Bar Chart", chart);verticalXYBarChartFrame.pack();SwingRefinery.positionFrameRandomly(verticalXYBarChartFrame);verticalXYBarChartFrame.show();}else {verticalXYBarChartFrame.show();verticalXYBarChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void attemptExit() {int result = JOptionPane.showConfirmDialog(this,"Are you sure you want to exit?", "Confirmation...",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);if (result==JOptionPane.YES_OPTION) {dispose();System.exit(0);', 'comment': '/*** Exits the application, but only if the user agrees.*/', 'coherence': 1}, {'code': 'private void displayVerticalStackedBarChart() {if (verticalStackedBarChartFrame==null) {// create a default chart based on some sample data...String title = "Vertical Stacked Bar Chart";String categoryAxisLabel = "Categories";String valueAxisLabel = "Values";CategoryDataset categoryData = createCategoryDataset();JFreeChart chart = ChartFactory.createStackedVerticalBarChart(title, categoryAxisLabel,valueAxisLabel, categoryData, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));Plot plot = chart.getPlot();VerticalNumberAxis valueAxis = (VerticalNumberAxis)plot.getAxis(Plot.VERTICAL_AXIS);valueAxis.setMinimumAxisValue(new Double(-32.0));valueAxis.setMaximumAxisValue(new Double(85.0));// and present it in a panel...verticalStackedBarChartFrame = new JFreeChartFrame("Vertical Stacked Bar Chart", chart);verticalStackedBarChartFrame.pack();SwingRefinery.positionFrameRandomly(verticalStackedBarChartFrame);verticalStackedBarChartFrame.show();}else {verticalStackedBarChartFrame.show();verticalStackedBarChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("exitItem")) {attemptExit();}else if (command.equals("DYNAMIC_CHART")) {displayDynamicXYChart();}else if (command.equals("aboutItem")) {about();}else if (command.equals("VERTICAL_BAR_CHART")) {displayVerticalBarChart();}else if (command.equals("VERTICAL_STACKED_BAR_CHART")) {displayVerticalStackedBarChart();}else if (command.equals("VERTICAL_XY_BAR_CHART")) {displayVerticalXYBarChart();}else if (command.equals("VERTICAL_3D_BAR_CHART")) {displayVertical3DBarChart();}else if (command.equals("VERTICAL_STACKED_3D_BAR_CHART")) {displayVerticalStacked3DBarChart();}else if (command.equals("HORIZONTAL_BAR_CHART")) {displayHorizontalBarChart();}else if (command.equals("HORIZONTAL_STACKED_BAR_CHART")) {displayHorizontalStackedBarChart();}else if (command.equals("LINE_CHART")) {displayLineChart();}else if (command.equals("PIE_CHART_1")) {displayPieChartOne();}else if (command.equals("PIE_CHART_2")) {displayPieChartTwo();}else if (command.equals("XY_PLOT")) {displayXYPlot();}else if (command.equals("SCATTER_PLOT")) {displayScatterPlot();}else if (command.equals("TIME_SERIES_CHART")) {displayTimeSeriesChart();}else if (command.equals("TIME_SERIES_WITH_MA_CHART")) {displayTimeSeriesWithMAChart();}else if (command.equals("TIME_SERIES_CHART_SCROLL")) {displayTimeSeriesChartInScrollPane();}else if (command.equals("HIGH_LOW_CHART")) {displayHighLowChart();}else if (command.equals("XY_PLOT_NULL")) {displayNullXYPlot();}else if (command.equals("XY_PLOT_ZERO")) {displayXYPlotZeroData();', 'comment': '/*** Handles menu selections by passing control to an appropriate method.*/', 'coherence': 1}, {'code': 'public XYDataset createXYDataset() {GregorianCalendar calendar = new GregorianCalendar(1999, Calendar.JANUARY, 4);Object[][][] data = new Object[][][] { {{ createDate(1999, Calendar.JANUARY,4), new Double(1.6581) },{ createDate(1999, Calendar.JANUARY,5), new Double(1.6566) },{ createDate(1999, Calendar.JANUARY,6), new Double(1.6547) },{ createDate(1999, Calendar.JANUARY,7), new Double(1.6495) },{ createDate(1999, Calendar.JANUARY,8), new Double(1.6405) },{ createDate(1999, Calendar.JANUARY,11), new Double(1.6375) },{ createDate(1999, Calendar.JANUARY,12), new Double(1.6308) },{ createDate(1999, Calendar.JANUARY,13), new Double(1.6493) },{ createDate(1999, Calendar.JANUARY,14), new Double(1.6530) },{ createDate(1999, Calendar.JANUARY,15), new Double(1.6500) },{ createDate(1999, Calendar.JANUARY,19), new Double(1.6550) },{ createDate(1999, Calendar.JANUARY,20), new Double(1.6467) },{ createDate(1999, Calendar.JANUARY,21), new Double(1.6516) },{ createDate(1999, Calendar.JANUARY,22), new Double(1.6560) },{ createDate(1999, Calendar.JANUARY,25), new Double(1.6563) },{ createDate(1999, Calendar.JANUARY,26), new Double(1.6585) },{ createDate(1999, Calendar.JANUARY,27), new Double(1.6485) },{ createDate(1999, Calendar.JANUARY,28), new Double(1.6470) },{ createDate(1999, Calendar.JANUARY,29), new Double(1.6457) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(1.6410) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(1.6430) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(1.6375) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(1.6395) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(1.6370) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(1.6380) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(1.6355) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(1.6290) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(1.6244) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(1.6311) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(1.6317) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(1.6338) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(1.6338) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(1.6255) },{ createDate(1999, Calendar.FEBRUARY,22), new Double(1.6238) },{ createDate(1999, Calendar.FEBRUARY,23), new Double(1.6138) },{ createDate(1999, Calendar.FEBRUARY,24), new Double(1.5980) },{ createDate(1999, Calendar.FEBRUARY,25), new Double(1.6060) },{ createDate(1999, Calendar.FEBRUARY,26), new Double(1.6027) },{ createDate(1999, Calendar.MARCH,1), new Double(1.6058) },{ createDate(1999, Calendar.MARCH,2), new Double(1.6135) },{ createDate(1999, Calendar.MARCH,3), new Double(1.6134) },{ createDate(1999, Calendar.MARCH,4), new Double(1.6065) },{ createDate(1999, Calendar.MARCH,5), new Double(1.6073) },{ createDate(1999, Calendar.MARCH,8), new Double(1.6085) },{ createDate(1999, Calendar.MARCH,9), new Double(1.6148) },{ createDate(1999, Calendar.MARCH,10), new Double(1.6267) },{ createDate(1999, Calendar.MARCH,11), new Double(1.6270) },{ createDate(1999, Calendar.MARCH,12), new Double(1.6335) },{ createDate(1999, Calendar.MARCH,15), new Double(1.6223) },{ createDate(1999, Calendar.MARCH,16), new Double(1.6240) },{ createDate(1999, Calendar.MARCH,17), new Double(1.6302) },{ createDate(1999, Calendar.MARCH,18), new Double(1.6290) },{ createDate(1999, Calendar.MARCH,19), new Double(1.6303) },{ createDate(1999, Calendar.MARCH,22), new Double(1.6280) },{ createDate(1999, Calendar.MARCH,23), new Double(1.6372) },{ createDate(1999, Calendar.MARCH,24), new Double(1.6410) },{ createDate(1999, Calendar.MARCH,25), new Double(1.6314) },{ createDate(1999, Calendar.MARCH,26), new Double(1.6205) },{ createDate(1999, Calendar.MARCH,29), new Double(1.6140) },{ createDate(1999, Calendar.MARCH,30), new Double(1.6115) },{ createDate(1999, Calendar.MARCH,31), new Double(1.6140) },{ createDate(1999, Calendar.APRIL,1), new Double(1.6063) },{ createDate(1999, Calendar.APRIL,2), new Double(1.6023) },{ createDate(1999, Calendar.APRIL,5), new Double(1.6015) },{ createDate(1999, Calendar.APRIL,6), new Double(1.5920) },{ createDate(1999, Calendar.APRIL,7), new Double(1.5975) },{ createDate(1999, Calendar.APRIL,8), new Double(1.6083) },{ createDate(1999, Calendar.APRIL,9), new Double(1.6068) },{ createDate(1999, Calendar.APRIL,12), new Double(1.6127) },{ createDate(1999, Calendar.APRIL,13), new Double(1.6135) },{ createDate(1999, Calendar.APRIL,14), new Double(1.6124) },{ createDate(1999, Calendar.APRIL,15), new Double(1.6103) },{ createDate(1999, Calendar.APRIL,16), new Double(1.6112) },{ createDate(1999, Calendar.APRIL,19), new Double(1.6075) },{ createDate(1999, Calendar.APRIL,20), new Double(1.6135) },{ createDate(1999, Calendar.APRIL,21), new Double(1.6074) },{ createDate(1999, Calendar.APRIL,22), new Double(1.6117) },{ createDate(1999, Calendar.APRIL,23), new Double(1.6170) },{ createDate(1999, Calendar.APRIL,26), new Double(1.6113) },{ createDate(1999, Calendar.APRIL,27), new Double(1.6177) },{ createDate(1999, Calendar.APRIL,28), new Double(1.6148) },{ createDate(1999, Calendar.APRIL,29), new Double(1.6105) },{ createDate(1999, Calendar.APRIL,30), new Double(1.6085) },{ createDate(1999, Calendar.MAY,3), new Double(1.6083) },{ createDate(1999, Calendar.MAY,4), new Double(1.6210) },{ createDate(1999, Calendar.MAY,5), new Double(1.6337) },{ createDate(1999, Calendar.MAY,6), new Double(1.6377) },{ createDate(1999, Calendar.MAY,7), new Double(1.6350) },{ createDate(1999, Calendar.MAY,10), new Double(1.6300) },{ createDate(1999, Calendar.MAY,11), new Double(1.6215) },{ createDate(1999, Calendar.MAY,12), new Double(1.6193) },{ createDate(1999, Calendar.MAY,13), new Double(1.6190) },{ createDate(1999, Calendar.MAY,14), new Double(1.6175) },{ createDate(1999, Calendar.MAY,17), new Double(1.6193) },{ createDate(1999, Calendar.MAY,18), new Double(1.6203) },{ createDate(1999, Calendar.MAY,19), new Double(1.6175) },{ createDate(1999, Calendar.MAY,20), new Double(1.6122) },{ createDate(1999, Calendar.MAY,21), new Double(1.6020) },{ createDate(1999, Calendar.MAY,24), new Double(1.5978) },{ createDate(1999, Calendar.MAY,25), new Double(1.6021) },{ createDate(1999, Calendar.MAY,26), new Double(1.5963) },{ createDate(1999, Calendar.MAY,27), new Double(1.5957) },{ createDate(1999, Calendar.MAY,28), new Double(1.6020) },{ createDate(1999, Calendar.JUNE,1), new Double(1.6150) },{ createDate(1999, Calendar.JUNE,2), new Double(1.6075) },{ createDate(1999, Calendar.JUNE,3), new Double(1.6055) },{ createDate(1999, Calendar.JUNE,4), new Double(1.6074) },{ createDate(1999, Calendar.JUNE,7), new Double(1.6010) },{ createDate(1999, Calendar.JUNE,8), new Double(1.6050) },{ createDate(1999, Calendar.JUNE,9), new Double(1.6001) },{ createDate(1999, Calendar.JUNE,10), new Double(1.6002) },{ createDate(1999, Calendar.JUNE,11), new Double(1.6085) },{ createDate(1999, Calendar.JUNE,14), new Double(1.6075) },{ createDate(1999, Calendar.JUNE,15), new Double(1.5950) },{ createDate(1999, Calendar.JUNE,16), new Double(1.5862) },{ createDate(1999, Calendar.JUNE,17), new Double(1.5925) },{ createDate(1999, Calendar.JUNE,18), new Double(1.5924) },{ createDate(1999, Calendar.JUNE,21), new Double(1.5890) },{ createDate(1999, Calendar.JUNE,22), new Double(1.5895) },{ createDate(1999, Calendar.JUNE,23), new Double(1.5787) },{ createDate(1999, Calendar.JUNE,24), new Double(1.5833) },{ createDate(1999, Calendar.JUNE,25), new Double(1.5893) },{ createDate(1999, Calendar.JUNE,28), new Double(1.5822) },{ createDate(1999, Calendar.JUNE,29), new Double(1.5781) },{ createDate(1999, Calendar.JUNE,30), new Double(1.5765) },{ createDate(1999, Calendar.JULY,1), new Double(1.5765) },{ createDate(1999, Calendar.JULY,2), new Double(1.5792) },{ createDate(1999, Calendar.JULY,6), new Double(1.5688) },{ createDate(1999, Calendar.JULY,7), new Double(1.5602) },{ createDate(1999, Calendar.JULY,8), new Double(1.5577) },{ createDate(1999, Calendar.JULY,9), new Double(1.5515) },{ createDate(1999, Calendar.JULY,12), new Double(1.5558) },{ createDate(1999, Calendar.JULY,13), new Double(1.5566) },{ createDate(1999, Calendar.JULY,14), new Double(1.5635) },{ createDate(1999, Calendar.JULY,15), new Double(1.5665) },{ createDate(1999, Calendar.JULY,16), new Double(1.5622) },{ createDate(1999, Calendar.JULY,19), new Double(1.5630) },{ createDate(1999, Calendar.JULY,20), new Double(1.5700) },{ createDate(1999, Calendar.JULY,21), new Double(1.5766) },{ createDate(1999, Calendar.JULY,22), new Double(1.5835) },{ createDate(1999, Calendar.JULY,23), new Double(1.5780) },{ createDate(1999, Calendar.JULY,26), new Double(1.5905) },{ createDate(1999, Calendar.JULY,27), new Double(1.5895) },{ createDate(1999, Calendar.JULY,28), new Double(1.5935) },{ createDate(1999, Calendar.JULY,29), new Double(1.6130) },{ createDate(1999, Calendar.JULY,30), new Double(1.6207) },{ createDate(1999, Calendar.AUGUST,2), new Double(1.6145) },{ createDate(1999, Calendar.AUGUST,3), new Double(1.6185) },{ createDate(1999, Calendar.AUGUST,4), new Double(1.6200) },{ createDate(1999, Calendar.AUGUST,5), new Double(1.6198) },{ createDate(1999, Calendar.AUGUST,6), new Double(1.6147) },{ createDate(1999, Calendar.AUGUST,9), new Double(1.6000) },{ createDate(1999, Calendar.AUGUST,10), new Double(1.6180) },{ createDate(1999, Calendar.AUGUST,11), new Double(1.6107) },{ createDate(1999, Calendar.AUGUST,12), new Double(1.6090) },{ createDate(1999, Calendar.AUGUST,13), new Double(1.6057) },{ createDate(1999, Calendar.AUGUST,16), new Double(1.6011) },{ createDate(1999, Calendar.AUGUST,17), new Double(1.6036) },{ createDate(1999, Calendar.AUGUST,18), new Double(1.6004) },{ createDate(1999, Calendar.AUGUST,19), new Double(1.6180) },{ createDate(1999, Calendar.AUGUST,20), new Double(1.6133) },{ createDate(1999, Calendar.AUGUST,23), new Double(1.6076) },{ createDate(1999, Calendar.AUGUST,24), new Double(1.5946) },{ createDate(1999, Calendar.AUGUST,25), new Double(1.5865) },{ createDate(1999, Calendar.AUGUST,26), new Double(1.5876) },{ createDate(1999, Calendar.AUGUST,27), new Double(1.5885) },{ createDate(1999, Calendar.AUGUST,30), new Double(1.5875) },{ createDate(1999, Calendar.AUGUST,31), new Double(1.6086) },{ createDate(1999, Calendar.SEPTEMBER,1), new Double(1.6023) },{ createDate(1999, Calendar.SEPTEMBER,2), new Double(1.6091) },{ createDate(1999, Calendar.SEPTEMBER,3), new Double(1.6028) },{ createDate(1999, Calendar.SEPTEMBER,7), new Double(1.6057) },{ createDate(1999, Calendar.SEPTEMBER,8), new Double(1.6185) },{ createDate(1999, Calendar.SEPTEMBER,9), new Double(1.6332) },{ createDate(1999, Calendar.SEPTEMBER,10), new Double(1.6183) },{ createDate(1999, Calendar.SEPTEMBER,13), new Double(1.6090) },{ createDate(1999, Calendar.SEPTEMBER,14), new Double(1.6085) },{ createDate(1999, Calendar.SEPTEMBER,15), new Double(1.6110) },{ createDate(1999, Calendar.SEPTEMBER,16), new Double(1.6250) },{ createDate(1999, Calendar.SEPTEMBER,17), new Double(1.6222) },{ createDate(1999, Calendar.SEPTEMBER,20), new Double(1.6230) },{ createDate(1999, Calendar.SEPTEMBER,21), new Double(1.6310) },{ createDate(1999, Calendar.SEPTEMBER,22), new Double(1.6363) },{ createDate(1999, Calendar.SEPTEMBER,23), new Double(1.6375) },{ createDate(1999, Calendar.SEPTEMBER,24), new Double(1.6428) },{ createDate(1999, Calendar.SEPTEMBER,27), new Double(1.6455) },{ createDate(1999, Calendar.SEPTEMBER,28), new Double(1.6485) },{ createDate(1999, Calendar.SEPTEMBER,29), new Double(1.6425) },{ createDate(1999, Calendar.SEPTEMBER,30), new Double(1.6457) },{ createDate(1999, Calendar.OCTOBER,1), new Double(1.6550) },{ createDate(1999, Calendar.OCTOBER,4), new Double(1.6555) },{ createDate(1999, Calendar.OCTOBER,5), new Double(1.6525) },{ createDate(1999, Calendar.OCTOBER,6), new Double(1.6560) },{ createDate(1999, Calendar.OCTOBER,7), new Double(1.6520) },{ createDate(1999, Calendar.OCTOBER,8), new Double(1.6520) },{ createDate(1999, Calendar.OCTOBER,12), new Double(1.6535) },{ createDate(1999, Calendar.OCTOBER,13), new Double(1.6532) },{ createDate(1999, Calendar.OCTOBER,14), new Double(1.6575) },{ createDate(1999, Calendar.OCTOBER,15), new Double(1.6684) },{ createDate(1999, Calendar.OCTOBER,18), new Double(1.6720) },{ createDate(1999, Calendar.OCTOBER,19), new Double(1.6708) },{ createDate(1999, Calendar.OCTOBER,20), new Double(1.6643) },{ createDate(1999, Calendar.OCTOBER,21), new Double(1.6765) },{ createDate(1999, Calendar.OCTOBER,22), new Double(1.6584) },{ createDate(1999, Calendar.OCTOBER,25), new Double(1.6631) },{ createDate(1999, Calendar.OCTOBER,26), new Double(1.6525) },{ createDate(1999, Calendar.OCTOBER,27), new Double(1.6477) },{ createDate(1999, Calendar.OCTOBER,28), new Double(1.6400) },{ createDate(1999, Calendar.OCTOBER,29), new Double(1.6425) },{ createDate(1999, Calendar.NOVEMBER,1), new Double(1.6404) },{ createDate(1999, Calendar.NOVEMBER,2), new Double(1.6445) },{ createDate(1999, Calendar.NOVEMBER,3), new Double(1.6440) },{ createDate(1999, Calendar.NOVEMBER,4), new Double(1.6375) },{ createDate(1999, Calendar.NOVEMBER,5), new Double(1.6205) },{ createDate(1999, Calendar.NOVEMBER,8), new Double(1.6150) },{ createDate(1999, Calendar.NOVEMBER,9), new Double(1.6210) },{ createDate(1999, Calendar.NOVEMBER,10), new Double(1.6250) },{ createDate(1999, Calendar.NOVEMBER,12), new Double(1.6131) },{ createDate(1999, Calendar.NOVEMBER,15), new Double(1.6230) },{ createDate(1999, Calendar.NOVEMBER,16), new Double(1.6164) },{ createDate(1999, Calendar.NOVEMBER,17), new Double(1.6231) },{ createDate(1999, Calendar.NOVEMBER,18), new Double(1.6150) },{ createDate(1999, Calendar.NOVEMBER,19), new Double(1.6160) },{ createDate(1999, Calendar.NOVEMBER,22), new Double(1.6205) },{ createDate(1999, Calendar.NOVEMBER,23), new Double(1.6236) },{ createDate(1999, Calendar.NOVEMBER,24), new Double(1.6090) },{ createDate(1999, Calendar.NOVEMBER,26), new Double(1.6062) },{ createDate(1999, Calendar.NOVEMBER,29), new Double(1.6024) },{ createDate(1999, Calendar.NOVEMBER,30), new Double(1.5935) },{ createDate(1999, Calendar.DECEMBER,1), new Double(1.5960) },{ createDate(1999, Calendar.DECEMBER,2), new Double(1.5972) },{ createDate(1999, Calendar.DECEMBER,3), new Double(1.6015) },{ createDate(1999, Calendar.DECEMBER,6), new Double(1.6230) },{ createDate(1999, Calendar.DECEMBER,7), new Double(1.6233) },{ createDate(1999, Calendar.DECEMBER,8), new Double(1.6255) },{ createDate(1999, Calendar.DECEMBER,9), new Double(1.6230) },{ createDate(1999, Calendar.DECEMBER,10), new Double(1.6225) },{ createDate(1999, Calendar.DECEMBER,13), new Double(1.6232) },{ createDate(1999, Calendar.DECEMBER,14), new Double(1.6110) },{ createDate(1999, Calendar.DECEMBER,15), new Double(1.6085) },{ createDate(1999, Calendar.DECEMBER,16), new Double(1.6123) },{ createDate(1999, Calendar.DECEMBER,17), new Double(1.6070) },{ createDate(1999, Calendar.DECEMBER,20), new Double(1.6035) },{ createDate(1999, Calendar.DECEMBER,21), new Double(1.6103) },{ createDate(1999, Calendar.DECEMBER,22), new Double(1.6060) },{ createDate(1999, Calendar.DECEMBER,23), new Double(1.6161) },{ createDate(1999, Calendar.DECEMBER,24), new Double(1.6154) },{ createDate(1999, Calendar.DECEMBER,27), new Double(1.6173) },{ createDate(1999, Calendar.DECEMBER,28), new Double(1.6165) },{ createDate(1999, Calendar.DECEMBER,29), new Double(1.6168) },{ createDate(1999, Calendar.DECEMBER,30), new Double(1.6130) },{ createDate(1999, Calendar.DECEMBER,31), new Double(1.6150) },{ createDate(2000, Calendar.JANUARY,3), new Double(1.6270) },{ createDate(2000, Calendar.JANUARY,4), new Double(1.6370) },{ createDate(2000, Calendar.JANUARY,5), new Double(1.6415) },{ createDate(2000, Calendar.JANUARY,6), new Double(1.6475) },{ createDate(2000, Calendar.JANUARY,7), new Double(1.6384) },{ createDate(2000, Calendar.JANUARY,10), new Double(1.6374) },{ createDate(2000, Calendar.JANUARY,11), new Double(1.6480) },{ createDate(2000, Calendar.JANUARY,12), new Double(1.6465) },{ createDate(2000, Calendar.JANUARY,13), new Double(1.6482) },{ createDate(2000, Calendar.JANUARY,14), new Double(1.6353) },{ createDate(2000, Calendar.JANUARY,18), new Double(1.6380) },{ createDate(2000, Calendar.JANUARY,19), new Double(1.6438) },{ createDate(2000, Calendar.JANUARY,20), new Double(1.6538) },{ createDate(2000, Calendar.JANUARY,21), new Double(1.6504) },{ createDate(2000, Calendar.JANUARY,24), new Double(1.6520) },{ createDate(2000, Calendar.JANUARY,25), new Double(1.6482) },{ createDate(2000, Calendar.JANUARY,26), new Double(1.6395) },{ createDate(2000, Calendar.JANUARY,27), new Double(1.6363) },{ createDate(2000, Calendar.JANUARY,28), new Double(1.6210) },{ createDate(2000, Calendar.JANUARY,31), new Double(1.6182) },{ createDate(2000, Calendar.FEBRUARY,1), new Double(1.6150) },{ createDate(2000, Calendar.FEBRUARY,2), new Double(1.6060) },{ createDate(2000, Calendar.FEBRUARY,3), new Double(1.6025) },{ createDate(2000, Calendar.FEBRUARY,4), new Double(1.5915) },{ createDate(2000, Calendar.FEBRUARY,7), new Double(1.5917) },{ createDate(2000, Calendar.FEBRUARY,8), new Double(1.6105) },{ createDate(2000, Calendar.FEBRUARY,9), new Double(1.6115) },{ createDate(2000, Calendar.FEBRUARY,10), new Double(1.6057) },{ createDate(2000, Calendar.FEBRUARY,11), new Double(1.5923) },{ createDate(2000, Calendar.FEBRUARY,14), new Double(1.5890) },{ createDate(2000, Calendar.FEBRUARY,15), new Double(1.5950) },{ createDate(2000, Calendar.FEBRUARY,16), new Double(1.6040) },{ createDate(2000, Calendar.FEBRUARY,17), new Double(1.6050) },{ createDate(2000, Calendar.FEBRUARY,18), new Double(1.5984) },{ createDate(2000, Calendar.FEBRUARY,22), new Double(1.6165) },{ createDate(2000, Calendar.FEBRUARY,23), new Double(1.6047) },{ createDate(2000, Calendar.FEBRUARY,24), new Double(1.5981) },{ createDate(2000, Calendar.FEBRUARY,25), new Double(1.5908) },{ createDate(2000, Calendar.FEBRUARY,28), new Double(1.5935) },{ createDate(2000, Calendar.FEBRUARY,29), new Double(1.5780) },{ createDate(2000, Calendar.MARCH,1), new Double(1.5849) },{ createDate(2000, Calendar.MARCH,2), new Double(1.5765) },{ createDate(2000, Calendar.MARCH,3), new Double(1.5810) },{ createDate(2000, Calendar.MARCH,6), new Double(1.5732) },{ createDate(2000, Calendar.MARCH,7), new Double(1.5772) },{ createDate(2000, Calendar.MARCH,8), new Double(1.5855) },{ createDate(2000, Calendar.MARCH,9), new Double(1.5815) },{ createDate(2000, Calendar.MARCH,10), new Double(1.5793) },{ createDate(2000, Calendar.MARCH,13), new Double(1.5782) },{ createDate(2000, Calendar.MARCH,14), new Double(1.5725) },{ createDate(2000, Calendar.MARCH,15), new Double(1.5730) },{ createDate(2000, Calendar.MARCH,16), new Double(1.5747) },{ createDate(2000, Calendar.MARCH,17), new Double(1.5705) } } };return new DefaultXYDataset(new String[] { "USD" }, data);', 'comment': '/*** Creates and returns a XYDataset for the demo charts.*/', 'coherence': 1}, {'code': 'public JFreeChartDemo() {super("JFreeChart "+JFreeChart.VERSION+" Demo");addWindowListener(new WindowAdapter() {public void windowClosing(WindowEvent e) {dispose();System.exit(0);}});// set up the menuJMenuBar menuBar = createMenuBar();setJMenuBar(menuBar);JPanel content = new JPanel(new BorderLayout());content.add(createTabbedPane());setContentPane(content);', 'comment': '/*** Constructs a demonstration application for the JFreeChart Class Library.*/', 'coherence': 1}, {'code': 'private void displayPieChartOne() {if (pieChartOneFrame==null) {// create a default chart based on some sample data...String title = "Pie Chart";CategoryDataset data = createCategoryDataset();PieDataset extracted = Datasets.createPieDataset(data, 0);JFreeChart chart = ChartFactory.createPieChart(title, extracted, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.orange));PiePlot plot = (PiePlot)chart.getPlot();plot.setCircular(false);// make section 1 explode by 100%...plot.setRadiusPercent(0.60);plot.setExplodePercent(1, 1.00);// and present it in a frame...pieChartOneFrame = new JFreeChartFrame("Pie Chart 1", chart);pieChartOneFrame.pack();SwingRefinery.positionFrameRandomly(pieChartOneFrame);pieChartOneFrame.show();}else {pieChartOneFrame.show();pieChartOneFrame.requestFocus();', 'comment': '/*** Displays pie chart one in its own frame.*/', 'coherence': 1}, {'code': 'public CategoryDataset createSingleCategoryDataset() {Number[][] data = new Integer[][]{ { new Integer(10) },{ new Integer(-5) },{ new Integer(6) },{ new Integer(7) },{ new Integer(-8) },{ new Integer(9) },{ new Integer(-10) },{ new Integer(11) },{ new Integer(-3) } };return new DefaultCategoryDataset(data);', 'comment': '/*** Creates and returns a category dataset with JUST ONE CATEGORY for the demo charts.*/', 'coherence': 1}, {'code': 'private void displayXYPlot() {if (xyPlotFrame==null) {// create a default chart based on some sample data...String title = "XY Plot";String xAxisLabel = "X Axis";String yAxisLabel = "Y Axis";XYDataset data = new SampleXYDataset();JFreeChart chart = ChartFactory.createXYChart(title, xAxisLabel, yAxisLabel, data, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.green));// and present it in a frame...xyPlotFrame = new JFreeChartFrame("XYPlot", chart);xyPlotFrame.pack();SwingRefinery.positionFrameRandomly(xyPlotFrame);xyPlotFrame.show();}else {xyPlotFrame.show();xyPlotFrame.requestFocus();', 'comment': '/*** Displays an XYPlot in its own frame.*/', 'coherence': 1}, {'code': 'public void windowClosed(WindowEvent e) {//if (e.getWindow()==this.infoFrame) {//  infoFrame=null;//}//elseif (e.getWindow()==this.aboutFrame) {aboutFrame=null;', 'comment': '/*** Clears the reference to the print preview frames when they are closed.*/', 'coherence': 1}, {'code': 'private JMenuBar createMenuBar() {// create the menusJMenuBar menuBar = new JMenuBar();// first the file menuJMenu fileMenu = new JMenu("File", true);fileMenu.setMnemonic(\'F\');JMenuItem exitItem = new JMenuItem("Exit", \'x\');exitItem.setActionCommand("exitItem");exitItem.addActionListener(this);fileMenu.add(exitItem);// then the help menuJMenu helpMenu = new JMenu("Help");helpMenu.setMnemonic(\'H\');JMenuItem aboutItem = new JMenuItem("About...", \'A\');aboutItem.setActionCommand("aboutItem");aboutItem.addActionListener(this);helpMenu.add(aboutItem);// finally, glue together the menu and return itmenuBar.add(fileMenu);menuBar.add(helpMenu);return menuBar;', 'comment': '/*** Creates a menubar.*/', 'coherence': 1}, {'code': 'private void displayVertical3DBarChart() {if (vertical3DBarChartFrame==null) {// create a default chart based on some sample data...String title = "Vertical Bar Chart (3D Effect)";String categoryAxisLabel = "Categories";String valueAxisLabel = "Values";CategoryDataset categoryData = createCategoryDataset();JFreeChart chart = ChartFactory.createVerticalBarChart3D(title, categoryAxisLabel,valueAxisLabel, categoryData, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));Plot plot = chart.getPlot();// and present it in a panel...vertical3DBarChartFrame = new JFreeChartFrame("Vertical 3D Bar Chart", chart);vertical3DBarChartFrame.pack();SwingRefinery.positionFrameRandomly(vertical3DBarChartFrame);vertical3DBarChartFrame.show();}else {vertical3DBarChartFrame.show();vertical3DBarChartFrame.requestFocus();', 'comment': '/*** Displays a vertical 3D bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void displayTimeSeriesWithMAChart() {if (this.timeSeriesWithMAChartFrame==null) {// create a default chart based on some sample data...String title = "Moving Average";String timeAxisLabel = "Date";String valueAxisLabel = "USD per GBP";XYDataset data = createXYDataset();MovingAveragePlotFitAlgorithm mavg = new MovingAveragePlotFitAlgorithm();mavg.setPeriod(30);PlotFit pf = new PlotFit(data, mavg);data = pf.getFit();JFreeChart chart = ChartFactory.createTimeSeriesChart(title, timeAxisLabel, valueAxisLabel,data, true);// then customise it a little...TextTitle subtitle = new TextTitle("30 day moving average of GBP", new Font("Arial", Font.BOLD, 12));chart.addTitle(subtitle);chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.blue));// and present it in a frame...timeSeriesWithMAChartFrame = new JFreeChartFrame("Time Series Chart", chart);timeSeriesWithMAChartFrame.pack();SwingRefinery.positionFrameRandomly(timeSeriesWithMAChartFrame);timeSeriesWithMAChartFrame.show();}else {timeSeriesWithMAChartFrame.show();timeSeriesWithMAChartFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void displayHorizontalBarChart() {if (horizontalBarChartFrame==null) {// create a default chart based on some sample data...String title = "Horizontal Bar Chart";String categoryAxisLabel = "Categories";String valueAxisLabel = "Values";CategoryDataset categoryData = createCategoryDataset();JFreeChart chart = ChartFactory.createHorizontalBarChart(title, categoryAxisLabel,valueAxisLabel, categoryData,true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.orange));// and present it in a frame...horizontalBarChartFrame = new JFreeChartFrame("Horizontal Bar Chart", chart);horizontalBarChartFrame.pack();SwingRefinery.positionFrameRandomly(horizontalBarChartFrame);horizontalBarChartFrame.show();}else {horizontalBarChartFrame.show();horizontalBarChartFrame.requestFocus();', 'comment': '/*** Displays a horizontal bar chart in its own frame.*/', 'coherence': 1}, {'code': 'private void about() {if (aboutFrame==null) {aboutFrame = new AboutFrame("About...","JFreeChart","Version "+JFreeChart.VERSION,"http://www.jrefinery.com/jfreechart",Licences.LGPL);aboutFrame.pack();SwingRefinery.centerFrameOnScreen(aboutFrame);}aboutFrame.show();aboutFrame.requestFocus();', 'comment': '/*** Displays information about the application.*/', 'coherence': 1}, {'code': 'private void displayTimeSeriesChartInScrollPane() {if (this.timeSeriesChartScrollFrame==null) {// create a default chart based on some sample data...String title = "Time Series Chart";String xAxisLabel = "Date";String yAxisLabel = "USD per GBP";XYDataset data = createXYDataset();JFreeChart chart = ChartFactory.createTimeSeriesChart(title, xAxisLabel, yAxisLabel, data,true);// then customise it a little...TextTitle subtitle = new TextTitle("Value of GBP", new Font("Arial", Font.BOLD, 12));chart.addTitle(subtitle);chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.gray));Plot plot = chart.getPlot();// and present it in a frame...timeSeriesChartScrollFrame = new JFreeChartFrame("Time Series Chart", chart, true);timeSeriesChartScrollFrame.pack();SwingRefinery.positionFrameRandomly(timeSeriesChartScrollFrame);timeSeriesChartScrollFrame.show();}else {timeSeriesChartScrollFrame.show();timeSeriesChartScrollFrame.requestFocus();', 'comment': '/*** Displays a vertical bar chart in its own frame.*/', 'coherence': 1}, {'code': 'public Dimension getPreferredSize() {return PREFERRED_SIZE;', 'comment': '/*** Returns the preferred size for the frame.* @return The preferred size for the frame.*/', 'coherence': 1}, {'code': 'public XYDataset createTestXYDataset() {Object[][][] data = new Object[][][] { {{ createDateTime(2000, Calendar.OCTOBER, 18, 9, 5), new Double(10921.0) },{ createDateTime(2000, Calendar.OCTOBER, 18, 10, 6), new Double(10886.7) },{ createDateTime(2000, Calendar.OCTOBER, 18, 11, 6), new Double(10846.6) },{ createDateTime(2000, Calendar.OCTOBER, 18, 12, 6), new Double(10843.7) },{ createDateTime(2000, Calendar.OCTOBER, 18, 13, 6), new Double(10841.2) },{ createDateTime(2000, Calendar.OCTOBER, 18, 14, 6), new Double(10830.7) },{ createDateTime(2000, Calendar.OCTOBER, 18, 15, 6), new Double(10795.8) },{ createDateTime(2000, Calendar.OCTOBER, 18, 16, 7), new Double(10733.8) }} };return new DefaultXYDataset(data);', 'comment': '/*** Creates and returns a XYDataset for the demo charts.*/', 'coherence': 1}, {'code': 'private void displayHorizontalStackedBarChart() {if (horizontalStackedBarChartFrame==null) {// create a default chart based on some sample data...String title = "Horizontal Stacked Bar Chart";String categoryAxisLabel = "Categories";String valueAxisLabel = "Values";CategoryDataset categoryData = createCategoryDataset();JFreeChart chart = ChartFactory.createStackedHorizontalBarChart(title, categoryAxisLabel,valueAxisLabel, categoryData, true);// then customise it a little...chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));Plot plot = chart.getPlot();HorizontalNumberAxis valueAxis = (HorizontalNumberAxis)plot.getAxis(Plot.HORIZONTAL_AXIS);valueAxis.setMinimumAxisValue(new Double(-32.0));valueAxis.setMaximumAxisValue(new Double(85.0));// and present it in a frame...horizontalStackedBarChartFrame = new JFreeChartFrame("Horizontal Bar Chart", chart);horizontalStackedBarChartFrame.pack();SwingRefinery.positionFrameRandomly(horizontalStackedBarChartFrame);horizontalStackedBarChartFrame.show();}else {horizontalStackedBarChartFrame.show();horizontalStackedBarChartFrame.requestFocus();', 'comment': '/*** Displays a horizontal bar chart in its own frame.*/', 'coherence': 1}, {'code': 'public Object[][][] getResults() {/* set up our algorithm */alg.setXYDataset(dataset);/* make a data container big enough to hold it all */int arraysize = 0;int seriescount = dataset.getSeriesCount();for(int i = 0; i < seriescount; i++) {if(dataset.getItemCount(i) > arraysize) {arraysize = dataset.getItemCount(i);}}// we\'ll apply the plot fit to all of the series for nowObject[][][] newdata = new Object[seriescount * 2][arraysize][2];/* copy in the series to the first half */for(int i = 0; i < seriescount; i++) {for(int j = 0; j < dataset.getItemCount(i); j++) {Number x = dataset.getXValue(i,j);newdata[i][j][0] = x;newdata[i][j][1] = dataset.getYValue(i,j);Number y = alg.getY(i, x);/** only want to set data for non-null algorithm fits.* This allows things like moving average plots, or partial* plots to return null and not get NPEs when the chart is* created*///System.out.println("At [" + i + "," + j + "] the values = [" + x + "," + y + "]");if(y != null) {newdata[i + seriescount][j][0] = x;newdata[i + seriescount][j][1] = y;}else {newdata[i + seriescount][j][0] = null;newdata[i + seriescount][j][1] = null;}}}return newdata;', 'comment': "/*** Returns a three-dimensional array based on algorithm calculations.  Used to create a new* dataset.* Matthew Wright:  implements what I'm doing in code now... not the best way to do this?*/", 'coherence': 1}, {'code': 'public void setPlotFitAlgorithm(PlotFitAlgorithm alg) {this.alg = alg;', 'comment': '/*** Sets the algorithm used to generate the new dataset.* @param alg The algorithm.*/', 'coherence': 1}, {'code': 'public PlotFit(XYDataset data, PlotFitAlgorithm alg) {this.dataset = data;this.alg = alg;', 'comment': '/*** Standard constructor.* @param data The underlying dataset.* @param alg The algorithm.*/', 'coherence': 1}, {'code': 'public void setXYDataset(XYDataset data) {this.dataset = data;', 'comment': '/*** Sets the underlying dataset.* @param data The underlying dataset.*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return null;', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {return null;', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return 0;', 'comment': '/*** Returns the number of series in the data source.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {return null;', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {return yValues[series][item];', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {return "Sample "+series;', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return SERIES_COUNT;', 'comment': '/*** Returns the number of series in the data source.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public SampleXYDataset2() {for (int series=0; series<SERIES_COUNT; series++) {for (int item=0; item<ITEM_COUNT; item++) {double x = (Math.random()-0.5) * RANGE;xValues[series][item] = new Double(x);yValues[series][item] = new Double((Math.random() - 0.5) * x * x);', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return xValues[series][item];', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getOpenValue(int series, int item) {if (series==0) {return opens[item];}else return null;', 'comment': '/*** Returns the open-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The open-value for the specified series and item.*/', 'coherence': 1}, {'code': 'private void initialiseData() {dates = new Date[47];highs = new Double[47];lows = new Double[47];opens = new Double[47];closes = new Double[47];dates[0]  = createDate(1999, Calendar.JANUARY,4);highs[0]  = new Double(47.0);lows[0]   = new Double(33.0);opens[0]  = new Double(35.0);closes[0] = new Double(33.0);dates[1]  = createDate(1999, Calendar.JANUARY,5);highs[1]  = new Double(47.0);lows[1]   = new Double(32.0);opens[1]  = new Double(41.0);closes[1] = new Double(37.0);dates[2]  = createDate(1999, Calendar.JANUARY,6);highs[2]  = new Double(49.0);lows[2]   = new Double(43.0);opens[2]  = new Double(46.0);closes[2] = new Double(48.0);dates[3]  = createDate(1999, Calendar.JANUARY,7);highs[3]  = new Double(51.0);lows[3]   = new Double(39.0);opens[3]  = new Double(40.0);closes[3] = new Double(47.0);dates[4]  = createDate(1999, Calendar.JANUARY,8);highs[4]  = new Double(60.0);lows[4]   = new Double(40.0);opens[4]  = new Double(46.0);closes[4] = new Double(53.0);dates[5]  = createDate(1999, Calendar.JANUARY,9);highs[5]  = new Double(62.0);lows[5]   = new Double(55.0);opens[5]  = new Double(57.0);closes[5] = new Double(61.0);dates[6]  = createDate(1999, Calendar.JANUARY,10);highs[6]  = new Double(65.0);lows[6]   = new Double(56.0);opens[6]  = new Double(62.0);closes[6] = new Double(59.0);dates[7]  = createDate(1999, Calendar.JANUARY,11);highs[7]  = new Double(55.0);lows[7]   = new Double(43.0);opens[7]  = new Double(45.0);closes[7] = new Double(47.0);dates[8]  = createDate(1999, Calendar.JANUARY,12);highs[8]  = new Double(54.0);lows[8]   = new Double(33.0);opens[8]  = new Double(40.0);closes[8] = new Double(51.0);dates[9]  = createDate(1999, Calendar.JANUARY,13);highs[9]  = new Double(47.0);lows[9]   = new Double(33.0);opens[9]  = new Double(35.0);closes[9] = new Double(33.0);dates[10]  = createDate(1999, Calendar.JANUARY,14);highs[10]  = new Double(54.0);lows[10]   = new Double(38.0);opens[10]  = new Double(43.0);closes[10] = new Double(52.0);dates[11]  = createDate(1999, Calendar.JANUARY,15);highs[11]  = new Double(48.0);lows[11]   = new Double(41.0);opens[11]  = new Double(44.0);closes[11] = new Double(41.0);dates[12]  = createDate(1999, Calendar.JANUARY,17);highs[12]  = new Double(60.0);lows[12]   = new Double(30.0);opens[12]  = new Double(34.0);closes[12] = new Double(44.0);dates[13]  = createDate(1999, Calendar.JANUARY,18);highs[13]  = new Double(58.0);lows[13]   = new Double(44.0);opens[13]  = new Double(54.0);closes[13] = new Double(56.0);dates[14]  = createDate(1999, Calendar.JANUARY,19);highs[14]  = new Double(54.0);lows[14]   = new Double(32.0);opens[14]  = new Double(42.0);closes[14] = new Double(53.0);dates[15]  = createDate(1999, Calendar.JANUARY,20);highs[15]  = new Double(53.0);lows[15]   = new Double(39.0);opens[15]  = new Double(50.0);closes[15] = new Double(49.0);dates[16]  = createDate(1999, Calendar.JANUARY,21);highs[16]  = new Double(47.0);lows[16]   = new Double(33.0);opens[16]  = new Double(41.0);closes[16] = new Double(40.0);dates[17]  = createDate(1999, Calendar.JANUARY,22);highs[17]  = new Double(55.0);lows[17]   = new Double(37.0);opens[17]  = new Double(43.0);closes[17] = new Double(45.0);dates[18]  = createDate(1999, Calendar.JANUARY,23);highs[18]  = new Double(54.0);lows[18]   = new Double(42.0);opens[18]  = new Double(50.0);closes[18] = new Double(42.0);dates[19]  = createDate(1999, Calendar.JANUARY,24);highs[19]  = new Double(48.0);lows[19]   = new Double(37.0);opens[19]  = new Double(37.0);closes[19] = new Double(47.0);dates[20]  = createDate(1999, Calendar.JANUARY,25);highs[20]  = new Double(58.0);lows[20]   = new Double(33.0);opens[20]  = new Double(39.0);closes[20] = new Double(41.0);dates[21]  = createDate(1999, Calendar.JANUARY,26);highs[21]  = new Double(47.0);lows[21]   = new Double(31.0);opens[21]  = new Double(36.0);closes[21] = new Double(41.0);dates[22]  = createDate(1999, Calendar.JANUARY,27);highs[22]  = new Double(58.0);lows[22]   = new Double(44.0);opens[22]  = new Double(49.0);closes[22] = new Double(44.0);dates[23]  = createDate(1999, Calendar.JANUARY,28);highs[23]  = new Double(46.0);lows[23]   = new Double(41.0);opens[23]  = new Double(43.0);closes[23] = new Double(44.0);dates[24]  = createDate(1999, Calendar.JANUARY,29);highs[24]  = new Double(56.0);lows[24]   = new Double(39.0);opens[24]  = new Double(39.0);closes[24] = new Double(51.0);dates[25]  = createDate(1999, Calendar.JANUARY,30);highs[25]  = new Double(56.0);lows[25]   = new Double(39.0);opens[25]  = new Double(47.0);closes[25] = new Double(49.0);dates[26]  = createDate(1999, Calendar.JANUARY,31);highs[26]  = new Double(53.0);lows[26]   = new Double(39.0);opens[26]  = new Double(52.0);closes[26] = new Double(47.0);dates[27]  = createDate(1999, Calendar.FEBRUARY,1);highs[27]  = new Double(51.0);lows[27]   = new Double(30.0);opens[27]  = new Double(45.0);closes[27] = new Double(47.0);dates[28]  = createDate(1999, Calendar.FEBRUARY,2);highs[28]  = new Double(47.0);lows[28]   = new Double(30.0);opens[28]  = new Double(34.0);closes[28] = new Double(46.0);dates[29]  = createDate(1999, Calendar.FEBRUARY,3);highs[29]  = new Double(57.0);lows[29]   = new Double(37.0);opens[29]  = new Double(44.0);closes[29] = new Double(56.0);dates[30]  = createDate(1999, Calendar.FEBRUARY,4);highs[30]  = new Double(49.0);lows[30]   = new Double(40.0);opens[30]  = new Double(47.0);closes[30] = new Double(44.0);dates[31]  = createDate(1999, Calendar.FEBRUARY,5);highs[31]  = new Double(46.0);lows[31]   = new Double(38.0);opens[31]  = new Double(43.0);closes[31] = new Double(40.0);dates[32]  = createDate(1999, Calendar.FEBRUARY,6);highs[32]  = new Double(55.0);lows[32]   = new Double(38.0);opens[32]  = new Double(39.0);closes[32] = new Double(53.0);dates[33]  = createDate(1999, Calendar.FEBRUARY,7);highs[33]  = new Double(50.0);lows[33]   = new Double(33.0);opens[33]  = new Double(37.0);closes[33] = new Double(37.0);dates[34]  = createDate(1999, Calendar.FEBRUARY,8);highs[34]  = new Double(59.0);lows[34]   = new Double(34.0);opens[34]  = new Double(57.0);closes[34] = new Double(43.0);dates[35]  = createDate(1999, Calendar.FEBRUARY,9);highs[35]  = new Double(48.0);lows[35]   = new Double(39.0);opens[35]  = new Double(46.0);closes[35] = new Double(47.0);dates[36]  = createDate(1999, Calendar.FEBRUARY,10);highs[36]  = new Double(55.0);lows[36]   = new Double(30.0);opens[36]  = new Double(37.0);closes[36] = new Double(30.0);dates[37]  = createDate(1999, Calendar.FEBRUARY,11);highs[37]  = new Double(60.0);lows[37]   = new Double(32.0);opens[37]  = new Double(56.0);closes[37] = new Double(36.0);dates[38]  = createDate(1999, Calendar.FEBRUARY,12);highs[38]  = new Double(56.0);lows[38]   = new Double(42.0);opens[38]  = new Double(53.0);closes[38] = new Double(54.0);dates[39]  = createDate(1999, Calendar.FEBRUARY,13);highs[39]  = new Double(49.0);lows[39]   = new Double(42.0);opens[39]  = new Double(45.0);closes[39] = new Double(42.0);dates[40]  = createDate(1999, Calendar.FEBRUARY,14);highs[40]  = new Double(55.0);lows[40]   = new Double(42.0);opens[40]  = new Double(47.0);closes[40] = new Double(54.0);dates[41]  = createDate(1999, Calendar.FEBRUARY,15);highs[41]  = new Double(49.0);lows[41]   = new Double(35.0);opens[41]  = new Double(38.0);closes[41] = new Double(35.0);dates[42]  = createDate(1999, Calendar.FEBRUARY,16);highs[42]  = new Double(47.0);lows[42]   = new Double(38.0);opens[42]  = new Double(43.0);closes[42] = new Double(42.0);dates[43]  = createDate(1999, Calendar.FEBRUARY,17);highs[43]  = new Double(53.0);lows[43]   = new Double(42.0);opens[43]  = new Double(47.0);closes[43] = new Double(48.0);dates[44]  = createDate(1999, Calendar.FEBRUARY,18);highs[44]  = new Double(47.0);lows[44]   = new Double(44.0);opens[44]  = new Double(46.0);closes[44] = new Double(44.0);dates[45]  = createDate(1999, Calendar.FEBRUARY,19);highs[45]  = new Double(46.0);lows[45]   = new Double(40.0);opens[45]  = new Double(43.0);closes[45] = new Double(44.0);dates[46]  = createDate(1999, Calendar.FEBRUARY,20);highs[46]  = new Double(48.0);lows[46]   = new Double(41.0);opens[46]  = new Double(46.0);closes[46] = new Double(41.0);', 'comment': '/*** Sets up the data for the sample data source.*/', 'coherence': 1}, {'code': 'public Number getHighValue(int series, int item) {if (series==0) {return highs[item];}else return null;', 'comment': '/*** Returns the high-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The high-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public int getItemCount(int series) {return 47;  // one series with 47 items in this sample', 'comment': '/*** Returns the number of items in the specified series.* @param series The index (zero-based) of the series;* @return The number of items in the specified series.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return 1;', 'comment': '/*** Returns the number of series in the data source, ONE in this sample.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {if (series==0) {return closes[item];}else return null;', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {if (series==0) {return "IBM";}else return "Error";', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'public Number getLowValue(int series, int item) {if (series==0) {return lows[item];}else return null;', 'comment': '/*** Returns the low-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The low-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return new Long(dates[item].getTime());', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public SampleHighLowDataset() {this.initialiseData();', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public Number getCloseValue(int series, int item) {if (series==0) {return closes[item];}else return null;', 'comment': '/*** Returns the close-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The close-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public void setPeriod(int period) {this.period = period;', 'comment': '/*** Sets the period for this moving average algorithm.* @param period The number of points to include in the average.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("SelectLabelFont")) {attemptLabelFontSelection();}else if (command.equals("SelectLabelPaint")) {attemptModifyLabelPaint();}else if (command.equals("SelectTickLabelFont")) {attemptTickLabelFontSelection();}else if (command.equals("LabelInsets")){editLabelInsets();}else if (command.equals("TickLabelInsets")){editTickLabelInsets();', 'comment': '/*** Handles user interaction with the property panel.* @param event Information about the event that triggered the call to this method.*/', 'coherence': 1}, {'code': 'public String getName() {return "Moving Average";', 'comment': '/*** @return the name that you want to see in the legend.*/', 'coherence': 1}, {'code': 'public boolean isTickLabelsVisible() {return showTickLabelsCheckBox.isSelected();', 'comment': '/*** Returns a flag that indicates whether or not the tick labels are visible.*/', 'coherence': 1}, {'code': 'public void attemptTickLabelFontSelection() {FontChooserPanel panel = new FontChooserPanel(tickLabelFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {tickLabelFont = panel.getSelectedFont();tickLabelFontField.setText(tickLabelFont.getFontName()+" "+tickLabelFont.getSize());', 'comment': '/*** Presents a tick label font selection dialog to the user.*/', 'coherence': 1}, {'code': 'public Font getLabelFont() {return labelFont;', 'comment': '/*** Returns the current label font.*/', 'coherence': 1}, {'code': 'public void setXYDataset(XYDataset ds) {this.dataset = ds;/** build the x and y data arrays to be passed to the* statistics class to get a linear fit and store them* for each dataset in the datasets Vector*/Vector datasets = new Vector();for(int i = 0; i < ds.getSeriesCount(); i++) {int seriessize = ds.getItemCount(i);Number[] x_data = new Number[seriessize];Number[] y_data = new Number[seriessize];for(int j = 0; j < seriessize; j++) {x_data[j] = ds.getXValue(i,j);y_data[j] = ds.getYValue(i,j);}Vector pair = new Vector();pair.addElement(x_data);pair.addElement(y_data);datasets.addElement(pair);}plots = new Vector();for(int j = 0; j < datasets.size(); j++) {Vector pair = (Vector)datasets.elementAt(j);Number[] x_data = (Number[])pair.elementAt(0);Number[] y_data = (Number[])pair.elementAt(1);plots.addElement(new ArrayHolder(Statistics.getMovingAverage(x_data, y_data, period)));', 'comment': '/*** @param ds The underlying XYDataset.*/', 'coherence': 1}, {'code': 'private void editTickLabelInsets() {InsetsChooserPanel panel = new InsetsChooserPanel(_tickLabelInsets);int result =JOptionPane.showConfirmDialog(this, panel, "Edit Insets",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {_tickLabelInsets = panel.getInsets();tickLabelInsetsTextField.setInsets(_tickLabelInsets);', 'comment': "/*** Presents insets chooser panel allowing user to modify tick label's* individual insets values. Updates the current insets text field if edit* is accepted.*/", 'coherence': 1}, {'code': "public Number getY(int series, Number x) {/** for a moving average, this returns a number if there is a match* for that y and series, otherwise, it returns a null reference*/double[][] mavg = ((ArrayHolder)plots.elementAt(series)).getArray();for(int j = 0; j < mavg.length; j++) {/* if the x matches up, we have a moving average point for this x */if(mavg[j][0] == x.doubleValue()) {return new Double(mavg[j][1]);}}/* if we don't return null */return null;", 'comment': '/*** Returns the y-value for any x-value.* @param x The x-value.* @param series The series.* @return The y-value*/', 'coherence': 1}, {'code': 'public JTabbedPane getOtherTabs() {return otherTabs;', 'comment': '/*** Returns a reference to the tabbed pane.*/', 'coherence': 1}, {'code': 'public Insets getTickLabelInsets() {return (_tickLabelInsets == null) ? new Insets(0,0,0,0) : _tickLabelInsets;', 'comment': '/*** Returns the current tick label insets value*/', 'coherence': 1}, {'code': 'private void attemptLabelFontSelection() {FontChooserPanel panel = new FontChooserPanel(labelFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {labelFont = panel.getSelectedFont();labelFontField.setText(labelFont.getFontName()+" "+labelFont.getSize());', 'comment': '/*** Presents a font selection dialog to the user.*/', 'coherence': 1}, {'code': 'public static AxisPropertyEditPanel getInstance(Axis axis) {if (axis!=null) {// figure out what type of axis we have and instantiate the appropriate panelif (axis instanceof NumberAxis) {return new NumberAxisPropertyEditPanel((NumberAxis)axis);}else return new AxisPropertyEditPanel(axis);}else return null;', 'comment': '/*** A static method that returns a panel that is appropriate for the axis type.* @param axis The axis whose properties are to be displayed/edited in the panel;*/', 'coherence': 1}, {'code': 'public Insets getLabelInsets() {return (_labelInsets == null) ? new Insets(0,0,0,0) : _labelInsets;', 'comment': '/*** Returns the current label insets value*/', 'coherence': 1}, {'code': 'public void setAxisProperties(Axis axis) {axis.setLabel(this.getLabel());axis.setLabelFont(this.getLabelFont());axis.setLabelPaint(this.getLabelPaint());axis.setTickMarksVisible(this.isTickMarksVisible());// axis.setTickMarkStroke(this.getTickMarkStroke());axis.setTickLabelsVisible(this.isTickLabelsVisible());axis.setTickLabelFont(this.getTickLabelFont());axis.setTickLabelPaint(this.getTickLabelPaint());axis.setTickLabelInsets(this.getTickLabelInsets());axis.setLabelInsets(this.getLabelInsets());', 'comment': '/*** Sets the properties of the specified axis to match the properties defined on this panel.*/', 'coherence': 1}, {'code': 'public Font getTickLabelFont() {return tickLabelFont;', 'comment': '/*** Returns the font used to draw the tick labels (if they are showing).*/', 'coherence': 1}, {'code': 'public boolean isTickMarksVisible() {return showTickMarksCheckBox.isSelected();', 'comment': '/*** Returns the current value of the flag that determines whether or not tick marks are* visible.*/', 'coherence': 1}, {'code': 'public String getLabel() {return label.getText();', 'comment': '/*** Returns the current axis label.*/', 'coherence': 1}, {'code': 'private void attemptModifyLabelPaint() {Color c;c = JColorChooser.showDialog(this, "Label Color", Color.blue);if (c!=null) {labelPaintSample.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the outline paint.*/', 'coherence': 1}, {'code': 'public Paint getTickLabelPaint() {return tickLabelPaintSample.getPaint();', 'comment': '/*** Returns the current tick label paint.*/', 'coherence': 1}, {'code': 'public Paint getLabelPaint() {return labelPaintSample.getPaint();', 'comment': '/*** Returns the current label paint.*/', 'coherence': 1}, {'code': 'private void editLabelInsets() {InsetsChooserPanel panel = new InsetsChooserPanel(_labelInsets);int result =JOptionPane.showConfirmDialog(this, panel, "Edit Insets",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {_labelInsets = panel.getInsets();labelInsetsTextField.setInsets(_labelInsets);', 'comment': "/*** Presents insets chooser panel allowing user to modify label's* individual insets values. Updates the current insets text field if edit* is accepted.*/", 'coherence': 1}, {'code': 'public AxisPropertyEditPanel(Axis axis) {labelFont = axis.getLabelFont();labelPaintSample = new PaintSample(axis.getLabelPaint());tickLabelFont = axis.getTickLabelFont();tickLabelPaintSample = new PaintSample(axis.getTickLabelPaint());// Insets values_tickLabelInsets = axis.getTickLabelInsets();_labelInsets = axis.getLabelInsets();setLayout(new BorderLayout());JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(5));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));interior.add(new JLabel("Label:"));label = new JTextField(axis.getLabel());interior.add(label);interior.add(new JPanel());interior.add(new JLabel("Font:"));labelFontField = new FontDisplayField(labelFont);interior.add(labelFontField);JButton b = new JButton("Select...");b.setActionCommand("SelectLabelFont");b.addActionListener(this);interior.add(b);interior.add(new JLabel("Paint:"));interior.add(labelPaintSample);b = new JButton("Select...");b.setActionCommand("SelectLabelPaint");b.addActionListener(this);interior.add(b);interior.add(new JLabel("Label Insets:"));b = new JButton("Edit...");b.setActionCommand("LabelInsets");b.addActionListener(this);labelInsetsTextField = new InsetsTextField(_labelInsets);interior.add(labelInsetsTextField);interior.add(b);interior.add(new JLabel("Tick Label Insets:"));b = new JButton("Edit...");b.setActionCommand("TickLabelInsets");b.addActionListener(this);tickLabelInsetsTextField = new InsetsTextField(_tickLabelInsets);interior.add(tickLabelInsetsTextField);interior.add(b);general.add(interior);add(general, BorderLayout.NORTH);slot1 = new JPanel(new BorderLayout());JPanel other = new JPanel(new BorderLayout());other.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Other:"));otherTabs = new JTabbedPane();otherTabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));JPanel ticks = new JPanel(new LCBLayout(3));ticks.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));showTickLabelsCheckBox = new JCheckBox("Show tick labels", axis.isTickLabelsVisible());ticks.add(showTickLabelsCheckBox);ticks.add(new JPanel());ticks.add(new JPanel());ticks.add(new JLabel("Tick label font:"));tickLabelFontField = new FontDisplayField(tickLabelFont);ticks.add(tickLabelFontField);b = new JButton("Select...");b.setActionCommand("SelectTickLabelFont");b.addActionListener(this);ticks.add(b);showTickMarksCheckBox = new JCheckBox("Show tick marks", axis.isTickMarksVisible());ticks.add(showTickMarksCheckBox);ticks.add(new JPanel());ticks.add(new JPanel());otherTabs.add("Ticks", ticks);other.add(otherTabs);slot1.add(other);slot2 = new JPanel(new BorderLayout());slot2.add(slot1, BorderLayout.NORTH);add(slot2);', 'comment': '/*** Standard constructor: builds a panel for displaying/editing the properties of the specified* axis.* @param axis The axis whose properties are to be displayed/edited in the panel;*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("GridStroke")) {attemptGridStrokeSelection();}else if (command.equals("GridPaint")) {attemptGridPaintSelection();}else if (command.equals("AutoRangeOnOff")) {toggleAutoRange();}else if (command.equals("MinimumRange")) {validateMinimum();}else if (command.equals("MaximumRange")) {validateMaximum();}else super.actionPerformed(event);  // pass to the super-class for handling', 'comment': '/*** Handles actions from within the property panel.*/', 'coherence': 1}, {'code': 'private void attemptGridPaintSelection() {Color c;c = JColorChooser.showDialog(this, "Grid Color", Color.blue);if (c!=null) {gridPaintSample.setPaint(c);', 'comment': '/*** Handle a grid paint selection.*/', 'coherence': 1}, {'code': 'private void attemptGridStrokeSelection() {StrokeChooserPanel panel = new StrokeChooserPanel(null, availableStrokeSamples);int result = JOptionPane.showConfirmDialog(this, panel, "Stroke Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {gridStrokeSample.setStroke(panel.getSelectedStroke());', 'comment': '/*** Handle a grid stroke selection.*/', 'coherence': 1}, {'code': 'public boolean isAutoRange() {return autoRange;', 'comment': '/*** Returns the current setting of the auto-range property.*/', 'coherence': 1}, {'code': 'public Number getMinimumValue() {return minimumValue;', 'comment': '/*** Returns the current setting of the minimum value in the axis range.*/', 'coherence': 1}, {'code': 'public NumberAxisPropertyEditPanel(NumberAxis axis) {super(axis);autoRange = axis.isAutoRange();minimumValue = axis.getMinimumAxisValue();maximumValue = axis.getMaximumAxisValue();gridPaintSample = new PaintSample(axis.getGridPaint());gridStrokeSample = new StrokeSample(axis.getGridStroke());availableStrokeSamples = new StrokeSample[3];availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));JTabbedPane other = getOtherTabs();JPanel range = new JPanel(new LCBLayout(3));range.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));range.add(new JPanel());autoRangeCheckBox = new JCheckBox("Auto-adjust range:", autoRange);autoRangeCheckBox.setActionCommand("AutoRangeOnOff");autoRangeCheckBox.addActionListener(this);range.add(autoRangeCheckBox);range.add(new JPanel());range.add(new JLabel("Minimum range value:"));minimumRangeValue = new JTextField(minimumValue.toString());minimumRangeValue.setEnabled(!autoRange);minimumRangeValue.setActionCommand("MinimumRange");minimumRangeValue.addActionListener(this);minimumRangeValue.addFocusListener(this);range.add(minimumRangeValue);range.add(new JPanel());range.add(new JLabel("Maximum range value:"));maximumRangeValue = new JTextField(maximumValue.toString());maximumRangeValue.setEnabled(!autoRange);maximumRangeValue.setActionCommand("MaximumRange");maximumRangeValue.addActionListener(this);maximumRangeValue.addFocusListener(this);range.add(maximumRangeValue);range.add(new JPanel());other.add("Range", range);JPanel grid = new JPanel(new LCBLayout(3));grid.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));grid.add(new JPanel());showGridLinesCheckBox = new JCheckBox("Show grid lines", axis.isShowGridLines());grid.add(showGridLinesCheckBox);grid.add(new JPanel());grid.add(new JLabel("Grid stroke:"));JButton button = new JButton("Set stroke...");button.setActionCommand("GridStroke");button.addActionListener(this);grid.add(gridStrokeSample);grid.add(button);grid.add(new JLabel("Grid paint:"));button = new JButton("Set paint...");button.setActionCommand("GridPaint");button.addActionListener(this);grid.add(gridPaintSample);grid.add(button);other.add("Grid", grid);', 'comment': '/*** Standard constructor: builds a property panel for the specified axis.*/', 'coherence': 1}, {'code': 'public Number getMaximumValue() {return maximumValue;', 'comment': '/*** Returns the current setting of the maximum value in the axis range.*/', 'coherence': 1}, {'code': 'private void attemptModifySeriesPaint() {Color c;c = JColorChooser.showDialog(this, "Series Label Color", Color.blue);if (c!=null) {seriesPaint.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the series label paint.*/', 'coherence': 1}, {'code': 'public LegendPropertyEditPanel(Legend legend) {StandardLegend l = (StandardLegend)legend;outlineStroke = new StrokeSample(l.getOutlineStroke());outlinePaint = new PaintSample(l.getOutlinePaint());backgroundPaint = new PaintSample(l.getBackgroundPaint());seriesFont = l.getSeriesFont();seriesPaint = new PaintSample(l.getSeriesPaint());availableStrokeSamples = new StrokeSample[4];availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));availableStrokeSamples[3] = new StrokeSample(new BasicStroke(4.0f));setLayout(new BorderLayout());JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(5));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));JLabel titleLabel = new JLabel("Text:");interior.add(new JLabel("Outline:"));interior.add(outlineStroke);JButton button = new JButton("Select...");button.setActionCommand("OutlineStroke");button.addActionListener(this);interior.add(button);interior.add(new JLabel("Outline Paint:"));button = new JButton("Select...");button.setActionCommand("OutlinePaint");button.addActionListener(this);interior.add(outlinePaint);interior.add(button);interior.add(new JLabel("Background:"));button = new JButton("Select...");button.setActionCommand("BackgroundPaint");button.addActionListener(this);interior.add(backgroundPaint);interior.add(button);interior.add(new JLabel("Series label font:"));button = new JButton("Select...");button.setActionCommand("SeriesFont");button.addActionListener(this);interior.add(new FontDisplayField(seriesFont));interior.add(button);interior.add(new JLabel("Series label paint:")) ;button = new JButton("Select...");button.setActionCommand("SeriesPaint");button.addActionListener(this);interior.add(seriesPaint) ;interior.add(button) ;general.add(interior);add(general, BorderLayout.NORTH);', 'comment': '/*** Standard constructor: builds a panel based on the specified legend.*/', 'coherence': 1}, {'code': 'public Font getSeriesFont() {return seriesFont;', 'comment': '/*** Returns the current series label font.*/', 'coherence': 1}, {'code': 'public void attemptModifySeriesFont() {FontChooserPanel panel = new FontChooserPanel(seriesFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {seriesFont = panel.getSelectedFont();', 'comment': '/*** Allows the user the opportunity to change the series label font.*/', 'coherence': 1}, {'code': 'private void attemptModifyBackgroundPaint() {Color c;c = JColorChooser.showDialog(this, "Background Color", Color.blue);if (c!=null) {backgroundPaint.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the background paint.*/', 'coherence': 1}, {'code': 'public Paint getSeriesPaint() {return seriesPaint.getPaint();', 'comment': '/*** Returns the current series label paint.*/', 'coherence': 1}, {'code': 'private void attemptModifyOutlineStroke() {StrokeChooserPanel panel = new StrokeChooserPanel(outlineStroke, availableStrokeSamples);int result = JOptionPane.showConfirmDialog(this, panel, "Pen/Stroke Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {outlineStroke.setStroke(panel.getSelectedStroke());', 'comment': '/*** Allows the user the opportunity to change the outline stroke.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("OutlineStroke")) {attemptModifyOutlineStroke();}else if (command.equals("OutlinePaint")) {attemptModifyOutlinePaint();}else if (command.equals("BackgroundPaint")) {attemptModifyBackgroundPaint();}else if (command.equals("SeriesFont")) {attemptModifySeriesFont();}else if (command.equals("SeriesPaint")) {attemptModifySeriesPaint();', 'comment': '/*** Handles user interactions with the panel.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return backgroundPaint.getPaint();', 'comment': '/*** Returns the current background paint.*/', 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return outlinePaint.getPaint();', 'comment': '/*** Returns the current outline paint.*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return outlineStroke.getStroke();', 'comment': '/*** Returns the current outline stroke.*/', 'coherence': 1}, {'code': 'public void setLegendProperties(Legend legend) {if (legend instanceof StandardLegend) {  // only supports StandardLegend at presentStandardLegend standard = (StandardLegend)legend;standard.setOutlineStroke(this.getOutlineStroke());standard.setOutlinePaint(this.getOutlinePaint());standard.setBackgroundPaint(this.getBackgroundPaint());standard.setSeriesFont(this.getSeriesFont());standard.setSeriesPaint(this.getSeriesPaint());', 'comment': '/*** Sets the properties of the specified legend to match the properties defined on this panel.*/', 'coherence': 1}, {'code': 'private void attemptModifyOutlinePaint() {Color c;c = JColorChooser.showDialog(this, "Outline Color", Color.blue);if (c!=null) {outlinePaint.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the outline paint.*/', 'coherence': 1}, {'code': 'public void updatePlotProperties(Plot plot) {// set the plot properties...plot.setOutlinePaint(this.getOutlinePaint());plot.setOutlineStroke(this.getOutlineStroke());plot.setBackgroundPaint(this.getBackgroundPaint());plot.setInsets(this.getPlotInsets());// then the axis properties...if (this.horizontalAxisPropertyPanel!=null) {this.horizontalAxisPropertyPanel.setAxisProperties(plot.getAxis(Plot.HORIZONTAL_AXIS));}if (this.verticalAxisPropertyPanel!=null) {this.verticalAxisPropertyPanel.setAxisProperties(plot.getAxis(Plot.VERTICAL_AXIS));', 'comment': '/*** Updates the plot properties to match the properties defined on the panel.* @param plot The plot.*/', 'coherence': 1}, {'code': 'private void editInsets() {InsetsChooserPanel panel = new InsetsChooserPanel(_insets);int result =JOptionPane.showConfirmDialog(this, panel, "Edit Insets",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {_insets = panel.getInsets();insetsTextField.setInsets(_insets);', 'comment': "/*** Allow the user to edit the individual insets' values.*/", 'coherence': 1}, {'code': 'private void attemptOutlinePaintSelection() {Color c;c = JColorChooser.showDialog(this, "Outline Color", Color.blue);if (c!=null) {outlinePaintSample.setPaint(c);', 'comment': '/*** Allow the user to change the outline paint.  We use JColorChooser, so the user can only* choose colors (a subset of all possible paints).*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return outlineStrokeSample.getStroke();', 'comment': '/*** Returns the current outline stroke.*/', 'coherence': 1}, {'code': 'public AxisPropertyEditPanel getHorizontalAxisPropertyEditPanel() {return horizontalAxisPropertyPanel;', 'comment': '/*** Returns a reference to the panel for editing the properties of the horizontal axis.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return backgroundPaintSample.getPaint();', 'comment': '/*** Returns the current background paint.*/', 'coherence': 1}, {'code': 'public PlotPropertyEditPanel(Plot plot) {_insets = plot.getInsets();backgroundPaintSample = new PaintSample(plot.getBackgroundPaint());outlineStrokeSample = new StrokeSample(plot.getOutlineStroke());outlinePaintSample = new PaintSample(plot.getOutlinePaint());setLayout(new BorderLayout());availableStrokeSamples = new StrokeSample[3];availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));// create a panel for the settings...JPanel panel = new JPanel(new BorderLayout());panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), plot.getPlotType()+":"));JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(4));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));interior.add(new JLabel("Insets:"));JButton button = new JButton("Edit...");button.setActionCommand("Insets");button.addActionListener(this);insetsTextField = new InsetsTextField(_insets);insetsTextField.setEnabled(false);interior.add(insetsTextField);interior.add(button);interior.add(new JLabel("Outline stroke:"));button = new JButton("Select...");button.setActionCommand("OutlineStroke");button.addActionListener(this);interior.add(outlineStrokeSample);interior.add(button);interior.add(new JLabel("Outline paint:"));button = new JButton("Select...");button.setActionCommand("OutlinePaint");button.addActionListener(this);interior.add(outlinePaintSample);interior.add(button);interior.add(new JLabel("Background paint:"));button = new JButton("Select...");button.setActionCommand("BackgroundPaint");button.addActionListener(this);interior.add(backgroundPaintSample);interior.add(button);general.add(interior, BorderLayout.NORTH);JPanel appearance = new JPanel(new BorderLayout());appearance.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));appearance.add(general, BorderLayout.NORTH);JTabbedPane tabs = new JTabbedPane();tabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));verticalAxisPropertyPanel = AxisPropertyEditPanel.getInstance(plot.getAxis(Plot.VERTICAL_AXIS));if (verticalAxisPropertyPanel!=null) {verticalAxisPropertyPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));tabs.add("Vertical Axis", verticalAxisPropertyPanel);}horizontalAxisPropertyPanel = AxisPropertyEditPanel.getInstance(plot.getAxis(Plot.HORIZONTAL_AXIS));if (horizontalAxisPropertyPanel!=null) {horizontalAxisPropertyPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));tabs.add("Horizontal Axis", horizontalAxisPropertyPanel);}tabs.add("Appearance", appearance);panel.add(tabs);add(panel);', 'comment': "/*** Standard constructor - constructs a panel for editing the properties of the specified plot.* <P>* In designing the panel, we need to be aware that subclasses of Plot will need to implement* subclasses of PlotPropertyEditPanel - so we need to leave one or two 'slots' where the* subclasses can extend the user interface.*/", 'coherence': 1}, {'code': 'public AxisPropertyEditPanel getVerticalAxisPropertyEditPanel() {return verticalAxisPropertyPanel;', 'comment': '/*** Returns a reference to the panel for editing the properties of the vertical axis.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("BackgroundPaint")) {attemptBackgroundPaintSelection();}else if (command.equals("OutlineStroke")) {attemptOutlineStrokeSelection();}else if (command.equals("OutlinePaint")) {attemptOutlinePaintSelection();}else if (command.equals("Insets")) {editInsets();', 'comment': '/*** Handles user actions generated within the panel.*/', 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return outlinePaintSample.getPaint();', 'comment': '/*** Returns the current outline paint.*/', 'coherence': 1}, {'code': 'public Insets getPlotInsets() {if (_insets == null)_insets = new Insets(0,0,0,0);return _insets;', 'comment': '/*** Returns the current plot insets.*/', 'coherence': 1}, {'code': 'private void attemptOutlineStrokeSelection() {StrokeChooserPanel panel = new StrokeChooserPanel(null, availableStrokeSamples);int result = JOptionPane.showConfirmDialog(this, panel, "Stroke Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {outlineStrokeSample.setStroke(panel.getSelectedStroke());', 'comment': '/*** Allow the user to change the outline stroke.*/', 'coherence': 1}, {'code': 'private void attemptBackgroundPaintSelection() {Color c;c = JColorChooser.showDialog(this, "Background Color", Color.blue);if (c!=null) {backgroundPaintSample.setPaint(c);', 'comment': '/*** Allow the user to change the background paint.*/', 'coherence': 1}, {'code': 'public LegendPropertyEditPanel getLegendPropertyEditPanel() {return legendPropertiesPanel;', 'comment': '/*** Returns a reference to the legend property sub-panel.*/', 'coherence': 1}, {'code': 'public boolean getAntiAlias() {return antialias.isSelected();', 'comment': '/*** Returns the current setting of the anti-alias flag.*/', 'coherence': 1}, {'code': 'public ChartPropertyEditPanel(JFreeChart chart) {setLayout(new BorderLayout());JPanel other = new JPanel(new BorderLayout());other.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(6));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));antialias = new JCheckBox("Draw anti-aliased");antialias.setSelected(chart.getAntiAlias());interior.add(antialias);interior.add(new JLabel(""));interior.add(new JLabel(""));interior.add(new JLabel("Background paint:"));background = new PaintSample(chart.getChartBackgroundPaint());interior.add(background);JButton button = new JButton("Select...");button.setActionCommand("BackgroundPaint");button.addActionListener(this);interior.add(button);interior.add(new JLabel("Series Paint:"));JTextField info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);interior.add(new JLabel("Series Stroke:"));info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);interior.add(new JLabel("Series Outline Paint:"));info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);interior.add(new JLabel("Series Outline Stroke:"));info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);general.add(interior, BorderLayout.NORTH);other.add(general, BorderLayout.NORTH);JPanel parts = new JPanel(new BorderLayout());//Title title = chart.getTitle();Legend legend = chart.getLegend();Plot plot = chart.getPlot();JTabbedPane tabs = new JTabbedPane();//StandardTitle t = (StandardTitle)title;//titlePropertiesPanel = new TitlePropertyEditPanel(t);//titlePropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));//tabs.addTab("Title", titlePropertiesPanel);if (legend!=null) {legendPropertiesPanel = new LegendPropertyEditPanel(legend);legendPropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));tabs.addTab("Legend", legendPropertiesPanel);}plotPropertiesPanel = new PlotPropertyEditPanel(plot);plotPropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));tabs.addTab("Plot", plotPropertiesPanel);tabs.add("Other", other);parts.add(tabs, BorderLayout.NORTH);add(parts);', 'comment': '/*** Standard constructor - the property panel is made up of a number of sub-panels that are* displayed in the tabbed pane.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("BackgroundPaint")) {attemptModifyBackgroundPaint();', 'comment': '/*** Handles user interactions with the panel.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return background.getPaint();', 'comment': '/*** Returns the current background paint.*/', 'coherence': 1}, {'code': 'private void attemptModifyBackgroundPaint() {Color c;c = JColorChooser.showDialog(this, "Background Color", Color.blue);if (c!=null) {background.setPaint(c);', 'comment': '/*** Allows the user the opportunity to select a new background paint.  Uses JColorChooser,* so we are only allowing a subset of all Paint objects to be selected (fix later).*/', 'coherence': 1}, {'code': 'public TitlePropertyEditPanel getTitlePropertyEditPanel() {return titlePropertiesPanel;', 'comment': '/*** Returns a reference to the title property sub-panel.*/', 'coherence': 1}, {'code': 'public PlotPropertyEditPanel getPlotPropertyEditPanel() {return plotPropertiesPanel;', 'comment': '/*** Returns a reference to the plot property sub-panel.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("SelectFont")) {attemptFontSelection();}else if (command.equals("SelectPaint")) {attemptPaintSelection();', 'comment': '/*** Handles button clicks by passing control to an appropriate handler method.*/', 'coherence': 1}, {'code': 'public Paint getTitlePaint() {return titlePaint.getPaint();', 'comment': '/*** Returns the paint selected in the panel.*/', 'coherence': 1}, {'code': 'public void attemptFontSelection() {FontChooserPanel panel = new FontChooserPanel(titleFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {titleFont = panel.getSelectedFont();fontfield.setText(titleFont.getFontName()+" "+titleFont.getSize());', 'comment': '/*** Presents a font selection dialog to the user.*/', 'coherence': 1}, {'code': 'public void setTitleProperties(Title title) {if (title instanceof StandardTitle) {  // only supports StandardTitle at presentStandardTitle standard = (StandardTitle)title;standard.setTitle(this.getTitle());standard.setTitleFont(this.getTitleFont());standard.setTitlePaint(this.getTitlePaint());', 'comment': '/*** Sets the properties of the specified title to match the properties defined on this panel.*/', 'coherence': 1}, {'code': 'public String getTitle() {return titleField.getText();', 'comment': '/*** Returns the title entered in the panel.*/', 'coherence': 1}, {'code': 'public Font getTitleFont() {return titleFont;', 'comment': '/*** Returns the font selected in the panel.*/', 'coherence': 1}, {'code': 'public void attemptPaintSelection() {Color c = JColorChooser.showDialog(this, "Title Color", Color.blue);if (c!=null) {titlePaint.setPaint(c);', 'comment': '/*** Allow the user the opportunity to select a Paint object.  For now, we just use the* standard color chooser - all colors are Paint objects, but not all Paint objects are* colors (later we can implement a more general Paint chooser).*/', 'coherence': 1}, {'code': 'public TitlePropertyEditPanel(StandardTitle title) {// initialise local selectionstitleFont = title.getTitleFont();titlePaint = new PaintSample(title.getTitlePaint());setLayout(new BorderLayout());JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(3));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));JLabel titleLabel = new JLabel("Text:");titleField = new JTextField(title.getTitle());interior.add(titleLabel);interior.add(titleField);interior.add(new JPanel());interior.add(new JLabel("Font:"));fontfield = new FontDisplayField(titleFont);JButton b = new JButton("Select...");b.setActionCommand("SelectFont");b.addActionListener(this);interior.add(fontfield);interior.add(b);interior.add(new JLabel("Color:"));titlePaint = new PaintSample(title.getTitlePaint());b = new JButton("Select...");b.setActionCommand("SelectPaint");b.addActionListener(this);interior.add(titlePaint);interior.add(b);general.add(interior);add(general, BorderLayout.NORTH);', 'comment': '/*** Standard constructor: builds a panel for displaying/editing the properties of the specified* title.*/', 'coherence': 1}, {'code': 'public HighLow(double x, double high, double low) {this(x, high, low, high, low, new BasicStroke(), Color.blue);', 'comment': '/*** Constructs a high-low item, with default values for the open/close and colors.* @param x* @param high* @param low*/', 'coherence': 1}, {'code': 'public void setValue(int valueType, double newValue) {if (valueType == OPEN)open = newValue;elseclose = newValue;', 'comment': '/*** Sets either OPEN or Close value depending on the valueType.* @param valueType* @param newValue*/', 'coherence': 1}, {'code': 'public Line2D getCloseTickLine() {return getTickLine(getLine().getX1(), getValue(CLOSE), getTickSize());', 'comment': '/*** Returns the line. for close tick*/', 'coherence': 1}, {'code': 'public Line2D getOpenTickLine() {return getTickLine(getLine().getX1(), getValue(OPEN), (-1) * getTickSize());', 'comment': '/*** Returns the line for open tick.*/', 'coherence': 1}, {'code': 'public double getValue(int valueType) {if (valueType == OPEN)return open;elsereturn close;', 'comment': '/*** Returns either OPEN or Close value depending on the valueType.* @param valueType*/', 'coherence': 1}, {'code': 'public void setTickSize(double newSize) {tickSize = newSize;', 'comment': '/*** Sets the width of the open/close tick.* @param newSize*/', 'coherence': 1}, {'code': 'public HighLow(double x, double high, double low, double open, double close) {this(x, high, low, open, close, new BasicStroke(), Color.blue);', 'comment': '/*** Constructs a high-low item, with default values for the colors.* @param x* @param high* @param low* @param open* @param close*/', 'coherence': 1}, {'code': 'public Line2D getLine() {return line;', 'comment': '/*** Returns the line.*/', 'coherence': 1}, {'code': 'public Stroke getStroke() {return stroke;', 'comment': '/*** Returns the Stroke object used to draw the line.*/', 'coherence': 1}, {'code': 'public double getTickSize() {return tickSize;', 'comment': '/*** Returns the width of the open/close tick.*/', 'coherence': 1}, {'code': 'public HighLow(double x, double high, double low, double open, double close,Stroke stroke, Paint paint) {this.line = new Line2D.Double(x, high, x, low);this.open = open;this.close = close;this.stroke = stroke;this.paint = paint;', 'comment': '/*** Constructs a high-low item.* @param x* @param high* @param low* @param open* @param close* @param stroke* @param paint*/', 'coherence': 1}, {'code': 'protected static boolean isValidHorizontalAlignment(int code) {switch(code) {case AbstractTitle.LEFT:   return true;case AbstractTitle.MIDDLE: return true;case AbstractTitle.RIGHT:  return true;default: return false;', 'comment': '/*** Utility method for checking a horizontal alignment code.*/', 'coherence': 1}, {'code': 'public int getVerticalAlignment() {return this.verticalAlignment;', 'comment': '/*** Returns the vertical alignment of the title.  The constants TOP, MIDDLE and BOTTOM (defined* in this class) are used.* @return The vertical alignment of the title (TOP, MIDDLE or BOTTOM);*/', 'coherence': 1}, {'code': 'public void setHorizontalAlignment(int alignment) {if (this.horizontalAlignment!=alignment) {this.horizontalAlignment = alignment;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the horizontal alignment for the title, and notifies any registered listeners of the* change.  The constants LEFT, CENTER and RIGHT (defined in this class) can be used to specify* the alignment.* @param alignment The new horizontal alignment (LEFT, CENTER or RIGHT).*/', 'coherence': 1}, {'code': 'public void setVerticalAlignment(int alignment) {if (this.verticalAlignment!=alignment) {this.verticalAlignment = alignment;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the vertical alignment for the title, and notifies any registered listeners of the* change.* The constants TOP, MIDDLE and BOTTOM (defined in this class) can be used to specify the* alignment.* @param alignment The new vertical alignment (TOP, MIDDLE or BOTTOM);*/', 'coherence': 1}, {'code': 'protected AbstractTitle() {this(AbstractTitle.DEFAULT_POSITION,AbstractTitle.DEFAULT_HORIZONTAL_ALIGNMENT,AbstractTitle.DEFAULT_VERTICAL_ALIGNMENT);', 'comment': '/*** Default constructor - builds an AbstractTitle positioned at the top of the page, centered* horizontally and vertically within its space.*/', 'coherence': 1}, {'code': 'protected AbstractTitle(int position,int horizontalAlignment, int verticalAlignment, Insets insets) {// check arguments...if (!this.isValidPosition(position)) {throw new IllegalArgumentException("AbstractTitle(): Invalid position.");}if (!AbstractTitle.isValidHorizontalAlignment(horizontalAlignment)) {throw new IllegalArgumentException("AbstractTitle(): Invalid horizontal alignment.");}if (!AbstractTitle.isValidVerticalAlignment(verticalAlignment)) {throw new IllegalArgumentException("AbstractTitle(): Invalid vertical alignment.");}// initialise...this.position = position;this.horizontalAlignment = horizontalAlignment;this.verticalAlignment = verticalAlignment;this.insets = insets;this.listeners = new java.util.ArrayList();this.notify = true;', 'comment': '/*** Constructs a title.* <P>* This class defines constants for the valid position and alignment values---an* IllegalArgumentException will be thrown if invalid values are passed to this constructor.* @param position The relative position of the title (TOP, BOTTOM, RIGHT and LEFT---or NORTH,*         SOUTH, EAST and WEST if you prefer).* @param horizontalAlignment The horizontal alignment of the title (LEFT, CENTER or RIGHT).* @param verticalAlignment The vertical alignment of the title (TOP, MIDDLE or BOTTOM).* @exception IllegalArgumentException If an invalid location or alignment value is passed.*/', 'coherence': 1}, {'code': 'public HorizontalBarPlot(Axis horizontalAxis, Axis verticalAxis) {this(horizontalAxis,verticalAxis,Plot.DEFAULT_INSETS,BarPlot.DEFAULT_INTRO_GAP_PERCENT,BarPlot.DEFAULT_TRAIL_GAP_PERCENT,BarPlot.DEFAULT_CATEGORY_GAPS_PERCENT,BarPlot.DEFAULT_ITEM_GAPS_PERCENT,null);this.renderer = new HorizontalBarRenderer();', 'comment': '/*** Constructs a horizontal bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumRangeValue(data);}else return null;', 'comment': '/*** Returns the maximum value in the range, since this is plotted against the horizontal axis for* a HorizontalBarPlot.*/', 'coherence': 1}, {'code': 'public void setInsets(Insets insets) {if (!this.insets.equals(insets)) {this.insets = insets;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the insets for the title, and notifies registered listeners of the change.* @param insets The new insets value;*/', 'coherence': 1}, {'code': 'public java.util.List getCategories() {return getDataset().getCategories();', 'comment': '/*** A convenience method that returns a list of the categories in the data source.*/', 'coherence': 1}, {'code': 'public Insets getInsets() {return this.insets;', 'comment': '/*** Returns the insets (the blank space around the edges) for this title.*/', 'coherence': 1}, {'code': 'public void setNotify(boolean flag) {this.notify = flag;', 'comment': '/*** Sets the flag that indicates whether or not the notification mechanism is enabled.  There are* certain situations (such as cloning) where you want to turn notification off temporarily.* @param flag A boolean that indicates whether or not the notification mechanism is enabled;*/', 'coherence': 1}, {'code': 'double calculateBarWidth(Rectangle2D plotArea) {CategoryDataset data = getDataset();// series, category and bar countsint categoryCount = data.getCategoryCount();int seriesCount = data.getSeriesCount();int barCount = renderer.barWidthsPerCategory(data)*categoryCount;// calculate the plot height (bars are horizontal) less whitespacedouble usable = plotArea.getHeight() *(1.0 - introGapPercent - trailGapPercent - categoryGapsPercent);if (renderer.barWidthsPerCategory(data)>1) {//    usable = usable - ((seriesCount-1) * categoryCount * seriesGap);}// and thus the width of the barsreturn usable/barCount;', 'comment': '/*** Returns the width of each bar in the chart.* @param plotArea The area within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public void removeChangeListener(TitleChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Unregisters an object for notification of changes to the chart title.* @param listener The object that is being unregistered;*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a CategoryDataset.*/', 'coherence': 1}, {'code': 'protected AbstractTitle(int position, int horizontalAlignment, int verticalAlignment) {this(position,horizontalAlignment, verticalAlignment,AbstractTitle.DEFAULT_INSETS);', 'comment': '/*** Constructs a title.* @param position The relative position of the title (TOP, BOTTOM, RIGHT and LEFT---or NORTH,*         SOUTH, EAST and WEST if you prefer);* @param horizontalAlignment The horizontal alignment of the title (LEFT, CENTER or RIGHT);* @param verticalAlignment The vertical alignment of the title (TOP, MIDDLE or BOTTOM);* @exception IllegalArgumentException If an invalid location or alignment value is passed;*/', 'coherence': 1}, {'code': 'public HorizontalBarPlot(Axis horizontalAxis, Axis verticalAxis,Insets insets,double introGapPercent, double trailGapPercent,double categoryGapPercent, double itemGapPercent,CategoryToolTipGenerator toolTipGenerator) {super(horizontalAxis, verticalAxis,insets,introGapPercent, trailGapPercent, categoryGapPercent, itemGapPercent,toolTipGenerator);this.renderer = new HorizontalBarRenderer();', 'comment': '/*** Constructs a horizontal bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param introGapPercent The gap before the first bar in the plot.* @param trailGapPercent The gap after the last bar in the plot.* @param categoryGapPercent The gap between the last bar in one category and the first bar in*               the next category.* @param itemGapPercent The gap between bars within the same category.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Horizontal Bar Plot";', 'comment': '/*** Returns a short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public void addChangeListener(TitleChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the title.* @param listener The object that is being registered;*/', 'coherence': 1}, {'code': 'public CategoryAxis getCategoryAxis() {return (CategoryAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* CategoryAxis.*/', 'coherence': 1}, {'code': 'public boolean getNotify() {return this.notify;', 'comment': '/*** Returns the flag that indicates whether or not the notification mechanism is enabled.* @return A boolean that indicates whether or not the notification mechanism is enabled;*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis;*/', 'coherence': 1}, {'code': 'public void setPosition(int position) {if (this.position!=position) {// check that the position is validthis.position = position;notifyListeners(new TitleChangeEvent(this));', 'comment': '/*** Sets the position for the title.* @param position The relative position of the title (use one of the constants TOP, BOTTOM,*         RIGHT and LEFT, or the equivalent NORTH, SOUTH, EAST and WEST);*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setHorizontalAxis(axis);', 'comment': "/*** Sets the horizontal axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param axis The new horizontal axis;*/", 'coherence': 1}, {'code': 'public int getPosition() {return this.position;', 'comment': '/*** Returns the relative position of the title---represented by one of four integer constants* defined in this class: TOP, BOTTOM, RIGHT or LEFT (or the equivalent NORTH, SOUTH, EAST and* WEST).* @return The title position;*/', 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis vAxis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setVerticalAxis(vAxis);', 'comment': "/*** Sets the vertical axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param vAxis The new vertical axis;*/", 'coherence': 1}, {'code': 'protected void notifyListeners(TitleChangeEvent event) {if (this.notify) {java.util.Iterator iterator = listeners.iterator();while (iterator.hasNext()) {TitleChangeListener listener = (TitleChangeListener)iterator.next();listener.titleChanged(event);', 'comment': '/*** Notifies all registered listeners that the chart title has changed in some way.* @param event An object that contains information about the change to the title;*/', 'coherence': 1}, {'code': 'public Object clone() {AbstractTitle duplicate = null;try {duplicate = (AbstractTitle)(super.clone());}catch (CloneNotSupportedException e) {// this should never happen because Cloneable is implementedthrow new RuntimeException("AbstractTitle.clone()");}duplicate.setNotify(false);duplicate.setInsets((Insets)this.getInsets().clone());duplicate.setNotify(true);return duplicate;', 'comment': '/*** Returns a clone of the title.* <P>* One situation when this is useful is when editing the title properties - you can edit a* clone, and then it is easier to cancel the changes if necessary.* @return A clone of the title.**/', 'coherence': 1}, {'code': 'public int getHorizontalAlignment() {return this.horizontalAlignment;', 'comment': '/*** Returns the horizontal alignment of the title.  The constants LEFT, CENTER and RIGHT (defined* in this class) are used.* @return The horizontal alignment of the title (LEFT, CENTER or RIGHT);*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {// set up collection of drawing info...ToolTipsCollection tooltips = null;if (info!=null) {info.setPlotArea(plotArea);tooltips = info.getToolTipsCollection();}// adjust the drawing area for the plot insets (if any)...if (insets!=null) {plotArea.setRect(plotArea.getX()+insets.left,plotArea.getY()+insets.top,plotArea.getWidth()-insets.left-insets.right,plotArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...VerticalAxis vAxis = getVerticalAxis();HorizontalAxis hAxis = getHorizontalAxis();double vAxisAreaWidth = vAxis.reserveWidth(g2, this, plotArea);Rectangle2D hAxisArea = hAxis.reserveAxisArea(g2, this, plotArea, vAxisAreaWidth);// and this the area available for plotting data...Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisAreaWidth,plotArea.getY(),plotArea.getWidth()-vAxisAreaWidth,plotArea.getHeight()-hAxisArea.getHeight());if (info!=null) {info.setDataArea(dataArea);}// draw the background and axes...drawOutlineAndBackground(g2, dataArea);getCategoryAxis().draw(g2, plotArea, dataArea);getRangeAxis().draw(g2, plotArea, dataArea);// now get the data and plot the bars...CategoryDataset data = this.getDataset();if (data!=null) {Shape savedClip = g2.getClip();g2.clip(dataArea);// draw a line at zero...double translatedZero = getRangeAxis().translateValueToJava2D(0.0, dataArea);Line2D baseline = new Line2D.Double(translatedZero, dataArea.getY(),translatedZero, dataArea.getMaxY());g2.setStroke(new BasicStroke());g2.draw(baseline);int seriesCount = data.getSeriesCount();int categoryCount = data.getCategoryCount();int barCount = renderer.barWidthsPerCategory(data);// work out the span dimensions for the categories...double categorySpan = 0.0;double categoryGapSpan = 0.0;if (categoryCount>1) {categorySpan = dataArea.getHeight()*(1-introGapPercent-trailGapPercent-categoryGapsPercent);categoryGapSpan = dataArea.getHeight()*categoryGapsPercent;}else {categorySpan = dataArea.getHeight()*(1-introGapPercent-trailGapPercent);}// work out the item span...double itemSpan = categorySpan;double itemGapSpan = 0.0;if (seriesCount>1) {if (renderer.hasItemGaps()) {itemGapSpan = plotArea.getHeight()*itemGapsPercent;itemSpan = itemSpan - itemGapSpan;}}double itemWidth = itemSpan/(categoryCount*renderer.barWidthsPerCategory(data));int categoryIndex = 0;Iterator iterator = data.getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();for (int series=0; series<seriesCount; series++) {Shape tooltipArea = renderer.drawBar(g2, dataArea, this,this.getRangeAxis(), data, series,category, categoryIndex,translatedZero, itemWidth,categorySpan, categoryGapSpan,itemSpan, itemGapSpan);// collect optional tooltip information...if (tooltips!=null) {if (this.toolTipGenerator==null) {toolTipGenerator = new StandardCategoryToolTipGenerator();}String tip = this.toolTipGenerator.generateToolTip(data, series, category);if (tooltipArea!=null) {tooltips.addToolTip(tip, tooltipArea);}}}categoryIndex++;}// draw vertical crosshair if required...ValueAxis hva = this.getRangeAxis();if (hva.isCrosshairVisible()) {this.drawVerticalLine(g2, dataArea, hva.getCrosshairValue(),hva.getCrosshairStroke(),hva.getCrosshairPaint());}g2.setClip(savedClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* <P>* At your option, you may supply an instance of DrawInfo.  If you do, it will be populated* with information about the drawing, including various plot dimensions and tooltip info.* @param g2 The graphics device.* @param plotArea The area within which the plot should be drawn.* @param info A structure for passing back information about the chart drawing (ignored if*       null).*/', 'coherence': 1}, {'code': 'public Shape drawItem(Graphics2D g2, Rectangle2D dataArea, DrawInfo info,XYPlot plot, ValueAxis horizontalAxis, ValueAxis verticalAxis,XYDataset data, int series, int item,double translatedRangeZero, CrosshairInfo crosshairInfo) {Shape result = null;HighLowDataset highLowData = (HighLowDataset)data;Number x = highLowData.getXValue(series, item);Number yHigh  = highLowData.getHighValue(series, item);Number yLow   = highLowData.getLowValue(series, item);Number yOpen  = highLowData.getOpenValue(series, item);Number yClose = highLowData.getCloseValue(series, item);double xx = horizontalAxis.translateValueToJava2D(x.doubleValue(), dataArea);double yyHigh = verticalAxis.translateValueToJava2D(yHigh.doubleValue(), dataArea);double yyLow = verticalAxis.translateValueToJava2D(yLow.doubleValue(), dataArea);double yyOpen = verticalAxis.translateValueToJava2D(yOpen.doubleValue(), dataArea);double yyClose = verticalAxis.translateValueToJava2D(yClose.doubleValue(), dataArea);Paint p = plot.getSeriesPaint(series);Stroke s = plot.getSeriesStroke(series);g2.setPaint(p);g2.setStroke(s);// draw the upper shadowif ((yyHigh<yyOpen) && (yyHigh<yyClose)) {g2.draw(new Line2D.Double(xx, yyHigh, xx, Math.min(yyOpen, yyClose)));}// draw the lower shadowif ((yyLow>yyOpen) && (yyLow>yyClose)) {g2.draw(new Line2D.Double(xx, yyLow, xx, Math.max(yyOpen, yyClose)));}// draw the bodyShape body = null;if (yyOpen<yyClose) {body = new Rectangle2D.Double(xx-candleWidth/2, yyOpen,candleWidth, yyClose-yyOpen);g2.fill(body);}else {body = new Rectangle2D.Double(xx-candleWidth/2, yyClose,candleWidth, yyOpen-yyClose);g2.draw(body);}result = body;return result;', 'comment': "/*** Draws the visual representation of a single data item.* @param g2 The graphics device.* @param dataArea The area within which the plot is being drawn.* @param info Collects info about the drawing.* @param plot The plot (can be used to obtain standard color information etc).* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param data The dataset.* @param series The series index.* @param item The item index.* @param translatedRangeZero Zero on the range axis (supplied so that, if it is required, it*    doesn't have to be calculated repeatedly).*/", 'coherence': 1}, {'code': 'public CandlestickRenderer(double candleWidth) {this.candleWidth = candleWidth;', 'comment': '/*** Creates a new renderer.*/', 'coherence': 1}, {'code': 'public void handleClick(int x, int y, DrawInfo info) {// set the anchor value for the horizontal axis...ValueAxis hva = this.getRangeAxis();double hvalue = hva.translateJava2DtoValue((float)x, info.getDataArea());hva.setAnchorValue(hvalue);hva.setCrosshairValue(hvalue);', 'comment': "/*** Handles a 'click' on the plot by updating the anchor values...*/", 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalCategoryAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'public void setRenderer(HorizontalBarRenderer renderer) {this.renderer = renderer;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the renderer for the bar plot.* @param renderer The renderer.*/', 'coherence': 1}, {'code': 'public double getCategoryCoordinate(int category, Rectangle2D area) {// calculate first part of result...double result = area.getY()+(area.getHeight()*introGapPercent);// then add some depending on how many categories...int categoryCount = getDataset().getCategoryCount();if (categoryCount>1) {double categorySpan = area.getHeight()*(1-introGapPercent-trailGapPercent-categoryGapsPercent);double categoryGapSpan = area.getHeight()*categoryGapsPercent;result = result+ (category+0.5)*(categorySpan/categoryCount)+ (category)*(categoryGapSpan/(categoryCount-1));}else {result = result+ (category+0.5)*area.getHeight()*(1-introGapPercent-trailGapPercent);}return result;', 'comment': '/*** Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.* @param category The index of the category of interest (first category index = 0).* @param area The region within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public ValueAxis getRangeAxis() {return (ValueAxis)horizontalAxis;', 'comment': '/*** Returns the range axis for the plot.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the horizontal axis for* a HorizontalBarPlot.*/', 'coherence': 1}, {'code': 'public static void saveChartAsPNG(File file, JFreeChart chart, int width, int height)throws IOException {DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));writeChartAsPNG(out, chart, width, height);out.close();', 'comment': '/*** Saves the chart as a PNG format image file.* @param chart The chart.* @param width The image width.* @param height The image height.* @param file The file.*/', 'coherence': 1}, {'code': 'public static void writeChartAsJPEG(OutputStream out, JFreeChart chart, int width, int height)throws IOException {BufferedImage image = chart.createBufferedImage(width, height);JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(image);param.setQuality(1.0f, true);encoder.encode(image, param);', 'comment': '/*** Writes the chart to the output stream in JPEG format.* @param out The output stream.* @param chart The chart.* @param width The image width.* @param height The image height.*/', 'coherence': 1}, {'code': 'public static void writeChartAsPNG(OutputStream out, JFreeChart chart, int width, int height)throws IOException {BufferedImage chartImage = chart.createBufferedImage(width, height);PngEncoder encoder = new PngEncoder(chartImage, false, 0, 9);byte[] pngData = encoder.pngEncode();out.write(pngData);', 'comment': '/*** Writes the chart to the output stream in PNG format.* @param out The output stream.* @param chart The chart.* @param width The image width.* @param height The image height.*/', 'coherence': 1}, {'code': 'public int getCount() {return this.count;', 'comment': '/*** Returns the number of units.*/', 'coherence': 1}, {'code': 'public static JFreeChart createVerticalBarChart3D(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);ValueAxis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);// the insets here are a workaround for the fact that the plot area is no longer a// rectangle, so it is overlapping the title.  To be fixed...plot.setInsets(new Insets(20, 2, 2, 2));plot.setRenderer(new VerticalBarRenderer3D());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a vertical 3D-effect bar chart with default settings.* <P>* Added by Serge V. Grachov.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public int getField() {return this.field;', 'comment': '/*** Returns the field used for this DateUnit.*/', 'coherence': 1}, {'code': 'public DateUnit(int field, int count) {this.field = field;this.count = count;', 'comment': '/*** Builds a DateUnit.*/', 'coherence': 1}, {'code': 'public static JFreeChart createLineChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);Plot plot = new LinePlot(categoryAxis, valueAxis);JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a line chart with default settings.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createTimeSeriesChart(String title, String timeAxisLabel,String valueAxisLabel, XYDataset data,boolean legend) {ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);//timeAxis.setCrosshairLockedOnData(false);NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);valueAxis.setAutoRangeIncludesZero(false);  // override default//valueAxis.setCrosshairLockedOnData(false);XYPlot plot = new XYPlot(timeAxis, valueAxis);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates and returns a time series chart.  A time series chart is an XYPlot with a date* axis (horizontal) and a number axis (vertical), and each data item is connected with a line.* <P>* Note that you can supply a TimeSeriesDataset to this method as it is a subclass of* XYDataset.* @param title The chart title.* @param timeAxisLabel A label for the time axis.* @param valueAxisLabel A label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createSignalChart(String title, String timeAxisLabel,String valueAxisLabel, SignalsDataset data,boolean legend) {ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);XYPlot plot = new XYPlot(timeAxis, valueAxis);plot.setXYItemRenderer(new SignalRenderer());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates and returns a default instance of a signal chart based on the specified dataset.* <P>* Added by David Gilbert.* @param title The chart title.* @param timeAxisLabel A label for the time axis.* @param valueAxisLabel A label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createHighLowChart(String title, String timeAxisLabel,String valueAxisLabel, HighLowDataset data,boolean legend) {ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);//HighLowPlot plot = new HighLowPlot(timeAxis, valueAxis);XYPlot plot = new XYPlot(timeAxis, valueAxis);plot.setXYItemRenderer(new HighLowRenderer());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates and returns a default instance of a high-low-open-close chart based on the specified* dataset.* <P>* Added by Andrzej Porebski.  Amended by David Gilbert.* @param title The chart title.* @param timeAxisLabel A label for the time axis.* @param valueAxisLabel A label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createVerticalBarChart(String title,String categoryAxisLabel, String valueAxisLabel,CategoryDataset data, boolean legend) {CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);ValueAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);Plot plot = new VerticalBarPlot(categoryAxis, valueAxis);JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a vertical bar chart with default settings.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createHorizontalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {Axis categoryAxis = new VerticalCategoryAxis(categoryAxisLabel);Axis valueAxis = new HorizontalNumberAxis(valueAxisLabel);Plot plot = new HorizontalBarPlot(valueAxis, categoryAxis);JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a horizontal bar chart with default settings.* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createStackedVerticalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);ValueAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);VerticalBarPlot plot = new VerticalBarPlot(categoryAxis, valueAxis);plot.setRenderer(new StackedVerticalBarRenderer());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a stacked vertical bar chart with default settings.  This is still experimental at* this point!* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createStackedHorizontalBarChart(String title, String categoryAxisLabel,String valueAxisLabel, CategoryDataset data,boolean legend) {Axis categoryAxis = new VerticalCategoryAxis(categoryAxisLabel);Axis valueAxis = new HorizontalNumberAxis(valueAxisLabel);HorizontalBarPlot plot = new HorizontalBarPlot(valueAxis, categoryAxis);plot.setRenderer(new StackedHorizontalBarRenderer());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a stacked horizontal bar chart with default settings.  This is still experimental at* this point!* @param title The chart title.* @param categoryAxisLabel The label for the category axis.* @param valueAxisLabel The label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createScatterPlot(String title, String xAxisLabel, String yAxisLabel,XYDataset data, boolean legend) {ValueAxis xAxis = new HorizontalNumberAxis(xAxisLabel);ValueAxis yAxis = new VerticalNumberAxis(yAxisLabel);XYPlot plot = new XYPlot(xAxis, yAxis);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES));JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a scatter plot with default settings.* @param title The chart title.* @param xAxisLabel A label for the X-axis.* @param yAxisLabel A label for the Y-axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static JFreeChart createVerticalXYBarChart(String title, String xAxisLabel,String yAxisLabel, IntervalXYDataset data,boolean legend) {HorizontalDateAxis timeAxis = new HorizontalDateAxis(xAxisLabel);ValueAxis valueAxis = new VerticalNumberAxis(yAxisLabel);//Plot plot = new VerticalXYBarPlot(timeAxis, valueAxis, new Insets(0,0,0,0), Color.white,//                  new BasicStroke(), Color.gray);XYPlot plot = new XYPlot(timeAxis, valueAxis, new Insets(0,0,0,0), Color.white,new BasicStroke(), Color.gray);plot.setXYItemRenderer(new VerticalXYBarRenderer());JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates and returns a default instance of a VerticalXYBarChart based on the specified* dataset.* @param title The chart title.* @param xAxisLabel A label for the X-axis.* @param yAxisLabel A label for the Y-axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public void setMinimumDate(Date minimumDate) {this.minimumDate = minimumDate;double millis = (double)minimumDate.getTime();this.setMinimumAxisValue(millis);', 'comment': '/*** Sets the minimum date visible on the axis.* @param minimumDate The new minimum date.*/', 'coherence': 1}, {'code': 'public static CombinedChart createCombinableTimeSeriesChart(ValueAxis horizontal,ValueAxis vertical, Dataset data) {XYPlot plot = new XYPlot(horizontal, vertical);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));return createCombinableChart(data, plot);', 'comment': '/*** Creates and returns a combinable time series chart.  A time series chart is an XYPlot with a* date axis (horizontal) and a number axis (vertical), and each data item is connected with a* line.* <P>* @author Bill Kelemen.* @param horizontal The horizontal axis* @param vertical The vertical axis* @param data The dataset for the chart.*/', 'coherence': 1}, {'code': 'public Date calculateHighestVisibleTickValue(DateUnit unit) {return this.previousStandardDate(maximumDate, unit.getField(), unit.getCount());', 'comment': '/*** Calculates the value of the highest visible tick on the axis.* @return The value of the highest visible tick on the axis.*/', 'coherence': 1}, {'code': 'public static JFreeChart createXYChart(String title, String xAxisLabel, String yAxisLabel,XYDataset data, boolean legend) {NumberAxis xAxis = new HorizontalNumberAxis(xAxisLabel);xAxis.setAutoRangeIncludesZero(false);NumberAxis yAxis = new VerticalNumberAxis(yAxisLabel);XYPlot plot = new XYPlot(xAxis, yAxis);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates an XY (line) plot with default settings.* @param title The chart title.* @param xAxisLabel A label for the X-axis.* @param yAxisLabel A label for the Y-axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'protected DateAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible,Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, Date minimumDate, Date maximumDate,boolean autoTickUnitSelection, DateUnit tickUnit,SimpleDateFormat tickLabelFormatter,boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,Date crosshairDate, Stroke crosshairStroke, Paint crosshairPaint) {super(label, labelFont, labelPaint, labelInsets,tickLabelsVisible, tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible, tickMarkStroke, autoRange,autoTickUnitSelection, gridLinesVisible, gridStroke, gridPaint,0.0,crosshairStroke, crosshairPaint);this.minimumDate = minimumDate;if (minimumDate!=null) {this.minimumAxisValue = (double)minimumDate.getTime();}this.maximumDate = maximumDate;if (maximumDate!=null) {this.maximumAxisValue = (double)maximumDate.getTime();}this.crosshairDate = crosshairDate;this.tickUnit = tickUnit;this.tickLabelFormatter = tickLabelFormatter;this.anchorValue = (double)this.anchorDate.getTime();', 'comment': '/*** Constructs a date axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param tickLabelsVisible Flag indicating whether or not tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param tickMarksVisible Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis range is automatically adjusted to*          fit the data.* @param minimumDate The earliest date showing on the axis.* @param maximumDate The latest date showing on the axis.* @param autoTickUnitSelection A flag indicating whether or not the tick unit is automatically*                selected.* @param tickUnit The tick unit.* @param gridLinesVisible Flag indicating whether or not grid lines are visible.* @param gridStroke The Stroke used to display grid lines (if visible).* @param gridPaint The Paint used to display grid lines (if visible).*/', 'coherence': 1}, {'code': 'public static CombinedChart createCombinableXYChart(ValueAxis horizontal, ValueAxis vertical,Dataset data) {XYPlot plot = new XYPlot(horizontal, vertical);plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));return createCombinableChart(data, plot);', 'comment': '/*** Creates a combinable XY (line) plot with default settings.* @author Bill Kelemen.* @param horizontal The horizontal axis* @param vertical The vertical axis* @param data The dataset for the chart.*/', 'coherence': 1}, {'code': 'public static JFreeChart createCandlestickChart(String title, String timeAxisLabel,String valueAxisLabel, HighLowDataset data,boolean legend) {ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);XYPlot plot = new XYPlot(timeAxis, valueAxis);plot.setXYItemRenderer(new CandlestickRenderer(4.0));JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates and returns a default instance of a candlesticks chart based on the specified* dataset.* <P>* Added by David Gilbert.* @param title The chart title.* @param timeAxisLabel A label for the time axis.* @param valueAxisLabel A label for the value axis.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public static CombinedChart createCombinableVerticalXYBarChart(Axis horizontal, Axis vertical,Dataset data) {VerticalXYBarPlot plot = new VerticalXYBarPlot(horizontal, vertical);return createCombinableChart(data, plot);', 'comment': '/*** Creates and returns a default instance of a VerticalXYBar combinable chart based on the* specified dataset.* <P>* @author Bill Kelemen.* @param horizontal The horizontal axis* @param vertical The vertical axis* @param data The dataset for the chart.*/', 'coherence': 1}, {'code': 'public static CombinedChart createCombinableHighLowChart(ValueAxis horizontal,ValueAxis vertical,Dataset data) {XYPlot plot = new XYPlot(horizontal, vertical);plot.setXYItemRenderer(new HighLowRenderer());return createCombinableChart(data, plot);', 'comment': '/*** Creates and returns a default instance of a high-low-open-close combinable chart based on* the specified dataset.* <P>* @author Bill Kelemen.* @param horizontal The horizontal axis* @param vertical The vertical axis* @param data The dataset for the chart.*/', 'coherence': 1}, {'code': 'protected Date previousStandardDate(Date date, int field, int units) {int milliseconds;int seconds;int minutes;int hours;int days;int months;int years;Calendar calendar = Calendar.getInstance();calendar.setTime(date);int current = calendar.get(field);int value = units*(current/units);switch (field) {case(Calendar.MILLISECOND) : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);hours = calendar.get(Calendar.HOUR_OF_DAY);minutes = calendar.get(Calendar.MINUTE);seconds = calendar.get(Calendar.SECOND);calendar.set(years, months, days, hours, minutes, seconds);calendar.set(Calendar.MILLISECOND, value);return calendar.getTime();   }case(Calendar.SECOND)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);hours = calendar.get(Calendar.HOUR_OF_DAY);minutes = calendar.get(Calendar.MINUTE);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, days, hours, minutes, value);return calendar.getTime();}case(Calendar.MINUTE)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);hours = calendar.get(Calendar.HOUR_OF_DAY);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, days, hours, value, 0);return calendar.getTime();}case(Calendar.HOUR_OF_DAY)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);days = calendar.get(Calendar.DATE);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, days, value, 0, 0);return calendar.getTime();}case(Calendar.DATE)    : {years = calendar.get(Calendar.YEAR);months = calendar.get(Calendar.MONTH);calendar.clear(Calendar.MILLISECOND);calendar.set(years, months, value, 0, 0, 0);return calendar.getTime();}case(Calendar.MONTH)     : {years = calendar.get(Calendar.YEAR);calendar.clear(Calendar.MILLISECOND);calendar.set(years, value, 1, 0, 0, 0);return calendar.getTime();}case(Calendar.YEAR)    : {calendar.clear(Calendar.MILLISECOND);calendar.set(value, 0, 1, 0, 0, 0);return calendar.getTime();}default: return null;', 'comment': '/*** Returns the previous "standard" date (based on the specified field and units).*/', 'coherence': 1}, {'code': 'public static JFreeChart createPieChart(String title, PieDataset data, boolean legend) {Plot plot = new PiePlot();JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);return chart;', 'comment': '/*** Creates a pie chart with default settings.* @param title The chart title.* @param data The dataset for the chart.* @param legend A flag specifying whether or not a legend is required.*/', 'coherence': 1}, {'code': 'public void setMaximumDate(Date maximumDate) {this.maximumDate = maximumDate;double millis = (double)maximumDate.getTime();this.setMaximumAxisValue(millis);', 'comment': '/*** Sets the maximum date visible on the axis.* @param maximumDate The new maximum date.*/', 'coherence': 1}, {'code': 'public Date getMinimumDate() {return this.minimumDate;', 'comment': '/*** Returns the earliest date visible on the axis.* @return The earliest date visible on the axis.*/', 'coherence': 1}, {'code': 'public void setCrosshairDate(Date crosshairDate) {this.crosshairDate = crosshairDate;double millis = (double)crosshairDate.getTime();this.setCrosshairValue(millis);', 'comment': '/*** Sets the crosshair date for the axis.* @param maximumDate The new crosshair date (null permitted).*/', 'coherence': 1}, {'code': 'public Date calculateLowestVisibleTickValue(DateUnit unit) {return this.nextStandardDate(minimumDate, unit.getField(), unit.getCount());', 'comment': '/*** Calculates the value of the lowest visible tick on the axis.* @return The value of the lowest visible tick on the axis.*/', 'coherence': 1}, {'code': 'public DateAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true, // tick labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true, // tick marks visibleAxis.DEFAULT_TICK_STROKE,true, // auto rangenull, // minimum datenull, // maximum datetrue, // auto tick unit selectionnew DateUnit(Calendar.DATE, 1),new SimpleDateFormat(),true, // grid lines visibleValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT,DEFAULT_CROSSHAIR_DATE,ValueAxis.DEFAULT_CROSSHAIR_STROKE,ValueAxis.DEFAULT_CROSSHAIR_PAINT);', 'comment': '/*** Constructs a date axis, using default values where necessary.* @param label The axis label.*/', 'coherence': 1}, {'code': 'public Paint getFillPaint() {return fillPaint;', 'comment': '/*** Returns the Paint object used to fill the bar.* @return The Paint used to fill the bar.*/', 'coherence': 1}, {'code': 'public void setTickUnit(DateUnit unit) {this.tickUnit = unit;this.notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the tick unit for the axis.* @param unit The new date unit.*/', 'coherence': 1}, {'code': 'public Bar(double x, double y, double width, double height,Stroke outlineStroke, Paint outlinePaint, Paint fillPaint){this.area = new Rectangle2D.Double(x, y, width, height);this.outlineStroke = outlineStroke;this.outlinePaint = outlinePaint;this.fillPaint = fillPaint;', 'comment': '/*** Full constructor: returns a new Bar object with attributes as defined by the caller.* @param x The x-coordinate of the bar;* @param y The y-coordinate of the bar;* @param width The width of the bar;* @param height The height of the bar;* @param outlineStroke The Stroke used to draw the outline of the bar;* @param outlinePaint The Paint used to draw the outline of the bar;* @param fillPaint The Paint used to draw the interior of the bar.*/', 'coherence': 1}, {'code': 'public Date getAnchorDate() {return this.anchorDate;', 'comment': '/*** Returns the anchor date for the axis.* @return The anchor date for the axis (possibly null).*/', 'coherence': 1}, {'code': 'public Bar(double x, double y, double width, double height) {this(x, y, width, height, new BasicStroke(), Color.gray, Color.green);', 'comment': '/*** Standard constructor: returns a new Bar object, with some default attributes.* @param x The x-coordinate of the bar;* @param y The y-coordinate of the bar;* @param width The width of the bar;* @param height The height of the bar;*/', 'coherence': 1}, {'code': 'protected Date nextStandardDate(Date date, int field, int units) {Date previous = previousStandardDate(date, field, units);Calendar calendar = Calendar.getInstance();calendar.setTime(previous);calendar.add(field, units);return calendar.getTime();', 'comment': '/*** Returns the first "standard" date (based on the specified field and units).*/', 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return outlinePaint;', 'comment': '/*** Returns the Paint object used to draw the outline of the bar.* @return The Paint used to draw the outline of the bar.*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return outlineStroke;', 'comment': '/*** Returns the Stroke object used to draw the outline of the bar.* @return The Stroke used to draw the outline of the bar.*/', 'coherence': 1}, {'code': 'protected int findAxisMagnitudeIndex() {long axisMagnitude = this.maximumDate.getTime()-this.minimumDate.getTime();int index = 0;while(index<standardTickUnitMagnitudes.length-1) {if (axisMagnitude<standardTickUnitMagnitudes[index]) break;index++;}return Math.max(0, index-1);', 'comment': '/*** Returns the index of the largest tick unit that will fit within the axis range.*/', 'coherence': 1}, {'code': 'public Rectangle2D getArea() {return area;', 'comment': '/*** Returns the rectangle that is the outline of the bar.* @return The outline of the bar;*/', 'coherence': 1}, {'code': 'public SimpleDateFormat getTickLabelFormatter() {return tickLabelFormatter;', 'comment': '/*** Returns the formatter for the tick labels.* @return The formatter for the tick labels.*/', 'coherence': 1}, {'code': 'public Date getCrosshairDate() {return this.crosshairDate;', 'comment': '/*** Returns the crosshair date for the axis.* @return The crosshair date for the axis (possibly null).*/', 'coherence': 1}, {'code': 'public DateUnit getTickUnit() {return tickUnit;', 'comment': '/*** Returns the tick unit for the axis.* @return The tick unit for the axis.*/', 'coherence': 1}, {'code': 'public Date getMaximumDate() {return this.maximumDate;', 'comment': '/*** Returns the latest date visible on the axis.* @return The latest date visible on the axis.*/', 'coherence': 1}, {'code': 'protected CategoryAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true, // category labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,false, // tick marks visible (not supported anyway)Axis.DEFAULT_TICK_STROKE);', 'comment': '/*** Constructs a category axis, using default values where necessary.* @param label The axis label.*/', 'coherence': 1}, {'code': 'public void setAnchorDate(Date anchorDate) {this.anchorDate = anchorDate;double millis = (double)anchorDate.getTime();super.setAnchorValue(millis);', 'comment': '/*** Sets the anchor date for the axis.* @param anchorDate The new anchor date (null permitted).*/', 'coherence': 1}, {'code': 'protected CategoryAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean categoryLabelsVisible,Font categoryLabelFont, Paint categoryLabelPaint,Insets categoryLabelInsets,boolean tickMarksVisible,Stroke tickMarkStroke) {super(label,labelFont, labelPaint, labelInsets,categoryLabelsVisible,categoryLabelFont, categoryLabelPaint, categoryLabelInsets,tickMarksVisible,tickMarkStroke);', 'comment': '/*** Constructs a category axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param categoryLabelsVisible Flag indicating whether or not category labels are visible.* @param categoryLabelFont The font used to display category (tick) labels.* @param categoryLabelPaint The paint used to draw category (tick) labels.* @param categoryLabelInsets The insets for the category labels.* @param tickMarksVisible Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public DateTitle(int dateStyle) {this(dateStyle, Locale.getDefault(), new Font("Dialog", Font.PLAIN, 12), Color.black);', 'comment': '/*** Constructs a new DateTitle with the specified style.*/', 'coherence': 1}, {'code': 'public DateTitle() {this(DateFormat.LONG);', 'comment': '/*** Constructs a new DateTitle that displays the current date in the default* (LONG) format for the locale, positioned to the bottom right of the chart.* <P>* The color will be black in 12 point, plain Helvetica font (maps to Arial on Win32 systems* without Helvetica).*/', 'coherence': 1}, {'code': 'public DateTitle(int dateStyle, Locale locale, Font font, Paint paint, int position,int horizontalAlignment, int verticalAlignment, Insets insets) {super(DateFormat.getDateInstance(dateStyle, locale).format(new Date()),font, paint, position, horizontalAlignment, verticalAlignment, insets);', 'comment': '/*** Constructs a new DateTitle with the specified attributes.* @param location the relative location of this title (use constants in AbstractTitle).* @param alignment the text alignment of this title (use constants in AbstractTitle).* @param dateStyle the Date style to use (SHORT, MEDIUM, LONG, or FULL constants from*          java.text.DateFormat).* @param locale the locale to use to format this date (if you are unsure what to use here, use*         Locale.getDefault() for your default locale).* @param font the font used to display the date.* @param paint the paint used to display the date.* @param insets the blank space around the outside of the title.*/', 'coherence': 1}, {'code': 'public DateTitle(int dateStyle, Locale locale, Font font, Paint paint) {this(dateStyle, locale, font, paint,AbstractTitle.BOTTOM, AbstractTitle.RIGHT, AbstractTitle.MIDDLE,new Insets(2, 2, 2, 2));', 'comment': '/*** Constructs a new DateTitle object with the specified attributes and the following defaults:* location = BOTTOM, alignment = RIGHT, insets = new Insets(2, 2, 2, 2).* @param dateStyle the Date style to use (SHORT, MEDIUM, LONG, or FULL constants from*          java.util.DateFormat);* @param locale the locale to use to format this date (if you are unsure what to use here, use*         Locale.getDefault() for your default locale);* @param font the font used to display the date;* @param paint the paint used to display the date;*/', 'coherence': 1}, {'code': 'public void setTickLabelFont(Font font) {// check arguments...if (font==null) {throw new IllegalArgumentException("Axis.setTickLabelFont(...): null not permitted.");}// apply change if necessary...if (!this.tickLabelFont.equals(font)) {this.tickLabelFont = font;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the font for the tick labels.* <P>* Registered listeners are notified of a general change to the axis.* @param font The new tick label font.*/', 'coherence': 1}, {'code': 'protected Axis(String label) {this(label,DEFAULT_AXIS_LABEL_FONT,DEFAULT_AXIS_LABEL_PAINT,DEFAULT_AXIS_LABEL_INSETS,true,  // tick labels visibleDEFAULT_TICK_LABEL_FONT,DEFAULT_TICK_LABEL_PAINT,DEFAULT_TICK_LABEL_INSETS,true,  // tick marks visibleDEFAULT_TICK_STROKE);', 'comment': '/*** Constructs an axis, using default values where necessary.* @param label The axis label (null permitted).*/', 'coherence': 1}, {'code': 'public Insets getLabelInsets() {return this.labelInsets;', 'comment': '/*** Returns the insets for the label (that is, the amount of blank space that should be left* around the label).*/', 'coherence': 1}, {'code': 'protected void notifyListeners(AxisChangeEvent event) {java.util.Iterator iterator = listeners.iterator();while (iterator.hasNext()) {AxisChangeListener listener = (AxisChangeListener)iterator.next();listener.axisChanged(event);', 'comment': '/*** Notifies all registered listeners that the axis has changed.  The AxisChangeEvent provides* information about the change.* @param event Information about the change to the axis.*/', 'coherence': 1}, {'code': 'public Paint getLabelPaint() {return this.labelPaint;', 'comment': '/*** Returns the color/shade used to draw the axis label.* @return The color/shade used to draw the axis label.*/', 'coherence': 1}, {'code': 'public void setLabel(String label) {String existing = this.label;if (existing!=null) {if (!existing.equals(label)) {this.label = label;notifyListeners(new AxisChangeEvent(this));}}else {if (label!=null) {this.label = label;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the label for the axis.* <P>* Registered listeners are notified of a general change to the axis.* @param label The new label for the axis (null permitted).*/', 'coherence': 1}, {'code': 'public Font getTickLabelFont() {return tickLabelFont;', 'comment': '/*** Returns the font used for the tick labels (if showing).* @return The font used for the tick labels.*/', 'coherence': 1}, {'code': 'public void setTickMarksVisible(boolean flag) {if (flag!=tickMarksVisible) {tickMarksVisible = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that indicates whether or not the tick marks are showing.* <P>* Registered listeners are notified of a general change to the axis.* @param flag The flag.*/', 'coherence': 1}, {'code': 'public void setTickLabelPaint(Paint paint) {// check arguments...if (paint==null) {throw new IllegalArgumentException("Axis.setTickLabelPaint(...): null not permitted.");}// make the change (if necessary)...if (!this.tickLabelPaint.equals(paint)) {this.tickLabelPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the color/shade used to draw tick labels (if they are showing).* <P>* Registered listeners are notified of a general change to the axis.* @param paint The new color/shade.*/', 'coherence': 1}, {'code': 'public void setLabelFont(Font font) {// check arguments...if (font==null) {throw new IllegalArgumentException("Axis.setLabelFont(...): null not permitted.");}// make the change (if necessary)...if (!this.labelFont.equals(font)) {this.labelFont = font;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the font for the axis label.* <P>* Registered listeners are notified of a general change to the axis.* @param font The new label font.*/', 'coherence': 1}, {'code': 'public boolean isTickLabelsVisible() {return tickLabelsVisible;', 'comment': '/*** Returns a flag indicating whether or not the tick labels are visible.* @return A flag indicating whether or not the tick labels are visible.*/', 'coherence': 1}, {'code': 'public boolean isTickMarksVisible() {return tickMarksVisible;', 'comment': '/*** Returns the flag that indicates whether or not the tick marks are showing.* @return The flag that indicates whether or not the tick marks are showing.*/', 'coherence': 1}, {'code': 'public Insets getTickLabelInsets() {return this.tickLabelInsets;', 'comment': '/*** Returns the insets for the tick labels.* @return The insets for the tick labels.*/', 'coherence': 1}, {'code': 'protected Axis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible,Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean tickMarkVisible, Stroke tickMarkStroke) {this.label = label;this.labelFont = labelFont;this.labelPaint = labelPaint;this.labelInsets = labelInsets;this.tickLabelsVisible = tickLabelsVisible;this.tickLabelFont = tickLabelFont;this.tickLabelPaint = tickLabelPaint;this.tickLabelInsets = tickLabelInsets;this.tickMarksVisible = tickMarksVisible;this.tickMarkStroke = tickMarkStroke;this.ticks = new java.util.ArrayList();this.listeners = new java.util.ArrayList();', 'comment': '/*** Constructs an axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param tickMarksVisible Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public void addChangeListener(AxisChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the axis.* @param listener The object that is being registered.*/', 'coherence': 1}, {'code': 'protected void drawVerticalString(String text, Graphics2D g2, float x, float y) {AffineTransform saved = g2.getTransform();// apply a 90 degree rotationAffineTransform rotate = AffineTransform.getRotateInstance(-Math.PI/2, x, y);g2.transform(rotate);g2.drawString(text, x, y);g2.setTransform(saved);', 'comment': '/*** A utility method for drawing text vertically.* @param text The text.* @param g2 The graphics device.* @param x The x-coordinate.* @param y The y-coordinate.*/', 'coherence': 1}, {'code': 'public void setTickMarkStroke(Stroke stroke) {// check arguments...if (stroke==null) {throw new IllegalArgumentException("Axis.setTickMarkStroke(...): null not permitted.");}// make the change (if necessary)...if (!this.tickMarkStroke.equals(stroke)) {this.tickMarkStroke = stroke;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the pen/brush used to draw tick marks (if they are showing).* <P>* Registered listeners are notified of a general change to the axis.* @param stroke The new pen/brush (null not permitted).*/', 'coherence': 1}, {'code': 'public void setLabelInsets(Insets insets) {if (!insets.equals(this.labelInsets)) {this.labelInsets = insets;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the insets for the axis label, and notifies registered listeners that the axis has been* modified.* @param insets The new label insets;*/', 'coherence': 1}, {'code': 'public void setLabelPaint(Paint paint) {// check arguments...if (paint==null) {throw new IllegalArgumentException("Axis.setLabelPaint(...): null not permitted.");}// make the change (if necessary)...if (!this.labelPaint.equals(paint)) {this.labelPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the color/shade used to draw the axis label.* <P>* Registered listeners are notified of a general change to the axis.* @param paint The new color/shade for the axis label.*/', 'coherence': 1}, {'code': 'public void setTickLabelsVisible(boolean flag) {if (flag!=tickLabelsVisible) {tickLabelsVisible = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that determines whether or not the tick labels are visible.* <P>* Registered listeners are notified of a general change to the axis.* @param flag The flag.*/', 'coherence': 1}, {'code': 'public void setPlot(Plot plot) throws PlotNotCompatibleException {if (this.isCompatiblePlot(plot) || plot == null) {this.plot = plot;}else throw new PlotNotCompatibleException("Axis.setPlot(...): "+"plot not compatible with axis.");', 'comment': "/*** Sets a reference to the plot that the axis is assigned to.* <P>* This method is called by Plot in the setHorizontalAxis() and setVerticalAxis() methods.* You shouldn't need to call the method yourself.* @param plot The plot that the axis belongs to.*/", 'coherence': 1}, {'code': 'public String getLabel() {return label;', 'comment': '/*** Returns the label for the axis.* @return The label for the axis (null possible).*/', 'coherence': 1}, {'code': 'protected double getMaxTickLabelWidth(Graphics2D g2, Rectangle2D plotArea) {double maxWidth = 0.0;Font font = getTickLabelFont();FontRenderContext frc = g2.getFontRenderContext();Iterator iterator = this.ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();Rectangle2D labelBounds = font.getStringBounds(tick.getText(), frc);if (labelBounds.getWidth()>maxWidth) {maxWidth = labelBounds.getWidth();}}return maxWidth;', 'comment': '/*** Returns the maximum width of the ticks in the working list (that is set up by* refreshTicks()).* @param g2 The graphics device.* @param plotArea The area within which the plot is to be drawn.*/', 'coherence': 1}, {'code': 'public void removeChangeListener(AxisChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Deregisters an object for notification of changes to the axis.* @param listener The object to deregister.*/', 'coherence': 1}, {'code': 'public Plot getPlot() {return plot;', 'comment': '/*** Returns the plot that the axis is assigned to.* <P>* This method will return null if the axis is not currently assigned to a plot.* @return The plot that the axis is assigned to.*/', 'coherence': 1}, {'code': 'public Stroke getTickMarkStroke() {return tickMarkStroke;', 'comment': '/*** Returns the pen/brush used to draw tick marks (if they are showing).* @return The pen/brush used to draw tick marks.*/', 'coherence': 1}, {'code': 'public void setTickLabelInsets(Insets insets) {// check arguments...if (insets==null) {throw new IllegalArgumentException("Axis.setTickLabelInsets(...): null not permitted.");}// apply change if necessary...if (!this.tickLabelInsets.equals(insets)) {this.tickLabelInsets = insets;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the insets for the tick labels, and notifies registered listeners that the axis has* been modified.* @param insets The new tick label insets.*/', 'coherence': 1}, {'code': 'public Font getLabelFont() {return labelFont;', 'comment': '/*** Returns the font for the axis label.* @return The font for the axis label.*/', 'coherence': 1}, {'code': 'public Paint getTickLabelPaint() {return this.tickLabelPaint;', 'comment': '/*** Returns the color/shade used for the tick labels.* @return The color/shade used for the tick labels.*/', 'coherence': 1}, {'code': 'public double getItemGapsPercent() {return itemGapsPercent;', 'comment': '/*** Returns the percentage of the drawing space that is allocated to providing gaps between the* items in a category.*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) {super.setHorizontalAxis(axis);', 'comment': '/*** Sets the horizontal axis for the plot.* @param axis The new axis.*/', 'coherence': 1}, {'code': 'protected BarPlot(Axis horizontalAxis, Axis verticalAxis,Insets insets,double introGapPercent, double trailGapPercent,double categoryGapsPercent, double itemGapsPercent,CategoryToolTipGenerator toolTipGenerator) {super(horizontalAxis, verticalAxis);this.insets = insets;this.introGapPercent = introGapPercent;this.trailGapPercent = trailGapPercent;this.categoryGapsPercent = categoryGapsPercent;this.itemGapsPercent = itemGapsPercent;this.toolTipGenerator = toolTipGenerator;', 'comment': '/*** Constructs a bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param introGapPercent The gap before the first bar in the plot, as a percentage of the*            available drawing space.* @param trailGapPercent The gap after the last bar in the plot, as a percentage of the*            available drawing space.* @param categoryGapsPercent The percentage of drawing space allocated to the gap between the*              last bar in one category and the first bar in the next category.* @param itemGapsPercent The gap between bars within the same category.* @param toolTipGenerator The tool tip generator.*/', 'coherence': 1}, {'code': 'public void setCategoryGapsPercent(double percent) {// check argument...if ((percent<0.0) || (percent>MAX_CATEGORY_GAPS_PERCENT)) {throw new IllegalArgumentException("BarPlot.setCategoryGapsPercent(double): argument "+"outside valid range.");}// make the change...if (this.categoryGapsPercent!=percent) {this.categoryGapsPercent=percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap between the last bar in one category and the first bar in the* next category, and notifies registered listeners that the plot has been modified.* @param percent The new gap value, expressed as a percentage of the width of the plot area*        (0.05 = 5 percent).*/', 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis axis) {super.setVerticalAxis(axis);', 'comment': '/*** Sets the vertical axis for the plot.* @param axis The new axis.*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a* CategoryDataset.*/', 'coherence': 1}, {'code': 'public void setTrailGapPercent(double percent) {// check argument...if ((percent<0.0) || (percent>MAX_TRAIL_GAP_PERCENT)) {throw new IllegalArgumentException("BarPlot.setTrailGapPercent(double): argument "+"outside valid range.");}// make the change...if (this.trailGapPercent!=percent) {trailGapPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap after the last bar on the chart, and notifies registered listeners that the plot* has been modified.* @param percent The new gap value, expressed as a percentage of the width of the plot area*        (0.05 = 5 percent).*/', 'coherence': 1}, {'code': 'public double getTrailGapPercent() {return trailGapPercent;', 'comment': '/*** Returns the gap following the last bar on the chart, as a percentage of the available* drawing space.*/', 'coherence': 1}, {'code': 'public double getIntroGapPercent() {return introGapPercent;', 'comment': '/*** Returns the gap before the first bar on the chart, as a percentage of the available drawing* space (0.05 = 5 percent).*/', 'coherence': 1}, {'code': 'public void setIntroGapPercent(double percent) {// check argument...if ((percent<0.0) || (percent>MAX_INTRO_GAP_PERCENT)) {throw new IllegalArgumentException("BarPlot.setIntroGapPercent(double): argument "+"outside valid range.");}// make the change...if (this.introGapPercent!=percent) {this.introGapPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap before the first bar on the chart, and notifies registered listeners that the* plot has been modified.* @param percent The new gap value, expressed as a percentage of the width of the plot area*        (0.05 = 5 percent).*/', 'coherence': 1}, {'code': 'public void setItemGapsPercent(double percent) {// check argument...if ((percent<0.0) || (percent>MAX_ITEM_GAPS_PERCENT)) {throw new IllegalArgumentException("BarPlot.setItemGapsPercent(double): argument "+"outside valid range.");}// make the change...if (percent!=this.itemGapsPercent) {this.itemGapsPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the gap between one bar and the next within the same category, and notifies registered* listeners that the plot has been modified.* @param percent The new gap value, expressed as a percentage of the width of the plot area*        (0.05 = 5 percent).*/', 'coherence': 1}, {'code': 'protected BarPlot(Axis horizontalAxis, Axis verticalAxis) {this(horizontalAxis, verticalAxis,Plot.DEFAULT_INSETS,DEFAULT_INTRO_GAP_PERCENT,DEFAULT_TRAIL_GAP_PERCENT,DEFAULT_CATEGORY_GAPS_PERCENT,DEFAULT_ITEM_GAPS_PERCENT,null);  // tool tip generator', 'comment': '/*** Constructs a bar plot, using default values where necessary.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public double getCategoryGapsPercent() {return categoryGapsPercent;', 'comment': '/*** Returns the percentage of the drawing space that is allocated to providing gaps between the* categories.*/', 'coherence': 1}, {'code': 'public PeriodMarkerPlot(Axis horizontal, Axis vertical) throws AxisNotCompatibleException,PlotNotCompatibleException {super(horizontal, vertical);', 'comment': '/** Creates new SignalsPlot */', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis){if (axis instanceof VerticalNumberAxis)return true;elsereturn false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.  The vertical axis for this plot must be an instance of* VerticalNumberAxis.* @param axis The vertical axis.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info){if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// we can cast the axes because HiLowPlot enforces support of these interfacesHorizontalAxis ha = getHorizontalAxis();VerticalAxis va = getVerticalAxis();double h = ha.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, h);// compute the plot areaRectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-h);drawOutlineAndBackground(g2, plotArea);// draw the axesthis.horizontalAxis.draw(g2, drawArea, plotArea);this.verticalAxis.draw(g2, drawArea, plotArea);Shape originalClip = g2.getClip();g2.clip(plotArea);//SignalsDataset data = getDataset();XYDataset data = getTempXYDataset();if( data!= null ){int seriesCount = data.getSeriesCount();for(int serie=0; serie<seriesCount; serie++)drawMarkedPeriods(data, serie, g2, plotArea);   // area should be remaining area only}g2.setClip(originalClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {//SignalsDataset data = getDataset();XYDataset data = getTempXYDataset();if( data ==null )return null;long minimum = Long.MAX_VALUE;int seriesCount = data.getSeriesCount();for (int series=0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);for(int itemIndex = 0; itemIndex < itemCount; itemIndex++){Number value = data.getXValue(series, itemIndex); // Adjust with type to make room for the symbolsif (value!=null)minimum = Math.min(minimum, value.longValue());}}return new Long(minimum);', 'comment': '/*** Returns the minimum value in the domain, since this is plotted against the horizontal axis* for a HighLowPlot.*/', 'coherence': 1}, {'code': 'public XYDataset getTempXYDataset() { // Usefull until SignalsDataset is included in jcommon.SubSeriesDatasetreturn (XYDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as an HighLowDataset.*/', 'coherence': 1}, {'code': 'public ValueAxis getHorizontalValueAxis(){return (ValueAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* HorizontalValueAxis.*/', 'coherence': 1}, {'code': "public Number getMaximumVerticalDataValue() {return null; //new Double(Double.NEGATIVE_INFINITY); doesn't work (??)", 'comment': '/*** Returns the maximum value in the range, since this is plotted against the vertical axis for* a HighLowPlot.*/', 'coherence': 1}, {'code': 'public ValueAxis getVerticalValueAxis(){return (ValueAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* VerticalNumberAxis.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Period Marker Plot";', 'comment': '/*** Returns the plot type as a string. This implementation returns "HiLow Plot".*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) {return true;}else if (axis instanceof HorizontalDateAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {//SignalsDataset data = getDataset();XYDataset data = getTempXYDataset();if( data ==null )return null;long maximum = Long.MIN_VALUE;int seriesCount = data.getSeriesCount();for (int series=0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);for(int itemIndex = 0; itemIndex < itemCount; itemIndex++){Number value = data.getXValue(series, itemIndex); // Adjust with type to make room for the symbolsif (value!=null)maximum = Math.max(maximum, value.longValue());}}return new Long(maximum);', 'comment': '/*** Returns the maximum value in the domain, since this is plotted against the horizontal axis* for a HighLowPlot.*/', 'coherence': 1}, {'code': "public Number getMinimumVerticalDataValue() {return new Double(Double.POSITIVE_INFINITY); // null doesn't work (??)", 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* a HighLowPlot.*/', 'coherence': 1}, {'code': 'public LinePlot(Axis horizontalAxis, Axis verticalAxis) {super(horizontalAxis, verticalAxis);this.renderer = new LineAndShapeRenderer(LineAndShapeRenderer.SHAPES_AND_LINES);this.introGapPercent = DEFAULT_INTRO_GAP;this.trailGapPercent = DEFAULT_TRAIL_GAP;', 'comment': '/*** Constructs a line plot.* @param chart The chart that the plot belongs to.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public CategoryAxis getCategoryAxis() {return (CategoryAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* CategoryAxis.*/', 'coherence': 1}, {'code': 'public double getIntroGapPercent() {return this.introGapPercent;', 'comment': '/*** Returns the intro gap.* @return The intro gap as a percentage of the available width.*/', 'coherence': 1}, {'code': 'public double getCategoryCoordinate(int category, Rectangle2D area) {// check arguments...int count = getDataset().getCategoryCount();if ((category<0) || (category>=count)) {throw new IllegalArgumentException("LinePlot.getCategoryCoordinate(...): "+"category outside valid range.");}if (area==null) {throw new IllegalArgumentException("LinePlot.getCategoryCoordinate(...): "+"null area not permitted.");}// calculate result...double result = area.getX() + area.getWidth()/2;if (count>1) {double available = area.getWidth() * (1-introGapPercent-trailGapPercent);result = area.getX()+(introGapPercent*area.getWidth())+(category*1.0/(count-1.0))*available;}return result;', 'comment': '/*** Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.* @param category The category (zero-based index).* @param area The region within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* LinePlot.*/', 'coherence': 1}, {'code': 'public void setIntroGapPercent(double percent) {// check arguments...if ((percent<=0.0) || (percent>MAX_INTRO_GAP)) {throw new IllegalArgumentException("LinePlot.setIntroGapPercent(double): "+"gap percent outside valid range.");}// make the change...if (introGapPercent!=percent) {introGapPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the intro gap.* @param The gap as a percentage of the total width.*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a CategoryDataset.*/', 'coherence': 1}, {'code': 'public void setTrailGapPercent(double percent) {// check arguments...if ((percent<=0.0) || (percent>MAX_TRAIL_GAP)) {throw new IllegalArgumentException("LinePlot.setTrailGapPercent(double): "+"gap percent outside valid range.");}// make the change...if (trailGapPercent!=percent) {trailGapPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the trail gap.* @param The gap as a percentage of the total width.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis getValueAxis() {return (VerticalNumberAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* VerticalNumberAxis.*/', 'coherence': 1}, {'code': 'public double getTrailGapPercent() {return this.introGapPercent;', 'comment': '/*** Returns the trail gap.* @return The trail gap as a percentage of the available width.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof CategoryAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'public java.util.List getCategories() {return getDataset().getCategories();', 'comment': '/*** A convenience method that returns a list of the categories in the data source.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Line Plot";', 'comment': '/*** Returns a short string describing the plot type;*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info) {// adjust the drawing area for the plot insets (if any)...if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...HorizontalAxis hAxis = getHorizontalAxis();VerticalAxis vAxis = getVerticalAxis();double hAxisAreaHeight = hAxis.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);// and thus the area available for plotting...Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-hAxisAreaHeight);// draw the background and axes...drawOutlineAndBackground(g2, plotArea);getCategoryAxis().draw(g2, drawArea, plotArea);getValueAxis().draw(g2, drawArea, plotArea);// now get the data and plot the lines (or shapes, or lines and shapes)...CategoryDataset data = this.getDataset();if (data!=null) {Shape originalClip=g2.getClip();g2.clip(plotArea);int seriesCount = data.getSeriesCount();int categoryCount = data.getCategoryCount();int categoryIndex = 0;Object previousCategory = null;Iterator iterator = data.getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();for (int series=0; series<seriesCount; series++) {renderer.drawCategoryItem(g2, plotArea, this, getValueAxis(), data,series, category, categoryIndex, previousCategory);}previousCategory = category;categoryIndex++;}g2.setClip(originalClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param drawArea The area within which the plot should be drawn.* @param info Collects info about the drawing.*/', 'coherence': 1}, {'code': 'public NumberTickUnit getTickUnit() {return this.tickUnit;', 'comment': '/*** Returns the tick unit for the axis.* @return The tick unit for the axis.*/', 'coherence': 1}, {'code': 'public String valueToString(double value) {// is there an override format?return this.tickUnit.formatter.format(value);', 'comment': '/*** Converts a value to a string, using the current format for the tick labels on the axis.*/', 'coherence': 1}, {'code': 'public TickUnits getStandardTickUnits() {return this.standardTickUnits;', 'comment': '/*** Returns the standard tick units for the axis.* <P>* If autoTickUnitSelection is on, the tick unit for the axis will be automatically selected* from this collection.*/', 'coherence': 1}, {'code': 'public void setLowerMargin(double margin) {this.lowerMargin = margin;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the lower margin.* @param margin The new margin;*/', 'coherence': 1}, {'code': 'public double calculateLowestVisibleTickValue() {//double min = minimumAxisValue.doubleValue();double unit = getTickUnit().getValue().doubleValue();double index = Math.ceil(minimumAxisValue/unit);return index*unit;', 'comment': '/*** Calculates the value of the lowest visible tick on the axis.* @return The value of the lowest visible tick on the axis.*/', 'coherence': 1}, {'code': 'public double getUpperMargin() {return this.upperMargin;', 'comment': '/*** Returns the margin (as a percentage of the range) by which the maximum axis value exceeds* the maximum data value.*/', 'coherence': 1}, {'code': 'public void setStandardTickUnits(TickUnits units) {this.standardTickUnits = units;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the standard tick units for the axis.* @param units The tick units.*/', 'coherence': 1}, {'code': 'public void setUpperMargin(double margin) {this.upperMargin = margin;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the upper margin.* @param margin The new margin;*/', 'coherence': 1}, {'code': 'public boolean autoRangeIncludesZero() {return this.autoRangeIncludesZero;', 'comment': '/*** Returns the flag that indicates whether or not the automatic axis range (if indeed it is* determined automatically) is forced to include zero.*/', 'coherence': 1}, {'code': 'public void setTickUnit(NumberTickUnit unit) {this.autoTickUnitSelection = false;this.tickUnit = unit;', 'comment': '/*** Sets the tick unit for the axis.* <P>* Registered listeners are notified that the axis has been changed.  This method also sets the* AutoTickUnit property to false.* @param unit The new tick unit.*/', 'coherence': 1}, {'code': 'protected NumberAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true, // tick labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true, // tick marks visibleAxis.DEFAULT_TICK_STROKE,true, // auto rangetrue, // auto range includes zeroNumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE,false, // invertedtrue, // auto tick unitNumberAxis.DEFAULT_TICK_UNIT,true, // grid lines visibleValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT,0.0,  // crosshair valueValueAxis.DEFAULT_CROSSHAIR_STROKE,ValueAxis.DEFAULT_CROSSHAIR_PAINT);', 'comment': '/*** Constructs a number axis, using default values where necessary.* @param label The axis label.*/', 'coherence': 1}, {'code': 'protected NumberAxis(String label, Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible, Font tickLabelFont, Paint tickLabelPaint,Insets tickLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, boolean autoRangeIncludesZero,Number autoRangeMinimumSize,double minimumAxisValue, double maximumAxisValue,boolean inverted,boolean autoTickUnitSelection, NumberTickUnit tickUnit,boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,double crosshairValue, Stroke crosshairStroke, Paint crosshairPaint) {super(label,labelFont, labelPaint, labelInsets,tickLabelsVisible,tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible, tickMarkStroke,autoRange, autoTickUnitSelection,gridLinesVisible, gridStroke, gridPaint,crosshairValue,crosshairStroke, crosshairPaint);// check arguments...if (minimumAxisValue>=maximumAxisValue) {throw new IllegalArgumentException("NumberAxis(...): minimum axis value must be less "+"than maximum axis value.");}if (!autoRange) {//  if (minimumAxisValue == null) {//    throw new IllegalArgumentException("NumberAxis(...): minimum axis value must be  "//                       +"specified if auto range calculation is off.");////  }//  if (maximumAxisValue == null) {//    throw new IllegalArgumentException("NumberAxis(...): maximum axis value must be  "//                       +"specified if auto range calculation is off.");//      }}if (autoRangeMinimumSize==null) {throw new IllegalArgumentException("NumberAxis(...): autoRangeMinimum cannot be null.");}// do the initialisation...this.autoRangeIncludesZero = autoRangeIncludesZero;this.autoRangeMinimumSize = autoRangeMinimumSize;this.minimumAxisValue = minimumAxisValue;this.maximumAxisValue = maximumAxisValue;this.anchorValue = 0.0;this.inverted = inverted;this.tickUnit = tickUnit;this.upperMargin = DEFAULT_UPPER_MARGIN;this.lowerMargin = DEFAULT_LOWER_MARGIN;this.standardTickUnits = createStandardTickUnits();', 'comment': '/*** Constructs a number axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to display the axis label.* @param labelInsets The amount of blank space around the axis label.* @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.* @param tickLabelFont The font used to display the tick labels.* @param tickLabelPaint The paint used to draw the tick labels.* @param tickLabelInsets The amount of blank space around the tick labels.* @param tickMarksVisible Flag indicating whether or not tick marks are visible;* @param tickMarkStroke The stroke used to draw the tick marks (if visible);* @param autoRange Flag indicating whether or not the axis range is automatically determined.* @param autoRangeIncludesZero A flag indicating whether the auto range must include zero.* @param autoRangeMinimumSize The minimum size for the auto range.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.* @param inverted A flag indicating whether the axis is normal or inverted (inverted means*         running from positive to negative).* @param autoTickUnitSelection A flag indicating whether or not the tick value is automatically*                selected.* @param tickUnit The tick unit for the axis.* @param gridLinesVisible Flag indicating whether or not grid lines are visible.* @param gridStroke The pen/brush used to display grid lines (if visible).* @param gridPaint The color used to display grid lines (if visible).* @param crosshairValue The value at which to draw the crosshair line (null permitted).* @param crosshairStroke The pen/brush used to draw the data line.* @param crosshairPaint The color used to draw the data line.*/', 'coherence': 1}, {'code': 'public int calculateVisibleTickCount() {//double low = minimumAxisValue.doubleValue();//double high = maximumAxisValue.doubleValue();double unit = getTickUnit().getValue().doubleValue();return (int)(Math.floor(maximumAxisValue/unit)-Math.ceil(minimumAxisValue/unit)+1);', 'comment': '/*** Calculates the number of visible ticks.* @return The number of visible ticks on the axis.*/', 'coherence': 1}, {'code': 'public double getLowerMargin() {return this.lowerMargin;', 'comment': '/*** Returns the margin (as a percentage of the range) by which the minimum axis value is less* than the minimum data value.*/', 'coherence': 1}, {'code': 'public void setAutoRangeMinimumSize(Number size) {// check argument...if (size==null) {throw new IllegalArgumentException("NumberAxis.setAutoRangeMinimumSize(Number): "+"null not permitted.");}// make the change...if (autoRangeMinimumSize.doubleValue()!=size.doubleValue()) {this.autoRangeMinimumSize = size;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the minimum size of the automatic axis range.* @param minimum The new minimum.*/', 'coherence': 1}, {'code': 'public Number getAutoRangeMinimumSize() {return this.autoRangeMinimumSize;', 'comment': '/*** Returns the minimum size of the automatic axis range (if indeed it is determined* automatically).*/', 'coherence': 1}, {'code': 'public double calculateHighestVisibleTickValue() {//double max = maximumAxisValue.doubleValue();double unit = getTickUnit().getValue().doubleValue();double index = Math.floor(maximumAxisValue/unit);return index*unit;', 'comment': '/*** Calculates the value of the highest visible tick on the axis.* @return The value of the highest visible tick on the axis.*/', 'coherence': 1}, {'code': 'public NumberTickUnit(Number value, NumberFormat formatter) {super(value);this.formatter = formatter;', 'comment': '/*** Creates a new number tick unit.* @param value The size of the tick unit.* @param formatter A number formatter for the tick unit.*/', 'coherence': 1}, {'code': 'public Line(double x1, double y1, double x2, double y2) {this(x1, y1, x2, y2, new BasicStroke(), Color.blue);', 'comment': '/*** Standard constructor, with default values for the colors.*/', 'coherence': 1}, {'code': 'public Line(double x1, double y1, double x2, double y2, Stroke stroke, Paint paint) {this.line = new Line2D.Double(x1, y1, x2, y2);this.stroke = stroke;this.paint = paint;', 'comment': '/*** Standard constructor.*/', 'coherence': 1}, {'code': 'public Stroke getStroke() {return stroke;', 'comment': '/*** Returns the Stroke object used to draw the line.*/', 'coherence': 1}, {'code': 'public Line2D getLine() {return line;', 'comment': '/*** Returns the line.*/', 'coherence': 1}, {'code': 'public LineAndShapeRenderer(int type) {if (type==SHAPES) this.plotShapes=true;if (type==LINES) this.plotLines=true;if (type==SHAPES_AND_LINES) {this.plotShapes = true;this.plotLines = true;', 'comment': '/*** Constructs a renderer of the specified type.* @param The type of renderer.  Use one of the constants SHAPES, LINES or SHAPES_AND_LINES.*/', 'coherence': 1}, {'code': 'public LineAndShapeRenderer() {this(SHAPES_AND_LINES);', 'comment': '/*** Constructs a renderer that draws shapes only.*/', 'coherence': 1}, {'code': 'public void drawCategoryItem(Graphics2D g2, Rectangle2D dataArea,CategoryPlot plot, ValueAxis axis,CategoryDataset data, int series, Object category,int categoryIndex, Object previousCategory) {// first check the number we are plotting...Number value = data.getValue(series, category);if (value!=null) {// Current Xdouble x1 = plot.getCategoryCoordinate(categoryIndex, dataArea);// Current Ydouble y1 = axis.translateValueToJava2D(value.doubleValue(), dataArea);g2.setPaint(((Plot)plot).getSeriesPaint(series));g2.setStroke(((Plot)plot).getSeriesStroke(series));if (this.plotShapes) {Shape shape = ((Plot)plot).getShape(series, category, x1, y1, shapeScale);g2.fill(shape);//g2.draw(shape);}if (this.plotLines) {if (previousCategory!=null) {Number previousValue = data.getValue(series, previousCategory);if (previousValue!=null) {// get the previous data point...double x0 = plot.getCategoryCoordinate(categoryIndex-1, dataArea);double y0 = axis.translateValueToJava2D(previousValue.doubleValue(), dataArea);g2.setPaint(((Plot)plot).getSeriesPaint(series));g2.setStroke(((Plot)plot).getSeriesStroke(series));Line2D line = new Line2D.Double(x0, y0, x1, y1);g2.draw(line);', 'comment': '/*** Draw a single data item.* @param g2 The graphics device.* @param plotArea The data plot area.* @param plot The plot.* @param axis The range axis.* @param data The data.* @param series The series number (zero-based index).* @param category The category.* @param categoryIndex The category number (zero-based index).* @param previousCategory The previous category (will be null when the first category is*             drawn).*/', 'coherence': 1}, {'code': 'public PiePlot() {this(DEFAULT_INTERIOR_GAP,true, // circularDEFAULT_RADIUS,NAME_LABELS,DEFAULT_SECTION_LABEL_FONT,DEFAULT_SECTION_LABEL_PAINT,DEFAULT_SECTION_LABEL_GAP,"0.0",new Insets(2, 2, 2, 2),null);', 'comment': '/*** Constructs a new pie plot.*/', 'coherence': 1}, {'code': 'public void setRadiusPercent(double percent) {// check arguments...if ((percent<=0.0) || (percent>MAX_RADIUS)) {throw new IllegalArgumentException("PiePlot.setRadiusPercent(double): "+"percentage outside valid range.");}// make the change (if necessary)...if (this.radiusPercent!=percent) {this.radiusPercent = percent;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the radius percentage.* @param percent The new value.*/', 'coherence': 1}, {'code': 'public Font getSectionLabelFont() {return this.sectionLabelFont;', 'comment': '/*** Returns the section label font.* @return The section label font.*/', 'coherence': 1}, {'code': 'public void setInteriorGapPercent(double percent) {// check arguments...if ((percent<0.0) || (percent>MAX_INTERIOR_GAP)) {throw new IllegalArgumentException("PiePlot.setInteriorGapPercent(double): "+"percentage outside valid range.");}// make the change...if (this.interiorGapPercent!=percent) {this.interiorGapPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the interior gap percent.*/', 'coherence': 1}, {'code': 'protected void drawLabel(Graphics2D g2, Rectangle2D pieArea, Rectangle2D explodedPieArea,PieDataset data, int section, double startAngle, double extent) {// handle label drawing...FontRenderContext frc = g2.getFontRenderContext();String[] legendItemLabels = chart.getLegendItemLabels();String label = "";if (this.sectionLabelType==NAME_LABELS) {label = legendItemLabels[section];}else if (this.sectionLabelType==PERCENT_LABELS) {label = percentFormatter.format(extent/3.60)+"%";}else if (this.sectionLabelType==NAME_AND_PERCENT_LABELS) {label = legendItemLabels[section]+" ("+percentFormatter.format(extent/3.60)+"%)";}Rectangle2D labelBounds = this.sectionLabelFont.getStringBounds(label, frc);LineMetrics lm = this.sectionLabelFont.getLineMetrics(label, frc);double ascent = lm.getAscent();Point2D labelLocation = this.calculateLabelLocation(labelBounds, ascent,pieArea, explodedPieArea,startAngle, extent,this.getExplodePercent(section));g2.setPaint(this.sectionLabelPaint);g2.setFont(this.sectionLabelFont);g2.drawString(label, (float)labelLocation.getX(), (float)labelLocation.getY());', 'comment': '/*** Draws the label for one pie section.* @param g2 The graphics device.* @param pieArea The area for the unexploded pie sections.* @param explodedPieArea The area for the exploded pie section.* @param data The data for the plot.* @param section The section (zero-based index).* @param startAngle The starting angle.* @param extent The extent of the arc.*/', 'coherence': 1}, {'code': 'public double getRadiusPercent() {return this.radiusPercent;', 'comment': '/*** Returns the radius percentage.* @return The radius percentage.*/', 'coherence': 1}, {'code': 'public void setPercentFormatString(String format) {this.percentFormatter = new DecimalFormat(format);', 'comment': '/*** Sets the format string for the percent labels.*/', 'coherence': 1}, {'code': 'public void setSectionLabelFont(Font font) {// check arguments...if (font==null) {throw new IllegalArgumentException("PiePlot.setSectionLabelFont(...): "+"null font not allowed.");}// make the change...if (!this.sectionLabelFont.equals(font)) {this.sectionLabelFont = font;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the section label font.* <P>* Notifies registered listeners that the plot has been changed.* @param font The new section label font.*/', 'coherence': 1}, {'code': 'protected Rectangle2D getArcBounds(Rectangle2D unexploded, Rectangle2D exploded,double startAngle, double extent, double explodePercent) {if (explodePercent==0.0) {return unexploded;}else {Arc2D arc1 = new Arc2D.Double(unexploded, startAngle, extent/2, Arc2D.OPEN);Point2D point1 = arc1.getEndPoint();Arc2D.Double arc2 = new Arc2D.Double(exploded, startAngle, extent/2, Arc2D.OPEN);Point2D point2 = arc2.getEndPoint();double deltaX = (point1.getX()-point2.getX())*explodePercent;double deltaY = (point1.getY()-point2.getY())*explodePercent;return new Rectangle2D.Double(unexploded.getX()-deltaX, unexploded.getY()-deltaY,unexploded.getWidth(), unexploded.getHeight());', 'comment': "/*** Returns a rectangle that can be used to create a pie section (taking into account the* amount by which the pie section is 'exploded').* @param unexploded The area inside which the unexploded pie sections are drawn.* @param exploded The area inside which the exploded pie sections are drawn.* @param startAngle The start angle.* @param extent The extent of the arc.* @param explodePercent The amount by which the pie section is exploded.*/", 'coherence': 1}, {'code': 'public PieDataset getDataset() {return (PieDataset)chart.getDataset();', 'comment': '/*** Returns the dataset for the plot, cast as a PieDataset.* <P>* Provided for convenience.* @return The dataset for the plot, cast as a PieDataset.*/', 'coherence': 1}, {'code': 'public double getExplodePercent(int section) {// check argument...if (section<0) {throw new IllegalArgumentException("PiePlot.getExplodePercent(int): "+"section outside valid range.");}// fetch the result...double result = 0.0;if (this.explodePercentages!=null) {if (section<this.explodePercentages.length) {result = explodePercentages[section];}}return result;', 'comment': "/*** Returns the amount that a section should be 'exploded'.* <P>*/", 'coherence': 1}, {'code': 'public void setToolTipGenerator(PieToolTipGenerator generator) {this.toolTipGenerator = generator;', 'comment': '/*** Sets the tooltip generator.*/', 'coherence': 1}, {'code': 'public PieToolTipGenerator getToolTipGenerator() {return this.toolTipGenerator;', 'comment': '/*** Returns the tooltip generator (possibly null).*/', 'coherence': 1}, {'code': 'public boolean isCircular() {return circular;', 'comment': '/*** Returns a flag indicating whether the pie chart is circular, or stretched into an elliptical* shape.* @return A flag indicating whether the pie chart is circular.*/', 'coherence': 1}, {'code': 'public void setCircular(boolean flag) {// no argument checking required...// make the change...if (circular!=flag) {circular = flag;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** A flag indicating whether the pie chart is circular, or stretched into an elliptical shape.* @param flag The new value.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis==null) return true;else return false;', 'comment': '/*** Returns true if the axis is compatible with the pie plot, and false otherwise.  Since a pie* plot requires no axes, only a null axis is compatible.* @param axis The axis.*/', 'coherence': 1}, {'code': 'public void setExplodePercent(int section, double percent) {// check argument...if ((section<0) || (section>=this.getDataset().getCategories().size())) {throw new IllegalArgumentException("PiePlot.setExplodePercent(int, double): "+"section outside valid range.");}// store the value in an appropriate data structure...if (this.explodePercentages!=null) {if (section<this.explodePercentages.length) {explodePercentages[section] = percent;}else {double[] newExplodePercentages = new double[section];for (int i=0; i<this.explodePercentages.length; i++) {newExplodePercentages[i] = this.explodePercentages[i];}this.explodePercentages = newExplodePercentages;this.explodePercentages[section] = percent;}}else {explodePercentages = new double[this.getDataset().getCategories().size()];explodePercentages[section] = percent;', 'comment': '/*** Sets the amount that a pie section should be exploded.*/', 'coherence': 1}, {'code': 'public Collection getCategories() {return getDataset().getCategories();', 'comment': '/*** Returns a collection of the categories in the dataset.* @return A collection of the categories in the dataset.*/', 'coherence': 1}, {'code': 'public Paint getSectionLabelPaint() {return this.sectionLabelPaint;', 'comment': '/*** Returns the section label paint.* @return The section label paint.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {ToolTipsCollection tooltips = null;if (info!=null) {info.setPlotArea(plotArea);tooltips = info.getToolTipsCollection();}// adjust for insets...if (insets!=null) {plotArea.setRect(plotArea.getX()+insets.left,plotArea.getY()+insets.top,plotArea.getWidth()-insets.left-insets.right,plotArea.getHeight()-insets.top-insets.bottom);}// draw the outline and backgrounddrawOutlineAndBackground(g2, plotArea);// adjust the plot area by the interior spacing valuedouble gapHorizontal = plotArea.getWidth()*this.interiorGapPercent;double gapVertical = plotArea.getHeight()*this.interiorGapPercent;double pieX = plotArea.getX()+gapHorizontal/2;double pieY = plotArea.getY()+gapVertical/2;double pieW = plotArea.getWidth()-gapHorizontal;double pieH = plotArea.getHeight()-gapVertical;// make the pie area a square if the pie chart is to be circular...if (circular) {double min = Math.min(pieW, pieH)/2;pieX = (pieX+pieX+pieW)/2 - min;pieY = (pieY+pieY+pieH)/2 - min;pieW = 2*min;pieH = 2*min;}Rectangle2D explodedPieArea = new Rectangle2D.Double(pieX, pieY, pieW, pieH);double explodeHorizontal = (1-radiusPercent)*pieW;double explodeVertical = (1-radiusPercent)*pieH;Rectangle2D pieArea = new Rectangle2D.Double(pieX+explodeHorizontal/2,pieY+explodeVertical/2,pieW-explodeHorizontal,pieH-explodeVertical);// plot the data (unless the dataset is null)...PieDataset data = (PieDataset)chart.getDataset();if (data != null) {// get a sorted collection of categories...Set categories = data.getCategories();SortedSet ss = new TreeSet(categories);// compute the total value of the data series skipping over the negative valuesdouble totalValue = 0;Iterator iterator = ss.iterator();while (iterator.hasNext()) {Object current = iterator.next();if (current!=null) {Number value = data.getValue(current);double v = value.doubleValue();if (v>0) {totalValue = totalValue + v;}}}// For each positive value in the dataseries, compute and draw the corresponding arc.double sumTotal = 0;int section = 0;iterator = ss.iterator();while (iterator.hasNext()) {Object current = iterator.next();Number dataValue = data.getValue(current);if (dataValue!=null) {double value = dataValue.doubleValue();if (value>0) {// draw the pie section...double startAngle = sumTotal * 360 / totalValue;double extent = (sumTotal+value) * 360 / totalValue - startAngle;Rectangle2D arcBounds = getArcBounds(pieArea, explodedPieArea,startAngle, extent,this.getExplodePercent(section));Arc2D.Double arc = new Arc2D.Double(arcBounds, startAngle, extent,Arc2D.PIE);sumTotal += value;Paint paint = this.getSeriesPaint(section);Paint outlinePaint = this.getSeriesOutlinePaint(section);g2.setPaint(paint);g2.fill(arc);g2.setStroke(new BasicStroke());g2.setPaint(outlinePaint);g2.draw(arc);// add a tooltip for the bar...if (tooltips!=null) {if (this.toolTipGenerator==null) {toolTipGenerator = new StandardPieToolTipGenerator();}String tip = this.toolTipGenerator.generateToolTip(data, current);if (arc!=null) {tooltips.addToolTip(tip, arc);}}// then draw the label...if (this.sectionLabelType!=NO_LABELS) {this.drawLabel(g2, pieArea, explodedPieArea, data, section, startAngle,extent);}}}section = section + 1;', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param plotArea The area within which the plot should be drawn.* @param info Collects info about the drawing.*/', 'coherence': 1}, {'code': 'public PiePlot(double interiorGapPercent, boolean circular, double radiusPercent,int sectionLabelType,Font sectionLabelFont, Paint sectionLabelPaint, double sectionLabelGapPercent,String percentFormatString, Insets insets,PieToolTipGenerator tooltipGenerator) {super(null, null);this.interiorGapPercent = interiorGapPercent;this.circular = circular;this.radiusPercent = radiusPercent;this.sectionLabelType = sectionLabelType;this.sectionLabelFont = sectionLabelFont;this.sectionLabelPaint = sectionLabelPaint;this.sectionLabelGapPercent = sectionLabelGapPercent;this.percentFormatter = new DecimalFormat(percentFormatString);this.explodePercentages = null;this.toolTipGenerator = tooltipGenerator;setInsets(insets);', 'comment': '/*** Constructs a pie plot.* @param interiorGapPercent The interior gap (space for labels) as a percentage of the*    available space.* @param circular Flag indicating whether the pie chart is circular or elliptical.* @param radiusPercent The radius of the pie chart, as a percentage of the available space*    (after accounting for interior gap).* @param sectionLabelFont The font for the section labels.* @param sectionLabelPaint The color for the section labels.* @param sectionLabelGapPercent The space between the pie sections and the labels.* @param insets The gaps between the plot area and the border of the chart.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis==null) return true;else return false;', 'comment': '/*** Returns true if the axis is compatible with the pie plot, and false otherwise.  Since a pie* plot requires no axes, only a null axis is compatible.* @param axis The axis.*/', 'coherence': 1}, {'code': 'public void setSectionLabelPaint(Paint paint) {// check arguments...if (paint==null) {throw new IllegalArgumentException("PiePlot.setSectionLabelPaint(...): "+"null paint not allowed.");}// make the change...if (!this.sectionLabelPaint.equals(paint)) {this.sectionLabelPaint = paint;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the section label paint.* <P>* Notifies registered listeners that the plot has been changed.* @param paint The new section label paint.*/', 'coherence': 1}, {'code': 'public void setSectionLabelType(int type) {// check the argument...if ((type!=NO_LABELS) && (type!=NAME_LABELS) && (type!=PERCENT_LABELS)&& (type!=NAME_AND_PERCENT_LABELS)) {throw new IllegalArgumentException("PiePlot.setSectionLabelType(int): "+"unrecognised type.");}// make the change...if (sectionLabelType!=type) {this.sectionLabelType = type;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the section label type.* <P>* Valid types are defined by the following constants: NO_LABELS, NAME_LABELS, PERCENT_LABELS,*                           NAME_AND_PERCENT_LABELS.*/', 'coherence': 1}, {'code': 'public void setSectionLabelGapPercent(double percent) {// check arguments...if ((percent<0.0) || (percent>MAX_SECTION_LABEL_GAP)) {throw new IllegalArgumentException("PiePlot.setSectionLabelGapPercent(double): "+"percentage outside valid range.");}// make the change...if (this.sectionLabelGapPercent!=percent) {this.sectionLabelGapPercent = percent;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the section label gap percent.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Pie Plot";', 'comment': '/*** Returns a short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public double getInteriorGapPercent() {return this.interiorGapPercent;', 'comment': '/*** Returns the interior gap, measures as a percentage of the available drawing space.* @return The interior gap, measured as a percentage of the available drawing space.*/', 'coherence': 1}, {'code': 'public double getSectionLabelGapPercent() {return this.sectionLabelGapPercent;', 'comment': '/*** Returns the section label gap, measures as a percentage of the radius.* @return The section label gap, measures as a percentage of the radius.*/', 'coherence': 1}, {'code': 'public int getSectionLabelType() {return this.sectionLabelType;', 'comment': '/*** Returns the section label type.  Defined by the constants: NO_LABELS, NAME_LABELS,* PERCENT_LABELS and NAME_AND_PERCENT_LABELS.* @return The section label type.*/', 'coherence': 1}, {'code': 'public VerticalAxis getVerticalAxis() {return (VerticalAxis)verticalAxis;', 'comment': '/*** Returns a reference to the vertical axis.* @return A reference to the vertical axis.* @see Plot#getAxis*/', 'coherence': 1}, {'code': 'public void setChart(JFreeChart chart) {// if replacing an existing chart, the plot may be a registered listener...if (this.chart!=null) {chart.removeChangeListener(this);}this.chart = chart;// new chart means new data source, so reconfigure axes...if (verticalAxis!=null) verticalAxis.configure();if (horizontalAxis!=null) horizontalAxis.configure();', 'comment': "/*** Sets a reference back to the chart that this plot belongs to.  Reconfigures the axes* according to the chart's data source.* @param chart The chart that the plot belongs to.*/", 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumDomainValue(data);}else return null;', 'comment': '/*** Returns the maximum value in either the domain or the range, whichever is displayed against* the horizontal axis for the particular type of plot implementing this interface.*/', 'coherence': 1}, {'code': 'public void handleClick(int x, int y, DrawInfo info) {// translate x into a data value// if the axis is a value axis, set the crosshair valueif (horizontalAxis instanceof ValueAxis) {ValueAxis hva = (ValueAxis)horizontalAxis;double xx = hva.translateJava2DtoValue(x, info.getDataArea());}// translate the y into a data value// if the axis is a value axis, set the crosshair valueif (verticalAxis instanceof ValueAxis) {ValueAxis vva = (ValueAxis)verticalAxis;double yy = vva.translateJava2DtoValue(y, info.getDataArea());', 'comment': "/*** Handles a 'click' on the plot.  Since the plot does not maintain any information about where* it has been drawn, the plot area is supplied as an argument.* @param x The x coordinate.* @param y The y coordinate.* @param plotArea The area in which the plot is assumed to be drawn.*/", 'coherence': 1}, {'code': 'public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis,Insets insets, Paint background,Stroke outlineStroke, Paint outlinePaint) {super(horizontalAxis, verticalAxis, insets, background, outlineStroke, outlinePaint);', 'comment': '/*** Constructs a new vertical XY bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param insets Amount of blank space around the plot area.* @param background The Paint used to fill the plot background.* @param outlineStroke The Stroke used to draw an outline around the plot.* @param outlinePaint The color used to draw the plot outline.*/', 'coherence': 1}, {'code': 'public void drawOutlineAndBackground(Graphics2D g2, Rectangle2D area) {if (backgroundPaint!=null) {g2.setPaint(backgroundPaint);g2.fill(area);}if ((outlineStroke!=null) && (outlinePaint!=null)) {g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(area);', 'comment': '/*** Draw the plot outline and background.* @param g2 The graphics device.* @param area The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) return true;else return false;', 'comment': '/*** Returns true if the specified axis is compatible with the plot with regard to operating as* the vertical axis.* <P>* This plot requires the vertical axis to be a subclass of VerticalNumberAxis.* @param axis The axis.*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue()  {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum Y value from the datasource.* <P>* This method can return null if the data source is null.*/', 'coherence': 1}, {'code': 'public void axisChanged(AxisChangeEvent event) {notifyListeners(new PlotChangeEvent(this));', 'comment': "/*** Receives notification of a change to one of the plot's axes.* @param event Information about the event (not used here).*/", 'coherence': 1}, {'code': 'public JFreeChart getChart() {return chart;', 'comment': '/*** Returns a reference to the chart that this plot belongs to.* @return A reference to the chart that this plot belongs to (null possible).*/', 'coherence': 1}, {'code': 'public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis) {this(horizontalAxis,verticalAxis,Plot.DEFAULT_INSETS,Plot.DEFAULT_BACKGROUND_COLOR,Plot.DEFAULT_OUTLINE_STROKE,Plot.DEFAULT_OUTLINE_COLOR);', 'comment': '/*** Constructs a new vertical XY bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public Paint getSeriesPaint(int index) {return seriesPaint[index % seriesPaint.length];', 'comment': '/*** Returns the Paint used to color any shapes for the specified series.* @param index The index of the series of interest (zero-based);*/', 'coherence': 1}, {'code': 'public ValueAxis getDomainAxis() {return (ValueAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns the horizontal axis cast as a ValueAxis.*/', 'coherence': 1}, {'code': 'public void setSeriesOutlinePaint(Paint[] paint) {this.seriesOutlinePaint = paint;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the paint used to outline any shapes representing series, and notifies registered* listeners that the chart has been modified.* @param paint An array of Paint objects for drawing the outline of series shapes;*/', 'coherence': 1}, {'code': 'public void setOutlinePaint(Paint paint) {if (!this.outlinePaint.equals(paint)) {this.outlinePaint = paint;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the color of the outline of the plot area, and notifies registered listeners that the* Plot has been modified.* @param paint The new outline paint.*/', 'coherence': 1}, {'code': 'public void setSeriesOutlineStroke(Stroke[] stroke) {this.seriesOutlineStroke = stroke;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the stroke used to draw any shapes representing series, and notifies registered* listeners that the chart has been modified.* @param stroke An array of Stroke objects;*/', 'coherence': 1}, {'code': 'protected void drawBar(Graphics2D g2, Rectangle2D plotArea, IntervalXYDataset data,int series, int item, ValueAxis horizontalAxis, ValueAxis verticalAxis,double translatedRangeZero) {Paint seriesPaint = this.getSeriesPaint(series);Paint seriesOutlinePaint = this.getSeriesOutlinePaint(series);Number valueNumber = data.getYValue(series, item);double translatedValue = verticalAxis.translateValueToJava2D(valueNumber.doubleValue(), plotArea);Number startXNumber = data.getStartXValue(series, item);double translatedStartX = horizontalAxis.translateValueToJava2D(startXNumber.doubleValue(), plotArea);Number endXNumber = data.getEndXValue(series, item);double translatedEndX = horizontalAxis.translateValueToJava2D(endXNumber.doubleValue(), plotArea);double translatedWidth = Math.max(1, translatedEndX-translatedStartX);double translatedHeight = Math.abs(translatedValue-translatedRangeZero);Rectangle2D bar = new Rectangle2D.Double(translatedStartX,Math.min(translatedRangeZero, translatedValue),translatedWidth, translatedHeight);g2.setPaint(seriesPaint);g2.fill(bar);if ((translatedEndX-translatedStartX)>3) {g2.setStroke(this.getSeriesOutlineStroke(series));g2.setPaint(seriesOutlinePaint);g2.draw(bar);', 'comment': '/*** Draws one bar.*/', 'coherence': 1}, {'code': 'public void addChangeListener(PlotChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the plot.* @param listener The object to be registered.*/', 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis axis) throws AxisNotCompatibleException {if (isCompatibleVerticalAxis(axis)) {if (axis!=null) {try {axis.setPlot(this);}catch (PlotNotCompatibleException e) {throw new AxisNotCompatibleException("Plot.setVerticalAxis(...): "+"plot not compatible with axis.");}axis.addChangeListener(this);}// plot is likely registered as a listener with the existing axis...if (this.verticalAxis!=null) {this.verticalAxis.removeChangeListener(this);}this.verticalAxis = axis;}else throw new AxisNotCompatibleException("Plot.setVerticalAxis(...): "+"axis not compatible with plot.");', 'comment': '/*** Sets the vertical axis for the plot.* <P>* An exception is thrown if the new axis and the plot are not mutually compatible.* @param axis The new axis (null permitted).*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info) {// adjust the drawing area for plot insets (if any)...if (insets!=null) {drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...HorizontalAxis ha = getHorizontalAxis();VerticalAxis va = getVerticalAxis();double hAxisAreaHeight = ha.reserveHeight(g2, this, drawArea);Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),drawArea.getY(),drawArea.getWidth()-vAxisArea.getWidth(),drawArea.getHeight()-hAxisAreaHeight);// draw the background and axes...drawOutlineAndBackground(g2, plotArea);getDomainAxis().draw(g2, drawArea, plotArea);getRangeAxis().draw(g2, drawArea, plotArea);// now get the data and plot the bars...IntervalXYDataset data = (IntervalXYDataset)chart.getDataset();if (data!=null) {Shape savedClip = g2.getClip();g2.clip(plotArea);double translatedVerticalZero = getRangeAxis().translateValueToJava2D(0.0, plotArea);int seriesCount = data.getSeriesCount();for (int series = 0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);for (int item = 0; item<itemCount; item++) {drawBar(g2, plotArea, data, series, item, getDomainAxis(), getRangeAxis(),translatedVerticalZero);}}g2.setClip(savedClip);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param drawArea The area within which the plot should be drawn.* @param info Collects drawing info.*/', 'coherence': 1}, {'code': 'public Stroke getSeriesStroke(int index) {return seriesStroke[index % seriesStroke.length];', 'comment': '/*** Returns the Stroke used to draw any shapes for the specified series.* @param index The index of the series of interest (zero-based);*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis getRangeAxis() {return (VerticalNumberAxis)verticalAxis;', 'comment': '/*** A convenience method that returns the vertical axis cast as a VerticalNumberAxis.*/', 'coherence': 1}, {'code': 'public Number getMaximumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumRangeValue(data);}else return null;', 'comment': '/*** Returns the maximum Y value from the datasource.* <P>* This method can return null if the data source is null.*/', 'coherence': 1}, {'code': 'protected Plot(Axis horizontalAxis, Axis verticalAxis,Insets insets,Paint background, Stroke outlineStroke, Paint outlinePaint) {this.chart = null;this.horizontalAxis=horizontalAxis;if (horizontalAxis!=null) {horizontalAxis.setPlot(this);horizontalAxis.addChangeListener(this);}this.verticalAxis=verticalAxis;if (verticalAxis!=null) {verticalAxis.setPlot(this);verticalAxis.addChangeListener(this);}this.insets = insets;this.backgroundPaint = background;this.outlineStroke = outlineStroke;this.outlinePaint = outlinePaint;this.seriesPaint = new Paint[] {Color.red, Color.blue, Color.green, Color.yellow,Color.cyan, Color.magenta, Color.orange, Color.pink,Color.lightGray};this.seriesStroke = new Stroke[] { new BasicStroke(1) };this.seriesOutlinePaint = new Paint[] { Color.gray };this.seriesOutlineStroke = new Stroke[] { new BasicStroke(0.5f) };this.listeners = new java.util.ArrayList();', 'comment': '/*** Constructs a new plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param insets Amount of blank space around the plot area.* @param background The Paint used to fill the plot background.* @param outlineStroke The Stroke used to draw an outline around the plot.* @param outlinePaint The color used to draw an outline around the plot.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) return true;else if (axis instanceof HorizontalDateAxis) return true;else return false;', 'comment': '/*** Returns true if the specified axis is compatible with the plot with regard to operating as* the horizontal axis.* <P>* This plot requires the horizontal axis to be a subclass of HorizontalNumberAxis or* HorizontalDateAxis.* @param axis The axis.*/', 'coherence': 1}, {'code': 'public void setOutlineStroke(Stroke stroke) {if (!this.outlineStroke.equals(stroke)) {this.outlineStroke = stroke;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the pen/brush used to outline the plot area, and notifies registered listeners that the* plot has been modified.* @param stroke The new outline pen/brush.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumDomainValue(data);}else return null;', 'comment': '/*** Returns the minimum value in either the domain or the range, whichever is displayed against* the horizontal axis for the particular type of plot implementing this interface.*/', 'coherence': 1}, {'code': 'protected Plot(Axis horizontalAxis, Axis verticalAxis) {this(horizontalAxis, verticalAxis,DEFAULT_INSETS,DEFAULT_BACKGROUND_COLOR,DEFAULT_OUTLINE_STROKE,DEFAULT_OUTLINE_COLOR);', 'comment': '/*** Constructs a new plot with the specified axes.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return this.backgroundPaint;', 'comment': '/*** Returns the background color of the plot area.* @return The background color of the plot area.*/', 'coherence': 1}, {'code': 'public Paint getSeriesOutlinePaint(int index) {return seriesOutlinePaint[index % seriesOutlinePaint.length];', 'comment': '/*** Returns the Paint used to outline any shapes for the specified series.* @param index The index of the series of interest (zero-based);*/', 'coherence': 1}, {'code': 'public Stroke getSeriesOutlineStroke(int index) {return seriesOutlineStroke[index % seriesOutlinePaint.length];', 'comment': '/*** Returns the Stroke used to outline any shapes for the specified series.* @param index The index of the series of interest (zero-based);*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return this.outlineStroke;', 'comment': '/*** Returns the pen/brush used to outline the plot area.* @return The pen/brush used to outline the plot area.*/', 'coherence': 1}, {'code': 'public void setInsets(Insets insets) {if (!this.insets.equals(insets)) {this.insets = insets;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the insets for the plot and notifies registered listeners that the plot has been* modified.* @param insets The new insets.*/', 'coherence': 1}, {'code': 'public Axis getAxis(int select) {switch (select) {case HORIZONTAL_AXIS : return horizontalAxis;case VERTICAL_AXIS : return verticalAxis;default: return null;', 'comment': '/*** Returns the specified axis.* @param select Determines the axis returned (use the constants HORIZONTAL_AXIS and*         VERTICAL_AXIS).* @see Plot#getHorizontalAxis* @see Plot#getVerticalAxis*/', 'coherence': 1}, {'code': 'public void setSeriesPaint(Paint[] paint) {this.seriesPaint = paint;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the paint used to color any shapes representing series, and notifies registered* listeners that the plot has been modified.* @param paint An array of Paint objects used to color series;*/', 'coherence': 1}, {'code': 'public Shape getShape(int series, int item, double x, double y, double scale) {// return new Rectangle2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);return new Ellipse2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);', 'comment': '/*** Returns a Shape that can be used in plotting data. Should allow a plugin object to* determine the shape (optionally)...*/', 'coherence': 1}, {'code': 'public void removeChangeListener(PlotChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Unregisters an object for notification of changes to the plot.* @param listener The object to be unregistered.*/', 'coherence': 1}, {'code': 'public void chartChanged(ChartChangeEvent event) {if (event.getType()==ChartChangeEvent.NEW_DATASET) {if (verticalAxis!=null) {verticalAxis.configure();}if (horizontalAxis!=null) {horizontalAxis.configure();}}if (event.getType()==ChartChangeEvent.UPDATED_DATASET) {if (verticalAxis!=null) {verticalAxis.configure();}if (horizontalAxis!=null) {horizontalAxis.configure();', 'comment': '/*** Receives notification of a change to a (the) chart.* <P>* Reacts to dataset changes by reconfiguring the axes.* @param event Information about the chart change event.*/', 'coherence': 1}, {'code': 'public void setSeriesStroke(Stroke[] stroke) {this.seriesStroke = stroke;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the stroke used to draw any shapes representing series, and notifies registered* listeners that the chart has been modified.* @param stroke An array of Stroke objects used to draw series;*/', 'coherence': 1}, {'code': 'public void setBackgroundPaint(Paint paint) {if (!this.backgroundPaint.equals(paint)) {this.backgroundPaint = paint;notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the background color of the plot area, and notifies registered listeners that the* plot has been modified.* @param paint The new background Paint.*/', 'coherence': 1}, {'code': 'public Insets getInsets() {return this.insets;', 'comment': '/*** Returns the insets for the plot area.* @return The insets for the plot area.*/', 'coherence': 1}, {'code': 'public Shape getShape(int series, Object category, double x, double y, double scale) {// return new Rectangle2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);return new Ellipse2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);', 'comment': '/*** Returns a Shape that can be used in plotting data.  Should allow a plug-in object to* determine the shape...*/', 'coherence': 1}, {'code': 'public HorizontalAxis getHorizontalAxis() {return (HorizontalAxis)horizontalAxis;', 'comment': '/*** Returns a reference to the horizontal axis.* @return A reference to the horizontal axis.* @see Plot#getAxis*/', 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return this.outlinePaint;', 'comment': '/*** Returns the color used to draw the outline of the plot area.* @return The color used to draw the outline of the plot area.*/', 'coherence': 1}, {'code': 'public void notifyListeners(PlotChangeEvent event) {java.util.Iterator iterator = listeners.iterator();while (iterator.hasNext()) {PlotChangeListener listener = (PlotChangeListener)iterator.next();listener.plotChanged(event);', 'comment': '/*** Notifies all registered listeners that the plot has been modified.* @param event Information about the change event.*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {if (isCompatibleHorizontalAxis(axis)) {if (axis!=null) {try {axis.setPlot(this);}catch (PlotNotCompatibleException e) {throw new AxisNotCompatibleException("Plot.setHorizontalAxis(...): "+"plot not compatible with axis.");}axis.addChangeListener(this);}// plot is likely registered as a listener with the existing axis...if (this.horizontalAxis!=null) {this.horizontalAxis.removeChangeListener(this);}this.horizontalAxis = axis;}else throw new AxisNotCompatibleException("Plot.setHorizontalAxis(...): "+"axis not compatible with plot.");', 'comment': '/*** Sets the horizontal axis for the plot (this must be compatible with the plot type or an* exception is thrown).* @param axis The new axis;*/', 'coherence': 1}, {'code': 'private void drawHorizontalLines(Graphics2D g2, Rectangle2D dataArea) {// Draw any horizontal linesif (horizontalLines != null) {for (int i=0; i<horizontalLines.size(); i++) {g2.setPaint((Paint)horizontalColors.get(i));g2.setStroke(new BasicStroke(1));Number y = (Number)horizontalLines.get(i);int yint = (int)getRangeAxis().translateValueToJava2D(y.doubleValue(), dataArea);g2.drawLine(0, yint, (int)(dataArea.getWidth()), yint);', 'comment': '/*** Support method for the draw(...) method.*/', 'coherence': 1}, {'code': 'private void drawVerticalLines(Graphics2D g2, Rectangle2D dataArea) {// Draw any vertical linesif (verticalLines != null) {for (int i=0; i<verticalLines.size(); i++) {g2.setPaint((Paint)verticalColors.get(i));g2.setStroke(new BasicStroke(1));Number x = (Number)verticalLines.get(i);int xint = (int)getDomainAxis().translateValueToJava2D(x.doubleValue(), dataArea);g2.drawLine(xint, 0, xint, (int)(dataArea.getHeight()));', 'comment': '/*** Support method for the draw(...) method.*/', 'coherence': 1}, {'code': 'public void setXYItemRenderer(XYItemRenderer renderer) {this.renderer = renderer;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the item renderer, and notifies all listeners of a change to the plot.* @param renderer The new renderer.*/', 'coherence': 1}, {'code': 'public void addHorizontalLine(Number value) {addHorizontalLine(value, Color.red);this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Adds a horizontal line at the specified data value, using the default color red.* @param value The data value.*/', 'coherence': 1}, {'code': 'public XYPlot(ValueAxis horizontalAxis, ValueAxis verticalAxis) {this(horizontalAxis, verticalAxis,Plot.DEFAULT_INSETS,Plot.DEFAULT_BACKGROUND_COLOR,Plot.DEFAULT_OUTLINE_STROKE,Plot.DEFAULT_OUTLINE_COLOR);', 'comment': '/*** Constructs an XYPlot with the specified axes (other attributes take default values).* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;* @return True if the axis is compatible with the plot, and false otherwise.*/', 'coherence': 1}, {'code': 'public ValueAxis getRangeAxis() {return (ValueAxis)verticalAxis;', 'comment': '/*** A convenience method that returns a reference to the vertical axis cast as a* ValueAxis.* @return The vertical axis cast as a ValueAxis.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumDomainValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the domain, since this is plotted against the horizontal axis* for an XYPlot.* @return The minimum value to be plotted against the horizontal axis.*/', 'coherence': 1}, {'code': 'public XYItemRenderer getItemRenderer() {return this.renderer;', 'comment': '/*** Returns a reference to the current item renderer.* @return A reference to the current item renderer.*/', 'coherence': 1}, {'code': 'public void addHorizontalLine(Number location, Paint color) {if (horizontalLines == null) {horizontalLines = new ArrayList();horizontalColors = new ArrayList();}horizontalColors.add(color);horizontalLines.add(location);', 'comment': '/*** Adds a horizontal line at the specified data value, using the specified color.* @param value The data value.* @param color The line color.*/', 'coherence': 1}, {'code': 'private void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea, double value,Stroke stroke, Paint paint) {double xx = this.getDomainAxis().translateValueToJava2D(value, dataArea);Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());g2.setStroke(stroke);g2.setPaint(paint);g2.draw(line);', 'comment': '/*** Utility method for drawing a crosshair on the chart (if required).*/', 'coherence': 1}, {'code': 'public void handleClick(int x, int y, DrawInfo info) {// set the anchor value for the horizontal axis...ValueAxis hva = this.getDomainAxis();double hvalue = hva.translateJava2DtoValue((float)x, info.getDataArea());hva.setAnchorValue(hvalue);hva.setCrosshairValue(hvalue);// set the anchor value for the vertical axis...ValueAxis vva = this.getRangeAxis();double vvalue = vva.translateJava2DtoValue((float)y, info.getDataArea());vva.setAnchorValue(vvalue);vva.setCrosshairValue(vvalue);', 'comment': "/*** Handles a 'click' on the plot by updating the anchor values...*/", 'coherence': 1}, {'code': 'public ValueAxis getDomainAxis() {return (ValueAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* ValueAxis.* @return The horizontal axis cast as a ValueAxis.*/', 'coherence': 1}, {'code': 'public void addVerticalLine(Number location) {addVerticalLine(location, Color.blue);', 'comment': '/*** Adds a vertical line at location with default color blue.* @return void*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {// set up info collection...ToolTipsCollection tooltips = null;if (info!=null) {info.setPlotArea(plotArea);tooltips = info.getToolTipsCollection();}// adjust the drawing area for plot insets (if any)...if (insets!=null) {plotArea.setRect(plotArea.getX()+insets.left,plotArea.getY()+insets.top,plotArea.getWidth()-insets.left-insets.right,plotArea.getHeight()-insets.top-insets.bottom);}// estimate the area required for drawing the axes...HorizontalAxis hAxis = getHorizontalAxis();VerticalAxis vAxis = getVerticalAxis();double hAxisAreaHeight = hAxis.reserveHeight(g2, this, plotArea);Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, plotArea, hAxisAreaHeight);// ...and therefore what is left for the plot itself...Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisArea.getWidth(),plotArea.getY(),plotArea.getWidth()-vAxisArea.getWidth(),plotArea.getHeight()-hAxisAreaHeight);if (info!=null) {info.setDataArea(dataArea);}CrosshairInfo crosshairInfo = new CrosshairInfo();crosshairInfo.setCrosshairDistance(Double.POSITIVE_INFINITY);crosshairInfo.setAnchorX(this.getDomainAxis().getAnchorValue());crosshairInfo.setAnchorY(this.getRangeAxis().getAnchorValue());// draw the plot background and axes...drawOutlineAndBackground(g2, dataArea);this.horizontalAxis.draw(g2, plotArea, dataArea);this.verticalAxis.draw(g2, plotArea, dataArea);// now get the data and plot it (the visual representation will depend on the renderer// that has been set)...XYDataset data = this.getDataset();if (data!=null) {Shape originalClip = g2.getClip();g2.clip(dataArea);drawVerticalLines(g2, dataArea);drawHorizontalLines(g2, dataArea);double transRangeZero = this.getRangeAxis().translateValueToJava2D(0.0, dataArea);int seriesCount = data.getSeriesCount();for (int series=0; series<seriesCount; series++) {int itemCount = data.getItemCount(series);for (int item=0; item<itemCount; item++) {Shape tooltipArea = renderer.drawItem(g2, dataArea, info, this,(ValueAxis)horizontalAxis,(ValueAxis)verticalAxis,data, series, item,transRangeZero, crosshairInfo);// add a tooltip for the item...if (tooltips!=null) {if (this.toolTipGenerator==null) {toolTipGenerator = new StandardXYToolTipGenerator();}String tip = this.toolTipGenerator.generateToolTip(data, series, item);if (tooltipArea!=null) {tooltips.addToolTip(tip, tooltipArea);}}}}// draw vertical crosshair if required...ValueAxis hva = (ValueAxis)this.horizontalAxis;hva.setCrosshairValue(crosshairInfo.getCrosshairX());if (hva.isCrosshairVisible()) {this.drawVerticalLine(g2, dataArea, hva.getCrosshairValue(),hva.getCrosshairStroke(),hva.getCrosshairPaint());}// draw horizontal crosshair if required...ValueAxis vva = (ValueAxis)this.verticalAxis;vva.setCrosshairValue(crosshairInfo.getCrosshairY());if (vva.isCrosshairVisible()) {this.drawHorizontalLine(g2, dataArea, vva.getCrosshairValue(),vva.getCrosshairStroke(),vva.getCrosshairPaint());}g2.setClip(originalClip);', 'comment': '/*** Draws the XY plot on a Java 2D graphics device (such as the screen or a printer).* <P>* XYPlot now relies on an XYItemRenderer to draw each item in the plot.  This allows the* visual representation of the plot to be changed easily.* @param g2 The graphics device.* @param drawArea The area within which the plot (including axis labels) should be drawn.* @param info Collects chart drawing information (null permitted).*/', 'coherence': 1}, {'code': 'private void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value,Stroke stroke, Paint paint) {double yy = this.getRangeAxis().translateValueToJava2D(value, dataArea);Line2D line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);g2.setStroke(stroke);g2.setPaint(paint);g2.draw(line);', 'comment': '/*** Utility method for drawing a crosshair on the chart (if required).*/', 'coherence': 1}, {'code': 'public XYPlot(ValueAxis horizontalAxis, ValueAxis verticalAxis,Insets insets, Paint background,Stroke outlineStroke, Paint outlinePaint) {super(horizontalAxis, verticalAxis, insets, background, outlineStroke, outlinePaint);this.renderer = new StandardXYItemRenderer();this.toolTipGenerator = null;', 'comment': '/*** Constructs a new XY plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param insets Amount of blank space around the plot area.* @param background The Paint used to fill the plot background.* @param outlineStroke The Stroke used to draw an outline around the plot.* @param outlinePaint The color used to draw the plot outline.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumDomainValue(data);}else return null;', 'comment': '/*** Returns the maximum value in the domain, since this is plotted against the horizontal axis* for an XYPlot.* @return The maximum value to be plotted against the horizontal axis.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "XY Plot";', 'comment': '/*** Returns the plot type as a string.* @return A short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof HorizontalNumberAxis) {return true;}else if (axis instanceof HorizontalDateAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis;* @return True if the axis is compatible with the plot, and false otherwise.*/', 'coherence': 1}, {'code': 'public XYDataset getDataset() {return (XYDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as an XYDataset.* @return The dataset for the plot, cast as an XYDataset.*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* an XYPlot.* @return The minimum value to be plotted against the vertical axis.*/', 'coherence': 1}, {'code': 'public void addVerticalLine(Number location, Paint color) {if (verticalLines == null) {verticalLines = new ArrayList();verticalColors = new ArrayList();}verticalColors.add(color);verticalLines.add(location);', 'comment': '/*** Adds a vertical of the given color at location with the given color.* @return void*/', 'coherence': 1}, {'code': 'public double getEffect3d() {return effect3d;', 'comment': "/*** Return axis 3d deep along 'Z' axis.*/", 'coherence': 1}, {'code': 'public VerticalNumberAxis3D(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE);', 'comment': '/*** Constructs a VerticalNumberAxis3D, with the specified label and default attributes.* @param label The axis label.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis3D(String label, Font labelFont,double minimumAxisValue, double maximumAxisValue) {this(label, labelFont,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true,  // vertical labeltrue,  // show tick labelsAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true,  // show tick marksAxis.DEFAULT_TICK_STROKE,true,  // autorangetrue,  // autorange includes zeroNumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,minimumAxisValue, maximumAxisValue,false, // invertedtrue,NumberAxis.DEFAULT_TICK_UNIT,false,  // show grid linesValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT,0.0,ValueAxis.DEFAULT_CROSSHAIR_STROKE,ValueAxis.DEFAULT_CROSSHAIR_PAINT,DEFAULT_EFFECT_3D);', 'comment': '/*** Constructs a VerticalNumberAxis3D, using default attributes where necessary.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis3D(String label, Font labelFont, Paint labelPaint, Insets labelInsets,boolean verticalLabel,boolean showTickLabels, Font tickLabelFont, Paint tickLabelPaint,Insets tickLabelInsets,boolean showTickMarks, Stroke tickMarkStroke,boolean autoRange, boolean autoRangeIncludesZero,Number autoRangeMinimum,double minimumAxisValue, double maximumAxisValue,boolean inverted,boolean autoTickUnit, NumberTickUnit tickUnit,boolean showGridLines, Stroke gridStroke, Paint gridPaint,double crosshairValue, Stroke crosshairStroke, Paint crosshairPaint,double effect3d) {super(label, labelFont, labelPaint, labelInsets, verticalLabel, showTickLabels,tickLabelFont, tickLabelPaint,tickLabelInsets, showTickMarks, tickMarkStroke,autoRange, autoRangeIncludesZero, autoRangeMinimum,minimumAxisValue, maximumAxisValue,inverted,autoTickUnit, tickUnit,showGridLines, gridStroke, gridPaint,crosshairValue, crosshairStroke, crosshairPaint);this.effect3d = effect3d;', 'comment': "/*** Constructs a new VerticalNumberAxis3D.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param verticalLabel Flag indicating whether or not the label is drawn vertically.* @param showTickLabels Flag indicating whether or not tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param showTickMarks Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis is automatically scaled to fit the*          data.* @param autoRangeIncludesZero A flag indicating whether or not zero *must* be displayed on*                axis.* @param autoRangeMinimum The smallest automatic range allowed.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.* @param inverted A flag indicating whether the axis is normal or inverted (inverted means*         running from positive to negative).* @param autoTickUnit A flag indicating whether or not the tick units are automatically*           selected.* @param showGridLines Flag indicating whether or not grid lines are visible for this axis.* @param gridStroke The Stroke used to display grid lines (if visible).* @param gridPaint The Paint used to display grid lines (if visible).* @param crosshairValue The value at which to draw an optional crosshair (null permitted).* @param crosshairStroke The pen/brush used to draw the crosshair.* @param crosshairPaint The color used to draw the crosshair.* @param effect3d 'Z' axis deep.*/", 'coherence': 1}, {'code': 'public VerticalNumberAxis3D() {this(null);', 'comment': '/*** Constructs a VerticalNumberAxis3D, with no label and default attributes.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelif (this.label!=null) {g2.setFont(labelFont);g2.setPaint(labelPaint);Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());if (labelDrawnVertical) {double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);drawVerticalString(label, g2, (float)xx, (float)yy);}else {double xx = drawArea.getX()+labelInsets.left;double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;g2.drawString(label, (float)xx, (float)yy);}}// draw the tick labels and marks and gridlinesthis.refreshTicks(g2, drawArea, plotArea);double xx = plotArea.getX();g2.setFont(tickLabelFont);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float yy = (float)this.translateValueToJava2D(tick.getNumericalValue(), plotArea);if (tickLabelsVisible) {g2.setPaint(this.tickLabelPaint);g2.drawString(tick.getText(), tick.getX(), tick.getY());}if (tickMarksVisible) {g2.setStroke(this.getTickMarkStroke());Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,plotArea.getX(), yy);g2.draw(mark);}if (gridLinesVisible) {g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Double(xx+effect3d, yy-effect3d,plotArea.getMaxX(), yy-effect3d);g2.draw(gridline);Line2D grid3Dline = new Line2D.Double(xx, yy,xx+effect3d, yy-effect3d);g2.draw(grid3Dline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param drawArea The area within which the chart should be drawn.* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public Object getMin() {return min;', 'comment': '/*** Returns the min of the range.*/', 'coherence': 1}, {'code': 'public Object getMax() {return max;', 'comment': '/*** Returns the max of the range.*/', 'coherence': 1}, {'code': 'protected boolean after(Object o1, Object o2) {return (!o1.equals(o2) && !before(o1, o2));', 'comment': '/*** Returns true if o1 is after o2.** @param o1 Object #1 to compare.* @param o2 Object #2 to compare.*/', 'coherence': 1}, {'code': 'public AbstractAxisRange(Object min, Object max) {this.min = min;this.max = max;', 'comment': '/*** Creates an AbstractAxisRange object.** @param min Minimum value* @param max Maximum value*/', 'coherence': 1}, {'code': 'public void combine(AxisRange range) {Object otherMin = range.getMin();Object otherMax = range.getMax();if (before(otherMin, min)) {min = otherMin;}if (after(otherMax, max)) {max = otherMax;', 'comment': '/*** Combines this with range. The result will be a range that contains both* this and range.** @param range Range to combine with this.*/', 'coherence': 1}, {'code': 'public CombinedChart(Dataset data, Plot plot) {super(data, plot, null, null, false);', 'comment': '/*** Standard constructor: returns a CombinedCart for displaying a dataset and* a plot.** @param data The data to be represented in the chart.* @param plot Controller of the visual representation of the data.*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedHeight) {// calculate the width of the axis label...double labelWidth = 0.0;if (label!=null) {Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());labelWidth = labelInsets.left+labelInsets.right;if (this.labelDrawnVertical) {labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation}else {labelWidth = labelWidth + labelBounds.getWidth();}}// calculate the width of the tick labelsdouble tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {Rectangle2D approximatePlotArea = new Rectangle2D.Double(drawArea.getX(), drawArea.getY(),drawArea.getWidth(),drawArea.getHeight()-reservedHeight);this.refreshTicks(g2, drawArea, approximatePlotArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, approximatePlotArea);}return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,drawArea.getHeight()-reservedHeight);', 'comment': '/*** Returns area in which the axis will be displayed.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area in which the plot and axes should be drawn;* @param reservedHeight The height reserved for the horizontal axis;*/', 'coherence': 1}, {'code': 'public boolean isLabelDrawnVertical() {return this.labelDrawnVertical;', 'comment': '/*** Returns a flag that indicates whether or not the axis label is drawn with a vertical* orientation (this saves space).* @return A flag that indicates whether or not the axis label is drawn with a vertical* orientation.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean labelDrawnVertical,boolean tickLabelsVisible, Font tickLabelFont, Paint tickLabelPaint,Insets tickLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, boolean autoRangeIncludesZero,Number autoRangeMinimum,double minimumAxisValue, double maximumAxisValue,boolean inverted,boolean autoTickUnitSelection,NumberTickUnit tickUnit,boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,double crosshairValue, Stroke crosshairStroke, Paint crosshairPaint) {super(label,labelFont, labelPaint, labelInsets,tickLabelsVisible,tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible,tickMarkStroke,autoRange, autoRangeIncludesZero, autoRangeMinimum,minimumAxisValue, maximumAxisValue,inverted,autoTickUnitSelection, tickUnit,gridLinesVisible, gridStroke, gridPaint,crosshairValue, crosshairStroke, crosshairPaint);this.labelDrawnVertical = labelDrawnVertical;', 'comment': '/*** Constructs a vertical number axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param labelDrawnVertical Flag indicating whether or not the label is drawn vertically.* @param tickLabelsVisible Flag indicating whether or not tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param showTickMarks Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis is automatically scaled to fit the*          data.* @param autoRangeIncludesZero A flag indicating whether or not zero *must* be displayed on*                axis.* @param autoRangeMinimum The smallest automatic range allowed.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.* @param inverted A flag indicating whether the axis is normal or inverted (inverted means*         running from positive to negative).* @param autoTickUnitSelection A flag indicating whether or not the tick units are*                selected automatically.* @param tickUnit The tick unit.* @param showGridLines Flag indicating whether or not grid lines are visible for this axis.* @param gridStroke The pen/brush used to display grid lines (if visible).* @param gridPaint The color used to display grid lines (if visible).* @param crosshairValue The value at which to draw an optional crosshair (null permitted).* @param crosshairStroke The pen/brush used to draw the crosshair.* @param crosshairPaint The color used to draw the crosshair.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis() {this(null);', 'comment': '/*** Constructs a vertical number axis, using default values where necessary.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis(String label, Font labelFont,double minimumAxisValue, double maximumAxisValue) {this(label,labelFont,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true, // vertical axis labeltrue, // tick labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true, // tick marks visibleAxis.DEFAULT_TICK_STROKE,true, // auto rangetrue, // auto range includes zeroNumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,minimumAxisValue,maximumAxisValue,false, // invertedtrue, // auto tick unit selectionNumberAxis.DEFAULT_TICK_UNIT,true, // grid lines visibleValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT,0.0,ValueAxis.DEFAULT_CROSSHAIR_STROKE,ValueAxis.DEFAULT_CROSSHAIR_PAINT);', 'comment': '/*** Constructs a vertical number axis.* @param label The axis label (null permitted).* @param labelFont The font for displaying the axis label.* @param minimumAxisValue The lowest value shown on the axis.* @param maximumAxisValue The highest value shown on the axis.*/', 'coherence': 1}, {'code': 'public void setLabelDrawnVertical(boolean flag) {if (this.labelDrawnVertical!=flag) {this.labelDrawnVertical = flag;this.notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag that controls whether or not the axis label is drawn with a vertical* orientation.* @param flag The flag.*/', 'coherence': 1}, {'code': 'public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the width of the axis label...double labelWidth = 0.0;if (label!=null) {Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());labelWidth = labelInsets.left+labelInsets.right;if (this.labelDrawnVertical) {labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation}else {labelWidth = labelWidth + labelBounds.getWidth();}}// calculate the width required for the tick labels (if visible);double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {this.refreshTicks(g2, drawArea, drawArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);}return labelWidth+tickLabelWidth;', 'comment': '/*** Returns the width required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();g2.setFont(tickLabelFont);if (this.autoTickUnitSelection) {selectAutoTickUnit(g2, drawArea, plotArea);}double size = this.tickUnit.getValue().doubleValue();int count = this.calculateVisibleTickCount();double lowestTickValue = this.calculateLowestVisibleTickValue();//tickLabelFormatter = new DecimalFormat(tickLabelFormatter.toPattern());for (int i=0; i<count; i++) {Number currentTickValue = new Double(lowestTickValue+(i*size));double yy = this.translateValueToJava2D(currentTickValue.doubleValue(), plotArea);String tickLabel = this.valueToString(currentTickValue.doubleValue());Rectangle2D tickLabelBounds = tickLabelFont.getStringBounds(tickLabel,g2.getFontRenderContext());float x = (float)(plotArea.getX()-tickLabelBounds.getWidth()-tickLabelInsets.left-tickLabelInsets.right);float y = (float)(yy+(tickLabelBounds.getHeight()/2));Tick tick = new Tick(currentTickValue, tickLabel, x, y);ticks.add(tick);', 'comment': '/*** Calculates the positions of the tick labels for the axis, storing the results in the* tick label list (ready for drawing).* @param g2 The graphics device.* @param drawArea The area in which the plot and the axes should be drawn.* @param plotArea The area in which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public VerticalNumberAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE);this.autoRange = true;', 'comment': '/*** Constructs a vertical number axis, using default values where necessary.* @param label The axis label (null permitted).*/', 'coherence': 1}, {'code': 'public void configure() {if (isAutoRange()) {autoAdjustRange();', 'comment': '/*** Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets* the maximum and minimum values.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelif (this.label!=null) {g2.setFont(labelFont);g2.setPaint(labelPaint);Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());if (labelDrawnVertical) {double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);drawVerticalString(label, g2, (float)xx, (float)yy);}else {double xx = drawArea.getX()+labelInsets.left;double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;g2.drawString(label, (float)xx, (float)yy);}}// draw the tick labels and marks and gridlinesthis.refreshTicks(g2, drawArea, plotArea);double xx = plotArea.getX();g2.setFont(tickLabelFont);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float yy = (float)this.translateValueToJava2D(tick.getNumericalValue(), plotArea);if (tickLabelsVisible) {g2.setPaint(this.tickLabelPaint);g2.drawString(tick.getText(), tick.getX(), tick.getY());}if (tickMarksVisible) {g2.setStroke(this.getTickMarkStroke());Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,plotArea.getX()+2, yy);g2.draw(mark);}if (gridLinesVisible) {g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Double(xx, yy,plotArea.getMaxX(), yy);g2.draw(gridline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn.* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMinimumRangeValue(data);}else return null;', 'comment': '/*** Returns the minimum value in the range, since this is plotted against the vertical axis for* BarPlot.*/', 'coherence': 1}, {'code': 'public CategoryAxis getCategoryAxis() {return (CategoryAxis)horizontalAxis;', 'comment': '/*** A convenience method that returns a reference to the horizontal axis cast as a* CategoryAxis.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {if (axis instanceof CategoryAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The horizontal axis;*/', 'coherence': 1}, {'code': 'public void setVerticalAxis(Axis vAxis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setVerticalAxis(vAxis);', 'comment': "/*** Sets the vertical axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param vAxis The new vertical axis.*/", 'coherence': 1}, {'code': 'public double getCategoryCoordinate(int category, Rectangle2D area) {// calculate first part of result...double result = area.getX() + (area.getWidth()*introGapPercent);// then add some depending on how many categories...int categoryCount = getDataset().getCategoryCount();if (categoryCount>1) {double categorySpan = area.getWidth()* (1-introGapPercent-trailGapPercent-categoryGapsPercent);double categoryGapSpan = area.getWidth()*categoryGapsPercent;result = result+ (category+0.5)*(categorySpan/categoryCount)+ (category)*(categoryGapSpan/(categoryCount-1));}else {result = result+ (category+0.5)*area.getWidth()*(1-introGapPercent-trailGapPercent);}return result;', 'comment': '/*** Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.* @param category The index of the category of interest (first category index = 0);* @param area The region within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public ValueAxis getRangeAxis() {return (ValueAxis)verticalAxis;', 'comment': '/*** Returns the range axis.*/', 'coherence': 1}, {'code': 'double calculateBarWidth(Rectangle2D plotArea) {CategoryDataset data = getDataset();// series, category and bar countsint categoryCount = data.getCategoryCount();int seriesCount = data.getSeriesCount();int barCount = renderer.barWidthsPerCategory(data)*categoryCount;// calculate the plot width (bars are vertical) less whitespacedouble usable = plotArea.getWidth() *(1.0 - introGapPercent - trailGapPercent - categoryGapsPercent);if (renderer.barWidthsPerCategory(data)>1) {//    usable = usable - ((seriesCount-1) * categoryCount * seriesGap);}// and thus the width of the barsreturn usable/barCount;', 'comment': '/*** Returns the width of each bar in the chart.* @param area The area within which the plot will be drawn.*/', 'coherence': 1}, {'code': 'public String getPlotType() {return "Bar Plot";', 'comment': '/*** Returns a short string describing the type of plot.*/', 'coherence': 1}, {'code': 'public VerticalBarPlot(CategoryAxis horizontalAxis, ValueAxis verticalAxis,Insets insets,double introGapPercent, double trailGapPercent,double categoryGapPercent, double itemGapPercent,CategoryToolTipGenerator toolTipGenerator) {super(horizontalAxis, verticalAxis,insets,introGapPercent, trailGapPercent, categoryGapPercent, itemGapPercent,toolTipGenerator);this.renderer = new VerticalBarRenderer();', 'comment': '/*** Constructs a new vertical bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param introGapPercent The gap before the first bar in the plot, as a percentage of the*            available drawing space.* @param trailGapPercent The gap after the last bar in the plot, as a percentage of the*            available drawing space.* @param categoryGapPercent The percentage of drawing space allocated to the gap between the*               last bar in one category and the first bar in the next category.* @param itemGapPercent The gap between bars within the same category.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {// set up the drawing info...ToolTipsCollection tooltips = null;if (info!=null) {info.setPlotArea(plotArea);tooltips = info.getToolTipsCollection();}// adjust the drawing area for the plot insets (if any)...if (insets!=null) {plotArea.setRect(plotArea.getX()+insets.left,plotArea.getY()+insets.top,plotArea.getWidth()-insets.left-insets.right,plotArea.getHeight()-insets.top-insets.bottom);}if ((plotArea.getWidth()>=MINIMUM_WIDTH_TO_DRAW)&& (plotArea.getHeight()>=MINIMUM_HEIGHT_TO_DRAW)) {// estimate the area required for drawing the axes...HorizontalAxis hAxis = getHorizontalAxis();VerticalAxis vAxis = getVerticalAxis();double hAxisAreaHeight = hAxis.reserveHeight(g2, this, plotArea);Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, plotArea, hAxisAreaHeight);// and thus the area available for plotting...Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisArea.getWidth(),plotArea.getY(),plotArea.getWidth()-vAxisArea.getWidth(),plotArea.getHeight()-hAxisAreaHeight);if (info!=null) {info.setDataArea(dataArea);}Shape backgroundPlotArea = calculateBackgroundPlotArea(dataArea);// draw the background and axes...drawOutlineAndBackground(g2, backgroundPlotArea);getCategoryAxis().draw(g2, plotArea, dataArea);getRangeAxis().draw(g2, plotArea, dataArea);drawBars(g2, backgroundPlotArea, dataArea, info);// draw horizontal crosshair if required...ValueAxis vva = this.getRangeAxis();if (vva.isCrosshairVisible()) {this.drawHorizontalLine(g2, dataArea, vva.getCrosshairValue(),vva.getCrosshairStroke(),vva.getCrosshairPaint());', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param plotArea The area within which the plot should be drawn.* @param info Collects info as the chart is drawn.*/', 'coherence': 1}, {'code': 'public void setRenderer(VerticalBarRenderer renderer) {this.renderer = renderer;this.notifyListeners(new PlotChangeEvent(this));', 'comment': '/*** Sets the renderer for the bar plot.* @param renderer The renderer.*/', 'coherence': 1}, {'code': 'protected Shape calculateBackgroundPlotArea(Rectangle2D plotArea) {return plotArea;', 'comment': "/*** Returns chart's background area.*/", 'coherence': 1}, {'code': 'public Number getMaximumVerticalDataValue() {Dataset data = this.getChart().getDataset();if (data!=null) {return Datasets.getMaximumRangeValue(data);}else return null;', 'comment': '/*** Returns the maximum value in either the domain or the range, whichever is displayed against* the vertical axis for the particular type of plot implementing this interface.*/', 'coherence': 1}, {'code': 'public java.util.List getCategories() {return getDataset().getCategories();', 'comment': '/*** A convenience method that returns a list of the categories in the dataset.*/', 'coherence': 1}, {'code': 'public VerticalBarPlot(CategoryAxis horizontalAxis, ValueAxis verticalAxis) {this(horizontalAxis, verticalAxis,Plot.DEFAULT_INSETS,BarPlot.DEFAULT_INTRO_GAP_PERCENT,BarPlot.DEFAULT_TRAIL_GAP_PERCENT,BarPlot.DEFAULT_CATEGORY_GAPS_PERCENT,BarPlot.DEFAULT_ITEM_GAPS_PERCENT,null', 'comment': '/*** Constructs a new vertical bar plot.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'public CategoryDataset getDataset() {return (CategoryDataset)chart.getDataset();', 'comment': '/*** A convenience method that returns the dataset for the plot, cast as a CategoryDataset.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {// check that the axis implements the required interface (if not raise an exception);super.setHorizontalAxis(axis);', 'comment': "/*** Sets the horizontal axis for the plot.  This method should throw an exception if the axis* doesn't implement the required interfaces.* @param axis The new horizontal axis.*/", 'coherence': 1}, {'code': 'protected void drawBars(Graphics2D g2,Shape backgroundPlotArea, Rectangle2D dataArea,DrawInfo info) {// now get the data and plot the bars...CategoryDataset data = this.getDataset();if (data!=null) {Shape savedClip = g2.getClip();g2.clip(backgroundPlotArea);int seriesCount = data.getSeriesCount();int categoryCount = data.getCategoryCount();int barCount = renderer.barWidthsPerCategory(data);double translatedZero = getRangeAxis().translateValueToJava2D(0.0, dataArea);// work out the span dimensions for the categories...double categorySpan = 0.0;double categoryGapSpan = 0.0;if (categoryCount>1) {categorySpan = dataArea.getWidth()* (1-introGapPercent-trailGapPercent-categoryGapsPercent);categoryGapSpan = dataArea.getWidth()*categoryGapsPercent;}else {categorySpan = dataArea.getWidth()*(1-introGapPercent-trailGapPercent);}// work out the item span...double itemSpan = categorySpan;double itemGapSpan = 0.0;if (seriesCount>1) {if (renderer.hasItemGaps()) {itemGapSpan = dataArea.getWidth()*itemGapsPercent;itemSpan = itemSpan - itemGapSpan;}}double itemWidth = itemSpan/(categoryCount*renderer.barWidthsPerCategory(data));int categoryIndex = 0;Iterator iterator = data.getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();for (int series=0; series<seriesCount; series++) {Shape tooltipArea = renderer.drawBar(g2,dataArea, this,getRangeAxis(),data, series,category, categoryIndex,translatedZero, itemWidth,categorySpan, categoryGapSpan,itemSpan, itemGapSpan);// add a tooltip for the bar...if (info!=null) {ToolTipsCollection tooltips = info.getToolTipsCollection();if (tooltips!=null) {if (this.toolTipGenerator==null) {toolTipGenerator = new StandardCategoryToolTipGenerator();}String tip = this.toolTipGenerator.generateToolTip(data, series,category);if (tooltipArea!=null) {tooltips.addToolTip(tip, tooltipArea);}}}}categoryIndex++;}// draw a line at zero...Line2D baseline = new Line2D.Double(dataArea.getX(), translatedZero,dataArea.getMaxX(), translatedZero);g2.setStroke(new BasicStroke());g2.draw(baseline);g2.setClip(savedClip);', 'comment': '/*** Draws charts bars* @param g2 The graphics device;* @param backgroundPlotArea The area within which will be clipped* @param plotArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public void handleClick(int x, int y, DrawInfo info) {// set the anchor value for the horizontal axis...ValueAxis vva = this.getRangeAxis();double vvalue = vva.translateJava2DtoValue((float)y, info.getDataArea());vva.setAnchorValue(vvalue);vva.setCrosshairValue(vvalue);', 'comment': "/*** Handles a 'click' on the plot by updating the anchor values...*/", 'coherence': 1}, {'code': 'public void drawOutlineAndBackground(Graphics2D g2, Shape area) {if (backgroundPaint!=null) {g2.setPaint(backgroundPaint);g2.fill(area);}if ((outlineStroke!=null) && (outlinePaint!=null)) {g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(area);', 'comment': '/*** Draws the plot outline and background.* @param g2 The graphics device.* @param area The area for the plot.*/', 'coherence': 1}, {'code': 'public void setAutoTickUnitSelection(boolean flag) {if (this.autoTickUnitSelection!=flag) {this.autoTickUnitSelection = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets a flag indicating whether or not the tick unit is automatically selected from a* range of standard tick units.* <P>* Registered listeners are notified of a change to the axis.* @param flag The new value of the flag.*/', 'coherence': 1}, {'code': 'public void setCrosshairVisible(boolean flag) {if (this.crosshairVisible!=flag) {this.crosshairVisible=flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag indicating whether or not a crosshair is visible for this axis.* @param flag The new value of the flag.*/', 'coherence': 1}, {'code': 'public boolean isGridLinesVisible() {return gridLinesVisible;', 'comment': '/*** Returns true if the grid lines are showing, and false otherwise.* @return True if the grid lines are showing, and false otherwise.*/', 'coherence': 1}, {'code': 'public Paint getGridPaint() {return gridPaint;', 'comment': '/*** Returns the grid line color.* @return The grid line color.*/', 'coherence': 1}, {'code': 'public void setGridLinesVisible(boolean flag) {if (gridLinesVisible!=flag) {gridLinesVisible = flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the visibility of the grid lines and notifies registered listeners that the axis has* been modified.* @param flag The new setting.*/', 'coherence': 1}, {'code': 'public void setCrosshairValue(double value) {this.crosshairValue = value;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the crosshair value for the axis.* <P>* Registered listeners are notified that the axis has been modified.* @param value The new value (null permitted).*/', 'coherence': 1}, {'code': 'public void setMaximumAxisValue(double value) {if (this.maximumAxisValue!=value) {this.maximumAxisValue = value;this.autoRange = false;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the maximum value for the axis.* <P>* Registered listeners are notified that the axis has been modified.* @param value The new maximum.*/', 'coherence': 1}, {'code': 'public double getMinimumAxisValue() {return minimumAxisValue;', 'comment': '/*** Returns the minimum value for the axis.* @return The minimum value for the axis.*/', 'coherence': 1}, {'code': 'public void setAnchorValue(double value) {this.anchorValue = value;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the anchor value for this axis.*/', 'coherence': 1}, {'code': 'public void setCrosshairStroke(Stroke stroke) {crosshairStroke = stroke;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the Stroke used to draw the grid lines (if visible) and notifies registered listeners* that the axis has been modified.* @param stroke The new grid line stroke.*/', 'coherence': 1}, {'code': 'public Paint getCrosshairPaint() {return crosshairPaint;', 'comment': '/*** Returns the grid line color.* @return The grid line color.*/', 'coherence': 1}, {'code': 'public Stroke getCrosshairStroke() {return crosshairStroke;', 'comment': '/*** Returns the Stroke used to draw the crosshair (if visible).*/', 'coherence': 1}, {'code': 'public ValueAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_AXIS_LABEL_INSETS,true, // tick labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true, // tick marks visibleAxis.DEFAULT_TICK_STROKE,true, // auto rangetrue, // auto tick unittrue, // show grid linesValueAxis.DEFAULT_GRID_LINE_STROKE,ValueAxis.DEFAULT_GRID_LINE_PAINT,0.0,  // crosshairValueAxis.DEFAULT_CROSSHAIR_STROKE,ValueAxis.DEFAULT_CROSSHAIR_PAINT);', 'comment': '/*** Constructs a value axis, using default values where necessary.* @param label The axis label.*/', 'coherence': 1}, {'code': 'public double getCrosshairValue() {return this.crosshairValue;', 'comment': '/*** Returns the crosshair value.*/', 'coherence': 1}, {'code': 'public double getMaximumAxisValue() {return maximumAxisValue;', 'comment': '/*** Returns the maximum value for the axis.*/', 'coherence': 1}, {'code': 'public void setAxisRange(double lower, double upper) {this.autoRange = false;this.minimumAxisValue = lower;this.maximumAxisValue = upper;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the axis range.* @param lower The lower axis limit.* @param upper The upper axis limit.*/', 'coherence': 1}, {'code': 'public boolean isCrosshairVisible() {return this.crosshairVisible;', 'comment': '/*** Returns a flag indicating whether or not a crosshair is visible for this axis.*/', 'coherence': 1}, {'code': 'public void setGridPaint(Paint paint) {// check arguments...if (paint==null) {throw new IllegalArgumentException("ValueAxis.setGridPaint(...): null not permitted");}gridPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the Paint used to color the grid lines (if visible) and notifies registered listeners* that the axis has been modified.* @param paint The new grid paint.*/', 'coherence': 1}, {'code': 'public boolean isAutoTickUnitSelection() {return autoTickUnitSelection;', 'comment': '/*** Returns a flag indicating whether or not the tick unit is automatically selected from a* range of standard tick units.* @return A flag indicating whether or not the tick unit is automatically selected.*/', 'coherence': 1}, {'code': 'public void setGridStroke(Stroke stroke) {// check arguments...if (stroke==null) {throw new IllegalArgumentException("ValueAxis.setGridStroke(...): null not permitted");}// make the change...gridStroke = stroke;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the Stroke used to draw the grid lines (if visible) and notifies registered listeners* that the axis has been modified.* @param stroke The new grid line stroke.*/', 'coherence': 1}, {'code': 'public Stroke getGridStroke() {return gridStroke;', 'comment': '/*** Returns the Stroke used to draw the grid lines (if visible).*/', 'coherence': 1}, {'code': 'public void setMinimumAxisValue(double value) {if (this.minimumAxisValue!=value) {this.minimumAxisValue = value;this.autoRange = false;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the minimum value for the axis.* <P>* Registered listeners are notified that the axis has been modified.* @param value The new minimum.*/', 'coherence': 1}, {'code': 'public void setAutoRange(boolean auto) {if (this.autoRange!=auto) {this.autoRange=auto;if (autoRange) autoAdjustRange();notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets a flag that determines whether or not the axis range is automatically adjusted to fit* the data, and notifies registered listeners that the axis has been modified.* @param auto Flag indicating whether or not the axis is automatically scaled to fit the data.*/', 'coherence': 1}, {'code': 'public void setCrosshairLockedOnData(boolean flag) {if (this.crosshairLockedOnData!=flag) {this.crosshairLockedOnData=flag;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the flag indicating whether or not the crosshair should "lock-on" to actual data* values.*/', 'coherence': 1}, {'code': 'public void setCrosshairPaint(Paint paint) {crosshairPaint = paint;notifyListeners(new AxisChangeEvent(this));', 'comment': '/*** Sets the Paint used to color the grid lines (if visible) and notifies registered listeners* that the axis has been modified.* @param paint The new grid paint.*/', 'coherence': 1}, {'code': 'protected ValueAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean tickLabelsVisible,Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke,boolean autoRange, boolean autoTickUnitSelection,boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,double crosshairValue,Stroke crosshairStroke, Paint crosshairPaint) {super(label,labelFont, labelPaint, labelInsets,tickLabelsVisible,tickLabelFont, tickLabelPaint, tickLabelInsets,tickMarksVisible, tickMarkStroke);this.autoRange = autoRange;this.autoTickUnitSelection = autoTickUnitSelection;this.gridLinesVisible = gridLinesVisible;this.gridStroke = gridStroke;this.gridPaint = gridPaint;this.crosshairValue = crosshairValue;this.crosshairStroke = crosshairStroke;this.crosshairPaint = crosshairPaint;', 'comment': '/*** Constructs a value axis.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.* @param tickLabelFont The font used to display tick labels.* @param tickLabelPaint The paint used to draw tick labels.* @param tickLabelInsets Determines the amount of blank space around tick labels.* @param tickMarksVisible Flag indicating whether or not the tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).* @param autoRange Flag indicating whether or not the axis range is automatically adjusted to*          fit the data.* @param autoTickUnitSelection A flag indicating whether or not the tick unit is automatically*                selected.* @param gridLinesVisible Flag indicating whether or not grid lines are visible.* @param gridStroke The Stroke used to display grid lines (if visible).* @param gridPaint The Paint used to display grid lines (if visible).* @param crosshairValue The value at which to draw an optional crosshair (null permitted).* @param crosshairStroke The pen/brush used to draw the crosshair.* @param crosshairPaint The color used to draw the crosshair.*/', 'coherence': 1}, {'code': 'public boolean isAutoRange() {return autoRange;', 'comment': '/*** Returns true if the axis range is automatically adjusted to fit the data, and false* otherwise.*/', 'coherence': 1}, {'code': 'public boolean isCrosshairLockedOnData() {return this.crosshairLockedOnData;', 'comment': '/*** Returns a flag indicating whether or not the crosshair should "lock-on" to actual data* values.*/', 'coherence': 1}, {'code': 'public double getAnchorValue() {return anchorValue;', 'comment': '/*** Returns the anchor value for this axis.*/', 'coherence': 1}, {'code': 'public TickUnit getNearestTickUnit(TickUnit unit) {int index = Collections.binarySearch(units, unit);if (index>=0) {return (TickUnit)units.get(index);}else {index = -(index + 1);return (TickUnit)units.get(Math.min(index, units.size()));', 'comment': '/*** Returns the tick unit in the collection that is closest in size to the specified unit.* @param unit The unit.* @returns The unit in the collection that is closest in size to the specified unit.*/', 'coherence': 1}, {'code': 'public TickUnits() {this.units = new ArrayList();', 'comment': '/*** Constructs a new collection of tick units.*/', 'coherence': 1}, {'code': 'public void add(TickUnit unit) {units.add(unit);Collections.sort(units);', 'comment': '/*** Adds a tick unit to the collection.* <P>* The tick units are maintained in ascending order.*/', 'coherence': 1}, {'code': 'public Shape drawBar(Graphics2D g2, Rectangle2D dataArea, BarPlot plot, ValueAxis valueAxis,CategoryDataset data, int series, Object category, int categoryIndex,double translatedZero, double itemWidth,double categorySpan, double categoryGapSpan,double itemSpan, double itemGapSpan) {Shape result = null;// check the value we are plotting...Number value = data.getValue(series, category);if (value!=null) {// BAR Xdouble rectX = dataArea.getX()+dataArea.getWidth()*plot.getIntroGapPercent();int categories = data.getCategoryCount();int seriesCount = data.getSeriesCount();if (categories>1) {rectX = rectX// bars in completed categories+ categoryIndex*(categorySpan/categories)// gaps between completed categories+ (categoryIndex*(categoryGapSpan/(categories-1))// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount)));if (seriesCount>1) {rectX = rectX+ (series*itemGapSpan/(categories*(seriesCount-1)));}}else {rectX = rectX// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount));if (seriesCount>1) {rectX = rectX+ (series*itemGapSpan/(categories*(seriesCount-1)));}}// BAR Ydouble translatedValue = valueAxis.translateValueToJava2D(value.doubleValue(), dataArea);double rectY = Math.min(translatedZero, translatedValue);// BAR WIDTHdouble rectWidth = itemWidth;// BAR HEIGHTdouble rectHeight = Math.abs(translatedValue-translatedZero);Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);Paint seriesPaint = plot.getSeriesPaint(series);g2.setPaint(seriesPaint);g2.fill(bar);result = bar;GeneralPath bar3dRight = null;GeneralPath bar3dTop = null;double effect3d = 0.00;VerticalAxis vAxis = plot.getVerticalAxis();if (rectHeight != 0 && vAxis instanceof VerticalNumberAxis3D) {effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();bar3dRight = new GeneralPath();bar3dRight.moveTo((float)(rectX+rectWidth), (float)rectY);bar3dRight.lineTo((float)(rectX+rectWidth), (float)(rectY+rectHeight));bar3dRight.lineTo((float)(rectX+rectWidth+effect3d),(float)(rectY+rectHeight-effect3d));bar3dRight.lineTo((float)(rectX+rectWidth+effect3d), (float)(rectY-effect3d));if (seriesPaint instanceof Color) {g2.setPaint( ((Color) seriesPaint).darker());}g2.fill(bar3dRight);bar3dTop = new GeneralPath();bar3dTop.moveTo( (float) rectX, (float) rectY);bar3dTop.lineTo((float) (rectX+effect3d), (float) (rectY-effect3d));bar3dTop.lineTo((float) (rectX+rectWidth+effect3d), (float) (rectY-effect3d));bar3dTop.lineTo((float) (rectX+rectWidth), (float) (rectY) );if (seriesPaint instanceof Color) {g2.setPaint( ((Color) seriesPaint)); //.brighter());}g2.fill(bar3dTop);}if (itemWidth>3) {g2.setStroke(plot.getSeriesOutlineStroke(series));//g2.setStroke(new BasicStroke(0.25f));g2.setPaint(plot.getSeriesOutlinePaint(series));g2.draw(bar);if (bar3dRight != null) {g2.draw(bar3dRight);}if (bar3dTop != null) {g2.draw(bar3dTop);}}}return result;', 'comment': '/*** Renders an individual bar...there are bug-fixes that have been applied to VerticalBarRenderer* that need to be applied here too.*/', 'coherence': 1}, {'code': 'public boolean hasItemGaps() {return true;', 'comment': '/*** Returns true, since there are (potentially) gaps between bars in this representation.*/', 'coherence': 1}, {'code': 'public int barWidthsPerCategory(CategoryDataset data) {return data.getSeriesCount();', 'comment': '/*** This will be a method in the renderer that tells whether there is one bar width per category* or onebarwidth per series per category.*/', 'coherence': 1}, {'code': 'public Shape drawBar(Graphics2D g2, Rectangle2D dataArea, BarPlot plot, ValueAxis valueAxis,CategoryDataset data, int series, Object category, int categoryIndex,double translatedZero, double itemWidth,double categorySpan, double categoryGapSpan,double itemSpan, double itemGapSpan) {Shape result = null;// first check the value we are plotting...Number value = data.getValue(series, category);if (value!=null) {// BAR Xdouble rectX = dataArea.getX()+dataArea.getWidth()*plot.getIntroGapPercent();int categories = data.getCategoryCount();int seriesCount = data.getSeriesCount();if (categories>1) {rectX = rectX// bars in completed categories+ categoryIndex*(categorySpan/categories)// gaps between completed categories+ (categoryIndex*(categoryGapSpan/(categories-1))// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount)));if (seriesCount>1) {rectX = rectX+ (series*itemGapSpan/(categories*(seriesCount-1)));}}else {rectX = rectX// bars+gaps completed in current category+ (series*itemSpan/(categories*seriesCount));if (seriesCount>1) {rectX = rectX+ (series*itemGapSpan/(categories*(seriesCount-1)));}}// BAR Ydouble translatedValue = valueAxis.translateValueToJava2D(value.doubleValue(), dataArea);double rectY = Math.min(translatedZero, translatedValue);// BAR WIDTHdouble rectWidth = itemWidth;// BAR HEIGHTdouble rectHeight = Math.abs(translatedValue-translatedZero);Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);Paint seriesPaint = plot.getSeriesPaint(series);g2.setPaint(seriesPaint);g2.fill(bar);if (itemWidth>3) {g2.setStroke(plot.getSeriesStroke(series));g2.setPaint(plot.getSeriesOutlinePaint(series));g2.draw(bar);}result = bar;}return result;', 'comment': '/*** Handles the rendering of a single bar.* @param g2* @param dataArea* @param plot* @param valueAxis* @param data* @param series* @param category* @param categoryIndex* @param translatedZero* @param itemWidth* @param categorySpan* @param categoryGapSpan* @param itemSpan* @param itemGapSpan* @return A shape representing the area in which the bar is drawn (one use for this is*     supporting tooltips).*/', 'coherence': 1}, {'code': 'public boolean hasItemGaps() {return true;', 'comment': '/*** Returns true, since for this renderer there are gaps between the items in one category.*/', 'coherence': 1}, {'code': 'public int barWidthsPerCategory(CategoryDataset data) {return data.getSeriesCount();', 'comment': '/*** Returns the number of bar-widths displayed in each category.  For this renderer, there is one* bar per series, so we return the number of series.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {// draw the axis labelif (label!=null) {g2.setFont(labelFont);g2.setPaint(labelPaint);FontRenderContext frc = g2.getFontRenderContext();LineMetrics metrics = labelFont.getLineMetrics(label, frc);Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);if (verticalLabel) {double xx = drawArea.getX()+labelInsets.left+metrics.getHeight()-metrics.getDescent()-metrics.getLeading();double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);drawVerticalString(label, g2, (float)xx, (float)yy);}else {double xx = drawArea.getX()+labelInsets.left;double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;g2.drawString(label, (float)xx, (float)yy);}}// draw the category labelsif (this.tickLabelsVisible) {g2.setFont(tickLabelFont);g2.setPaint(tickLabelPaint);this.refreshTicks(g2, drawArea, plotArea);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();g2.drawString(tick.getText(), tick.getX(), tick.getY());', 'comment': '/*** Draws the CategoryAxis on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device.* @param drawArea The area within which the axis should be drawn.* @param plotArea The area within which the plot is being drawn.*/', 'coherence': 1}, {'code': 'protected boolean isCompatiblePlot(Plot plot) {if (plot instanceof CategoryPlot) return true;else return false;', 'comment': '/*** Returns true if the specified plot is compatible with the axis, and false otherwise.* @param plot The plot;*/', 'coherence': 1}, {'code': 'public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {this.ticks.clear();CategoryPlot categoryPlot = (CategoryPlot)plot;Dataset data = categoryPlot.getDataset();if (data!=null) {Font font = this.getTickLabelFont();g2.setFont(font);FontRenderContext frc = g2.getFontRenderContext();int categoryIndex = 0;Iterator iterator = categoryPlot.getDataset().getCategories().iterator();while (iterator.hasNext()) {Object category = iterator.next();String label = category.toString();Rectangle2D labelBounds = font.getStringBounds(label, frc);LineMetrics metrics = font.getLineMetrics(label, frc);float xx = (float)(plotArea.getX()-tickLabelInsets.right-labelBounds.getWidth());float yy = (float)(categoryPlot.getCategoryCoordinate(categoryIndex, plotArea)-metrics.getStrikethroughOffset()+0.5f);Tick tick = new Tick(category, label, xx, yy);ticks.add(tick);categoryIndex = categoryIndex+1;', 'comment': '/*** Creates a temporary list of ticks that can be used when drawing the axis.* @param g2 The graphics device (used to get font measurements).* @param drawArea The area where the plot and axes will be drawn.* @param plotArea The area inside the axes.*/', 'coherence': 1}, {'code': 'public VerticalCategoryAxis(String label,Font labelFont, Paint labelPaint, Insets labelInsets,boolean verticalLabel,boolean categoryLabelsVisible,Font categoryLabelFont, Paint categoryLabelPaint,Insets categoryLabelInsets,boolean tickMarksVisible, Stroke tickMarkStroke) {super(label, labelFont, labelPaint, labelInsets,categoryLabelsVisible, categoryLabelFont, categoryLabelPaint, categoryLabelInsets,tickMarksVisible, tickMarkStroke);this.verticalLabel = verticalLabel;', 'comment': '/*** Full constructor: returns a new VerticalCategoryAxis with attributes as specified by the* caller.* @param label The axis label.* @param labelFont The font for displaying the axis label.* @param labelPaint The paint used to draw the axis label.* @param labelInsets Determines the amount of blank space around the label.* @param verticalLabel Flag indicating whether or not the axis label is drawn vertically.* @param categoryLabelsVisible Flag indicating whether or not category labels are visible.* @param categoryLabelFont The font used to display category labels.* @param categoryLabelPaint The paint used to draw category labels.* @param tickMarksVisible Flag indicating whether or not tick marks are visible.* @param tickMarkStroke The stroke used to draw tick marks (if visible).*/', 'coherence': 1}, {'code': 'public VerticalCategoryAxis(String label) {this(label,Axis.DEFAULT_AXIS_LABEL_FONT,Axis.DEFAULT_AXIS_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,true, // vertical labeltrue, // category labels visibleAxis.DEFAULT_TICK_LABEL_FONT,Axis.DEFAULT_TICK_LABEL_PAINT,Axis.DEFAULT_TICK_LABEL_INSETS,false, // tick marks visibleAxis.DEFAULT_TICK_STROKE);', 'comment': '/*** Constructs a VerticalCategoryAxis, using default attributes where necessary.* @param label The axis label.*/', 'coherence': 1}, {'code': 'public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {// calculate the width of the axis label...double labelWidth = 0.0;if (label!=null) {Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());labelWidth = this.labelInsets.left+labelInsets.right;if (this.verticalLabel) {// assume width == height before rotationlabelWidth = labelWidth + labelBounds.getHeight();}else {labelWidth = labelWidth + labelBounds.getWidth();}}// calculate the width required for the tick labels (if visible);double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {this.refreshTicks(g2, drawArea, drawArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);}return labelWidth+tickLabelWidth;', 'comment': '/*** Estimates the height required for the axis, given a specific drawing area, without any* information about the width of the vertical axis.* <P>* Supports the HorizontalAxisLead interface.* @param g2 The graphics device (used to obtain font information).* @param drawArea The area within which the axis should be drawn.* @param plot The plot that the axis belongs to.*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedHeight) {// calculate the width of the axis label...double labelWidth = 0.0;if (label!=null) {Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());labelWidth = this.labelInsets.left+labelInsets.right;if (this.verticalLabel) {// assume width == height before rotationlabelWidth = labelWidth + labelBounds.getHeight();}else {labelWidth = labelWidth + labelBounds.getWidth();}}// calculate the width required for the tick labels (if visible);double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;if (tickLabelsVisible) {this.refreshTicks(g2, drawArea, drawArea);tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);}return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,drawArea.getHeight()-reservedHeight);', 'comment': '/*** Returns the area required to draw the axis in the specified draw area.* @param g2 The graphics device;* @param drawArea The area within which the plot should be drawn;* @param reservedHeight The height reserved by the horizontal axis.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {if (axis instanceof VerticalNumberAxis3D) {return true;}else return false;', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.* @param axis The vertical axis;*/', 'coherence': 1}, {'code': 'public VerticalBarPlot3D(CategoryAxis horizontalAxis, ValueAxis verticalAxis) {this(horizontalAxis, verticalAxis,Plot.DEFAULT_INSETS,0.1, 0.1, 0.2, 0.0,null);', 'comment': '/*** Constructs a vertical bar plot with 3D effect.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.*/', 'coherence': 1}, {'code': 'protected Shape calculateBackgroundPlotArea(Rectangle2D plotArea) {VerticalAxis vAxis = getVerticalAxis();double effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();GeneralPath backgroundPlotArea = new GeneralPath();backgroundPlotArea.moveTo((float) plotArea.getX(), (float)plotArea.getY());backgroundPlotArea.lineTo((float)(plotArea.getX()+effect3d),(float)(plotArea.getY()-effect3d));backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()),(float)(plotArea.getY()-effect3d));backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()),(float)(plotArea.getY()+plotArea.getHeight()-effect3d));backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()-effect3d),(float)(plotArea.getY()+plotArea.getHeight()));backgroundPlotArea.lineTo((float) plotArea.getX(),(float)(plotArea.getY()+plotArea.getHeight()));backgroundPlotArea.lineTo((float) plotArea.getX(),(float) plotArea.getY());return backgroundPlotArea;', 'comment': '/*** Returns the shape of the background for the 3D-effect bar plot.*/', 'coherence': 1}, {'code': 'public VerticalBarPlot3D(CategoryAxis horizontalAxis, ValueAxis verticalAxis,Insets insets,double introGap, double trailGap,double categoryGap, double seriesGap,CategoryToolTipGenerator toolTipGenerator) {super(horizontalAxis, verticalAxis,insets,introGap, trailGap, categoryGap, seriesGap,toolTipGenerator);', 'comment': '/*** Constructs a vertical bar plot with 3D effect.* @param horizontalAxis The horizontal axis.* @param verticalAxis The vertical axis.* @param introGap The gap before the first bar in the plot.* @param trailGap The gap after the last bar in the plot.* @param categoryGap The gap between the last bar in one category and the first bar in the next*          category.* @param seriesGap The gap between bars within the same category.*/', 'coherence': 1}, {'code': 'protected void drawBars(Graphics2D g2, Shape backgroundPlotArea, Rectangle2D plotArea,DrawInfo info) {VerticalAxis vAxis = getVerticalAxis();double effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();// draw far 3d axisif ((outlineStroke!=null) && (outlinePaint!=null)) {g2.setStroke(outlineStroke);g2.setPaint(outlinePaint);g2.draw(new Line2D.Double(plotArea.getX()+effect3d, plotArea.getY()-effect3d,plotArea.getX()+effect3d, plotArea.getY()+plotArea.getHeight()-effect3d));g2.draw(new Line2D.Double(plotArea.getX(), plotArea.getY()+plotArea.getHeight(),plotArea.getX()+effect3d, plotArea.getY()+plotArea.getHeight()-effect3d));g2.draw(new Line2D.Double(plotArea.getX()+effect3d,plotArea.getY()+plotArea.getHeight()-effect3d,plotArea.getX()+plotArea.getWidth(),plotArea.getY()+plotArea.getHeight()-effect3d));}super.drawBars(g2, backgroundPlotArea, plotArea, info);', 'comment': '/*** Draws the bars...*/', 'coherence': 1}, {'code': 'public String getTitle() {return this.title;', 'comment': '/*** Returns the title text.*/', 'coherence': 1}, {'code': 'public void addChangeListener(TitleChangeListener listener) {listeners.add(listener);', 'comment': '/*** Registers an object for notification of changes to the title.* @param listener The object that is being registered.*/', 'coherence': 1}, {'code': 'protected Title(String title) {this.title = title;this.listeners = new java.util.ArrayList();', 'comment': '/*** Standard constructor - builds a Title object.*/', 'coherence': 1}, {'code': 'public void removeChangeListener(TitleChangeListener listener) {listeners.remove(listener);', 'comment': '/*** Unregisters an object for notification of changes to the chart title.* @param listener The object that is being unregistered.*/', 'coherence': 1}, {'code': 'public void setTitle(String text) {this.title = text;', 'comment': '/*** Sets the title to the specified text and notifies registered listeners that the title has* been modified.* @param text The new chart title;*/', 'coherence': 1}, {'code': 'public static Title createInstance(String title, Font font) {return new StandardTitle(title, font);', 'comment': '/*** Static factory method that returns a concrete subclass of Title.* @param title The chart title;* @param font The font for displaying the chart title;*/', 'coherence': 1}, {'code': 'public void setChart(JFreeChart chart) {this.chart = chart;', 'comment': '/*** Sets the chart that generated the change event.* @param chart The chart that generated the event.*/', 'coherence': 1}, {'code': 'public ChartChangeEvent(Object source, JFreeChart chart) {this(source, chart, GENERAL);', 'comment': '/*** Standard constructor: returns a new ChartChangeEvent object, type GENERAL.* @param source The source of the event (could be the chart, a title, an axis etc.);* @param chart The chart that generated the event;*/', 'coherence': 1}, {'code': 'public ChartChangeEvent(Object source, JFreeChart chart, int type) {super(source);this.chart = chart;this.type = type;', 'comment': '/*** Full constructor: returns a new ChartChangeEvent object with the specified type.*/', 'coherence': 1}, {'code': 'public ChartChangeEvent(Object source) {this(source, null, GENERAL);', 'comment': '/*** Standard constructor: returns a new ChartChangeEvent object, type GENERAL.* @param source The source of the event (could be the chart, a title, an axis etc.)*/', 'coherence': 1}, {'code': 'public int getType() {return this.type;', 'comment': '/*** Returns the event type.*/', 'coherence': 1}, {'code': 'public JFreeChart getChart() {return chart;', 'comment': '/*** Returns a reference to the chart that generated the change event.*/', 'coherence': 1}, {'code': 'public AxisChangeEvent(Axis axis) {super(axis);this.axis = axis;', 'comment': '/*** Default constructor: returns a new AxisChangeEvent.* @param axis The axis that generated the event.*/', 'coherence': 1}, {'code': 'public void setRange(AxisRange range) {setAutoRange(false);setMinimumDate((Date)range.getMin());setMaximumDate((Date)range.getMax());if (visible) {HorizontalDateAxis axis = (HorizontalDateAxis)getParentAxis();axis.setAutoRange(false);axis.setMinimumDate((Date)range.getMin());axis.setMaximumDate((Date)range.getMax());', 'comment': '/*** Sets our AxisRange (min/max). This is done after a CombinedPlot has* has calculated the overall range of all CombinedAxis that share the same* Axis for all Plots. This makes all plots display the complete range of* their Datasets.*/', 'coherence': 1}, {'code': 'public void setVisible(boolean flag) {visible = flag;', 'comment': "/*** Sets the visible flag on or off for this combined axis. A visible axis will* display the axis title, ticks and legend depending on the parent's* attributes. An invisible axis will not display anything. If the invisible* axis isContainer(), then it occupies space on the graphic device.*/--------------//////////////////////////////////////////////////////////////////////////////--------------", 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {if (visible) {axis.draw(g2, drawArea, plotArea);}else if (gridLinesVisible) {refreshTicks(g2, drawArea, plotArea);g2.setStroke(gridStroke);g2.setPaint(gridPaint);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float xx = (float)translateValueToJava2D(tick.getNumericalValue(), plotArea);Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(),xx, (float)plotArea.getMinY());g2.draw(gridline);', 'comment': '/*** If axis is not visible, just draws grid lines if needed, but no horizonatal* date axis labels.* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn;* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public boolean isVisible() {return visible;', 'comment': '/*** Is this axis visible? Is is drawn?*/', 'coherence': 1}, {'code': 'public CombinedHorizontalDateAxis(HorizontalDateAxis axis, boolean visible) {super(axis.getLabel(),axis.getLabelFont(),axis.getLabelPaint(),axis.getLabelInsets(),axis.isTickLabelsVisible(),axis.getTickLabelFont(),axis.getTickLabelPaint(),axis.getTickLabelInsets(),axis.getVerticalTickLabels(),axis.isTickMarksVisible(),axis.getTickMarkStroke(),axis.isAutoRange(),axis.getMinimumDate(),axis.getMaximumDate(),axis.isAutoTickUnitSelection(),axis.getTickUnit(),axis.getTickLabelFormatter(),axis.isGridLinesVisible(),axis.getGridStroke(),axis.getGridPaint(),axis.getCrosshairDate(),axis.getCrosshairStroke(),axis.getCrosshairPaint());this.axis = axis;this.visible = visible;', 'comment': '/*** Constructs a combined horizontal date axis.* @param axis Parent HorizontalDateAxis to take as reference.* @param visible Indicates if the axis is visible.*/', 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {if (!visible) {return 0;}else if (reserveHeight > 0) {return reserveHeight;}else {return axis.reserveHeight(g2, plot, drawArea);', 'comment': '/*** Returns the height required to draw the axis in the specified draw area. If* the axis is not visible, returns zero.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public Axis getParentAxis() {return axis;', 'comment': '/*** Returns our parent axis.*/', 'coherence': 1}, {'code': 'public AxisRange getRange() {DateAxisRange range;if (visible) {axis.autoAdjustRange();range = new DateAxisRange(axis.getMinimumDate(), axis.getMaximumDate());}else {autoAdjustRange();range = new DateAxisRange(getMinimumDate(), getMaximumDate());}return (range);', 'comment': '/*** Returns the AxisRange (min/max) of our Axis*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {if (visible) {return axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);}else {return new Rectangle2D.Double();', 'comment': '/*** Returns area in which the axis will be displayed. If the axis is not visible* returns a zero size rectangle.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot and axes should be drawn;* @param reservedWidth The space already reserved for the vertical axis;*/', 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {Iterator iter = axes.iterator();while (iter.hasNext()) {HorizontalAxis axis = (HorizontalAxis)iter.next();double height = axis.reserveHeight(g2, plot, drawArea);if (height != 0) {return height;}}return 0;', 'comment': '/*** Returns the height required to draw the axis in the specified draw area. The* list of our axes is checked and the first non zero height is returned.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {Rectangle2D empty = new Rectangle2D.Double();Iterator iter = axes.iterator();while (iter.hasNext()) {HorizontalAxis axis = (HorizontalAxis)iter.next();Rectangle2D area = axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);if (!area.equals(empty)) {return area;}}return empty;', 'comment': '/*** Returns area in which the axis will be displayed. The list is our axes is* checked and the first non zero area is returned.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot and axes should be drawn;* @param reservedWidth The space already reserved for the vertical axis;*/', 'coherence': 1}, {'code': 'public OverlaidHorizontalNumberAxis(CombinedPlot plot) {super((HorizontalNumberAxis)plot.getHorizontalAxis(), false);this.plot = plot;this.axes = plot.getHorizontalAxes();// validate type of axes and tell each axis that it is overlaidboolean oneVisible = false;Iterator iter = axes.iterator();while (iter.hasNext()) {Object axis = iter.next();if ((axis instanceof CombinedHorizontalNumberAxis)) {CombinedHorizontalNumberAxis combAxis = (CombinedHorizontalNumberAxis)axis;oneVisible |= combAxis.isVisible();if (iter.hasNext() || oneVisible) {combAxis.setGridLinesVisible(false);//combAxis.setOverlaid(true);}} else {throw new IllegalArgumentException("Can not combine " + axis.getClass()+ " into " + this.getClass() );', 'comment': '/*** Constructor.* @param plot CombinedPlot where this OverlaidHorizontalNumberAxis will be*    contained.*/', 'coherence': 1}, {'code': 'public AxisRange getRange() {return plot.getRange(axes);', 'comment': '/*** Returns the AxisRange (min/max) of our Axis*/', 'coherence': 1}, {'code': 'public void setVisible(boolean flag) {visible = flag;', 'comment': "/*** Sets the visible flag on or off for this combined axis. A visible axis will* display the axis title, ticks and legend depending on the parent's* attributes. An invisible axis will not display anything. If the invisible* axis isContainer(), then it occupies space on the graphic device.*/", 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {if (visible) {axis.draw(g2, drawArea, plotArea);} else if (gridLinesVisible) {refreshTicks(g2, drawArea, plotArea);g2.setStroke(gridStroke);g2.setPaint(gridPaint);double xx = plotArea.getX();Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float yy = (float)this.translateValueToJava2D(tick.getNumericalValue(), plotArea);Line2D gridline = new Line2D.Double(xx, yy, plotArea.getMaxX(), yy);g2.draw(gridline);', 'comment': '/*** Draws the plot on a Java 2D graphics device (such as the screen or a printer).* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn.* @param plotArea The area within which the plot should be drawn (a subset of the drawArea).*/', 'coherence': 1}, {'code': 'public void setReserveDimension(double dimension) {this.reserveWidth = dimension;', 'comment': '/*** The CombinedPlot will calculate the maximim of all reserveWidth or reserveHeight* depending on the type of CombinedPlot and inform all CombinedXXXXXAxis to store* this value.* @param dimension If the axis is vertical, this is width. If axis is*  horizontal, then this is height*/', 'coherence': 1}, {'code': 'public CombinedVerticalNumberAxis(VerticalNumberAxis axis, boolean visible) {super(axis.getLabel(),axis.getLabelFont(),axis.getLabelPaint(),axis.getLabelInsets(),axis.isLabelDrawnVertical(),axis.isTickLabelsVisible(),axis.getTickLabelFont(),axis.getTickLabelPaint(),axis.getTickLabelInsets(),axis.isTickMarksVisible(),axis.getTickMarkStroke(),axis.isAutoRange(),axis.autoRangeIncludesZero(),axis.getAutoRangeMinimumSize(),axis.getMinimumAxisValue(),axis.getMaximumAxisValue(),axis.isInverted(),axis.isAutoTickUnitSelection(),axis.getTickUnit(),axis.isGridLinesVisible(),axis.getGridStroke(),axis.getGridPaint(),axis.getCrosshairValue(),axis.getCrosshairStroke(),axis.getCrosshairPaint());this.axis = axis;this.visible = visible;', 'comment': '/*** Constructs a combined vertical number axis.* @param axis Parent VerticalNumberAxis to take as reference.* @param visible Is this axis visible?*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedHeight) {return new Rectangle2D.Double(drawArea.getX(),drawArea.getY(),reserveWidth(g2, plot, drawArea),drawArea.getHeight()-reservedHeight);', 'comment': '/*** Returns area in which the axis will be displayed.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area in which the plot and axes should be drawn;* @param reservedHeight The height reserved for the horizontal axis;*/', 'coherence': 1}, {'code': 'public Axis getParentAxis() {return axis;', 'comment': '/*** Returns our parent axis.*/', 'coherence': 1}, {'code': 'public CombinedVerticalNumberAxis(VerticalNumberAxis axis) {this(axis, true);', 'comment': '/*** Constructs a visible combined vertical number axis.* @param axis Parent VerticalNumberAxis to take as reference.*/', 'coherence': 1}, {'code': 'public void setRange(AxisRange range) {setAutoRange(false);Number min = (Number)range.getMin();Number max = (Number)range.getMax();setMinimumAxisValue(min.doubleValue());setMaximumAxisValue(max.doubleValue());if (visible) {VerticalNumberAxis axis = (VerticalNumberAxis)getParentAxis();axis.setAutoRange(false);axis.setMinimumAxisValue(min.doubleValue());axis.setMaximumAxisValue(max.doubleValue());', 'comment': '/*** Sets our AxisRange (min/max). This is done after a CombinedPlot has* has calculated the overall range of all CombinedAxis that share the same* Axis for all Plots. This makes all plots display the complete range of* their Datasets.*/', 'coherence': 1}, {'code': 'public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {if (!visible) {return 0;} else if (reserveWidth > 0) {return reserveWidth;} else {return axis.reserveWidth(g2, plot, drawArea);', 'comment': '/*** Returns the width required to draw the biggest axis of all the combined* vertical axis in the specified draw area. If the width was set via* setReserveWidth, then this value is returned instead of a calculation.** @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot should be drawn.*/', 'coherence': 1}, {'code': 'public double getPrimitive() {return primitive;', 'comment': '/*** Just use double value - should be fast.*/', 'coherence': 1}, {'code': 'public Number getPrimitiveAsObject() {return new Double(primitive);', 'comment': '/*** Creates a Number object every time the primitive is accessed - should be really slow.*/', 'coherence': 1}, {'code': 'public double getObjectAsPrimitive() {return object.doubleValue();', 'comment': '/*** Returns a double value generated from the Object - should be similar to previous method,* but is not!*/', 'coherence': 1}, {'code': 'public Number getObject() {return object;', 'comment': '/*** Returns the object - caller has to use doubleValue() method.*/', 'coherence': 1}, {'code': 'protected Rectangle2D adjustForInsets(Rectangle2D drawArea, Insets insets) {if (insets != null) {return new Rectangle2D.Double(drawArea.getX()+insets.left,drawArea.getY()+insets.top,drawArea.getWidth()-insets.left-insets.right,drawArea.getHeight()-insets.top-insets.bottom);} else {return drawArea;', 'comment': '/*** Utility method to adjust a Rectangle2D for Insets*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return new Double(-10.0+translate+(item*0.2));', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Rectangle2D getPlotArea() {return plotArea;', 'comment': '/*** Returns the last plotArea calculated.* // TODO: is this useful?*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {if (series==0) {return "y = cosine(x)";}else if (series==1) {return "y = 2*sine(x)";}else return "Error";', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'public CombinedPlot(Axis axis, int type) {super((type == VERTICAL ? axis : null), (type == HORIZONTAL ? axis : null));if (type != HORIZONTAL && type != VERTICAL) {throw new IllegalArgumentException("Invalid type (" + type + ")");}this.type = type;setInsets(new Insets(0, 0, 0, 0));', 'comment': '/*** Creates a HORIZONTAL or VERTICAL CombinedPlot. If type is HORIZONTAL, then* axis should contain the shared vertical axis. If type if VERTICAL, then* axis should contain the shared horizontal axis.** @param axis Shared axis to use for all sub-plots.* @param type Type of CombinedPlot (HORIZONTAL or VERTICAL).*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {if (series==0) {return new Double(Math.cos(-10.0+translate+(item/10.0)));}else return new Double(2*(Math.sin(-10.0+translate+(item/10.0))));', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'protected void adjustPlotsMinMax() {adjustPlotsMinMax((type != HORIZONTAL), (type != VERTICAL));', 'comment': '/*** Adjusts both of our axes ranges.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return 2;', 'comment': '/*** Returns the number of series in the data source.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public CombinedPlot(Axis horizontal, Axis vertical) {super(horizontal, vertical);type = OVERLAID;setInsets(new Insets(0, 0, 0, 0));', 'comment': '/*** Creates an OVERLAID CombinedPlot.** @param horizontal Shared horizontal axis to use for all sub-plots.* @param vertical Shared vertical axis to use for all sub-plots.*/', 'coherence': 1}, {'code': 'public SampleXYDataset() {this.translate = 0.0;', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public void add(CombinedChart chart, int weight)throws AxisNotCompatibleException, IllegalArgumentException {// verify valid horizontal and vertical axisPlot p = chart.getPlot();if (getHorizontalAxis() != p.getHorizontalAxis() && type != HORIZONTAL) {throw new AxisNotCompatibleException("Can\'t combine with different horizontal axis");} else if (getVerticalAxis() != p.getVerticalAxis() && type != VERTICAL) {throw new AxisNotCompatibleException("Can\'t combine with different vertical axis");} else if (!isCompatibleHorizontalAxis((Axis)p.getHorizontalAxis())) {throw new AxisNotCompatibleException("Incompatible horizontal axis");} else if (!isCompatibleVerticalAxis((Axis)p.getVerticalAxis())) {throw new AxisNotCompatibleException("Incompatible vertical axis");}// verify valid weightif (weight <= 0 && type != OVERLAID) {throw new IllegalArgumentException("weight must be positive");} else if (weight != 1 && type == OVERLAID) {throw new IllegalArgumentException("weight must 1");}// only first chart of overlaid chart will draw background and outlineif (charts.size() > 0 && type == OVERLAID) {p.setBackgroundPaint(null);p.setOutlineStroke(null);p.setOutlinePaint(null);}// store the chartot and its weightChartInfo chartInfo = new ChartInfo(chart, weight);charts.add(chartInfo);// keep track of total weightsweights += weight;', 'comment': '/*** Adds a CombinedChart to the CombinedPlot. Verifies that the shared axes are* the same.** @param chart The chart to add* @param weight Weight of this chart relative to the rest. Must be greater than one.*      For an OVERLAID CombinedPlot, weight must be one.* @exception AxisNotCompatibleException If common axis is not the same as*      previous charts, or if the other axes is not compatible.* @exception IllegalArgumentException if weight is <= 0 for HORIZONTAL or*      VERTICAL plots, or weight != 0 for OVERLAID plots.*/', 'coherence': 1}, {'code': 'public void adjustPlots() {// adjust plot axes: wrap with CombinedXXXXXAxis/OverlaidXXXXAxis objectsadjustPlotsAxis();// adjust plot axis min and max values to display all plotsadjustPlotsMinMax();// adjust all paints and strokes for each plotadjustSeriesPaintAndStroke();', 'comment': '/*** Adjusts the charts to combine changing their axis and rescaling them to* take into account combined plots. Should be called after adding all* sub-charts to the CombinedPlot.*/', 'coherence': 1}, {'code': 'public void setRange(AxisRange range, java.util.List axes) {Iterator iter = axes.iterator();while (iter.hasNext()) {CombinableAxis axis = (CombinableAxis)iter.next();axis.setRange(range);', 'comment': '/*** Sets the AxisRange (min/max) for all the axes in the List.* @param range Range to set.* @parem axes List of axes to set.*/', 'coherence': 1}, {'code': 'public Number getMaximumHorizontalDataValue() {if (charts.size() == 0) {return null;}Number max = new Double(Double.MIN_VALUE);Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();HorizontalValuePlot plot = (HorizontalValuePlot)chartInfo.plot;Number x = plot.getMaximumHorizontalDataValue();if (x.doubleValue() > max.doubleValue()) {max = x;}}return max;', 'comment': '/*** Returns the maximum value in the domain of all the charts, since this is plotted* against the horizontal axis for a combined plot.* @return The maximum value to be plotted against the horizontal axis.*/--------------// From HorizontalValuePlot and VerticalValuePlot--------------', 'coherence': 1}, {'code': 'public boolean isCompatibleVerticalAxis(Axis axis) {return (axis instanceof VerticalNumberAxis);', 'comment': '/*** Checks the compatibility of a vertical axis, returning true if the axis is compatible with* the plot, and false otherwise.  The vertical axis for this plot must be an instance of* VerticalNumberAxis.* @param axis The vertical axis.*/', 'coherence': 1}, {'code': 'public boolean isCompatibleHorizontalAxis(Axis axis) {return ((axis instanceof HorizontalNumberAxis) ||(axis instanceof HorizontalDateAxis));', 'comment': '/*** Checks the compatibility of a horizontal axis, returning true if the axis is* compatible with the plot, and false otherwise.* @param axis The horizontal axis.*/', 'coherence': 1}, {'code': 'public Number getMinimumHorizontalDataValue() {if (charts.size() == 0) {return null;}Number min = new Double(Double.MAX_VALUE);Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();HorizontalValuePlot plot = (HorizontalValuePlot)chartInfo.plot;Number x = plot.getMinimumHorizontalDataValue();if (x.doubleValue() < min.doubleValue()) {min = x;}}return min;', 'comment': '/*** Returns the minimum value in the domain of all the charts, since this is plotted* against the horizontal axis for a combined plot.* @return The minimum value to be plotted against the horizontal axis.*/', 'coherence': 1}, {'code': 'public void add(CombinedChart chart) throws AxisNotCompatibleException {add(chart, 1);', 'comment': '/*** Adds a CombinedChart to the CombinedPlot. Verifies that the shared axes are* the same and assigns a weight of 1 to this chart.** @param chart The chart to add* @exception AxisNotCompatibleException If horizontal axis is not the same as*      previous charts, or if vertical axis is not compatible.* @exception IllegalArgumentException if weight is <= 0 for HORIZONTAL or*      VERTICAL plots, or weight != 0 for OVERLAID plots.*/', 'coherence': 1}, {'code': 'protected void adjustPlotsAxis() {if (!isAdjusted) {adjustPlotsAxis(true, true);', 'comment': '/*** Adjusts the internal charts to allow automatic rendering of their conponents.* This includes setting all HorizontalAxis to a CombinedHorizontalXXXXAxis or* OverlaidHorizontalXXXXAxis, and setting all VerticalAxis to a CombinedVerticalXXXXAxis or* OverlaidVerticalXXXXAxis.*/', 'coherence': 1}, {'code': 'protected void adjustPlotsMinMax(boolean adjustHorizontal, boolean adjustVertical) {java.util.List axes;AxisRange range;if (adjustHorizontal && !axisRangeSet[HORIZONTAL]) {axes = getHorizontalAxes(true);range = getRange(axes);setRange(range, axes);setAxisRangeSet(HORIZONTAL, true);}if (adjustVertical && !axisRangeSet[VERTICAL]) {axes = getVerticalAxes(true);range = getRange(axes);setRange(range, axes);setAxisRangeSet(VERTICAL, true);', 'comment': '/*** Adjusts our axes ranges.** @param adjustHorizontal Adjust the range of our horizontal axes?* @param adjustVertical Adjust the range of our vertical axes?*/', 'coherence': 1}, {'code': 'public java.util.List getHorizontalAxes(boolean recursive) {ArrayList axes = new ArrayList();Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();axes.add(chartInfo.plot.getHorizontalAxis());if (recursive && chartInfo.plot instanceof CombinedPlot) {CombinedPlot subPlot = (CombinedPlot)chartInfo.plot;java.util.List moreAxes = subPlot.getHorizontalAxes(true);axes.addAll(moreAxes);}}return axes;', 'comment': '/*** Returns a List of all our Horizontal Axes.* @param recursive true indicates to traverse all included sub-plots recursivelly.*/', 'coherence': 1}, {'code': 'private void readjustPlotsMinMax(boolean doHorizontalAxis, boolean doVerticalAxis) {if (inReadjustPlotsMinMax) return;doHorizontalAxis &= axisRangeSet[HORIZONTAL];doVerticalAxis &= axisRangeSet[VERTICAL];// adjust plot axis min and max values to display all plots if neededif (doHorizontalAxis || doVerticalAxis) {if (doHorizontalAxis) {setAxisRangeSet(HORIZONTAL, false);}if (doVerticalAxis) {setAxisRangeSet(VERTICAL, false);}adjustPlotsMinMax(doHorizontalAxis, doVerticalAxis);}// recursively readjust any internal CombinedPlots we missed.inReadjustPlotsMinMax = true;  // prevents StackOverflowIterator iter = charts.iterator();while(iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();Plot plot = chartInfo.plot;if (plot instanceof CombinedPlot) {((CombinedPlot)plot).readjustPlotsMinMax(!doHorizontalAxis, !doVerticalAxis);}}inReadjustPlotsMinMax = false;', 'comment': "/*** Readjust the plot axes min and max as needed.  After readjusting the plot axes,* it will readjust recursively contained combined plots that were missed.** @param doHorizontalAxis Hint that we need to adjust the horizontal axis.*  In order to adjust the axis, in addition to the hint being true, the*  axisRangeSet[HORIZONTAL] flag for this plot must be true indicating that the*  plot does indeed adjust it's horizontal axis.* @param doVerticalAxis Hint that we need to adjust the vertical axis.*  In order to adjust the axis, in addition to the hint being true, the*  axisRangeSet[VERTICAL] flag for this plot must be true indicating that the*  plot does indeed adjust it's vertical axis.**/", 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info) {int n = charts.size();int verticalGap = 0;int horizontalGap = 0;// adjust plot axis if neededadjustPlots();// adjust the drawing area for plot insets. insets are added as a border// and between sub-charts. For in-between space between sub-charts, the// max of insets.top and insets.bottom is used for VERTICAL plots and the// max of insets.right and insets.left for HORIZONTAL plots.drawArea = adjustForInsets(drawArea, insets);if (insets != null && type != OVERLAID) {verticalGap = Math.max(insets.top, insets.bottom);horizontalGap = Math.max(insets.right, insets.left);}// calculate shared axis height and widthdouble hAxisAreaHeight = 0;double vAxisAreaWidth = 0;if (type != HORIZONTAL) {// all plots share the same horizontal axis, reserve the heighthAxisAreaHeight = getHorizontalAxis().reserveHeight(g2, this, drawArea);}if (type != VERTICAL) {// all plots share the same vertical axis, reserve the widthvAxisAreaWidth = getVerticalAxis().reserveWidth(g2, this, drawArea);}// make plotArea without shared axis areasRectangle2D plotArea = new Rectangle2D.Double(drawArea.getX(),drawArea.getY(),drawArea.getWidth()-vAxisAreaWidth,drawArea.getHeight()-hAxisAreaHeight);// calculate plotAreas of all sub-plots, maximum vertical/horizontal axis width/heightRectangle2D[] subPlotArea = new Rectangle2D[n];double x = plotArea.getX();double y = plotArea.getY();double usableWidth = plotArea.getWidth()-horizontalGap*(charts.size()-1);double usableHeight = plotArea.getHeight()-verticalGap*(charts.size()-1);double maxAxisWidth = Double.MIN_VALUE;double maxAxisHeight = Double.MIN_VALUE;for (int i=0; i<n; i++) {ChartInfo chartInfo = (ChartInfo)charts.get(i);Plot plot = chartInfo.plot;// calculate sub-plot heightdouble subPlotAreaHeight = usableHeight;if (type == VERTICAL) {subPlotAreaHeight *= (double)chartInfo.weight/weights;}if (i == n-1) {// last plot has the visible horizontal axissubPlotAreaHeight += hAxisAreaHeight;}// calculate sub-plot widthdouble subPlotAreaWidth = usableWidth;if (type == HORIZONTAL) {subPlotAreaWidth *= (double)chartInfo.weight/weights;}if (i == 0) {// first plot has the visible vertical axissubPlotAreaWidth += vAxisAreaWidth;}// calculate sub-plot areasubPlotArea[i] = new Rectangle2D.Double(x, y, subPlotAreaWidth, subPlotAreaHeight);// calculate sub-plot max axis width and height if neededif (type != OVERLAID) {Rectangle2D tempArea = adjustForInsets(subPlotArea[i], plot.getInsets());if (type == VERTICAL) {maxAxisWidth = Math.max(maxAxisWidth,plot.getVerticalAxis().reserveWidth(g2, plot, tempArea));} else if (type == HORIZONTAL) {maxAxisHeight = Math.max(maxAxisHeight,plot.getHorizontalAxis().reserveHeight(g2, plot, tempArea));}}// calculat next (x, y)if (type == VERTICAL) {y += subPlotAreaHeight + verticalGap;} else if (type == HORIZONTAL) {x += subPlotAreaWidth + horizontalGap;} if (type == OVERLAID && i == 0) {x += vAxisAreaWidth;}}// set the width and height of non-shared axis of all sub-plotsif (type == VERTICAL) {setVerticalAxisWidth(maxAxisWidth);} else if (type == HORIZONTAL) {setHorizontalAxisHeight(maxAxisHeight);}// draw all the chartsfor (int i=0; i<n; i++) {ChartInfo chartInfo = (ChartInfo)charts.get(i);chartInfo.chart.draw(g2, subPlotArea[i], null);', 'comment': '/*** Draws the CombinedPlot on a Java 2D graphics device (such as the screen or a printer).* Will perform all the placement calculations for each sub-plots and then tell these* to draw themselves.* <P>* @param g2 The graphics device;* @param drawArea The area within which the plot (including axis labels) should be drawn;*/', 'coherence': 1}, {'code': 'public java.util.List getVerticalAxes() {return getVerticalAxes(false);', 'comment': '/*** Returns a List of all our Vertical Axes. Does not traverse recursivelly the* sub-chart structure.*/', 'coherence': 1}, {'code': 'public AxisRange getRange(java.util.List axes) {AxisRange range = null;Iterator iter = axes.iterator();while (iter.hasNext()) {CombinableAxis axis = (CombinableAxis)iter.next();if (range == null) {range = axis.getRange();} else {range.combine(axis.getRange());}}return range;', 'comment': '/*** Returns the AxisRange (min/max) of the axes list.* @param axes List of axes to use in calculation*/', 'coherence': 1}, {'code': 'protected boolean horizontalAxisVisible(boolean firstPlot, boolean lastPlot, Plot subPlot) {if (type == HORIZONTAL) {return true;} else if (lastPlot) {return true;} else {return false;', 'comment': '/*** Returns true if a horizontal axis is visible. Sub-classes can overwrite this* method to implement additional logic. This implementation returns true for* HORIZONTAL plots or if the plot under analysis is the first of the combination.** @param firstPlot Are we the first plot of the CombinedPlot?* @param lastPlot Are we the last plot of the CombinedPlot?* @param subPlot Plot under analysis.*/', 'coherence': 1}, {'code': 'protected void setHorizontalAxisHeight(double height) {Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();Plot plot = chartInfo.plot;CombinableAxis axis = (CombinableAxis)plot.getHorizontalAxis();axis.setReserveDimension(height);if (plot instanceof CombinedPlot) {((CombinedPlot)plot).setHorizontalAxisHeight(height);', 'comment': '/*** Sets the height of the non-shared horizontal axis of all combined sub-plots* @param height Height to*/', 'coherence': 1}, {'code': 'public Number getMaximumVerticalDataValue() {if (charts.size() == 0) {return null;}Number max = new Double(Double.MIN_VALUE);Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();VerticalValuePlot plot = (VerticalValuePlot)chartInfo.plot;Number x = plot.getMaximumVerticalDataValue();if (x.doubleValue() > max.doubleValue()) {max = x;}}return max;', 'comment': '/*** Returns the maximum value displayed against the vertical axis.*/', 'coherence': 1}, {'code': 'private void adjustSeriesPaintAndStroke(Plot masterPlot, Dataset masterData) {Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();Plot plot = chartInfo.plot;Dataset data = chartInfo.chart.getDataset();if (data instanceof CombinationDataset) {CombinationDataset childData = (CombinationDataset)data;if (childData.getParent() == masterData) {int[] map = childData.getMap();Stroke[] childStroke = new Stroke[map.length];Paint[] childPaint = new Paint[map.length];for (int j=0; j<map.length; j++) {childStroke[j] = masterPlot.getSeriesStroke(map[j]);childPaint[j] = masterPlot.getSeriesPaint(map[j]);}plot.setSeriesStroke(childStroke);plot.setSeriesPaint(childPaint);}}// adjust recursivelly any internal CombinedPlotif (plot instanceof CombinedPlot) {((CombinedPlot)plot).adjustSeriesPaintAndStroke(masterPlot, masterData);', 'comment': "/*** Adjusts the Stroke and Paint objects associated with each Plot's Series* that use the CombinedDataset so that each series is always drawn using the same* rendering objects, no matter on what plot it appears.* @param masterPlot Outermost plot that defines all the Stroke and Paint object*    to use* @param masterData Dataset*/", 'coherence': 1}, {'code': 'public Number getMinimumVerticalDataValue() {if (charts.size() == 0) {return null;}Number min = new Double(Double.MAX_VALUE);Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();VerticalValuePlot plot = (VerticalValuePlot)chartInfo.plot;Number x = plot.getMinimumVerticalDataValue();if (x.doubleValue() < min.doubleValue()) {min = x;}}return min;', 'comment': '/*** Returns the minimum value displayed against the vertical axis.*/', 'coherence': 1}, {'code': 'public java.util.List getVerticalAxes(boolean recursive) {ArrayList axes = new ArrayList();Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();axes.add(chartInfo.plot.getVerticalAxis());if (recursive && chartInfo.plot instanceof CombinedPlot) {CombinedPlot subPlot = (CombinedPlot)chartInfo.plot;java.util.List moreAxes = subPlot.getVerticalAxes(true);axes.addAll(moreAxes);}}return axes;', 'comment': '/*** Returns a List of all our Vertical Axes.* @param recursive true indicates to traverse all included sub-plots recursivelly.*/', 'coherence': 1}, {'code': 'public java.util.List getHorizontalAxes() {return getHorizontalAxes(false);', 'comment': '/*** Returns a List of all our Horizontal Axes. Does not traverse recursivelly the* sub-chart structure.*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {if (series==0) {return "IBM";}else return "Error";', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'protected void adjustPlotsAxis(boolean hVisible, boolean vVisible) {Iterator iter = charts.iterator();boolean hAxisVisible, vAxisVisible;boolean first = true;while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();Plot plot = chartInfo.plot;if (plot instanceof CombinedPlot) {// adjust recursivelly any combined plots firsthAxisVisible = (hVisible && horizontalAxisVisible(first, !iter.hasNext(), plot));vAxisVisible = (vVisible && verticalAxisVisible(first, !iter.hasNext(), plot));((CombinedPlot)plot).adjustPlotsAxis(hAxisVisible, vAxisVisible);}// create combined horizontal axishAxisVisible = (hVisible && horizontalAxisVisible(first, !iter.hasNext(), plot));Axis h = createCombinedAxis(plot, (Axis)plot.getHorizontalAxis(), hAxisVisible);// create combined vertical axisvAxisVisible = (vVisible && verticalAxisVisible(first, !iter.hasNext(), plot));Axis v = createCombinedAxis(plot, (Axis)plot.getVerticalAxis(), vAxisVisible);// adjust plot with new axesplot.setHorizontalAxis(h);plot.setVerticalAxis(v);first = false;}isAdjusted = true;', 'comment': '/*** Adjusts the internal charts to allow automatic rendering of their conponents.* This includes setting all HorizontalAxis to a CombinedHorizontalXXXXAxis or* OverlaidHorizontalXXXXAxis, and setting all VerticalAxis to a CombinedVerticalXXXXAxis or* OverlaidVerticalXXXXAxis.** @param hVisible Indicates if the horizontal axis is visible for this plot* @parem vVisible Indicates if the vertical axis is visible for this plot*/', 'coherence': 1}, {'code': 'public String getPlotType() {switch (type) {case OVERLAID:   return "Overlaid Plot";case HORIZONTAL: return "Horizontal Combined Plot";case VERTICAL:   return "Vertical Combined Plot";default:     return "Unknown Combined Plot";', 'comment': '/*** Returns the plot type as a string. This implementation returns "Overlaid Plot",* "Horizontal Combined Plot", "Vertical Combined Plot" or "Unknown Combined Plot"* depending of the type of CombinedPlot.*/', 'coherence': 1}, {'code': 'private void adjustSeriesPaintAndStroke() {if (chart != null) {SeriesDataset masterData = (SeriesDataset)chart.getDataset();adjustSeriesPaintAndStroke(this, masterData);', 'comment': "/*** Adjusts the Stroke and Paint objects associated with each Plot's Series* that use the CombinedDataset so that each series is always drawn using the same* rendering objects, no matter on what plot it appears.*/", 'coherence': 1}, {'code': 'protected boolean verticalAxisVisible(boolean firstPlot, boolean lastPlot, Plot subPlot) {if (type == VERTICAL) {return true;} else if (firstPlot) {return true;} else {return false;', 'comment': '/*** Returns true is a vertical axis is visible. Sub-classes can overwrite this* method to implement additional logic. This implementation returns true for* VERTICAL plots or if the plot under analysis is the first of the combination.** @param firstPlot Are we the first plot of the CombinedPlot?* @param lastPlot Are we the last plot of the CombinedPlot?* @param subPlot Plot under analysis.*/', 'coherence': 1}, {'code': 'private void setAxisRangeSet(int type, boolean flag) {axisRangeSet[type] = flag;Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();Plot plot = chartInfo.plot;if (plot instanceof CombinedPlot) {((CombinedPlot)plot).setAxisRangeSet(type, flag);', 'comment': '/*** Recursively sets the axisRangeSet[type] flag to true for this and all its* CombinedPlot sub-plots.* @param type Indicates the flag to set (HORIZONTAL or VERTICAL).*/', 'coherence': 1}, {'code': 'protected void setVerticalAxisWidth(double width) {Iterator iter = charts.iterator();while (iter.hasNext()) {ChartInfo chartInfo = (ChartInfo)iter.next();Plot plot = chartInfo.plot;CombinableAxis axis = (CombinableAxis)plot.getVerticalAxis();axis.setReserveDimension(width);if (plot instanceof CombinedPlot) {((CombinedPlot)plot).setVerticalAxisWidth(width);', 'comment': '/*** Sets the width of the vertical axis of all combined sub-charts.* @param width Width to set*/', 'coherence': 1}, {'code': 'public void chartChanged(ChartChangeEvent event) {readjustPlotsMinMax(axisRangeSet[HORIZONTAL], axisRangeSet[VERTICAL]);', 'comment': '/*** Receives notification of a change to a (the) chart.* <P>* Reacts to dataset changes by reconfiguring the axes.* @param event Information about the chart change event.*/', 'coherence': 1}, {'code': 'public NumberAxisRange(Number min, Number max) {super(min, max);', 'comment': '/*** Creates an NumberAxisRange object.** @param min Minimum Number value* @param max Maximum Number value*/', 'coherence': 1}, {'code': 'public DateAxisRange(Date min, Date max) {super(min, max);', 'comment': '/*** Creates an DateAxisRange object.** @param min Minimum date value* @param max Maximum date value*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {if (visible) {return axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);}else {return new Rectangle2D.Double();', 'comment': '/*** Returns area in which the axis will be displayed. If the axis is not visible* returns a zero size rectangle.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot and axes should be drawn;* @param reservedWidth The space already reserved for the vertical axis;*/', 'coherence': 1}, {'code': 'public boolean isVisible() {return visible;', 'comment': '/*** Is this axis visible? Is is drawn?*/', 'coherence': 1}, {'code': 'private void initialiseData() {dates = new Date[47];highs = new Double[47];lows = new Double[47];opens = new Double[47];closes = new Double[47];dates[0]  = createDate(2001, Calendar.JANUARY,4);highs[0]  = new Double(47.0);lows[0]   = new Double(33.0);opens[0]  = new Double(35.0);closes[0] = new Double(33.0);dates[1]  = createDate(2001, Calendar.JANUARY,5);highs[1]  = new Double(47.0);lows[1]   = new Double(32.0);opens[1]  = new Double(41.0);closes[1] = new Double(37.0);dates[2]  = createDate(2001, Calendar.JANUARY,6);highs[2]  = new Double(49.0);lows[2]   = new Double(43.0);opens[2]  = new Double(46.0);closes[2] = new Double(48.0);dates[3]  = createDate(2001, Calendar.JANUARY,7);highs[3]  = new Double(51.0);lows[3]   = new Double(39.0);opens[3]  = new Double(40.0);closes[3] = new Double(47.0);dates[4]  = createDate(2001, Calendar.JANUARY,8);highs[4]  = new Double(60.0);lows[4]   = new Double(40.0);opens[4]  = new Double(46.0);closes[4] = new Double(53.0);dates[5]  = createDate(2001, Calendar.JANUARY,9);highs[5]  = new Double(62.0);lows[5]   = new Double(55.0);opens[5]  = new Double(57.0);closes[5] = new Double(61.0);dates[6]  = createDate(2001, Calendar.JANUARY,10);highs[6]  = new Double(65.0);lows[6]   = new Double(56.0);opens[6]  = new Double(62.0);closes[6] = new Double(59.0);dates[7]  = createDate(2001, Calendar.JANUARY,11);highs[7]  = new Double(55.0);lows[7]   = new Double(43.0);opens[7]  = new Double(45.0);closes[7] = new Double(47.0);dates[8]  = createDate(2001, Calendar.JANUARY,12);highs[8]  = new Double(54.0);lows[8]   = new Double(33.0);opens[8]  = new Double(40.0);closes[8] = new Double(51.0);dates[9]  = createDate(2001, Calendar.JANUARY,13);highs[9]  = new Double(47.0);lows[9]   = new Double(33.0);opens[9]  = new Double(35.0);closes[9] = new Double(33.0);dates[10]  = createDate(2001, Calendar.JANUARY,14);highs[10]  = new Double(54.0);lows[10]   = new Double(38.0);opens[10]  = new Double(43.0);closes[10] = new Double(52.0);dates[11]  = createDate(2001, Calendar.JANUARY,15);highs[11]  = new Double(48.0);lows[11]   = new Double(41.0);opens[11]  = new Double(44.0);closes[11] = new Double(41.0);dates[12]  = createDate(2001, Calendar.JANUARY,17);highs[12]  = new Double(60.0);lows[12]   = new Double(30.0);opens[12]  = new Double(34.0);closes[12] = new Double(44.0);dates[13]  = createDate(2001, Calendar.JANUARY,18);highs[13]  = new Double(58.0);lows[13]   = new Double(44.0);opens[13]  = new Double(54.0);closes[13] = new Double(56.0);dates[14]  = createDate(2001, Calendar.JANUARY,19);highs[14]  = new Double(54.0);lows[14]   = new Double(32.0);opens[14]  = new Double(42.0);closes[14] = new Double(53.0);dates[15]  = createDate(2001, Calendar.JANUARY,20);highs[15]  = new Double(53.0);lows[15]   = new Double(39.0);opens[15]  = new Double(50.0);closes[15] = new Double(49.0);dates[16]  = createDate(2001, Calendar.JANUARY,21);highs[16]  = new Double(47.0);lows[16]   = new Double(33.0);opens[16]  = new Double(41.0);closes[16] = new Double(40.0);dates[17]  = createDate(2001, Calendar.JANUARY,22);highs[17]  = new Double(55.0);lows[17]   = new Double(37.0);opens[17]  = new Double(43.0);closes[17] = new Double(45.0);dates[18]  = createDate(2001, Calendar.JANUARY,23);highs[18]  = new Double(54.0);lows[18]   = new Double(42.0);opens[18]  = new Double(50.0);closes[18] = new Double(42.0);dates[19]  = createDate(2001, Calendar.JANUARY,24);highs[19]  = new Double(48.0);lows[19]   = new Double(37.0);opens[19]  = new Double(37.0);closes[19] = new Double(47.0);dates[20]  = createDate(2001, Calendar.JANUARY,25);highs[20]  = new Double(58.0);lows[20]   = new Double(33.0);opens[20]  = new Double(39.0);closes[20] = new Double(41.0);dates[21]  = createDate(2001, Calendar.JANUARY,26);highs[21]  = new Double(47.0);lows[21]   = new Double(31.0);opens[21]  = new Double(36.0);closes[21] = new Double(41.0);dates[22]  = createDate(2001, Calendar.JANUARY,27);highs[22]  = new Double(58.0);lows[22]   = new Double(44.0);opens[22]  = new Double(49.0);closes[22] = new Double(44.0);dates[23]  = createDate(2001, Calendar.JANUARY,28);highs[23]  = new Double(46.0);lows[23]   = new Double(41.0);opens[23]  = new Double(43.0);closes[23] = new Double(44.0);dates[24]  = createDate(2001, Calendar.JANUARY,29);highs[24]  = new Double(56.0);lows[24]   = new Double(39.0);opens[24]  = new Double(39.0);closes[24] = new Double(51.0);dates[25]  = createDate(2001, Calendar.JANUARY,30);highs[25]  = new Double(56.0);lows[25]   = new Double(39.0);opens[25]  = new Double(47.0);closes[25] = new Double(49.0);dates[26]  = createDate(2001, Calendar.JANUARY,31);highs[26]  = new Double(53.0);lows[26]   = new Double(39.0);opens[26]  = new Double(52.0);closes[26] = new Double(47.0);dates[27]  = createDate(2001, Calendar.FEBRUARY,1);highs[27]  = new Double(51.0);lows[27]   = new Double(30.0);opens[27]  = new Double(45.0);closes[27] = new Double(47.0);dates[28]  = createDate(2001, Calendar.FEBRUARY,2);highs[28]  = new Double(47.0);lows[28]   = new Double(30.0);opens[28]  = new Double(34.0);closes[28] = new Double(46.0);dates[29]  = createDate(2001, Calendar.FEBRUARY,3);highs[29]  = new Double(57.0);lows[29]   = new Double(37.0);opens[29]  = new Double(44.0);closes[29] = new Double(56.0);dates[30]  = createDate(2001, Calendar.FEBRUARY,4);highs[30]  = new Double(49.0);lows[30]   = new Double(40.0);opens[30]  = new Double(47.0);closes[30] = new Double(44.0);dates[31]  = createDate(2001, Calendar.FEBRUARY,5);highs[31]  = new Double(46.0);lows[31]   = new Double(38.0);opens[31]  = new Double(43.0);closes[31] = new Double(40.0);dates[32]  = createDate(2001, Calendar.FEBRUARY,6);highs[32]  = new Double(55.0);lows[32]   = new Double(38.0);opens[32]  = new Double(39.0);closes[32] = new Double(53.0);dates[33]  = createDate(2001, Calendar.FEBRUARY,7);highs[33]  = new Double(50.0);lows[33]   = new Double(33.0);opens[33]  = new Double(37.0);closes[33] = new Double(37.0);dates[34]  = createDate(2001, Calendar.FEBRUARY,8);highs[34]  = new Double(59.0);lows[34]   = new Double(34.0);opens[34]  = new Double(57.0);closes[34] = new Double(43.0);dates[35]  = createDate(2001, Calendar.FEBRUARY,9);highs[35]  = new Double(48.0);lows[35]   = new Double(39.0);opens[35]  = new Double(46.0);closes[35] = new Double(47.0);dates[36]  = createDate(2001, Calendar.FEBRUARY,10);highs[36]  = new Double(55.0);lows[36]   = new Double(30.0);opens[36]  = new Double(37.0);closes[36] = new Double(30.0);dates[37]  = createDate(2001, Calendar.FEBRUARY,11);highs[37]  = new Double(60.0);lows[37]   = new Double(32.0);opens[37]  = new Double(56.0);closes[37] = new Double(36.0);dates[38]  = createDate(2001, Calendar.FEBRUARY,12);highs[38]  = new Double(56.0);lows[38]   = new Double(42.0);opens[38]  = new Double(53.0);closes[38] = new Double(54.0);dates[39]  = createDate(2001, Calendar.FEBRUARY,13);highs[39]  = new Double(49.0);lows[39]   = new Double(42.0);opens[39]  = new Double(45.0);closes[39] = new Double(42.0);dates[40]  = createDate(2001, Calendar.FEBRUARY,14);highs[40]  = new Double(55.0);lows[40]   = new Double(42.0);opens[40]  = new Double(47.0);closes[40] = new Double(54.0);dates[41]  = createDate(2001, Calendar.FEBRUARY,15);highs[41]  = new Double(49.0);lows[41]   = new Double(35.0);opens[41]  = new Double(38.0);closes[41] = new Double(35.0);dates[42]  = createDate(2001, Calendar.FEBRUARY,16);highs[42]  = new Double(47.0);lows[42]   = new Double(38.0);opens[42]  = new Double(43.0);closes[42] = new Double(42.0);dates[43]  = createDate(2001, Calendar.FEBRUARY,17);highs[43]  = new Double(53.0);lows[43]   = new Double(42.0);opens[43]  = new Double(47.0);closes[43] = new Double(48.0);dates[44]  = createDate(2001, Calendar.FEBRUARY,18);highs[44]  = new Double(47.0);lows[44]   = new Double(44.0);opens[44]  = new Double(46.0);closes[44] = new Double(44.0);dates[45]  = createDate(2001, Calendar.FEBRUARY,19);highs[45]  = new Double(46.0);lows[45]   = new Double(40.0);opens[45]  = new Double(43.0);closes[45] = new Double(44.0);dates[46]  = createDate(2001, Calendar.FEBRUARY,20);highs[46]  = new Double(48.0);lows[46]   = new Double(41.0);opens[46]  = new Double(46.0);closes[46] = new Double(41.0);', 'comment': '/*** Sets up the data for the sample data source.*/', 'coherence': 1}, {'code': 'public void setRange(AxisRange range) {setAutoRange(false);Number min = (Number)range.getMin();Number max = (Number)range.getMax();setMinimumAxisValue(min.doubleValue());setMaximumAxisValue(max.doubleValue());if (visible) {HorizontalNumberAxis axis = (HorizontalNumberAxis)getParentAxis();axis.setAutoRange(false);axis.setMinimumAxisValue(min.doubleValue());axis.setMaximumAxisValue(max.doubleValue());', 'comment': '/*** Sets our AxisRange (min/max). This is done after a CombinedPlot has* has calculated the overall range of all CombinedAxis that share the same* Axis for all Plots. This makes all plots display the complete range of* their Datasets.*/', 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {if (!visible) {return 0;}else if (reserveHeight > 0) {return reserveHeight;}else {return axis.reserveHeight(g2, plot, drawArea);', 'comment': '/*** Returns the height required to draw the axis in the specified draw area. If* the axis is not visible, returns zero.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public void setVisible(boolean flag) {visible = flag;', 'comment': "/*** Sets the visible flag on or off for this combined axis. A visible axis will* display the axis title, ticks and legend depending on the parent's* attributes. An invisible axis will not display anything. If the invisible* axis isContainer(), then it occupies space on the graphic device.*/--------------//////////////////////////////////////////////////////////////////////////////--------------", 'coherence': 1}, {'code': 'public AxisRange getRange() {autoAdjustRange();return (new NumberAxisRange(new Double(getMinimumAxisValue()),new Double(getMaximumAxisValue())));', 'comment': '/*** Returns the AxisRange (min/max) of our Axis*/', 'coherence': 1}, {'code': 'public Number getLowValue(int series, int item) {if (series==0) {return lows[item];}else return null;', 'comment': '/*** Returns the low-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The low-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getOpenValue(int series, int item) {if (series==0) {return opens[item];}else return null;', 'comment': '/*** Returns the open-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The open-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getHighValue(int series, int item) {if (series==0) {return highs[item];}else return null;', 'comment': '/*** Returns the high-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The high-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public CombinedHorizontalNumberAxis(HorizontalNumberAxis axis, boolean visible) {super(axis.getLabel(),axis.getLabelFont(),axis.getLabelPaint(),axis.getLabelInsets(),axis.isTickLabelsVisible(),axis.getTickLabelFont(),axis.getTickLabelPaint(),axis.getTickLabelInsets(),axis.getVerticalTickLabels(),axis.isTickMarksVisible(),axis.getTickMarkStroke(),axis.isAutoRange(),axis.autoRangeIncludesZero(),axis.getAutoRangeMinimumSize(),axis.getMinimumAxisValue(),axis.getMaximumAxisValue(),axis.isInverted(),axis.isAutoTickUnitSelection(),axis.getTickUnit(),axis.isGridLinesVisible(),axis.getGridStroke(),axis.getGridPaint(),axis.getCrosshairValue(),axis.getCrosshairStroke(),axis.getCrosshairPaint());this.axis = axis;this.visible = visible;', 'comment': '/*** Constructs a blank horizontal number axis.* @param axis Parent HorizontalNumberAxis to take as reference.* @param display Indicates if the axis is visible*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {if (series==0) {return closes[item];}else return null;', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Axis getParentAxis() {return axis;', 'comment': '/*** Returns our parent axis.*/', 'coherence': 1}, {'code': 'public int getItemCount(int series) {return 47;  // one series with 47 items in this sample', 'comment': '/*** Returns the number of items in the specified series.* @param series The index (zero-based) of the series;* @return The number of items in the specified series.*/', 'coherence': 1}, {'code': 'public SampleHighLowDataset() {this.initialiseData();', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return 1;', 'comment': '/*** Returns the number of series in the data source, ONE in this sample.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {if (visible) {axis.draw(g2, drawArea, plotArea);}else {if (gridLinesVisible) {refreshTicks(g2, drawArea, plotArea);Iterator iterator = ticks.iterator();while (iterator.hasNext()) {Tick tick = (Tick)iterator.next();float xx = (float)translateValueToJava2D(tick.getNumericalValue(), plotArea);g2.setStroke(gridStroke);g2.setPaint(gridPaint);Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(), xx,(float)plotArea.getMinY());g2.draw(gridline);', 'comment': '/*** If the axis is not visible, just draws grid lines if needed, but no* horizontal axis labels.* @param g2 The graphics device;* @param drawArea The area within which the chart should be drawn;* @param plotArea The area within which the plot should be drawn (a subset of the drawArea);*/', 'coherence': 1}, {'code': 'public Number getCloseValue(int series, int item) {if (series==0) {return closes[item];}else return null;', 'comment': '/*** Returns the close-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The close-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return new Long(dates[item].getTime());', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {Rectangle2D empty = new Rectangle2D.Double();Iterator iter = axes.iterator();while (iter.hasNext()) {VerticalAxis axis = (VerticalAxis)iter.next();Rectangle2D area = axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);if (!area.equals(empty)) {return area;}}return empty;', 'comment': '/*** Returns area in which the axis will be displayed. The list is our axes is* checked and the first non zero area is returned.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot and axes should be drawn;* @param reservedWidth The space already reserved for the vertical axis;*/', 'coherence': 1}, {'code': 'public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {Iterator iter = axes.iterator();while (iter.hasNext()) {VerticalAxis axis = (VerticalAxis)iter.next();double width = axis.reserveWidth(g2, plot, drawArea);if (width != 0) {return width;}}return 0;', 'comment': '/*** Returns the width required to draw the axis in the specified draw area. The* list of our axes is checked and the first non zero width is returned.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public OverlaidVerticalNumberAxis(CombinedPlot plot) {super((VerticalNumberAxis)plot.getVerticalAxis(), false);this.plot = plot;this.axes = plot.getVerticalAxes();// validate type of axes and tell each axis that they are overlaidboolean oneVisible = false;Iterator iter = axes.iterator();while (iter.hasNext()) {Object axis = iter.next();if ((axis instanceof CombinedVerticalNumberAxis)) {CombinedVerticalNumberAxis combAxis = (CombinedVerticalNumberAxis)axis;oneVisible |= combAxis.isVisible();if (iter.hasNext() || oneVisible) {combAxis.setGridLinesVisible(false);}} else {throw new IllegalArgumentException("Can not combine " + axis.getClass()+ " into " + this.getClass() );', 'comment': '/*** Constructor.* @param plot CombinedPlot where this OverlaidVerticalNumberAxis will be*    contained.*/', 'coherence': 1}, {'code': 'public OverlaidHorizontalDateAxis(CombinedPlot plot) {super((HorizontalDateAxis)plot.getHorizontalAxis(), false);this.plot = plot;this.axes = plot.getHorizontalAxes();// validate type of axes and tell each axis that it\'s overlaidboolean oneVisible = false;Iterator iter = axes.iterator();while (iter.hasNext()) {Object axis = iter.next();if ((axis instanceof CombinedHorizontalDateAxis)) {CombinedHorizontalDateAxis combAxis = (CombinedHorizontalDateAxis)axis;oneVisible |= combAxis.isVisible();if (iter.hasNext() || oneVisible) {combAxis.setGridLinesVisible(false);}} else {throw new IllegalArgumentException("Can not combine " + axis.getClass()+ " into " + this.getClass() );', 'comment': '/*** Constructor.* @param plot CombinedPlot where this OverlaidHorizontalDateAxis will be*    contained.*/', 'coherence': 1}, {'code': 'public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,double reservedWidth) {Rectangle2D empty = new Rectangle2D.Double();Iterator iter = axes.iterator();while (iter.hasNext()) {HorizontalAxis axis = (HorizontalAxis)iter.next();Rectangle2D area = axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);if (!area.equals(empty)) {return area;}}return empty;', 'comment': '/*** Returns area in which the axis will be displayed. The list is our axes is* checked and the first non zero area is returned.* @param g2 The graphics device;* @param plot A reference to the plot;* @param drawArea The area within which the plot and axes should be drawn;* @param reservedWidth The space already reserved for the vertical axis;*/', 'coherence': 1}, {'code': 'public AxisRange getRange() {return plot.getRange(axes);', 'comment': '/*** Returns the AxisRange (min/max) of our Axis*/', 'coherence': 1}, {'code': 'public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {Iterator iter = axes.iterator();while (iter.hasNext()) {HorizontalAxis axis = (HorizontalAxis)iter.next();double height = axis.reserveHeight(g2, plot, drawArea);if (height != 0) {return height;}}return 0;', 'comment': '/*** Returns the height required to draw the axis in the specified draw area. The* list of our axes is checked and the first non zero height is returned.* @param g2 The graphics device;* @param plot The plot that the axis belongs to;* @param drawArea The area within which the plot should be drawn;*/', 'coherence': 1}, {'code': 'public HighLowDataset createHighLowDataset() {Object[][][] data = new Object[][][] { {{ createDate(1999, Calendar.JANUARY,4), new Double(47) },{ createDate(1999, Calendar.JANUARY,4), new Double(33) },{ createDate(1999, Calendar.JANUARY,4), new Double(35) },{ createDate(1999, Calendar.JANUARY,4), new Double(33) },{ createDate(1999, Calendar.JANUARY,5), new Double(47) },{ createDate(1999, Calendar.JANUARY,5), new Double(32) },{ createDate(1999, Calendar.JANUARY,5), new Double(41) },{ createDate(1999, Calendar.JANUARY,5), new Double(37) },{ createDate(1999, Calendar.JANUARY,6), new Double(49) },{ createDate(1999, Calendar.JANUARY,6), new Double(43) },{ createDate(1999, Calendar.JANUARY,6), new Double(46) },{ createDate(1999, Calendar.JANUARY,6), new Double(48) },{ createDate(1999, Calendar.JANUARY,7), new Double(51) },{ createDate(1999, Calendar.JANUARY,7), new Double(39) },{ createDate(1999, Calendar.JANUARY,7), new Double(40) },{ createDate(1999, Calendar.JANUARY,7), new Double(47) },{ createDate(1999, Calendar.JANUARY,8), new Double(60) },{ createDate(1999, Calendar.JANUARY,8), new Double(40) },{ createDate(1999, Calendar.JANUARY,8), new Double(46) },{ createDate(1999, Calendar.JANUARY,8), new Double(53) },{ createDate(1999, Calendar.JANUARY,9), new Double(62) },{ createDate(1999, Calendar.JANUARY,9), new Double(55) },{ createDate(1999, Calendar.JANUARY,9), new Double(57) },{ createDate(1999, Calendar.JANUARY,9), new Double(61) },{ createDate(1999, Calendar.JANUARY,10), new Double(65) },{ createDate(1999, Calendar.JANUARY,10), new Double(56) },{ createDate(1999, Calendar.JANUARY,10), new Double(62) },{ createDate(1999, Calendar.JANUARY,10), new Double(59) },{ createDate(1999, Calendar.JANUARY,11), new Double(55) },{ createDate(1999, Calendar.JANUARY,11), new Double(43) },{ createDate(1999, Calendar.JANUARY,11), new Double(45) },{ createDate(1999, Calendar.JANUARY,11), new Double(47) },{ createDate(1999, Calendar.JANUARY,12), new Double(54) },{ createDate(1999, Calendar.JANUARY,12), new Double(33) },{ createDate(1999, Calendar.JANUARY,12), new Double(40) },{ createDate(1999, Calendar.JANUARY,12), new Double(51) },{ createDate(1999, Calendar.JANUARY,13), new Double(58) },{ createDate(1999, Calendar.JANUARY,13), new Double(42) },{ createDate(1999, Calendar.JANUARY,13), new Double(44) },{ createDate(1999, Calendar.JANUARY,13), new Double(57) },{ createDate(1999, Calendar.JANUARY,14), new Double(54) },{ createDate(1999, Calendar.JANUARY,14), new Double(38) },{ createDate(1999, Calendar.JANUARY,14), new Double(43) },{ createDate(1999, Calendar.JANUARY,14), new Double(52) },{ createDate(1999, Calendar.JANUARY,15), new Double(48) },{ createDate(1999, Calendar.JANUARY,15), new Double(41) },{ createDate(1999, Calendar.JANUARY,15), new Double(44) },{ createDate(1999, Calendar.JANUARY,15), new Double(41) },{ createDate(1999, Calendar.JANUARY,17), new Double(60) },{ createDate(1999, Calendar.JANUARY,17), new Double(30) },{ createDate(1999, Calendar.JANUARY,17), new Double(34) },{ createDate(1999, Calendar.JANUARY,17), new Double(44) },{ createDate(1999, Calendar.JANUARY,18), new Double(58) },{ createDate(1999, Calendar.JANUARY,18), new Double(44) },{ createDate(1999, Calendar.JANUARY,18), new Double(54) },{ createDate(1999, Calendar.JANUARY,18), new Double(56) },{ createDate(1999, Calendar.JANUARY,19), new Double(54) },{ createDate(1999, Calendar.JANUARY,19), new Double(32) },{ createDate(1999, Calendar.JANUARY,19), new Double(42) },{ createDate(1999, Calendar.JANUARY,19), new Double(53) },{ createDate(1999, Calendar.JANUARY,20), new Double(53) },{ createDate(1999, Calendar.JANUARY,20), new Double(39) },{ createDate(1999, Calendar.JANUARY,20), new Double(50) },{ createDate(1999, Calendar.JANUARY,20), new Double(49) },{ createDate(1999, Calendar.JANUARY,21), new Double(47) },{ createDate(1999, Calendar.JANUARY,21), new Double(38) },{ createDate(1999, Calendar.JANUARY,21), new Double(41) },{ createDate(1999, Calendar.JANUARY,21), new Double(40) },{ createDate(1999, Calendar.JANUARY,22), new Double(55) },{ createDate(1999, Calendar.JANUARY,22), new Double(37) },{ createDate(1999, Calendar.JANUARY,22), new Double(43) },{ createDate(1999, Calendar.JANUARY,22), new Double(45) },{ createDate(1999, Calendar.JANUARY,23), new Double(54) },{ createDate(1999, Calendar.JANUARY,23), new Double(42) },{ createDate(1999, Calendar.JANUARY,23), new Double(50) },{ createDate(1999, Calendar.JANUARY,23), new Double(42) },{ createDate(1999, Calendar.JANUARY,24), new Double(48) },{ createDate(1999, Calendar.JANUARY,24), new Double(37) },{ createDate(1999, Calendar.JANUARY,24), new Double(37) },{ createDate(1999, Calendar.JANUARY,24), new Double(47) },{ createDate(1999, Calendar.JANUARY,25), new Double(58) },{ createDate(1999, Calendar.JANUARY,25), new Double(33) },{ createDate(1999, Calendar.JANUARY,25), new Double(39) },{ createDate(1999, Calendar.JANUARY,25), new Double(41) },{ createDate(1999, Calendar.JANUARY,26), new Double(47) },{ createDate(1999, Calendar.JANUARY,26), new Double(31) },{ createDate(1999, Calendar.JANUARY,26), new Double(36) },{ createDate(1999, Calendar.JANUARY,26), new Double(41) },{ createDate(1999, Calendar.JANUARY,27), new Double(58) },{ createDate(1999, Calendar.JANUARY,27), new Double(44) },{ createDate(1999, Calendar.JANUARY,27), new Double(49) },{ createDate(1999, Calendar.JANUARY,27), new Double(44) },{ createDate(1999, Calendar.JANUARY,28), new Double(46) },{ createDate(1999, Calendar.JANUARY,28), new Double(41) },{ createDate(1999, Calendar.JANUARY,28), new Double(43) },{ createDate(1999, Calendar.JANUARY,28), new Double(44) },{ createDate(1999, Calendar.JANUARY,29), new Double(56) },{ createDate(1999, Calendar.JANUARY,29), new Double(39) },{ createDate(1999, Calendar.JANUARY,29), new Double(39) },{ createDate(1999, Calendar.JANUARY,29), new Double(51) },{ createDate(1999, Calendar.JANUARY,30), new Double(56) },{ createDate(1999, Calendar.JANUARY,30), new Double(39) },{ createDate(1999, Calendar.JANUARY,30), new Double(47) },{ createDate(1999, Calendar.JANUARY,30), new Double(49) },{ createDate(1999, Calendar.JANUARY,31), new Double(53) },{ createDate(1999, Calendar.JANUARY,31), new Double(39) },{ createDate(1999, Calendar.JANUARY,31), new Double(52) },{ createDate(1999, Calendar.JANUARY,31), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(51) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(45) },{ createDate(1999, Calendar.FEBRUARY,1), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(34) },{ createDate(1999, Calendar.FEBRUARY,2), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(57) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,3), new Double(56) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(49) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(40) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,4), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,5), new Double(40) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(55) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(39) },{ createDate(1999, Calendar.FEBRUARY,6), new Double(53) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(50) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(33) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,7), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(59) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(34) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(57) },{ createDate(1999, Calendar.FEBRUARY,8), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(48) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(39) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,9), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(55) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(37) },{ createDate(1999, Calendar.FEBRUARY,10), new Double(30) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(60) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(32) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(56) },{ createDate(1999, Calendar.FEBRUARY,11), new Double(36) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(56) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(53) },{ createDate(1999, Calendar.FEBRUARY,12), new Double(54) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(49) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(45) },{ createDate(1999, Calendar.FEBRUARY,13), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(55) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,14), new Double(54) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(49) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(35) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,15), new Double(35) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(38) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,16), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(53) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(42) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,17), new Double(48) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(47) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,18), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(40) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(43) },{ createDate(1999, Calendar.FEBRUARY,19), new Double(44) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(48) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(41) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(46) },{ createDate(1999, Calendar.FEBRUARY,20), new Double(41) } }};return null;  // broken, needs fixing...', 'comment': '/*** Creates and returns a sample high-low dataset for the demo.  Added by Andrzej Porebski.*/', 'coherence': 1}, {'code': 'protected Color getColor(int color) {switch (color % 11) {case 0: return Color.white;case 1: return Color.black;case 2: return Color.blue;case 3: return Color.green;case 4: return Color.red;case 5: return Color.yellow;case 6: return Color.gray;case 7 : return Color.orange;case 8: return Color.cyan;case 9: return Color.magenta;case 10: return Color.pink;default: return Color.white;', 'comment': '/*** Utility method to return a color.  Corresponds to the color selection in the* HTML form.*/', 'coherence': 1}, {'code': 'public CategoryDataset createCategoryDataset() {Number[][] data = new Integer[][] {{ new Integer(10), new Integer(4), new Integer(15), new Integer(14) },{ new Integer(5), new Integer(7), new Integer(14), new Integer(3) },{ new Integer(6), new Integer(17), new Integer(12), new Integer(7) },{ new Integer(7), new Integer(15), new Integer(11), new Integer(0) },{ new Integer(8), new Integer(6), new Integer(10), new Integer(9) },{ new Integer(9), new Integer(8), new Integer(8), new Integer(6) },{ new Integer(10), new Integer(9), new Integer(7), new Integer(7) },{ new Integer(11), new Integer(13), new Integer(9), new Integer(9) },{ new Integer(3), new Integer(7), new Integer(11), new Integer(10) }};return new DefaultCategoryDataset(data);', 'comment': '/*** Creates and returns a category dataset for the demo charts.*/', 'coherence': 1}, {'code': 'private Date createDateTime(int year, int month, int day, int hour, int minute) {GregorianCalendar calendar = new GregorianCalendar(year, month, day, hour, minute);return calendar.getTime();', 'comment': '/*** Returns a java.util.Date for the specified year, month, day, hour and minute.*/', 'coherence': 1}, {'code': 'public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {response.setContentType("image/jpeg");int type = 1;try {type = Integer.parseInt( request.getParameter( "type" ) );}catch (Exception e) {}int  initGradColor= 0;int  finalGradColor= 0;try {initGradColor = Integer.parseInt( request.getParameter( "initGradColor" ) );finalGradColor = Integer.parseInt( request.getParameter( "finalGradColor" ) );}catch (Exception e) {}JFreeChart chart = createChart( type, initGradColor, finalGradColor );int width = 400;int height = 300;try {width = Integer.parseInt( request.getParameter( "width" ) );height = Integer.parseInt( request.getParameter( "height" ) );}catch (Exception e) {}//BufferedImage img = draw( chart, width, height );OutputStream out = response.getOutputStream();//    BufferedImage image = chart.createBufferedImage(width, height);//    JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);//    JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(image);//    param.setQuality(1.0f, true);//    encoder.encode(image, param);ChartUtilities.writeChartAsJPEG(out, chart, width, height);out.close();', 'comment': '/*** Basic servlet method, answers requests fromt the browser.* @param request HTTPServletRequest* @param response HTTPServletResponse*/', 'coherence': 1}, {'code': 'public XYDataset createTestXYDataset() {Object[][][] data = new Object[][][] { {{ createDateTime(2000, Calendar.OCTOBER, 18, 9, 5), new Double(10921.0) },{ createDateTime(2000, Calendar.OCTOBER, 18, 10, 6), new Double(10886.7) },{ createDateTime(2000, Calendar.OCTOBER, 18, 11, 6), new Double(10846.6) },{ createDateTime(2000, Calendar.OCTOBER, 18, 12, 6), new Double(10843.7) },{ createDateTime(2000, Calendar.OCTOBER, 18, 13, 6), new Double(10841.2) },{ createDateTime(2000, Calendar.OCTOBER, 18, 14, 6), new Double(10830.7) },{ createDateTime(2000, Calendar.OCTOBER, 18, 15, 6), new Double(10795.8) },{ createDateTime(2000, Calendar.OCTOBER, 18, 16, 7), new Double(10733.8) }} };return new DefaultXYDataset(data);', 'comment': '/*** Creates and returns a XYDataset for the demo charts.*/', 'coherence': 1}, {'code': 'public void init(ServletConfig config) throws ServletException {super.init(config);// save servlet contextcontext = config.getServletContext();', 'comment': '/*** Override init() to set up data used by invocations of this servlet.*/', 'coherence': 1}, {'code': 'private Date createDate(int year, int month, int day) {GregorianCalendar calendar = new GregorianCalendar(year, month, day);return calendar.getTime();', 'comment': '/*** Returns a java.util.Date for the specified year, month and day.*/', 'coherence': 1}, {'code': 'public SampleXYDataset2() {for (int series=0; series<SERIES_COUNT; series++) {for (int item=0; item<ITEM_COUNT; item++) {double x = (Math.random()-0.5) * RANGE;xValues[series][item] = new Double(x);yValues[series][item] = new Double((Math.random() - 0.5) * x * x);', 'comment': '/*** Default constructor.*/', 'coherence': 1}, {'code': 'public Number getYValue(int series, int item) {return yValues[series][item];', 'comment': '/*** Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The y-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public Number getXValue(int series, int item) {return xValues[series][item];', 'comment': '/*** Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...* @param series The index (zero-based) of the series;* @param item The index (zero-based) of the required item;* @return The x-value for the specified series and item.*/', 'coherence': 1}, {'code': 'public String getSeriesName(int series) {return "Sample "+series;', 'comment': '/*** Returns the name of the series.* @param series The index (zero-based) of the series;* @return The name of the series.*/', 'coherence': 1}, {'code': 'public int getSeriesCount() {return SERIES_COUNT;', 'comment': '/*** Returns the number of series in the data source.* @return The number of series in the data source.*/', 'coherence': 1}, {'code': 'public ToolTip(String text, Shape area) {// check arguments...if (area==null) throw new IllegalArgumentException("ToolTip(...): null area.");this.text = text;this.area = area;', 'comment': '/*** Constructs a new tooltip.* @param text The tooltip text.* @param area The area that the tooltip is relevant to.*/', 'coherence': 1}, {'code': 'public String getText() {return this.text;', 'comment': '/*** Returns the tooltip text.* @return The tooltip text.*/', 'coherence': 1}, {'code': 'public StandardToolTipsCollection() {tooltips = new ArrayList();', 'comment': '/*** Constructs a new tooltip collection (initially empty).*/', 'coherence': 1}, {'code': 'public void addToolTip(String text, Shape area) {ToolTip tooltip = new ToolTip(text, area);tooltips.add(tooltip);', 'comment': '/*** Adds a tooltip.* @param text The tooltip text.* @param area The area that the tooltip is relevant to.*/', 'coherence': 1}, {'code': 'public void clearToolTips() {tooltips.clear();', 'comment': '/*** Clears the tooltips.*/', 'coherence': 1}, {'code': 'public PlotPropertyEditPanel getPlotPropertyEditPanel() {return plotPropertiesPanel;', 'comment': '/*** Returns a reference to the plot property sub-panel.*/', 'coherence': 1}, {'code': 'public TitlePropertyEditPanel getTitlePropertyEditPanel() {return titlePropertiesPanel;', 'comment': '/*** Returns a reference to the title property sub-panel.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("BackgroundPaint")) {attemptModifyBackgroundPaint();', 'comment': '/*** Handles user interactions with the panel.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return background.getPaint();', 'comment': '/*** Returns the current background paint.*/', 'coherence': 1}, {'code': 'public boolean getAntiAlias() {return antialias.isSelected();', 'comment': '/*** Returns the current setting of the anti-alias flag.*/', 'coherence': 1}, {'code': 'public LegendPropertyEditPanel getLegendPropertyEditPanel() {return legendPropertiesPanel;', 'comment': '/*** Returns a reference to the legend property sub-panel.*/', 'coherence': 1}, {'code': 'public ChartPropertyEditPanel(JFreeChart chart) {setLayout(new BorderLayout());JPanel other = new JPanel(new BorderLayout());other.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(6));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));antialias = new JCheckBox("Draw anti-aliased");antialias.setSelected(chart.getAntiAlias());interior.add(antialias);interior.add(new JLabel(""));interior.add(new JLabel(""));interior.add(new JLabel("Background paint:"));background = new PaintSample(chart.getChartBackgroundPaint());interior.add(background);JButton button = new JButton("Select...");button.setActionCommand("BackgroundPaint");button.addActionListener(this);interior.add(button);interior.add(new JLabel("Series Paint:"));JTextField info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);interior.add(new JLabel("Series Stroke:"));info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);interior.add(new JLabel("Series Outline Paint:"));info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);interior.add(new JLabel("Series Outline Stroke:"));info = new JTextField("No editor implemented");info.setEnabled(false);interior.add(info);button = new JButton("Edit...");button.setEnabled(false);interior.add(button);general.add(interior, BorderLayout.NORTH);other.add(general, BorderLayout.NORTH);JPanel parts = new JPanel(new BorderLayout());//Title title = chart.getTitle();Legend legend = chart.getLegend();Plot plot = chart.getPlot();JTabbedPane tabs = new JTabbedPane();//StandardTitle t = (StandardTitle)title;//titlePropertiesPanel = new TitlePropertyEditPanel(t);//titlePropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));//tabs.addTab("Title", titlePropertiesPanel);if (legend!=null) {legendPropertiesPanel = new LegendPropertyEditPanel(legend);legendPropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));tabs.addTab("Legend", legendPropertiesPanel);}plotPropertiesPanel = new PlotPropertyEditPanel(plot);plotPropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));tabs.addTab("Plot", plotPropertiesPanel);tabs.add("Other", other);parts.add(tabs, BorderLayout.NORTH);add(parts);', 'comment': '/*** Standard constructor - the property panel is made up of a number of sub-panels that are* displayed in the tabbed pane.*/', 'coherence': 1}, {'code': 'private void attemptModifyBackgroundPaint() {Color c;c = JColorChooser.showDialog(this, "Background Color", Color.blue);if (c!=null) {background.setPaint(c);', 'comment': '/*** Allows the user the opportunity to select a new background paint.  Uses JColorChooser,* so we are only allowing a subset of all Paint objects to be selected (fix later).*/', 'coherence': 1}, {'code': 'public Font getLabelFont() {return labelFont;', 'comment': '/*** Returns the current label font.*/', 'coherence': 1}, {'code': 'private void attemptLabelFontSelection() {FontChooserPanel panel = new FontChooserPanel(labelFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {labelFont = panel.getSelectedFont();labelFontField.setText(labelFont.getFontName()+" "+labelFont.getSize());', 'comment': '/*** Presents a font selection dialog to the user.*/', 'coherence': 1}, {'code': 'public Insets getLabelInsets() {return (_labelInsets == null) ? new Insets(0,0,0,0) : _labelInsets;', 'comment': '/*** Returns the current label insets value*/', 'coherence': 1}, {'code': 'public boolean isTickMarksVisible() {return showTickMarksCheckBox.isSelected();', 'comment': '/*** Returns the current value of the flag that determines whether or not tick marks are* visible.*/', 'coherence': 1}, {'code': 'public Paint getTickLabelPaint() {return tickLabelPaintSample.getPaint();', 'comment': '/*** Returns the current tick label paint.*/', 'coherence': 1}, {'code': 'public Paint getLabelPaint() {return labelPaintSample.getPaint();', 'comment': '/*** Returns the current label paint.*/', 'coherence': 1}, {'code': 'private void attemptModifyLabelPaint() {Color c;c = JColorChooser.showDialog(this, "Label Color", Color.blue);if (c!=null) {labelPaintSample.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the outline paint.*/', 'coherence': 1}, {'code': 'public void attemptTickLabelFontSelection() {FontChooserPanel panel = new FontChooserPanel(tickLabelFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {tickLabelFont = panel.getSelectedFont();tickLabelFontField.setText(tickLabelFont.getFontName()+" "+tickLabelFont.getSize());', 'comment': '/*** Presents a tick label font selection dialog to the user.*/', 'coherence': 1}, {'code': 'public static AxisPropertyEditPanel getInstance(Axis axis) {if (axis!=null) {// figure out what type of axis we have and instantiate the appropriate panelif (axis instanceof NumberAxis) {return new NumberAxisPropertyEditPanel((NumberAxis)axis);}else return new AxisPropertyEditPanel(axis);}else return null;', 'comment': '/*** A static method that returns a panel that is appropriate for the axis type.* @param axis The axis whose properties are to be displayed/edited in the panel;*/', 'coherence': 1}, {'code': 'public String getLabel() {return label.getText();', 'comment': '/*** Returns the current axis label.*/', 'coherence': 1}, {'code': 'public JTabbedPane getOtherTabs() {return otherTabs;', 'comment': '/*** Returns a reference to the tabbed pane.*/', 'coherence': 1}, {'code': 'private void editTickLabelInsets() {InsetsChooserPanel panel = new InsetsChooserPanel(_tickLabelInsets);int result =JOptionPane.showConfirmDialog(this, panel, "Edit Insets",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {_tickLabelInsets = panel.getInsets();tickLabelInsetsTextField.setInsets(_tickLabelInsets);', 'comment': "/*** Presents insets chooser panel allowing user to modify tick label's* individual insets values. Updates the current insets text field if edit* is accepted.*/", 'coherence': 1}, {'code': 'private void editLabelInsets() {InsetsChooserPanel panel = new InsetsChooserPanel(_labelInsets);int result =JOptionPane.showConfirmDialog(this, panel, "Edit Insets",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {_labelInsets = panel.getInsets();labelInsetsTextField.setInsets(_labelInsets);', 'comment': "/*** Presents insets chooser panel allowing user to modify label's* individual insets values. Updates the current insets text field if edit* is accepted.*/", 'coherence': 1}, {'code': 'public AxisPropertyEditPanel(Axis axis) {labelFont = axis.getLabelFont();labelPaintSample = new PaintSample(axis.getLabelPaint());tickLabelFont = axis.getTickLabelFont();tickLabelPaintSample = new PaintSample(axis.getTickLabelPaint());// Insets values_tickLabelInsets = axis.getTickLabelInsets();_labelInsets = axis.getLabelInsets();setLayout(new BorderLayout());JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(5));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));interior.add(new JLabel("Label:"));label = new JTextField(axis.getLabel());interior.add(label);interior.add(new JPanel());interior.add(new JLabel("Font:"));labelFontField = new FontDisplayField(labelFont);interior.add(labelFontField);JButton b = new JButton("Select...");b.setActionCommand("SelectLabelFont");b.addActionListener(this);interior.add(b);interior.add(new JLabel("Paint:"));interior.add(labelPaintSample);b = new JButton("Select...");b.setActionCommand("SelectLabelPaint");b.addActionListener(this);interior.add(b);interior.add(new JLabel("Label Insets:"));b = new JButton("Edit...");b.setActionCommand("LabelInsets");b.addActionListener(this);labelInsetsTextField = new InsetsTextField(_labelInsets);interior.add(labelInsetsTextField);interior.add(b);interior.add(new JLabel("Tick Label Insets:"));b = new JButton("Edit...");b.setActionCommand("TickLabelInsets");b.addActionListener(this);tickLabelInsetsTextField = new InsetsTextField(_tickLabelInsets);interior.add(tickLabelInsetsTextField);interior.add(b);general.add(interior);add(general, BorderLayout.NORTH);slot1 = new JPanel(new BorderLayout());JPanel other = new JPanel(new BorderLayout());other.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Other:"));otherTabs = new JTabbedPane();otherTabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));JPanel ticks = new JPanel(new LCBLayout(3));ticks.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));showTickLabelsCheckBox = new JCheckBox("Show tick labels", axis.isTickLabelsVisible());ticks.add(showTickLabelsCheckBox);ticks.add(new JPanel());ticks.add(new JPanel());ticks.add(new JLabel("Tick label font:"));tickLabelFontField = new FontDisplayField(tickLabelFont);ticks.add(tickLabelFontField);b = new JButton("Select...");b.setActionCommand("SelectTickLabelFont");b.addActionListener(this);ticks.add(b);showTickMarksCheckBox = new JCheckBox("Show tick marks", axis.isTickMarksVisible());ticks.add(showTickMarksCheckBox);ticks.add(new JPanel());ticks.add(new JPanel());otherTabs.add("Ticks", ticks);other.add(otherTabs);slot1.add(other);slot2 = new JPanel(new BorderLayout());slot2.add(slot1, BorderLayout.NORTH);add(slot2);', 'comment': '/*** Standard constructor: builds a panel for displaying/editing the properties of the specified* axis.* @param axis The axis whose properties are to be displayed/edited in the panel;*/', 'coherence': 1}, {'code': 'public Insets getTickLabelInsets() {return (_tickLabelInsets == null) ? new Insets(0,0,0,0) : _tickLabelInsets;', 'comment': '/*** Returns the current tick label insets value*/', 'coherence': 1}, {'code': 'public void setAxisProperties(Axis axis) {axis.setLabel(this.getLabel());axis.setLabelFont(this.getLabelFont());axis.setLabelPaint(this.getLabelPaint());axis.setTickMarksVisible(this.isTickMarksVisible());// axis.setTickMarkStroke(this.getTickMarkStroke());axis.setTickLabelsVisible(this.isTickLabelsVisible());axis.setTickLabelFont(this.getTickLabelFont());axis.setTickLabelPaint(this.getTickLabelPaint());axis.setTickLabelInsets(this.getTickLabelInsets());axis.setLabelInsets(this.getLabelInsets());', 'comment': '/*** Sets the properties of the specified axis to match the properties defined on this panel.*/', 'coherence': 1}, {'code': 'public boolean isTickLabelsVisible() {return showTickLabelsCheckBox.isSelected();', 'comment': '/*** Returns a flag that indicates whether or not the tick labels are visible.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("SelectLabelFont")) {attemptLabelFontSelection();}else if (command.equals("SelectLabelPaint")) {attemptModifyLabelPaint();}else if (command.equals("SelectTickLabelFont")) {attemptTickLabelFontSelection();}else if (command.equals("LabelInsets")){editLabelInsets();}else if (command.equals("TickLabelInsets")){editTickLabelInsets();', 'comment': '/*** Handles user interaction with the property panel.* @param event Information about the event that triggered the call to this method.*/', 'coherence': 1}, {'code': 'public Font getTickLabelFont() {return tickLabelFont;', 'comment': '/*** Returns the font used to draw the tick labels (if they are showing).*/', 'coherence': 1}, {'code': 'public PlotPropertyEditPanel(Plot plot) {_insets = plot.getInsets();backgroundPaintSample = new PaintSample(plot.getBackgroundPaint());outlineStrokeSample = new StrokeSample(plot.getOutlineStroke());outlinePaintSample = new PaintSample(plot.getOutlinePaint());setLayout(new BorderLayout());availableStrokeSamples = new StrokeSample[3];availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));// create a panel for the settings...JPanel panel = new JPanel(new BorderLayout());panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), plot.getPlotType()+":"));JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(4));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));interior.add(new JLabel("Insets:"));JButton button = new JButton("Edit...");button.setActionCommand("Insets");button.addActionListener(this);insetsTextField = new InsetsTextField(_insets);insetsTextField.setEnabled(false);interior.add(insetsTextField);interior.add(button);interior.add(new JLabel("Outline stroke:"));button = new JButton("Select...");button.setActionCommand("OutlineStroke");button.addActionListener(this);interior.add(outlineStrokeSample);interior.add(button);interior.add(new JLabel("Outline paint:"));button = new JButton("Select...");button.setActionCommand("OutlinePaint");button.addActionListener(this);interior.add(outlinePaintSample);interior.add(button);interior.add(new JLabel("Background paint:"));button = new JButton("Select...");button.setActionCommand("BackgroundPaint");button.addActionListener(this);interior.add(backgroundPaintSample);interior.add(button);general.add(interior, BorderLayout.NORTH);JPanel appearance = new JPanel(new BorderLayout());appearance.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));appearance.add(general, BorderLayout.NORTH);JTabbedPane tabs = new JTabbedPane();tabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));verticalAxisPropertyPanel = AxisPropertyEditPanel.getInstance(plot.getAxis(Plot.VERTICAL_AXIS));if (verticalAxisPropertyPanel!=null) {verticalAxisPropertyPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));tabs.add("Vertical Axis", verticalAxisPropertyPanel);}horizontalAxisPropertyPanel = AxisPropertyEditPanel.getInstance(plot.getAxis(Plot.HORIZONTAL_AXIS));if (horizontalAxisPropertyPanel!=null) {horizontalAxisPropertyPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));tabs.add("Horizontal Axis", horizontalAxisPropertyPanel);}tabs.add("Appearance", appearance);panel.add(tabs);add(panel);', 'comment': "/*** Standard constructor - constructs a panel for editing the properties of the specified plot.* <P>* In designing the panel, we need to be aware that subclasses of Plot will need to implement* subclasses of PlotPropertyEditPanel - so we need to leave one or two 'slots' where the* subclasses can extend the user interface.*/", 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return outlinePaintSample.getPaint();', 'comment': '/*** Returns the current outline paint.*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return outlineStrokeSample.getStroke();', 'comment': '/*** Returns the current outline stroke.*/', 'coherence': 1}, {'code': 'private void attemptOutlinePaintSelection() {Color c;c = JColorChooser.showDialog(this, "Outline Color", Color.blue);if (c!=null) {outlinePaintSample.setPaint(c);', 'comment': '/*** Allow the user to change the outline paint.  We use JColorChooser, so the user can only* choose colors (a subset of all possible paints).*/', 'coherence': 1}, {'code': 'public Insets getPlotInsets() {if (_insets == null)_insets = new Insets(0,0,0,0);return _insets;', 'comment': '/*** Returns the current plot insets.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return backgroundPaintSample.getPaint();', 'comment': '/*** Returns the current background paint.*/', 'coherence': 1}, {'code': 'public AxisPropertyEditPanel getVerticalAxisPropertyEditPanel() {return verticalAxisPropertyPanel;', 'comment': '/*** Returns a reference to the panel for editing the properties of the vertical axis.*/', 'coherence': 1}, {'code': 'private void attemptOutlineStrokeSelection() {StrokeChooserPanel panel = new StrokeChooserPanel(null, availableStrokeSamples);int result = JOptionPane.showConfirmDialog(this, panel, "Stroke Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {outlineStrokeSample.setStroke(panel.getSelectedStroke());', 'comment': '/*** Allow the user to change the outline stroke.*/', 'coherence': 1}, {'code': 'private void attemptBackgroundPaintSelection() {Color c;c = JColorChooser.showDialog(this, "Background Color", Color.blue);if (c!=null) {backgroundPaintSample.setPaint(c);', 'comment': '/*** Allow the user to change the background paint.*/', 'coherence': 1}, {'code': 'public AxisPropertyEditPanel getHorizontalAxisPropertyEditPanel() {return horizontalAxisPropertyPanel;', 'comment': '/*** Returns a reference to the panel for editing the properties of the horizontal axis.*/', 'coherence': 1}, {'code': 'private void editInsets() {InsetsChooserPanel panel = new InsetsChooserPanel(_insets);int result =JOptionPane.showConfirmDialog(this, panel, "Edit Insets",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {_insets = panel.getInsets();insetsTextField.setInsets(_insets);', 'comment': "/*** Allow the user to edit the individual insets' values.*/", 'coherence': 1}, {'code': 'public void updatePlotProperties(Plot plot) {// set the plot properties...plot.setOutlinePaint(this.getOutlinePaint());plot.setOutlineStroke(this.getOutlineStroke());plot.setBackgroundPaint(this.getBackgroundPaint());plot.setInsets(this.getPlotInsets());// then the axis properties...if (this.horizontalAxisPropertyPanel!=null) {this.horizontalAxisPropertyPanel.setAxisProperties(plot.getAxis(Plot.HORIZONTAL_AXIS));}if (this.verticalAxisPropertyPanel!=null) {this.verticalAxisPropertyPanel.setAxisProperties(plot.getAxis(Plot.VERTICAL_AXIS));', 'comment': '/*** Updates the plot properties to match the properties defined on the panel.* @param plot The plot.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("BackgroundPaint")) {attemptBackgroundPaintSelection();}else if (command.equals("OutlineStroke")) {attemptOutlineStrokeSelection();}else if (command.equals("OutlinePaint")) {attemptOutlinePaintSelection();}else if (command.equals("Insets")) {editInsets();', 'comment': '/*** Handles user actions generated within the panel.*/', 'coherence': 1}, {'code': 'private void attemptGridStrokeSelection() {StrokeChooserPanel panel = new StrokeChooserPanel(null, availableStrokeSamples);int result = JOptionPane.showConfirmDialog(this, panel, "Stroke Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {gridStrokeSample.setStroke(panel.getSelectedStroke());', 'comment': '/*** Handle a grid stroke selection.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("GridStroke")) {attemptGridStrokeSelection();}else if (command.equals("GridPaint")) {attemptGridPaintSelection();}else if (command.equals("AutoRangeOnOff")) {toggleAutoRange();}else if (command.equals("MinimumRange")) {validateMinimum();}else if (command.equals("MaximumRange")) {validateMaximum();}else super.actionPerformed(event);  // pass to the super-class for handling', 'comment': '/*** Handles actions from within the property panel.*/', 'coherence': 1}, {'code': 'public double getMaximumValue() {return maximumValue;', 'comment': '/*** Returns the current setting of the maximum value in the axis range.*/', 'coherence': 1}, {'code': 'public NumberAxisPropertyEditPanel(NumberAxis axis) {super(axis);autoRange = axis.isAutoRange();minimumValue = axis.getMinimumAxisValue();maximumValue = axis.getMaximumAxisValue();gridPaintSample = new PaintSample(axis.getGridPaint());gridStrokeSample = new StrokeSample(axis.getGridStroke());availableStrokeSamples = new StrokeSample[3];availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));JTabbedPane other = getOtherTabs();JPanel range = new JPanel(new LCBLayout(3));range.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));range.add(new JPanel());autoRangeCheckBox = new JCheckBox("Auto-adjust range:", autoRange);autoRangeCheckBox.setActionCommand("AutoRangeOnOff");autoRangeCheckBox.addActionListener(this);range.add(autoRangeCheckBox);range.add(new JPanel());range.add(new JLabel("Minimum range value:"));minimumRangeValue = new JTextField(Double.toString(minimumValue));minimumRangeValue.setEnabled(!autoRange);minimumRangeValue.setActionCommand("MinimumRange");minimumRangeValue.addActionListener(this);minimumRangeValue.addFocusListener(this);range.add(minimumRangeValue);range.add(new JPanel());range.add(new JLabel("Maximum range value:"));maximumRangeValue = new JTextField(Double.toString(maximumValue));maximumRangeValue.setEnabled(!autoRange);maximumRangeValue.setActionCommand("MaximumRange");maximumRangeValue.addActionListener(this);maximumRangeValue.addFocusListener(this);range.add(maximumRangeValue);range.add(new JPanel());other.add("Range", range);JPanel grid = new JPanel(new LCBLayout(3));grid.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));grid.add(new JPanel());showGridLinesCheckBox = new JCheckBox("Show grid lines", axis.isGridLinesVisible());grid.add(showGridLinesCheckBox);grid.add(new JPanel());grid.add(new JLabel("Grid stroke:"));JButton button = new JButton("Set stroke...");button.setActionCommand("GridStroke");button.addActionListener(this);grid.add(gridStrokeSample);grid.add(button);grid.add(new JLabel("Grid paint:"));button = new JButton("Set paint...");button.setActionCommand("GridPaint");button.addActionListener(this);grid.add(gridPaintSample);grid.add(button);other.add("Grid", grid);', 'comment': '/*** Standard constructor: builds a property panel for the specified axis.*/', 'coherence': 1}, {'code': 'public double getMinimumValue() {return minimumValue;', 'comment': '/*** Returns the current setting of the minimum value in the axis range.*/', 'coherence': 1}, {'code': 'private void attemptGridPaintSelection() {Color c;c = JColorChooser.showDialog(this, "Grid Color", Color.blue);if (c!=null) {gridPaintSample.setPaint(c);', 'comment': '/*** Handle a grid paint selection.*/', 'coherence': 1}, {'code': 'public boolean isAutoRange() {return autoRange;', 'comment': '/*** Returns the current setting of the auto-range property.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("OutlineStroke")) {attemptModifyOutlineStroke();}else if (command.equals("OutlinePaint")) {attemptModifyOutlinePaint();}else if (command.equals("BackgroundPaint")) {attemptModifyBackgroundPaint();}else if (command.equals("SeriesFont")) {attemptModifySeriesFont();}else if (command.equals("SeriesPaint")) {attemptModifySeriesPaint();', 'comment': '/*** Handles user interactions with the panel.*/', 'coherence': 1}, {'code': 'private void attemptModifySeriesPaint() {Color c;c = JColorChooser.showDialog(this, "Series Label Color", Color.blue);if (c!=null) {seriesPaint.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the series label paint.*/', 'coherence': 1}, {'code': 'public void attemptModifySeriesFont() {FontChooserPanel panel = new FontChooserPanel(seriesFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {seriesFont = panel.getSelectedFont();', 'comment': '/*** Allows the user the opportunity to change the series label font.*/', 'coherence': 1}, {'code': 'private void attemptModifyBackgroundPaint() {Color c;c = JColorChooser.showDialog(this, "Background Color", Color.blue);if (c!=null) {backgroundPaint.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the background paint.*/', 'coherence': 1}, {'code': 'public Paint getSeriesPaint() {return seriesPaint.getPaint();', 'comment': '/*** Returns the current series label paint.*/', 'coherence': 1}, {'code': 'public Paint getOutlinePaint() {return outlinePaint.getPaint();', 'comment': '/*** Returns the current outline paint.*/', 'coherence': 1}, {'code': 'public LegendPropertyEditPanel(Legend legend) {StandardLegend l = (StandardLegend)legend;outlineStroke = new StrokeSample(l.getOutlineStroke());outlinePaint = new PaintSample(l.getOutlinePaint());backgroundPaint = new PaintSample(l.getBackgroundPaint());seriesFont = l.getSeriesFont();seriesPaint = new PaintSample(l.getSeriesPaint());availableStrokeSamples = new StrokeSample[4];availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));availableStrokeSamples[3] = new StrokeSample(new BasicStroke(4.0f));setLayout(new BorderLayout());JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(5));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));JLabel titleLabel = new JLabel("Text:");interior.add(new JLabel("Outline:"));interior.add(outlineStroke);JButton button = new JButton("Select...");button.setActionCommand("OutlineStroke");button.addActionListener(this);interior.add(button);interior.add(new JLabel("Outline Paint:"));button = new JButton("Select...");button.setActionCommand("OutlinePaint");button.addActionListener(this);interior.add(outlinePaint);interior.add(button);interior.add(new JLabel("Background:"));button = new JButton("Select...");button.setActionCommand("BackgroundPaint");button.addActionListener(this);interior.add(backgroundPaint);interior.add(button);interior.add(new JLabel("Series label font:"));button = new JButton("Select...");button.setActionCommand("SeriesFont");button.addActionListener(this);interior.add(new FontDisplayField(seriesFont));interior.add(button);interior.add(new JLabel("Series label paint:")) ;button = new JButton("Select...");button.setActionCommand("SeriesPaint");button.addActionListener(this);interior.add(seriesPaint) ;interior.add(button) ;general.add(interior);add(general, BorderLayout.NORTH);', 'comment': '/*** Standard constructor: builds a panel based on the specified legend.*/', 'coherence': 1}, {'code': 'private void attemptModifyOutlinePaint() {Color c;c = JColorChooser.showDialog(this, "Outline Color", Color.blue);if (c!=null) {outlinePaint.setPaint(c);', 'comment': '/*** Allows the user the opportunity to change the outline paint.*/', 'coherence': 1}, {'code': 'public Paint getBackgroundPaint() {return backgroundPaint.getPaint();', 'comment': '/*** Returns the current background paint.*/', 'coherence': 1}, {'code': 'public Stroke getOutlineStroke() {return outlineStroke.getStroke();', 'comment': '/*** Returns the current outline stroke.*/', 'coherence': 1}, {'code': 'public Font getSeriesFont() {return seriesFont;', 'comment': '/*** Returns the current series label font.*/', 'coherence': 1}, {'code': 'public void setLegendProperties(Legend legend) {if (legend instanceof StandardLegend) {  // only supports StandardLegend at presentStandardLegend standard = (StandardLegend)legend;standard.setOutlineStroke(this.getOutlineStroke());standard.setOutlinePaint(this.getOutlinePaint());standard.setBackgroundPaint(this.getBackgroundPaint());standard.setSeriesFont(this.getSeriesFont());standard.setSeriesPaint(this.getSeriesPaint());', 'comment': '/*** Sets the properties of the specified legend to match the properties defined on this panel.*/', 'coherence': 1}, {'code': 'private void attemptModifyOutlineStroke() {StrokeChooserPanel panel = new StrokeChooserPanel(outlineStroke, availableStrokeSamples);int result = JOptionPane.showConfirmDialog(this, panel, "Pen/Stroke Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {outlineStroke.setStroke(panel.getSelectedStroke());', 'comment': '/*** Allows the user the opportunity to change the outline stroke.*/', 'coherence': 1}, {'code': 'public void setTitleProperties(Title title) {if (title instanceof StandardTitle) {  // only supports StandardTitle at presentStandardTitle standard = (StandardTitle)title;standard.setTitle(this.getTitle());standard.setTitleFont(this.getTitleFont());standard.setTitlePaint(this.getTitlePaint());', 'comment': '/*** Sets the properties of the specified title to match the properties defined on this panel.*/', 'coherence': 1}, {'code': 'public void attemptPaintSelection() {Color c = JColorChooser.showDialog(this, "Title Color", Color.blue);if (c!=null) {titlePaint.setPaint(c);', 'comment': '/*** Allow the user the opportunity to select a Paint object.  For now, we just use the* standard color chooser - all colors are Paint objects, but not all Paint objects are* colors (later we can implement a more general Paint chooser).*/', 'coherence': 1}, {'code': 'public void attemptFontSelection() {FontChooserPanel panel = new FontChooserPanel(titleFont);int result = JOptionPane.showConfirmDialog(this, panel, "Font Selection",JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);if (result==JOptionPane.OK_OPTION) {titleFont = panel.getSelectedFont();fontfield.setText(titleFont.getFontName()+" "+titleFont.getSize());', 'comment': '/*** Presents a font selection dialog to the user.*/', 'coherence': 1}, {'code': 'public TitlePropertyEditPanel(StandardTitle title) {// initialise local selectionstitleFont = title.getTitleFont();titlePaint = new PaintSample(title.getTitlePaint());setLayout(new BorderLayout());JPanel general = new JPanel(new BorderLayout());general.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "General:"));JPanel interior = new JPanel(new LCBLayout(3));interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));JLabel titleLabel = new JLabel("Text:");titleField = new JTextField(title.getTitle());interior.add(titleLabel);interior.add(titleField);interior.add(new JPanel());interior.add(new JLabel("Font:"));fontfield = new FontDisplayField(titleFont);JButton b = new JButton("Select...");b.setActionCommand("SelectFont");b.addActionListener(this);interior.add(fontfield);interior.add(b);interior.add(new JLabel("Color:"));titlePaint = new PaintSample(title.getTitlePaint());b = new JButton("Select...");b.setActionCommand("SelectPaint");b.addActionListener(this);interior.add(titlePaint);interior.add(b);general.add(interior);add(general, BorderLayout.NORTH);', 'comment': '/*** Standard constructor: builds a panel for displaying/editing the properties of the specified* title.*/', 'coherence': 1}, {'code': 'public String getTitle() {return titleField.getText();', 'comment': '/*** Returns the title entered in the panel.*/', 'coherence': 1}, {'code': 'public Font getTitleFont() {return titleFont;', 'comment': '/*** Returns the font selected in the panel.*/', 'coherence': 1}, {'code': 'public Paint getTitlePaint() {return titlePaint.getPaint();', 'comment': '/*** Returns the paint selected in the panel.*/', 'coherence': 1}, {'code': 'public void actionPerformed(ActionEvent event) {String command = event.getActionCommand();if (command.equals("SelectFont")) {attemptFontSelection();}else if (command.equals("SelectPaint")) {attemptPaintSelection();', 'comment': '/*** Handles button clicks by passing control to an appropriate handler method.*/', 'coherence': 1}]